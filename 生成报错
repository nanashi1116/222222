gameword类 全部代码如下
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Comfort.Common;
using Diz.LanguageExtensions;
using EFT.AssetsManager;
using EFT.Ballistics;
using EFT.CameraControl;
using EFT.Game.Spawning;
using EFT.GameTriggers;
using EFT.Interactive;
using EFT.InventoryLogic;
using EFT.MovingPlatforms;
using EFT.NextObservedPlayer;
using EFT.Quests;
using EFT.SynchronizableObjects;
using JetBrains.Annotations;
using Systems.Effects;
using UnityEngine;

namespace EFT
{
	// Token: 0x02000F60 RID: 3936
	[GAttribute8(-2000)]
	public abstract class GameWorld : MonoBehaviour, GInterface169, IPlayersCollection, IEnumerable<IPlayer>, IEnumerable, IDisposable, GInterface278
	{
		// Token: 0x06007B0B RID: 31499 RVA: 0x00466854 File Offset: 0x00464A54
		public static TGameWorld Create<TGameWorld>(GameObject gameObject, PoolManagerClass objectsFactory, EUpdateQueue updateQueue, MongoID? currentProfileId) where TGameWorld : GameWorld
		{
			TGameWorld tgameWorld = gameObject.AddComponent<TGameWorld>();
			tgameWorld.ObjectsFactory = objectsFactory;
			tgameWorld.eupdateQueue_0 = updateQueue;
			tgameWorld.SpeakerManager = gameObject.AddComponent<SpeakerManager>();
			tgameWorld.ExfiltrationController = new ExfiltrationControllerClass();
			tgameWorld.BufferZoneController = new BufferZoneControllerClass();
			tgameWorld.CurrentProfileId = currentProfileId;
			tgameWorld.UnityTickListener = GameWorldUnityTickListener.Create(gameObject, tgameWorld);
			tgameWorld.AudioSourceCulling = gameObject.GetOrAddComponent<AudioSourceCulling>();
			return tgameWorld;
		}

		// Token: 0x140001A2 RID: 418
		// (add) Token: 0x06007B0C RID: 31500 RVA: 0x004668E8 File Offset: 0x00464AE8
		// (remove) Token: 0x06007B0D RID: 31501 RVA: 0x0046691C File Offset: 0x00464B1C
		public static event Action OnDispose
		{
			[CompilerGenerated]
			add
			{
				Action action = GameWorld.action_0;
				Action action2;
				do
				{
					action2 = action;
					Action value2 = (Action)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action>(ref GameWorld.action_0, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action action = GameWorld.action_0;
				Action action2;
				do
				{
					action2 = action;
					Action value2 = (Action)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action>(ref GameWorld.action_0, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x170011DE RID: 4574
		// (get) Token: 0x06007B0E RID: 31502 RVA: 0x001CA645 File Offset: 0x001C8845
		// (set) Token: 0x06007B0F RID: 31503 RVA: 0x001CA64D File Offset: 0x001C884D
		[CanBeNull]
		public TransitControllerAbstractClass TransitController { get; set; }

		// Token: 0x170011DF RID: 4575
		// (get) Token: 0x06007B10 RID: 31504 RVA: 0x001CA656 File Offset: 0x001C8856
		// (set) Token: 0x06007B11 RID: 31505 RVA: 0x001CA65E File Offset: 0x001C885E
		[CanBeNull]
		public RunddansControllerAbstractClass RunddansController { get; set; }

		// Token: 0x170011E0 RID: 4576
		// (get) Token: 0x06007B12 RID: 31506 RVA: 0x001CA667 File Offset: 0x001C8867
		// (set) Token: 0x06007B13 RID: 31507 RVA: 0x001CA66F File Offset: 0x001C886F
		public ExfiltrationControllerClass ExfiltrationController { get; set; }

		// Token: 0x170011E1 RID: 4577
		// (get) Token: 0x06007B14 RID: 31508 RVA: 0x001CA678 File Offset: 0x001C8878
		// (set) Token: 0x06007B15 RID: 31509 RVA: 0x001CA680 File Offset: 0x001C8880
		public BufferZoneControllerClass BufferZoneController { get; set; }

		// Token: 0x170011E2 RID: 4578
		// (get) Token: 0x06007B16 RID: 31510 RVA: 0x001CA689 File Offset: 0x001C8889
		// (set) Token: 0x06007B17 RID: 31511 RVA: 0x001CA691 File Offset: 0x001C8891
		public HalloweenEventControllerClass HalloweenEventController { get; set; }

		// Token: 0x170011E3 RID: 4579
		// (get) Token: 0x06007B18 RID: 31512 RVA: 0x001CA69A File Offset: 0x001C889A
		// (set) Token: 0x06007B19 RID: 31513 RVA: 0x001CA6A2 File Offset: 0x001C88A2
		public GInterface29 GInterface29_0 { get; set; }

		// Token: 0x170011E4 RID: 4580
		// (get) Token: 0x06007B1A RID: 31514 RVA: 0x001CA6AB File Offset: 0x001C88AB
		// (set) Token: 0x06007B1B RID: 31515 RVA: 0x001CA6B3 File Offset: 0x001C88B3
		public BTRControllerClass BtrController { get; set; }

		// Token: 0x170011E5 RID: 4581
		// (get) Token: 0x06007B1C RID: 31516 RVA: 0x001CA6BC File Offset: 0x001C88BC
		// (set) Token: 0x06007B1D RID: 31517 RVA: 0x001CA6C4 File Offset: 0x001C88C4
		public TriggersModule TriggersModule { get; set; }

		// Token: 0x170011E6 RID: 4582
		// (get) Token: 0x06007B1E RID: 31518 RVA: 0x001CA6CD File Offset: 0x001C88CD
		// (set) Token: 0x06007B1F RID: 31519 RVA: 0x001CA6D5 File Offset: 0x001C88D5
		public GClass3592 TriggersEmitter { get; set; }

		// Token: 0x170011E7 RID: 4583
		// (get) Token: 0x06007B20 RID: 31520 RVA: 0x001CA6DE File Offset: 0x001C88DE
		// (set) Token: 0x06007B21 RID: 31521 RVA: 0x001CA6E6 File Offset: 0x001C88E6
		public GClass702 SyncModule { get; set; }

		// Token: 0x170011E8 RID: 4584
		// (get) Token: 0x06007B22 RID: 31522 RVA: 0x001CA6EF File Offset: 0x001C88EF
		// (set) Token: 0x06007B23 RID: 31523 RVA: 0x001CA6F7 File Offset: 0x001C88F7
		public ServerShellingControllerClass ServerShellingController { get; set; }

		// Token: 0x170011E9 RID: 4585
		// (get) Token: 0x06007B24 RID: 31524 RVA: 0x001CA700 File Offset: 0x001C8900
		// (set) Token: 0x06007B25 RID: 31525 RVA: 0x001CA708 File Offset: 0x001C8908
		public ClientShellingControllerClass ClientShellingController { get; set; }

		// Token: 0x170011EA RID: 4586
		// (get) Token: 0x06007B26 RID: 31526 RVA: 0x001CA711 File Offset: 0x001C8911
		// (set) Token: 0x06007B27 RID: 31527 RVA: 0x001CA719 File Offset: 0x001C8919
		public ClientBroadcastSyncControllerClass ClientBroadcastSyncController { get; set; }

		// Token: 0x170011EB RID: 4587
		// (get) Token: 0x06007B28 RID: 31528 RVA: 0x001CA722 File Offset: 0x001C8922
		// (set) Token: 0x06007B29 RID: 31529 RVA: 0x001CA72A File Offset: 0x001C892A
		public string LocationId { get; set; }

		// Token: 0x140001A3 RID: 419
		// (add) Token: 0x06007B2A RID: 31530 RVA: 0x00466950 File Offset: 0x00464B50
		// (remove) Token: 0x06007B2B RID: 31531 RVA: 0x00466988 File Offset: 0x00464B88
		public event Action AfterGameStarted
		{
			[CompilerGenerated]
			add
			{
				Action action = this.action_1;
				Action action2;
				do
				{
					action2 = action;
					Action value2 = (Action)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action>(ref this.action_1, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action action = this.action_1;
				Action action2;
				do
				{
					action2 = action;
					Action value2 = (Action)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action>(ref this.action_1, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x140001A4 RID: 420
		// (add) Token: 0x06007B2C RID: 31532 RVA: 0x004669C0 File Offset: 0x00464BC0
		// (remove) Token: 0x06007B2D RID: 31533 RVA: 0x004669F8 File Offset: 0x00464BF8
		public event Action<IPlayer> OnPersonAdd
		{
			[CompilerGenerated]
			add
			{
				Action<IPlayer> action = this.action_2;
				Action<IPlayer> action2;
				do
				{
					action2 = action;
					Action<IPlayer> value2 = (Action<IPlayer>)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action<IPlayer>>(ref this.action_2, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action<IPlayer> action = this.action_2;
				Action<IPlayer> action2;
				do
				{
					action2 = action;
					Action<IPlayer> value2 = (Action<IPlayer>)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action<IPlayer>>(ref this.action_2, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x140001A5 RID: 421
		// (add) Token: 0x06007B2E RID: 31534 RVA: 0x00466A30 File Offset: 0x00464C30
		// (remove) Token: 0x06007B2F RID: 31535 RVA: 0x00466A68 File Offset: 0x00464C68
		public event Action<float> OnBeforeWorldTick
		{
			[CompilerGenerated]
			add
			{
				Action<float> action = this.action_3;
				Action<float> action2;
				do
				{
					action2 = action;
					Action<float> value2 = (Action<float>)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action<float>>(ref this.action_3, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action<float> action = this.action_3;
				Action<float> action2;
				do
				{
					action2 = action;
					Action<float> value2 = (Action<float>)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action<float>>(ref this.action_3, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x140001A6 RID: 422
		// (add) Token: 0x06007B30 RID: 31536 RVA: 0x00466AA0 File Offset: 0x00464CA0
		// (remove) Token: 0x06007B31 RID: 31537 RVA: 0x00466AD8 File Offset: 0x00464CD8
		public event Action<float> OnLateUpdate
		{
			[CompilerGenerated]
			add
			{
				Action<float> action = this.action_4;
				Action<float> action2;
				do
				{
					action2 = action;
					Action<float> value2 = (Action<float>)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action<float>>(ref this.action_4, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action<float> action = this.action_4;
				Action<float> action2;
				do
				{
					action2 = action;
					Action<float> value2 = (Action<float>)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action<float>>(ref this.action_4, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x170011EC RID: 4588
		// (get) Token: 0x06007B32 RID: 31538 RVA: 0x00466B10 File Offset: 0x00464D10
		public float DeltaTime
		{
			get
			{
				float num = this.gclass824_0.DeltaTime;
				if (num > 1f)
				{
					num = 1f;
				}
				return num;
			}
		}

		// Token: 0x170011ED RID: 4589
		// (get) Token: 0x06007B33 RID: 31539 RVA: 0x001CA733 File Offset: 0x001C8933
		// (set) Token: 0x06007B34 RID: 31540 RVA: 0x001CA73B File Offset: 0x001C893B
		public ISharedBallisticsCalculator ClientBallisticCalculator { get; set; }

		// Token: 0x170011EE RID: 4590
		// (get) Token: 0x06007B35 RID: 31541 RVA: 0x001CA744 File Offset: 0x001C8944
		// (set) Token: 0x06007B36 RID: 31542 RVA: 0x001CA74C File Offset: 0x001C894C
		public ISharedBallisticsCalculator SharedBallisticsCalculator
		{
			get
			{
				return this.ballisticsCalculator_0;
			}
			set
			{
				this.ballisticsCalculator_0 = (value as BallisticsCalculator);
			}
		}

		// Token: 0x170011EF RID: 4591
		// (get) Token: 0x06007B37 RID: 31543 RVA: 0x001CA75A File Offset: 0x001C895A
		public IEnumerable<Player> AllPlayersEverExisted
		{
			get
			{
				return this.dictionary_0.Values;
			}
		}

		// Token: 0x06007B38 RID: 31544 RVA: 0x00466B38 File Offset: 0x00464D38
		public Player GetEverExistedPlayerByID(string profileID)
		{
			Player result;
			if (this.dictionary_0.TryGetValue(profileID, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x06007B39 RID: 31545 RVA: 0x00466B58 File Offset: 0x00464D58
		public ObservedPlayerView GetObservedPlayerByProfileID(string profileID)
		{
			ObservedPlayerView result;
			if (this.allObservedPlayersByID.TryGetValue(profileID, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x06007B3A RID: 31546 RVA: 0x00466B78 File Offset: 0x00464D78
		public bool TryGetObservedPlayer(int id, out ObservedPlayerView observedPlayer)
		{
			foreach (KeyValuePair<string, ObservedPlayerView> keyValuePair in this.allObservedPlayersByID)
			{
				string text;
				ObservedPlayerView observedPlayerView;
				keyValuePair.Deconstruct(out text, out observedPlayerView);
				ObservedPlayerView observedPlayerView2 = observedPlayerView;
				if (observedPlayerView2.Id == id)
				{
					observedPlayer = observedPlayerView2;
					return true;
				}
			}
			observedPlayer = null;
			return false;
		}

		// Token: 0x06007B3B RID: 31547 RVA: 0x00466BF0 File Offset: 0x00464DF0
		public bool TryGetAlivePlayer(int id, out Player alivePlayer)
		{
			foreach (KeyValuePair<string, Player> keyValuePair in this.allAlivePlayersByID)
			{
				string text;
				Player player;
				keyValuePair.Deconstruct(out text, out player);
				Player player2 = player;
				if (player2.Id == id)
				{
					alivePlayer = player2;
					return true;
				}
			}
			alivePlayer = null;
			return false;
		}

		// Token: 0x06007B3C RID: 31548 RVA: 0x00466C68 File Offset: 0x00464E68
		public void FillLampControllers()
		{
			this.dictionary_1.Clear();
			foreach (LampController lampController in LocationScene.GetAllObjects<LampController>(false))
			{
				this.dictionary_1[lampController.Id] = lampController;
			}
			foreach (ControlledLampGroup controlledLampGroup in LocationScene.GetAllObjects<ControlledLampGroup>(false))
			{
				this.dictionary_2[controlledLampGroup.ID] = controlledLampGroup;
			}
		}

		// Token: 0x06007B3D RID: 31549 RVA: 0x00466D14 File Offset: 0x00464F14
		public bool TryGetAlivePlayerByID(int id, out IPlayer player)
		{
			foreach (KeyValuePair<string, IPlayerOwner> keyValuePair in this.AllAlivePlayerBridges)
			{
				string text;
				IPlayerOwner playerOwner;
				keyValuePair.Deconstruct(out text, out playerOwner);
				IPlayerOwner playerOwner2 = playerOwner;
				if (playerOwner2.iPlayer.Id == id)
				{
					player = playerOwner2.iPlayer;
					return true;
				}
			}
			player = null;
			return false;
		}

		// Token: 0x06007B3E RID: 31550 RVA: 0x001CA767 File Offset: 0x001C8967
		public virtual SyncObjectProcessorClass SyncObjectProcessorFactory()
		{
			return new SyncObjectProcessorClass();
		}

		// Token: 0x06007B3F RID: 31551 RVA: 0x00466D94 File Offset: 0x00464F94
		public IPlayerOwner GetEverExistedBridgeByProfileID(string profileID)
		{
			if (profileID == null)
			{
				return null;
			}
			IPlayerOwner result;
			if (this.AllPlayerBridgesEverExisted.TryGetValue(profileID, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x06007B40 RID: 31552 RVA: 0x00466DBC File Offset: 0x00464FBC
		public IPlayerOwner GetAlivePlayerBridgeByProfileID(string profileID)
		{
			if (profileID == null)
			{
				return null;
			}
			IPlayerOwner result;
			if (this.AllAlivePlayerBridges.TryGetValue(profileID, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x06007B41 RID: 31553 RVA: 0x00466DE4 File Offset: 0x00464FE4
		public IPlayerOwner GetAlivePlayerBridgeByCollider(Collider col)
		{
			IPlayerOwner result;
			if (this.AllAlivePlayerBridgesByCollider.TryGetValue(col, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x06007B42 RID: 31554 RVA: 0x00466E04 File Offset: 0x00465004
		public Player GetAlivePlayerByProfileID(string profileID)
		{
			Player result;
			if (this.allAlivePlayersByID.TryGetValue(profileID, out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x170011F0 RID: 4592
		// (get) Token: 0x06007B43 RID: 31555 RVA: 0x00466E24 File Offset: 0x00465024
		// (set) Token: 0x06007B44 RID: 31556 RVA: 0x001CA76E File Offset: 0x001C896E
		public MovingPlatform[] Platforms
		{
			get
			{
				MovingPlatform[] result;
				if ((result = this.movingPlatform_0) == null)
				{
					result = (this.movingPlatform_0 = LocationScene.GetAllObjectsAndWhenISayAllIActuallyMeanIt<MovingPlatform>().ToArray<MovingPlatform>());
				}
				return result;
			}
			set
			{
				this.movingPlatform_0 = value;
			}
		}

		// Token: 0x06007B45 RID: 31557 RVA: 0x001CA777 File Offset: 0x001C8977
		public IEnumerator<IPlayer> GetEnumerator()
		{
			return this.RegisteredPlayers.Where(new Func<IPlayer, bool>(GameWorld.Class1111.class1111_0.method_0)).GetEnumerator();
		}

		// Token: 0x06007B46 RID: 31558 RVA: 0x001CA7A8 File Offset: 0x001C89A8
		public IEnumerator GetEnumerator_1()
		{
			return this.GetEnumerator();
		}

		// Token: 0x170011F1 RID: 4593
		// (get) Token: 0x06007B47 RID: 31559 RVA: 0x001CA7B0 File Offset: 0x001C89B0
		public Dictionary<Collider, IPlayer> PlayersColliders { get; } = new Dictionary<Collider, IPlayer>(40);

		// Token: 0x170011F2 RID: 4594
		// (get) Token: 0x06007B48 RID: 31560 RVA: 0x001CA7B8 File Offset: 0x001C89B8
		public static int InteractiveLootMaskWPlayer
		{
			get
			{
				return GameWorld.int_0;
			}
		}

		// Token: 0x170011F3 RID: 4595
		// (get) Token: 0x06007B49 RID: 31561 RVA: 0x001CA7BF File Offset: 0x001C89BF
		public static int LootMaskObstruction
		{
			get
			{
				return GameWorld.int_2;
			}
		}

		// Token: 0x170011F4 RID: 4596
		// (get) Token: 0x06007B4A RID: 31562 RVA: 0x001CA7C6 File Offset: 0x001C89C6
		// (set) Token: 0x06007B4B RID: 31563 RVA: 0x001CA7CE File Offset: 0x001C89CE
		public SyncObjectProcessorClass SynchronizableObjectLogicProcessor { get; set; }

		// Token: 0x170011F5 RID: 4597
		// (get) Token: 0x06007B4C RID: 31564 RVA: 0x001CA7D7 File Offset: 0x001C89D7
		public EUpdateQueue UpdateQueue
		{
			get
			{
				return this.eupdateQueue_0;
			}
		}

		// Token: 0x140001A7 RID: 423
		// (add) Token: 0x06007B4D RID: 31565 RVA: 0x00466E50 File Offset: 0x00465050
		// (remove) Token: 0x06007B4E RID: 31566 RVA: 0x00466E88 File Offset: 0x00465088
		public event Action<IKillableLootItem> OnLootItemDestroyed
		{
			[CompilerGenerated]
			add
			{
				Action<IKillableLootItem> action = this.action_5;
				Action<IKillableLootItem> action2;
				do
				{
					action2 = action;
					Action<IKillableLootItem> value2 = (Action<IKillableLootItem>)Delegate.Combine(action2, value);
					action = Interlocked.CompareExchange<Action<IKillableLootItem>>(ref this.action_5, value2, action2);
				}
				while (action != action2);
			}
			[CompilerGenerated]
			remove
			{
				Action<IKillableLootItem> action = this.action_5;
				Action<IKillableLootItem> action2;
				do
				{
					action2 = action;
					Action<IKillableLootItem> value2 = (Action<IKillableLootItem>)Delegate.Remove(action2, value);
					action = Interlocked.CompareExchange<Action<IKillableLootItem>>(ref this.action_5, value2, action2);
				}
				while (action != action2);
			}
		}

		// Token: 0x170011F6 RID: 4598
		// (get) Token: 0x06007B4F RID: 31567 RVA: 0x001CA7DF File Offset: 0x001C89DF
		public GrenadeFactoryClass GrenadeFactory
		{
			get
			{
				return this.grenadeFactoryClass;
			}
		}

		// Token: 0x170011F7 RID: 4599
		// (get) Token: 0x06007B50 RID: 31568 RVA: 0x001CA7E7 File Offset: 0x001C89E7
		public BaseRestrictableZone[] RestrictableZones
		{
			get
			{
				return this.baseRestrictableZone_0;
			}
		}

		// Token: 0x06007B51 RID: 31569 RVA: 0x00466EC0 File Offset: 0x004650C0
		[CanBeNull]
		public MovingPlatform GetPlatformAtPosition(Vector3 position)
		{
			foreach (MovingPlatform movingPlatform in this.Platforms)
			{
				if (movingPlatform.Area != null && movingPlatform.Area.ContainsPointConsiderCenter(position))
				{
					return movingPlatform;
				}
			}
			return null;
		}

		// Token: 0x06007B52 RID: 31570 RVA: 0x00466F08 File Offset: 0x00465108
		public void BoardIfOnPlatform(MovingPlatform.GInterface459 transportee, Vector3 position)
		{
			MovingPlatform platformAtPosition = this.GetPlatformAtPosition(position);
			if (platformAtPosition)
			{
				transportee.Board(platformAtPosition);
			}
		}

		// Token: 0x06007B53 RID: 31571 RVA: 0x00466F2C File Offset: 0x0046512C
		public AmmoPoolObject SpawnShellInTheWorld(ref AmmoPoolObject shell)
		{
			AmmoPoolObject ammoPoolObject = shell;
			shell = null;
			this.list_0.Add(ammoPoolObject);
			return ammoPoolObject;
		}

		// Token: 0x170011F8 RID: 4600
		// (get) Token: 0x06007B54 RID: 31572 RVA: 0x00466F4C File Offset: 0x0046514C
		public World World_0
		{
			get
			{
				World result;
				if ((result = this.world_1) == null)
				{
					result = (this.world_1 = base.GetComponent<World>());
				}
				return result;
			}
		}

		// Token: 0x06007B55 RID: 31573 RVA: 0x001CA7EF File Offset: 0x001C89EF
		public ISharedBallisticsCalculator CreateBallisticCalculator(int seed)
		{
			return this.SharedBallisticsCalculator;
		}

		// Token: 0x06007B56 RID: 31574 RVA: 0x001CA7F7 File Offset: 0x001C89F7
		public void RemoveBallisticCalculator(Item weapon)
		{
		}

		// Token: 0x06007B57 RID: 31575 RVA: 0x001CA7F9 File Offset: 0x001C89F9
		public ISharedBallisticsCalculator CreateClientBallisticsCalculator()
		{
			if (this.ClientBallisticCalculator == null)
			{
				this.ClientBallisticCalculator = BallisticsCalculator.Create(base.gameObject, 0, new GDelegate64(this.ShotDelegate), true);
			}
			return this.ClientBallisticCalculator;
		}

		// Token: 0x06007B58 RID: 31576 RVA: 0x001CA829 File Offset: 0x001C8A29
		public void RemoveClientBallisticsCalculator()
		{
		}

		// Token: 0x06007B59 RID: 31577 RVA: 0x00466F74 File Offset: 0x00465174
		public void RegisterGrenade(Throwable grenade)
		{
			this.method_0(grenade);
			try
			{
				this.Grenades.Add(grenade.Id, grenade);
				grenade.DestroyEvent += this.method_1;
			}
			catch (Exception)
			{
				Debug.LogError(string.Format("There is a problem to add the grenade: grenade.Id:{0}", grenade.Id));
				Throwable throwable;
				if (this.Grenades.TryGetByKey(grenade.Id, out throwable))
				{
					Debug.LogError(string.Format("Registered: throwable.Id:{0} ", throwable.Id));
				}
			}
		}

		// Token: 0x06007B5A RID: 31578 RVA: 0x001CA82B File Offset: 0x001C8A2B
		public void method_0(Throwable grenade)
		{
			grenade.DestroyEvent -= this.method_1;
			this.method_2(grenade);
			this.Grenades.Remove(grenade.Id);
		}

		// Token: 0x06007B5B RID: 31579 RVA: 0x0046700C File Offset: 0x0046520C
		public void UnregisterGrenade(string id)
		{
			int stableHashCode = id.GetStableHashCode();
			if (!this.Grenades.ContainsKey(stableHashCode))
			{
				return;
			}
			this.Grenades.Remove(stableHashCode);
		}

		// Token: 0x06007B5C RID: 31580 RVA: 0x001CA858 File Offset: 0x001C8A58
		public void method_1(Throwable grenade)
		{
			this.method_0(grenade);
		}

		// Token: 0x06007B5D RID: 31581 RVA: 0x0046703C File Offset: 0x0046523C
		public void method_2(Throwable grenade)
		{
			if (grenade.HasNetData)
			{
				GrenadeDataPacketStruct netPacket = grenade.GetNetPacket();
				this.GrenadesCriticalStates.Add(netPacket);
			}
		}

		// Token: 0x06007B5E RID: 31582 RVA: 0x00467064 File Offset: 0x00465264
		public virtual void Awake()
		{
			Grenade.GrenadeRandoms = new GClass3725(128, 1337);
			this.grenadeFactoryClass = this.CreateGrenadeFactory();
			foreach (WorldInteractiveObject worldInteractiveObject in LocationScene.GetAllObjects<WorldInteractiveObject>(false))
			{
				worldInteractiveObject.OnDoorStateChanged += this.method_13;
			}
		}

		// Token: 0x06007B5F RID: 31583 RVA: 0x001CA861 File Offset: 0x001C8A61
		public virtual GrenadeFactoryClass CreateGrenadeFactory()
		{
			return new GrenadeFactoryClass();
		}

		// Token: 0x06007B60 RID: 31584 RVA: 0x001CA868 File Offset: 0x001C8A68
		public virtual void vmethod_0(World world)
		{
			this.world_0 = world;
			this.ExfiltrationController.StatusChanged += this.world_0.OnExfiltrationPointUpdate;
		}

		// Token: 0x06007B61 RID: 31585 RVA: 0x004670DC File Offset: 0x004652DC
		public void RegisterInteractiveObject(Turnable t)
		{
			if (!this.Turnables.ContainsKey(t.NetId))
			{
				this.Turnables.Add(t.NetId, t);
				return;
			}
			Debug.LogError(string.Format("Already registered object - Turnable.NetId:{0} {1}", t.NetId, t.gameObject.name));
		}

		// Token: 0x06007B62 RID: 31586 RVA: 0x001CA88E File Offset: 0x001C8A8E
		public virtual void ChangeLampState(Turnable turnable, Turnable.EState state)
		{
			turnable.Switch(state);
		}

		// Token: 0x06007B63 RID: 31587 RVA: 0x00467134 File Offset: 0x00465334
		public void RegisterWindow(WindowBreaker window)
		{
			WindowBreaker windowBreaker;
			if (!this.Windows.TryGetByKey(window.NetId, out windowBreaker))
			{
				this.Windows.Add(window.NetId, window);
				return;
			}
			Debug.LogError(string.Concat(new string[]
			{
				"Already registered WindowBreaker's Id:",
				window.Id,
				" Scene:",
				windowBreaker.gameObject.scene.name,
				" Path:",
				windowBreaker.transform.GetFullPath(false)
			}), window);
		}

		// Token: 0x06007B64 RID: 31588 RVA: 0x001CA897 File Offset: 0x001C8A97
		public virtual bool IsLocalGame()
		{
			return false;
		}

		// Token: 0x06007B65 RID: 31589 RVA: 0x001CA89A File Offset: 0x001C8A9A
		public virtual void InitAirdrop(string lootTemplateId = null, bool takeNearbyPoint = false, Vector3 position = default(Vector3))
		{
		}

		// Token: 0x06007B66 RID: 31590 RVA: 0x001CA89C File Offset: 0x001C8A9C
		public void RegisterWorldInteractionObject(WorldInteractiveObject worldInteractiveObject)
		{
			this.World_0.RegisterWorldInteractionObject(worldInteractiveObject);
		}

		// Token: 0x06007B67 RID: 31591 RVA: 0x004671C0 File Offset: 0x004653C0
		public virtual Task InitLevel(ItemFactoryClass itemFactory, ObjectsFactoryDataClass config, bool loadBundlesAndCreatePools = true, List<ResourceKey> resources = null, IProgress<LoadingProgressStruct> progress = null, CancellationToken ct = default(CancellationToken))
		{
			GameWorld.Struct275 @struct;
			@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
			@struct.gameWorld_0 = this;
			@struct.config = config;
			@struct.loadBundlesAndCreatePools = loadBundlesAndCreatePools;
			@struct.resources = resources;
			@struct.progress = progress;
			@struct.ct = ct;
			@struct.int_0 = -1;
			@struct.asyncTaskMethodBuilder_0.Start<GameWorld.Struct275>(ref @struct);
			return @struct.asyncTaskMethodBuilder_0.Task;
		}

		// Token: 0x06007B68 RID: 31592 RVA: 0x00467230 File Offset: 0x00465430
		public Task method_3()
		{
			GameWorld.Struct276 @struct;
			@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
			@struct.gameWorld_0 = this;
			@struct.int_0 = -1;
			@struct.asyncTaskMethodBuilder_0.Start<GameWorld.Struct276>(ref @struct);
			return @struct.asyncTaskMethodBuilder_0.Task;
		}

		// Token: 0x06007B69 RID: 31593 RVA: 0x00467274 File Offset: 0x00465474
		public void RegisterLoot<T>(T loot) where T : InteractableObject
		{
			this.LootList.Add(loot);
			LootItem lootItem = loot as LootItem;
			if (lootItem != null)
			{
				this.ItemOwners.Add(lootItem.ItemOwner, new GameWorld.GStruct162
				{
					Transform = loot.TrackableTransform,
					DoNotPerformPickUpValidation = !lootItem.PerformPickUpValidation,
					ItemOwner = lootItem.ItemOwner
				});
				int netId = lootItem.GetNetId();
				try
				{
					this.LootItems.Add(netId, lootItem);
				}
				catch (Exception)
				{
					Debug.LogError(string.Format("there is a problem to add the loot item: lootItem.ItemId:{0} lootItem.Item.Id:{1} netId:{2} owner:{3} lootItem:{4}", new object[]
					{
						lootItem.ItemId,
						lootItem.Item.Id,
						netId,
						lootItem.ItemOwner,
						lootItem
					}));
					LootItem lootItem2;
					if (this.LootItems.TryGetByKey(netId, out lootItem2))
					{
						Debug.LogError(string.Format("registered: exists.ItemId:{0} exists.Item.Id{1} netId:{2} owner:{3} exists:{4}", new object[]
						{
							lootItem2.ItemId,
							lootItem2.Item.Id,
							lootItem2.GetNetId(),
							lootItem2.ItemOwner,
							lootItem2
						}));
					}
				}
			}
			LootableContainer lootableContainer = loot as LootableContainer;
			if (lootableContainer != null)
			{
				this.ItemOwners.Add(lootableContainer.ItemOwner, new GameWorld.GStruct162
				{
					Transform = lootableContainer.TrackableTransform
				});
			}
		}

		// Token: 0x06007B6A RID: 31594 RVA: 0x004673F0 File Offset: 0x004655F0
		public void DestroyAllLoot()
		{
			foreach (LootItem loot in this.LootList.OfType<LootItem>().ToArray<LootItem>())
			{
				this.DestroyLoot(loot);
			}
		}

		// Token: 0x06007B6B RID: 31595 RVA: 0x00467428 File Offset: 0x00465628
		public void DestroyLoot(string id)
		{
			GameWorld.Class1112 @class = new GameWorld.Class1112();
			@class.id = id;
			LootItem lootItem = this.LootList.OfType<LootItem>().FirstOrDefault(new Func<LootItem, bool>(@class.method_0));
			if (lootItem != null)
			{
				this.DestroyLoot(lootItem);
				return;
			}
			Debug.LogError("Loot item with id (" + @class.id + ") has not been found in a loot list.");
		}

		// Token: 0x06007B6C RID: 31596 RVA: 0x0046748C File Offset: 0x0046568C
		public void DestroyLoot(IKillableLootItem loot)
		{
			if (this.action_5 != null)
			{
				this.action_5(loot);
			}
			this.LootList.Remove(loot);
			LootItem lootItem = loot as LootItem;
			if (lootItem != null)
			{
				this.ItemOwners.Remove(lootItem.ItemOwner);
				this.LootItems.Remove(lootItem.GetNetId());
				BotEventHandler.GDelegate16 onTakeItem = this.OnTakeItem;
				if (onTakeItem != null)
				{
					onTakeItem(lootItem);
				}
			}
			if (loot is LootableContainer && ((LootableContainer)loot).ItemOwner != null)
			{
				this.ItemOwners.Remove(((LootableContainer)loot).ItemOwner);
			}
			foreach (IPlayer player in this.RegisteredPlayers)
			{
				Player alivePlayerByProfileID = this.GetAlivePlayerByProfileID(player.ProfileId);
				if (!(alivePlayerByProfileID == null))
				{
					alivePlayerByProfileID.ResetInteractionRaycast(loot);
				}
			}
			loot.Kill();
		}

		// Token: 0x06007B6D RID: 31597 RVA: 0x00467590 File Offset: 0x00465790
		public GClass1404 method_4(GClass1404 lootItems)
		{
			GClass1404 gclass = new GClass1404();
			foreach (LootItemPositionClass lootItemPositionClass in lootItems)
			{
				if (lootItemPositionClass.Item.QuestItem)
				{
					this.list_1.Add(lootItemPositionClass);
				}
				else
				{
					gclass.Add(lootItemPositionClass);
				}
			}
			return gclass;
		}

		// Token: 0x06007B6E RID: 31598 RVA: 0x00467604 File Offset: 0x00465804
		public virtual LootItem CreateStaticLoot(GameObject lootObject, Item item, string lootName, bool randomRotation, [CanBeNull] MongoID[] validProfiles, string staticId = null, Vector3 shift = default(Vector3))
		{
			return LootItem.CreateStaticLoot<LootItem>(lootObject, item, lootName, this, randomRotation, validProfiles, staticId, true, shift);
		}

		// Token: 0x06007B6F RID: 31599 RVA: 0x00467624 File Offset: 0x00465824
		public void method_5(GClass1404 lootItems, bool initial)
		{
			this.Platforms = LocationScene.GetAllObjectsAndWhenISayAllIActuallyMeanIt<MovingPlatform>().ToArray<MovingPlatform>();
			Locomotive[] array = this.Platforms.OfType<Locomotive>().ToArray<Locomotive>();
			this.PlatformAdapters = new MovingPlatform.GClass3596[array.Length];
			for (int i = 0; i < array.Length; i++)
			{
				this.PlatformAdapters[i] = new MovingPlatform.GClass3596
				{
					Platform = array[i],
					Id = (byte)i
				};
			}
			GInterface30[] array2 = LocationScene.GetAllObjects<StaticLoot>(false).Cast<GInterface30>().Concat(LocationScene.GetAllObjects<LootableContainer>(false)).Concat(LocationScene.GetAllObjects<StationaryWeapon>(false)).ToArray<GInterface30>();
			if (initial)
			{
				array2 = this.method_6(lootItems, array2);
			}
			List<Vector3> list = new List<Vector3>();
			foreach (LootItemPositionClass lootItemPositionClass in lootItems)
			{
				GameWorld.Class1113 @class = new GameWorld.Class1113();
				@class.lootId = lootItemPositionClass.Id;
				Item item = lootItemPositionClass.Item;
				string shortName = item.ShortName;
				this.AllLoot.Add(lootItemPositionClass);
				if (initial)
				{
					item.SpawnedInSession = true;
					GClass3248 gclass = item as GClass3248;
					if (gclass != null)
					{
						foreach (Item item2 in gclass.GetAllItemsFromCollection())
						{
							item2.SpawnedInSession = true;
						}
					}
				}
				if (lootItemPositionClass.IsContainer)
				{
					GInterface30 ginterface = array2.FirstOrDefault(new Func<GInterface30, bool>(@class.method_0));
					if (ginterface != null)
					{
						StaticLoot staticLoot = ginterface as StaticLoot;
						if (staticLoot == null)
						{
							LootableContainer lootableContainer = ginterface as LootableContainer;
							if (lootableContainer == null)
							{
								StationaryWeapon stationaryWeapon = ginterface as StationaryWeapon;
								if (stationaryWeapon != null)
								{
									LootItem.CreateStationaryWeapon(stationaryWeapon, item, shortName, this, @class.lootId);
									list.Add(stationaryWeapon.transform.position);
								}
							}
							else
							{
								LootItem.CreateLootContainer(lootableContainer, item, shortName, this, @class.lootId);
								list.Add(lootableContainer.transform.position);
							}
						}
						else
						{
							new TraderControllerClass(item, item.Id, shortName, true, EOwnerType.Profile);
							this.CreateStaticLoot(staticLoot.gameObject, item, shortName, lootItemPositionClass.randomRotation, lootItemPositionClass.ValidProfiles, @class.lootId, lootItemPositionClass.Shift);
							list.Add(staticLoot.gameObject.transform.position);
						}
					}
					else
					{
						Debug.LogError(@class.lootId + " is missing");
					}
				}
				else
				{
					GClass1402 gclass2 = lootItemPositionClass as GClass1402;
					if (gclass2 != null)
					{
						this.SpawnLootCorpse(gclass2);
					}
					else
					{
						if (lootItemPositionClass.PlatformId > -1)
						{
							Debug.Log("SERIALIZE LOOT IS ON PLATFORM".Yellow());
						}
						this.method_9(lootItemPositionClass, initial, null, (lootItemPositionClass.PlatformId > -1) ? this.Platforms[(int)lootItemPositionClass.PlatformId] : null);
					}
					list.Add(lootItemPositionClass.Position);
				}
			}
			if (Singleton<BotEventHandler>.Instantiated)
			{
				Singleton<BotEventHandler>.Instance.SpawnLoot(list);
			}
		}

		// Token: 0x06007B70 RID: 31600 RVA: 0x001CA8AA File Offset: 0x001C8AAA
		public virtual void SpawnLootCorpse(GClass1402 lootItem)
		{
			this.SpawnLootCorpse<Corpse>(lootItem);
		}

		// Token: 0x06007B71 RID: 31601 RVA: 0x001CA8B3 File Offset: 0x001C8AB3
		public void SpawnLootCorpse<T>(GClass1402 corpseJson) where T : Corpse
		{
			Corpse.CreateStillCorpse<T>(this, corpseJson, (corpseJson.PlatformId > -1) ? this.Platforms[(int)corpseJson.PlatformId] : null);
		}

		// Token: 0x06007B72 RID: 31602 RVA: 0x001CA8D6 File Offset: 0x001C8AD6
		public GInterface30[] method_6(GClass1404 lootItems, GInterface30[] staticLootSpawns)
		{
			this.method_7(lootItems, ref staticLootSpawns);
			return staticLootSpawns.Where(new Func<GInterface30, bool>(GameWorld.Class1111.class1111_0.method_2)).ToArray<GInterface30>();
		}

		// Token: 0x06007B73 RID: 31603 RVA: 0x0046793C File Offset: 0x00465B3C
		public void DevelopSetContainerVisibility(int command, string id)
		{
			GameWorld.Class1114 @class = new GameWorld.Class1114();
			@class.gameWorld_0 = this;
			@class.id = id;
			switch (command)
			{
			case 0:
				foreach (GameObject gameObject in this.list_2)
				{
					gameObject.SetActive(true);
				}
				this.list_2.Clear();
				return;
			case 1:
			{
				if (@class.id.IsNullOrEmpty())
				{
					Debug.LogError("Can't hide container, empty id");
					return;
				}
				LootableContainer lootableContainer = this.LootList.OfType<LootableContainer>().FirstOrDefault(new Func<LootableContainer, bool>(@class.method_1));
				if (lootableContainer == null)
				{
					Debug.LogError("Can't find lootable container with id:" + @class.id + " to delete");
					return;
				}
				@class.method_0(lootableContainer);
				return;
			}
			case 2:
				foreach (LootableContainer container in this.LootList.OfType<LootableContainer>())
				{
					@class.method_0(container);
				}
				return;
			default:
				return;
			}
		}

		// Token: 0x06007B74 RID: 31604 RVA: 0x00467A68 File Offset: 0x00465C68
		public void method_7(GClass1404 lootItems, ref GInterface30[] staticLootSpawns)
		{
			this.list_2.Clear();
			GInterface30[] array = staticLootSpawns;
			for (int i = 0; i < array.Length; i++)
			{
				GameWorld.Class1115 @class = new GameWorld.Class1115();
				@class.staticLootSpawn = array[i];
				if (lootItems.All(new Func<LootItemPositionClass, bool>(@class.method_0)))
				{
					GameObject gameObject = ((MonoBehaviour)@class.staticLootSpawn).gameObject;
					string text = string.Join("/", Enumerable.Repeat<string>(gameObject.scene.name, 1).Concat(GameWorld.smethod_0(gameObject.transform).Reverse<Transform>().Select(new Func<Transform, string>(GameWorld.Class1111.class1111_0.method_3))).ToArray<string>());
					Debug.LogWarning(string.Concat(new string[]
					{
						"Static loot ",
						@class.staticLootSpawn.Id,
						" not found in json. (",
						text,
						") Destroying the loot component..."
					}), gameObject);
					LootableContainer lootableContainer = @class.staticLootSpawn as LootableContainer;
					if (lootableContainer != null && !lootableContainer.GameObjectsToDestroy.IsNullOrEmpty<GameObject>())
					{
						this.list_2.AddRange(lootableContainer.GameObjectsToDestroy);
					}
				}
			}
			foreach (GameObject gameObject2 in this.list_2)
			{
				gameObject2.SetActive(false);
			}
			this.list_2.Clear();
		}

		// Token: 0x06007B75 RID: 31605 RVA: 0x001CA90B File Offset: 0x001C8B0B
		public static IEnumerable<Transform> smethod_0(Transform transform)
		{
			GameWorld.Class1119 @class = new GameWorld.Class1119(-2);
			@class.transform_2 = transform;
			return @class;
		}

		// Token: 0x06007B76 RID: 31606 RVA: 0x00467BEC File Offset: 0x00465DEC
		public void method_8(GClass1404 lootItems)
		{
			GInterface30[] array = LocationScene.GetAllObjects<StaticLoot>(false).Concat(LocationScene.GetAllObjects<LootableContainer>(false).Cast<GInterface30>()).ToArray<GInterface30>();
			this.method_7(lootItems, ref array);
		}

		// Token: 0x06007B77 RID: 31607 RVA: 0x00467C20 File Offset: 0x00465E20
		public virtual LootItem CreateLootWithRigidbody(GameObject lootObject, Item item, string objectName, bool randomRotation, [CanBeNull] MongoID[] validProfiles, out BoxCollider objectCollider, bool syncable, bool performPickUpValidation = true, float makeVisibleAfterDelay = 0f)
		{
			return LootItem.CreateLootWithRigidbody<LootItem>(lootObject, item, objectName, this, randomRotation, validProfiles, out objectCollider, performPickUpValidation, makeVisibleAfterDelay);
		}

		// Token: 0x06007B78 RID: 31608 RVA: 0x00467C40 File Offset: 0x00465E40
		public void method_9(LootItemPositionClass lootItem, bool initial, Player questPlayer = null, MovingPlatform platform = null)
		{
			Item item = (questPlayer == null) ? lootItem.Item : lootItem.Item.CloneItem(null);
			new TraderControllerClass(item, item.Id, item.ShortName, true, EOwnerType.Profile);
			GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateLootPrefab(item, ECameraType.Default, null);
			gameObject.SetActive(true);
			if (platform != null)
			{
				gameObject.transform.position = platform.transform.TransformPoint(lootItem.Position);
			}
			else
			{
				gameObject.transform.position = lootItem.Position;
				gameObject.transform.rotation = Quaternion.Euler(lootItem.Rotation);
			}
			BoxCollider boxCollider;
			LootItem lootItem2 = lootItem.useGravity ? this.CreateLootWithRigidbody(gameObject, item, item.ShortName, lootItem.randomRotation, lootItem.ValidProfiles, out boxCollider, false, true, 0f) : this.CreateStaticLoot(gameObject, item, item.ShortName, lootItem.randomRotation, lootItem.ValidProfiles, null, lootItem.Shift);
			if (platform != null)
			{
				lootItem2.Board(platform);
				gameObject.transform.localRotation = Quaternion.Euler(lootItem.Rotation);
				return;
			}
			PreviewPivot component = gameObject.GetComponent<PreviewPivot>();
			if (!(component == null) && !(component.SpawnPosition == Vector3.zero))
			{
				GameObject gameObject2 = new GameObject("Weapon spawn root");
				gameObject2.transform.position = lootItem.Position;
				gameObject2.transform.rotation = Quaternion.Euler(lootItem.Rotation);
				Transform transform = lootItem2.transform;
				transform.SetParent(gameObject2.transform);
				transform.localPosition = (initial ? (-component.SpawnPosition) : Vector3.zero);
				if (lootItem.randomRotation)
				{
					transform.rotation = Quaternion.Euler(new Vector3(0f, (float)UnityEngine.Random.Range(0, 360), 0f));
				}
				transform.localScale = Vector3.one;
				return;
			}
		}

		// Token: 0x06007B79 RID: 31609 RVA: 0x001CA91B File Offset: 0x001C8B1B
		public virtual Task PreloadAdditionalData()
		{
			return Task.CompletedTask;
		}

		// Token: 0x06007B7A RID: 31610 RVA: 0x00467E28 File Offset: 0x00466028
		public LootItem ThrowItem(Item item, IPlayer player, Vector3? direction)
		{
			Vector3 a = direction ?? (Quaternion.Euler(Mathf.Clamp(player.Rotation.y, -90f, 45f), player.Rotation.x, 0f) * new Vector3(0f, 1f, 1f));
			a *= 2f;
			Vector3 position = player.PlayerColliderPointOnCenterAxis(0.65f) + player.Velocity * Time.deltaTime;
			Quaternion rotation = player.PlayerBones.WeaponRoot.rotation * Quaternion.Euler(90f, 0f, 0f);
			Vector3 angularVelocity = new Vector3(UnityEngine.Random.Range(-3f, 3f), UnityEngine.Random.Range(-3f, 3f), 2f * Mathf.Sign((float)UnityEngine.Random.Range(-1, 2)));
			return this.ThrowItem(item, player, position, rotation, a + player.Velocity / 2f, angularVelocity, true, true, EFTHardSettings.Instance.ThrowLootMakeVisibleDelay);
		}

		// Token: 0x06007B7B RID: 31611 RVA: 0x00467F50 File Offset: 0x00466150
		public LootItem ThrowItem(Item item, IPlayer player, Vector3 position, Quaternion rotation, Vector3 velocity, Vector3 angularVelocity, bool syncable, bool performPickUpValidation = true, float makeVisibleAfterDelay = 0f)
		{
			try
			{
				if (item == null)
				{
					Debug.LogError("item is null");
				}
				new TraderControllerClass(item, (item != null) ? item.Id : null, (item != null) ? item.ShortName : null, true, EOwnerType.Profile);
				if (Singleton<PoolManagerClass>.Instance == null)
				{
					throw new Exception("Singleton<ObjectsFactory>.Instance is null");
				}
				GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateLootPrefab(item, Player.GetVisibleToCamera(player), null);
				if (gameObject == null)
				{
					throw new Exception("Prefab is null");
				}
				gameObject.SetActive(true);
				BoxCollider boxCollider;
				LootItem lootItem = this.CreateLootWithRigidbody(gameObject, item, (item != null) ? item.ShortName : null, false, null, out boxCollider, syncable, performPickUpValidation, makeVisibleAfterDelay);
				try
				{
					lootItem.transform.SetPositionAndRotation(position, rotation);
					lootItem.RigidBody.velocity = velocity;
					lootItem.RigidBody.angularVelocity = angularVelocity;
					lootItem.LastOwner = player;
					lootItem.CacheParameters();
					BotEventHandler.GDelegate15 onThrowItem = this.OnThrowItem;
					if (onThrowItem != null)
					{
						onThrowItem(lootItem);
					}
				}
				catch (Exception ex)
				{
					Debug.LogError(string.Format("{0} {1} loot: {2}: {3} \n {4}", new object[]
					{
						(item != null) ? item.Name : null,
						(item != null) ? item.Id : null,
						lootItem,
						ex.Message,
						ex.StackTrace
					}));
				}
				return lootItem;
			}
			catch (Exception ex2)
			{
				Debug.LogError(string.Concat(new string[]
				{
					(item != null) ? item.Name : null,
					" ",
					(item != null) ? item.Id : null,
					" : ",
					ex2.Message,
					" \n ",
					ex2.StackTrace
				}));
			}
			return null;
		}

		// Token: 0x06007B7C RID: 31612 RVA: 0x0046811C File Offset: 0x0046631C
		public LootItem SetupItem(Item item, IPlayer player, Vector3 position, Quaternion rotation)
		{
			new TraderControllerClass(item, item.Id, item.ShortName, true, EOwnerType.Profile);
			GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateLootPrefab(item, Player.GetVisibleToCamera(player), null);
			gameObject.SetActive(true);
			BoxCollider boxCollider;
			LootItem lootItem = this.CreateLootWithRigidbody(gameObject, item, item.ShortName, false, null, out boxCollider, true, true, 0f);
			lootItem.GetComponent<Rigidbody>().isKinematic = true;
			lootItem.transform.SetPositionAndRotation(position + rotation * lootItem.Shift, rotation);
			lootItem.LastOwner = player;
			return lootItem;
		}

		// Token: 0x06007B7D RID: 31613 RVA: 0x004681A8 File Offset: 0x004663A8
		public virtual void PlantTripwire(Item item, string profileId, Vector3 fromPosition, Vector3 toPosition)
		{
			ThrowWeapItemClass throwWeapItemClass = item as ThrowWeapItemClass;
			if (throwWeapItemClass == null)
			{
				return;
			}
			TripwireSynchronizableObject tripwireSynchronizableObject = (TripwireSynchronizableObject)this.SynchronizableObjectLogicProcessor.TakeFromPool(SynchronizableObjectType.Tripwire);
			tripwireSynchronizableObject.transform.SetPositionAndRotation(fromPosition, Quaternion.identity);
			this.SynchronizableObjectLogicProcessor.InitSyncObject(tripwireSynchronizableObject, fromPosition, Vector3.forward, -1);
			tripwireSynchronizableObject.SetupGrenade(throwWeapItemClass, profileId, fromPosition, toPosition);
			this.SynchronizableObjectLogicProcessor.TripwireManager.AddTripwire(tripwireSynchronizableObject);
			Vector3 position = (fromPosition + toPosition) * 0.5f;
			Singleton<BotEventHandler>.Instance.PlantTripwire(tripwireSynchronizableObject, position);
		}

		// Token: 0x06007B7E RID: 31614 RVA: 0x001CA922 File Offset: 0x001C8B22
		public void SpawnTripwire(ISynchronizableObject tripwire)
		{
			throw new NotImplementedException();
		}

		// Token: 0x06007B7F RID: 31615 RVA: 0x001CA929 File Offset: 0x001C8B29
		public virtual void TriggerTripwire(TripwireSynchronizableObject tripwire)
		{
			this.SynchronizableObjectLogicProcessor.TripwireManager.RemoveTripwire(tripwire);
			tripwire.TriggerTripwire();
		}

		// Token: 0x06007B80 RID: 31616 RVA: 0x001CA942 File Offset: 0x001C8B42
		public virtual void DeActivateTripwire(TripwireSynchronizableObject tripwire)
		{
			this.SynchronizableObjectLogicProcessor.TripwireManager.RemoveTripwire(tripwire);
			tripwire.DisableTripwire();
		}

		// Token: 0x06007B81 RID: 31617 RVA: 0x00468234 File Offset: 0x00466434
		public virtual void Start()
		{
			GameWorld._interactiveLootMask = LayerMask.GetMask(new string[]
			{
				"Interactive",
				"Deadbody",
				"Loot"
			});
			GameWorld.int_0 = LayerMask.GetMask(new string[]
			{
				"Interactive",
				"Deadbody",
				"Player",
				"Loot"
			});
			GameWorld.int_1 = LayerMask.GetMask(new string[]
			{
				"Player"
			});
			GameWorld.int_2 = LayerMask.GetMask(new string[]
			{
				"HighPolyCollider",
				"TransparentCollider"
			});
		}

		// Token: 0x06007B82 RID: 31618 RVA: 0x004682D4 File Offset: 0x004664D4
		public virtual void ShotDelegate(EftBulletClass shotResult)
		{
			if (!shotResult.IsFlyingOutOfTime && !shotResult.AvoidAdditionalDamage)
			{
				DamageInfoStruct damageInfo = new DamageInfoStruct(EDamageType.Bullet, shotResult);
				ShotIdStruct shotID = new ShotIdStruct(shotResult.Ammo.Id, shotResult.FragmentIndex);
				ShotInfoClass playerHitInfo = shotResult.HittedBallisticCollider.ApplyHit(damageInfo, shotID);
				shotResult.AddClientHitPosition(playerHitInfo);
				ExplosiveItemComponentClass itemComponent = shotResult.Ammo.GetItemComponent<ExplosiveItemComponentClass>();
				if (itemComponent != null && shotResult.TimeSinceShot >= itemComponent.Template.FuzeArmTimeSec)
				{
					string explosionType = itemComponent.Template.ExplosionType;
					if (!string.IsNullOrEmpty(explosionType) && shotResult.IsFirstHit)
					{
						Singleton<Effects>.Instance.EmitGrenade(explosionType, shotResult.HitPoint, shotResult.HitNormal, (float)(shotResult.IsForwardHit ? 1 : 0));
					}
					Grenade.Explosion(null, itemComponent, shotResult.HitPoint, shotResult.Player.iPlayer.ProfileId, this.SharedBallisticsCalculator, shotResult.Weapon, shotResult.HitNormal * 0.08f, false);
				}
			}
		}

		// Token: 0x06007B83 RID: 31619 RVA: 0x001CA95B File Offset: 0x001C8B5B
		public virtual void NetworkWorldOnGrenadeHit(Vector3 pos)
		{
		}

		// Token: 0x06007B84 RID: 31620 RVA: 0x001CA95D File Offset: 0x001C8B5D
		public virtual ShotInfoClass HackShot(DamageInfoStruct damageInfo)
		{
			if (null == damageInfo.HittedBallisticCollider)
			{
				damageInfo.HittedBallisticCollider = this.ballisticCollider_0;
			}
			return damageInfo.HittedBallisticCollider.ApplyHit(damageInfo, ShotIdStruct.EMPTY_SHOT_ID);
		}

		// Token: 0x06007B85 RID: 31621 RVA: 0x004683D4 File Offset: 0x004665D4
		public void Update()
		{
			this.gclass824_0.RecordDeltaTime();
			if (CameraClass.Instance.Camera == null)
			{
				return;
			}
			for (int i = this.list_0.Count - 1; i >= 0; i--)
			{
				AmmoPoolObject ammoPoolObject = this.list_0[i];
				if (ammoPoolObject.ShouldBeDestroyed)
				{
					this.list_0.RemoveAt(i);
					AssetPoolObject.ReturnToPool(ammoPoolObject.gameObject, true);
				}
			}
		}

		// Token: 0x06007B86 RID: 31622 RVA: 0x001CA98B File Offset: 0x001C8B8B
		public void DoWorldTick(float dt)
		{
			this.BeforeWorldTick(dt);
			this.BeforePlayerTick(dt);
			this.PlayerTick(dt);
			this.BallisticsTick(dt);
			this.AfterPlayerTick(dt);
			this.OtherElseWorldTick(dt);
			this.AfterWorldTick(dt);
		}

		// Token: 0x06007B87 RID: 31623 RVA: 0x001CA9BE File Offset: 0x001C8BBE
		public void DoOtherWorldTick(float dt)
		{
			this.method_10(new Action<Player>(GameWorld.smethod_1));
		}

		// Token: 0x06007B88 RID: 31624 RVA: 0x001CA9D2 File Offset: 0x001C8BD2
		public virtual void BeforeWorldTick(float dt)
		{
			Action<float> action = this.action_3;
			if (action == null)
			{
				return;
			}
			action(dt);
		}

		// Token: 0x06007B89 RID: 31625 RVA: 0x001CA9E5 File Offset: 0x001C8BE5
		public virtual void BallisticsTick(float dt)
		{
			ISharedBallisticsCalculator sharedBallisticsCalculator = this.SharedBallisticsCalculator;
			if (sharedBallisticsCalculator == null)
			{
				return;
			}
			sharedBallisticsCalculator.ManualUpdate(dt);
		}

		// Token: 0x06007B8A RID: 31626 RVA: 0x001CA9F8 File Offset: 0x001C8BF8
		public virtual void BeforePlayerTick(float dt)
		{
		}

		// Token: 0x06007B8B RID: 31627 RVA: 0x001CA9FA File Offset: 0x001C8BFA
		public virtual void PlayerTick(float dt)
		{
			this.method_10(new Action<Player>(GameWorld.smethod_2));
		}

		// Token: 0x06007B8C RID: 31628 RVA: 0x001CAA0E File Offset: 0x001C8C0E
		public virtual void AfterPlayerTick(float dt)
		{
			this.method_10(new Action<Player>(GameWorld.smethod_3));
		}

		// Token: 0x06007B8D RID: 31629 RVA: 0x001CAA22 File Offset: 0x001C8C22
		public virtual void OtherElseWorldTick(float dt)
		{
			this.SpeakerManager.ManualUpdate(dt);
		}

		// Token: 0x06007B8E RID: 31630 RVA: 0x001CAA30 File Offset: 0x001C8C30
		public virtual void AfterWorldTick(float dt)
		{
		}

		// Token: 0x06007B8F RID: 31631 RVA: 0x001CAA32 File Offset: 0x001C8C32
		public virtual void LateUpdateWorld(float dt)
		{
			Action<float> action = this.action_4;
			if (action == null)
			{
				return;
			}
			action(dt);
		}

		// Token: 0x06007B90 RID: 31632 RVA: 0x00468444 File Offset: 0x00466644
		public void method_10(Action<Player> operation)
		{
			for (int i = this.AllAlivePlayersList.Count - 1; i >= 0; i--)
			{
				try
				{
					operation(this.AllAlivePlayersList[i]);
				}
				catch (Exception ex)
				{
					Debug.LogErrorFormat("[{0}] tick operation exception: {1}", new object[]
					{
						this.AllAlivePlayersList[i].FullIdInfo,
						ex
					});
				}
			}
		}

		// Token: 0x06007B91 RID: 31633 RVA: 0x001CAA45 File Offset: 0x001C8C45
		public virtual void OnDestroy()
		{
		}

		// Token: 0x06007B92 RID: 31634 RVA: 0x004684BC File Offset: 0x004666BC
		public virtual void Dispose()
		{
			using (CounterCreatorAbstractClass.StartWithToken("loot.Kill"))
			{
				for (int i = this.LootList.Count - 1; i >= 0; i--)
				{
					try
					{
						IKillableLootItem killableLootItem = this.LootList[i];
						if ((UnityEngine.Object)killableLootItem != null)
						{
							killableLootItem.Kill();
						}
					}
					catch (Exception exception)
					{
						Debug.LogException(exception);
					}
				}
			}
			foreach (AmmoPoolObject ammoPoolObject in this.list_0)
			{
				AssetPoolObject.ReturnToPool(ammoPoolObject.gameObject, true);
			}
			this.list_0.Clear();
			this.LootList.Clear();
			this.LootItems.Clear();
			if (this.bool_0)
			{
				using (CounterCreatorAbstractClass.StartWithToken("ClearPools"))
				{
					if (this.ObjectsFactory != null)
					{
						this.ObjectsFactory.UnloadTemporaryPools(true);
						this.ObjectsFactory.UnloadBundles();
					}
				}
			}
			if (this.gclass1661_0 != null)
			{
				this.gclass1661_0.Release();
				this.gclass1661_0 = null;
			}
			ISharedBallisticsCalculator clientBallisticCalculator = this.ClientBallisticCalculator;
			if (clientBallisticCalculator != null)
			{
				clientBallisticCalculator.ClearShots();
			}
			ISharedBallisticsCalculator sharedBallisticsCalculator = this.SharedBallisticsCalculator;
			if (sharedBallisticsCalculator != null)
			{
				sharedBallisticsCalculator.ClearShots();
			}
			ClientShellingControllerClass clientShellingController = this.ClientShellingController;
			if (clientShellingController != null)
			{
				clientShellingController.Dispose();
			}
			ServerShellingControllerClass serverShellingController = this.ServerShellingController;
			if (serverShellingController != null)
			{
				serverShellingController.Dispose();
			}
			ClientBroadcastSyncControllerClass clientBroadcastSyncController = this.ClientBroadcastSyncController;
			if (clientBroadcastSyncController != null)
			{
				clientBroadcastSyncController.Dispose();
			}
			this.CompositeDisposable.Dispose();
			this.ExfiltrationController.Dispose();
			TransitControllerAbstractClass transitController = this.TransitController;
			if (transitController != null)
			{
				transitController.Dispose();
			}
			RunddansControllerAbstractClass runddansController = this.RunddansController;
			if (runddansController != null)
			{
				runddansController.Dispose();
			}
			this.BufferZoneController.Dispose();
			HalloweenEventControllerClass halloweenEventController = this.HalloweenEventController;
			if (halloweenEventController != null)
			{
				halloweenEventController.Dispose();
			}
			GInterface29 ginterface = this.GInterface29_0;
			if (ginterface != null)
			{
				ginterface.Dispose();
			}
			this.GInterface29_0 = null;
			BTRControllerClass btrController = this.BtrController;
			if (btrController != null)
			{
				btrController.Dispose();
			}
			GClass3592 triggersEmitter = this.TriggersEmitter;
			if (triggersEmitter != null)
			{
				triggersEmitter.Dispose();
			}
			GClass3670.Instance.Dispose();
			this.world_0 = null;
			Action action = GameWorld.action_0;
			if (action != null)
			{
				action();
			}
			GameWorld.action_0 = null;
			this.method_11();
		}

		// Token: 0x06007B93 RID: 31635 RVA: 0x00468724 File Offset: 0x00466924
		public void method_11()
		{
			foreach (KeyValuePair<string, IPlayerOwner> keyValuePair in this.AllPlayerBridgesEverExisted)
			{
				IPlayerOwner value = keyValuePair.Value;
				if (value != null)
				{
					value.Dispose();
				}
			}
			this.allAlivePlayersByID.Clear();
			this.AllAlivePlayersList.Clear();
			this.AllAlivePlayerBridges.Clear();
			this.AllAlivePlayerBridgesByCollider.Clear();
			this.AllPlayerBridgesEverExisted.Clear();
			this.allObservedPlayersByID.Clear();
		}

		// Token: 0x06007B94 RID: 31636 RVA: 0x004687C8 File Offset: 0x004669C8
		public static bool InteractionSense(Vector3 origin, Vector3 direction, float radius, float distance)
		{
			RaycastHit raycastHit;
			bool flag = Physics.SphereCast(origin, radius, direction, out raycastHit, distance, GameWorld._interactiveLootMask);
			LootItem lootItem = null;
			Switch x = null;
			if (flag)
			{
				lootItem = raycastHit.collider.gameObject.GetComponentInParent<LootItem>();
				if (lootItem == null)
				{
					Switch component = raycastHit.collider.gameObject.GetComponent<Switch>();
					if (component != null && component.Operatable && component.DoorState == EDoorState.Shut)
					{
						x = component;
					}
				}
			}
			if (lootItem != null && !(lootItem is Corpse))
			{
				Weapon weapon = lootItem.Item as Weapon;
				if ((weapon == null || !weapon.IsOneOff || weapon.Repairable.Durability != 0f) && lootItem.enabled)
				{
					return true;
				}
			}
			return x != null;
		}

		// Token: 0x06007B95 RID: 31637 RVA: 0x00468884 File Offset: 0x00466A84
		[CanBeNull]
		public static GameObject FindInteractable(Ray ray, out RaycastHit hit)
		{
			GameObject gameObject = EFTPhysicsClass.Raycast(ray, out hit, Mathf.Max(EFTHardSettings.Instance.LOOT_RAYCAST_DISTANCE, EFTHardSettings.Instance.PLAYER_RAYCAST_DISTANCE + EFTHardSettings.Instance.BEHIND_CAST), GameWorld.int_0) ? hit.collider.gameObject : null;
			if (gameObject && !Physics.Linecast(ray.origin, hit.point, GameWorld.int_2))
			{
				return gameObject;
			}
			return null;
		}

		// Token: 0x06007B96 RID: 31638 RVA: 0x001CAA47 File Offset: 0x001C8C47
		public WorldInteractiveObject FindDoor(string doorId)
		{
			return this.World_0.FindDoor(doorId);
		}

		// Token: 0x06007B97 RID: 31639 RVA: 0x001CAA55 File Offset: 0x001C8C55
		public IEnumerable<WorldInteractiveObject> WorldInteractiveObjects()
		{
			return this.World_0.WorldInteractiveObjects();
		}

		// Token: 0x06007B98 RID: 31640 RVA: 0x001CAA62 File Offset: 0x001C8C62
		public bool TryGetLampController(string id, out LampController lampController)
		{
			return this.dictionary_1.TryGetValue(id, out lampController);
		}

		// Token: 0x06007B99 RID: 31641 RVA: 0x001CAA71 File Offset: 0x001C8C71
		public bool TryGetControlledLampGroup(ulong id, out ControlledLampGroup controlledLampGroup)
		{
			return this.dictionary_2.TryGetValue(id, out controlledLampGroup);
		}

		// Token: 0x06007B9A RID: 31642 RVA: 0x004688F8 File Offset: 0x00466AF8
		public StationaryWeapon FindStationaryWeapon(string id)
		{
			GameWorld.Class1116 @class = new GameWorld.Class1116();
			@class.id = id;
			return LocationScene.GetAllObjects<StationaryWeapon>(false).FirstOrDefault(new Func<StationaryWeapon, bool>(@class.method_0));
		}

		// Token: 0x06007B9B RID: 31643 RVA: 0x0046892C File Offset: 0x00466B2C
		public StationaryWeapon FindStationaryWeaponByItemId(string itemId)
		{
			GameWorld.Class1117 @class = new GameWorld.Class1117();
			@class.itemId = itemId;
			return LocationScene.GetAllObjects<StationaryWeapon>(false).FirstOrDefault(new Func<StationaryWeapon, bool>(@class.method_0));
		}

		// Token: 0x06007B9C RID: 31644 RVA: 0x00468960 File Offset: 0x00466B60
		public virtual void RegisterPlayer(IPlayer iPlayer)
		{
			this.RegisteredPlayers.Add(iPlayer);
			Collider collider = iPlayer.CharacterController.GetCollider();
			Player player = iPlayer as Player;
			string profileId = iPlayer.ProfileId;
			Transform transform;
			if (player != null)
			{
				if (!this.AllAlivePlayersList.Contains(player))
				{
					this.AllAlivePlayersList.Add(player);
				}
				this.allAlivePlayersByID[player.ProfileId] = player;
				this.dictionary_0[player.ProfileId] = player;
				if (iPlayer.IsYourPlayer)
				{
					this.MainPlayer = player;
				}
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
				{
					transform = player.Spirit.GetActiveTransform();
					Collider collider2 = player.Spirit.CharacterController.GetCollider();
					this.PlayersColliders[collider2] = player;
					Collider collider3 = player.Spirit.PlayerSpiritAura.GetCollider();
					this.PlayersColliders[collider3] = player;
				}
				else
				{
					transform = player.gameObject.transform;
				}
				player.SetDeltaTimeDelegate(new Player.GDelegate66(this.method_14));
				this.AllAlivePlayerBridges[profileId] = new GClass1710(player);
			}
			else
			{
				transform = iPlayer.Transform.Original;
			}
			this.ItemOwners.Add(iPlayer.InventoryController, new GameWorld.GStruct162
			{
				Transform = transform
			});
			this.AllAlivePlayerBridgesByCollider[collider] = this.AllAlivePlayerBridges[profileId];
			this.AllPlayerBridgesEverExisted[profileId] = this.AllAlivePlayerBridges[profileId];
			this.PlayersColliders[collider] = iPlayer;
			Action<IPlayer> action = this.action_2;
			if (action == null)
			{
				return;
			}
			action(iPlayer);
		}

		// Token: 0x06007B9D RID: 31645 RVA: 0x00468AF8 File Offset: 0x00466CF8
		public virtual void UnregisterPlayer(IPlayer iPlayer)
		{
			if (!this.RegisteredPlayers.Contains(iPlayer))
			{
				return;
			}
			this.RegisteredPlayers.Remove(iPlayer);
			Collider collider = iPlayer.CharacterController.GetCollider();
			this.PlayersColliders.Remove(collider);
			this.allAlivePlayersByID.Remove(iPlayer.ProfileId);
			this.AllAlivePlayerBridges.Remove(iPlayer.ProfileId);
			this.AllAlivePlayerBridgesByCollider.Remove(collider);
			this.allObservedPlayersByID.Remove(iPlayer.ProfileId);
			Player player = iPlayer as Player;
			if (player != null)
			{
				this.AllAlivePlayersList.Remove(player);
				this.ItemOwners.Remove(player.InventoryController);
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
				{
					Collider collider2 = player.Spirit.CharacterController.GetCollider();
					this.PlayersColliders.Remove(collider2);
					Collider collider3 = player.Spirit.PlayerSpiritAura.GetCollider();
					this.PlayersColliders.Remove(collider3);
				}
				player.SetDeltaTimeDelegate(null);
			}
		}

		// Token: 0x06007B9E RID: 31646 RVA: 0x001CAA80 File Offset: 0x001C8C80
		public virtual void RegisterPlayerCollider(Player player, Collider playerCollider)
		{
			this.PlayersColliders[playerCollider] = player;
		}

		// Token: 0x06007B9F RID: 31647 RVA: 0x001CAA8F File Offset: 0x001C8C8F
		public virtual void UnregisterPlayerCollider(Collider playerCollider)
		{
			this.PlayersColliders.Remove(playerCollider);
		}

		// Token: 0x06007BA0 RID: 31648 RVA: 0x00468BFC File Offset: 0x00466DFC
		public Task method_12(Player player)
		{
			GameWorld.Struct277 @struct;
			@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
			@struct.gameWorld_0 = this;
			@struct.player = player;
			@struct.int_0 = -1;
			@struct.asyncTaskMethodBuilder_0.Start<GameWorld.Struct277>(ref @struct);
			return @struct.asyncTaskMethodBuilder_0.Task;
		}

		// Token: 0x06007BA1 RID: 31649 RVA: 0x00468C48 File Offset: 0x00466E48
		[CanBeNull]
		public Player GetPlayerByCollider(Collider col)
		{
			if (col == null)
			{
				return null;
			}
			IPlayer player;
			this.PlayersColliders.TryGetValue(col, out player);
			Player player2 = player as Player;
			if (player2 != null)
			{
				return player2;
			}
			return null;
		}

		// Token: 0x06007BA2 RID: 31650 RVA: 0x00468C7C File Offset: 0x00466E7C
		public GStruct156<ItemAddress> ToItemAddress(GClass1950 descriptor)
		{
			IItemOwner itemOwner;
			if (descriptor is GClass1951)
			{
				MongoID? parentId = descriptor.Container.ParentId;
				itemOwner = this.FindOwnerById((parentId != null) ? parentId.GetValueOrDefault() : null);
				if (itemOwner == null)
				{
					parentId = descriptor.Container.ParentId;
					return new GameWorld.GClass1524((parentId != null) ? parentId.GetValueOrDefault() : null);
				}
			}
			else
			{
				MongoID? parentId = descriptor.Container.ParentId;
				GStruct156<Item> gstruct = this.FindItemById((parentId != null) ? parentId.GetValueOrDefault() : null);
				if (gstruct.Failed)
				{
					return gstruct.Error;
				}
				itemOwner = gstruct.Value.Parent.GetOwnerOrNull();
				if (itemOwner == null)
				{
					return new GameWorld.GClass1534(gstruct.Value);
				}
			}
			ItemAddress value;
			GStruct156<ItemAddress> result;
			try
			{
				value = itemOwner.ToItemAddress(descriptor);
				goto IL_11A;
			}
			catch (GException16)
			{
				MongoID? parentId = descriptor.Container.ParentId;
				result = new GameWorld.GClass1525((parentId != null) ? parentId.GetValueOrDefault() : null, descriptor.Container.ContainerId);
			}
			return result;
			IL_11A:
			return value;
		}

		// Token: 0x06007BA3 RID: 31651 RVA: 0x00468DBC File Offset: 0x00466FBC
		[CanBeNull]
		public IItemOwner FindOwnerById(string ownerId)
		{
			return this.FindOwnerWithWorldData(ownerId).Key;
		}

		// Token: 0x06007BA4 RID: 31652 RVA: 0x00468DD8 File Offset: 0x00466FD8
		public KeyValuePair<IItemOwner, GameWorld.GStruct162> FindOwnerWithWorldData(string ownerId)
		{
			GameWorld.Class1118 @class = new GameWorld.Class1118();
			@class.ownerId = ownerId;
			return this.ItemOwners.FirstOrDefault(new Func<KeyValuePair<IItemOwner, GameWorld.GStruct162>, bool>(@class.method_0));
		}

		// Token: 0x06007BA5 RID: 31653 RVA: 0x00468E0C File Offset: 0x0046700C
		public GStruct156<Item> FindItemById(string itemId)
		{
			return this.FindItemWithWorldData(itemId).Cast<Item>(new Func<ValueTuple<Item, GameWorld.GStruct162>, Item>(GameWorld.Class1111.class1111_0.method_6));
		}

		// Token: 0x06007BA6 RID: 31654 RVA: 0x00468E48 File Offset: 0x00467048
		[return: TupleElementNames(new string[]
		{
			"item",
			"data"
		})]
		public GStruct156<ValueTuple<Item, GameWorld.GStruct162>> FindItemWithWorldData(string itemId)
		{
			using (GClass4062.BeginSampleWithToken("GameWorld.FindItemById", "FindItemWithWorldData"))
			{
				foreach (KeyValuePair<IItemOwner, GameWorld.GStruct162> keyValuePair in this.ItemOwners)
				{
					IItemOwner itemOwner;
					GameWorld.GStruct162 gstruct2;
					keyValuePair.Deconstruct(out itemOwner, out gstruct2);
					IItemOwner itemOwner2 = itemOwner;
					GameWorld.GStruct162 gstruct3 = gstruct2;
					Item item = null;
					try
					{
						if (itemOwner2.TryFindItem(itemId, out item))
						{
							goto IL_5D;
						}
					}
					catch (Exception exception)
					{
						Debug.LogException(exception);
						goto IL_5D;
					}
					continue;
					IL_5D:
					GameWorld.GStruct162 item2 = gstruct3;
					item2.ItemOwner = itemOwner2;
					return new ValueTuple<Item, GameWorld.GStruct162>(item, item2);
				}
			}
			return new GameWorld.GClass1526(itemId);
		}

		// Token: 0x06007BA7 RID: 31655 RVA: 0x00468F24 File Offset: 0x00467124
		public int CulledPlayersCount()
		{
			int num = 0;
			foreach (IPlayer player in this.RegisteredPlayers)
			{
				ObservedPlayerView observedPlayerView = player as ObservedPlayerView;
				if (observedPlayerView == null)
				{
					Player player2 = player as Player;
					if (player2 != null)
					{
						num += (player2.IsVisible ? 1 : 0);
					}
				}
				else
				{
					num += (observedPlayerView.IsVisible ? 1 : 0);
				}
			}
			return num;
		}

		// Token: 0x06007BA8 RID: 31656 RVA: 0x00468FAC File Offset: 0x004671AC
		public int TotalPlayersCountToCull()
		{
			int num = 0;
			using (List<IPlayer>.Enumerator enumerator = this.RegisteredPlayers.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (!enumerator.Current.IsYourPlayer)
					{
						num++;
					}
				}
			}
			return num;
		}

		// Token: 0x170011F9 RID: 4601
		// (get) Token: 0x06007BA9 RID: 31657 RVA: 0x001CAA9E File Offset: 0x001C8C9E
		public virtual ulong TotalOutgoingBytes
		{
			get
			{
				return 0UL;
			}
		}

		// Token: 0x170011FA RID: 4602
		// (get) Token: 0x06007BAA RID: 31658 RVA: 0x001CAAA9 File Offset: 0x001C8CA9
		public virtual ulong TotalIngoingBytes
		{
			get
			{
				return 0UL;
			}
		}

		// Token: 0x06007BAB RID: 31659 RVA: 0x00469008 File Offset: 0x00467208
		public void OnSmokeGrenadesDeserialized(List<SmokeGrenadeDataPacketStruct> netGrenadeData)
		{
			foreach (SmokeGrenadeDataPacketStruct smokeGrenadeDataPacketStruct in netGrenadeData)
			{
				SmokeGrenade grenade = this.grenadeFactoryClass.CreateStillSmokeGrenade(smokeGrenadeDataPacketStruct.Id, smokeGrenadeDataPacketStruct.Template, smokeGrenadeDataPacketStruct.Position, smokeGrenadeDataPacketStruct.Orientation, (float)smokeGrenadeDataPacketStruct.Time, (smokeGrenadeDataPacketStruct.PlatformId > -1) ? this.Platforms[(int)smokeGrenadeDataPacketStruct.PlatformId] : null);
				this.RegisterGrenade(grenade);
			}
		}

		// Token: 0x06007BAC RID: 31660 RVA: 0x001CAAB4 File Offset: 0x001C8CB4
		public void method_13(WorldInteractiveObject door, EDoorState stateBefore, EDoorState stateAfter)
		{
			if (stateAfter != EDoorState.Interacting)
			{
				if (stateAfter != EDoorState.Breaching)
				{
					this.list_3.Remove(door);
					return;
				}
			}
			this.list_3.Add(door);
		}

		// Token: 0x06007BAD RID: 31661 RVA: 0x0046909C File Offset: 0x0046729C
		public int CanPlayerSeepThrough(Collider collider)
		{
			if (collider.gameObject.layer == LayerMaskClass.PlayerLayer)
			{
				using (List<IPlayer>.Enumerator enumerator = this.RegisteredPlayers.GetEnumerator())
				{
					while (enumerator.MoveNext())
					{
						if (enumerator.Current.CharacterController.GetCollider() == collider)
						{
							return 0;
						}
					}
					return -1;
				}
				int result;
				return result;
			}
			if (collider.gameObject.layer == LayerMaskClass.DoorLayer)
			{
				for (int i = 0; i < this.list_3.Count; i++)
				{
					if (this.list_3[i].Collider == collider)
					{
						return 1;
					}
				}
			}
			return -1;
		}

		// Token: 0x06007BAE RID: 31662 RVA: 0x00469158 File Offset: 0x00467358
		public void RegisterBorderZones()
		{
			this.BorderZones = LocationScene.GetAllObjects<BorderZone>(false).ToArray<BorderZone>();
			for (int i = 0; i < this.BorderZones.Length; i++)
			{
				this.BorderZones[i].Id = i;
			}
			this.World_0.SubscribeToBorderZones(this.BorderZones);
		}

		// Token: 0x06007BAF RID: 31663 RVA: 0x001CAADB File Offset: 0x001C8CDB
		public void RegisterRestrictableZones()
		{
			this.baseRestrictableZone_0 = LocationScene.GetAllObjects<BaseRestrictableZone>(false).ToArray<BaseRestrictableZone>();
		}

		// Token: 0x06007BB0 RID: 31664 RVA: 0x001CAAEE File Offset: 0x001C8CEE
		public virtual void OnGameStarted()
		{
			Action action = this.action_1;
			if (action == null)
			{
				return;
			}
			action();
		}

		// Token: 0x06007BB1 RID: 31665 RVA: 0x004691A8 File Offset: 0x004673A8
		public GameWorld()
		{
		}

		// Token: 0x06007BB2 RID: 31666 RVA: 0x001CAB00 File Offset: 0x001C8D00
		[CompilerGenerated]
		public static void smethod_1(Player player)
		{
			if (player.UpdateQueue == EUpdateQueue.Update)
			{
				player.FixedUpdateTick();
				return;
			}
			if (player.UpdateQueue == EUpdateQueue.FixedUpdate)
			{
				player.UpdateTick();
			}
		}

		// Token: 0x06007BB3 RID: 31667 RVA: 0x001CAB20 File Offset: 0x001C8D20
		[CompilerGenerated]
		public static void smethod_2(Player player)
		{
			if (player.UpdateQueue == EUpdateQueue.Update)
			{
				player.UpdateTick();
				return;
			}
			if (player.UpdateQueue == EUpdateQueue.FixedUpdate)
			{
				player.FixedUpdateTick();
			}
		}

		// Token: 0x06007BB4 RID: 31668 RVA: 0x001CAB40 File Offset: 0x001C8D40
		[CompilerGenerated]
		public static void smethod_3(Player player)
		{
			player.AfterMainTick();
		}

		// Token: 0x06007BB5 RID: 31669 RVA: 0x001CAB48 File Offset: 0x001C8D48
		[CompilerGenerated]
		public float method_14()
		{
			return this.DeltaTime;
		}

		// Token: 0x040067D4 RID: 26580
		[CompilerGenerated]
		private static Action action_0;

		// Token: 0x040067D5 RID: 26581
		[CompilerGenerated]
		private TransitControllerAbstractClass transitControllerAbstractClass;

		// Token: 0x040067D6 RID: 26582
		[CompilerGenerated]
		private RunddansControllerAbstractClass runddansControllerAbstractClass;

		// Token: 0x040067D7 RID: 26583
		[CompilerGenerated]
		private ExfiltrationControllerClass exfiltrationControllerClass;

		// Token: 0x040067D8 RID: 26584
		[CompilerGenerated]
		private BufferZoneControllerClass bufferZoneControllerClass;

		// Token: 0x040067D9 RID: 26585
		[CompilerGenerated]
		private HalloweenEventControllerClass halloweenEventControllerClass;

		// Token: 0x040067DA RID: 26586
		[CompilerGenerated]
		private GInterface29 ginterface29_0;

		// Token: 0x040067DB RID: 26587
		[CompilerGenerated]
		private BTRControllerClass bTRControllerClass;

		// Token: 0x040067DC RID: 26588
		[CompilerGenerated]
		private TriggersModule triggersModule_0;

		// Token: 0x040067DD RID: 26589
		[CompilerGenerated]
		private GClass3592 gclass3592_0;

		// Token: 0x040067DE RID: 26590
		[CompilerGenerated]
		private GClass702 gclass702_0;

		// Token: 0x040067DF RID: 26591
		public readonly GClass2272 TraderServicesHandler = new GClass2272();

		// Token: 0x040067E0 RID: 26592
		[CompilerGenerated]
		private ServerShellingControllerClass serverShellingControllerClass;

		// Token: 0x040067E1 RID: 26593
		[CompilerGenerated]
		private ClientShellingControllerClass clientShellingControllerClass;

		// Token: 0x040067E2 RID: 26594
		[CompilerGenerated]
		private ClientBroadcastSyncControllerClass clientBroadcastSyncControllerClass;

		// Token: 0x040067E3 RID: 26595
		[CompilerGenerated]
		private string string_0;

		// Token: 0x040067E4 RID: 26596
		public GameDateTime GameDateTime;

		// Token: 0x040067E5 RID: 26597
		public GameWorldUnityTickListener UnityTickListener;

		// Token: 0x040067E6 RID: 26598
		public bool SpeedLimitsEnabled;

		// Token: 0x040067E7 RID: 26599
		public GClass2175.Config SpeedLimits = GClass2175.DefaultSpeedLimits;

		// Token: 0x040067E8 RID: 26600
		public MongoID? CurrentProfileId;

		// Token: 0x040067E9 RID: 26601
		[CompilerGenerated]
		private Action action_1;

		// Token: 0x040067EA RID: 26602
		[CompilerGenerated]
		private Action<IPlayer> action_2;

		// Token: 0x040067EB RID: 26603
		[CompilerGenerated]
		private Action<float> action_3;

		// Token: 0x040067EC RID: 26604
		[CompilerGenerated]
		private Action<float> action_4;

		// Token: 0x040067ED RID: 26605
		private readonly GClass824 gclass824_0 = new GClass824();

		// Token: 0x040067EE RID: 26606
		public AudioSourceCulling AudioSourceCulling;

		// Token: 0x040067EF RID: 26607
		public GClass835<GClass3735> TrajectoryCalculatorPool = new GClass835<GClass3735>(40, new Func<GClass3735>(GameWorld.Class1111.class1111_0.method_7), new Action<GClass3735>(GameWorld.Class1111.class1111_0.method_8), null);

		// Token: 0x040067F0 RID: 26608
		[CompilerGenerated]
		private ISharedBallisticsCalculator iSharedBallisticsCalculator;

		// Token: 0x040067F1 RID: 26609
		private BallisticsCalculator ballisticsCalculator_0;

		// Token: 0x040067F2 RID: 26610
		public readonly List<IKillableLootItem> LootList = new List<IKillableLootItem>(1000);

		// Token: 0x040067F3 RID: 26611
		public readonly Dictionary<IItemOwner, GameWorld.GStruct162> ItemOwners = new Dictionary<IItemOwner, GameWorld.GStruct162>(100);

		// Token: 0x040067F4 RID: 26612
		public readonly GClass818<int, LootItem> LootItems = new GClass818<int, LootItem>(1000);

		// Token: 0x040067F5 RID: 26613
		public readonly Dictionary<int, ObservedCorpse> ObservedPlayersCorpses = new Dictionary<int, ObservedCorpse>(60);

		// Token: 0x040067F6 RID: 26614
		public readonly List<LootItemPositionClass> AllLoot = new List<LootItemPositionClass>();

		// Token: 0x040067F7 RID: 26615
		public readonly List<IPlayer> RegisteredPlayers = new List<IPlayer>(40);

		// Token: 0x040067F8 RID: 26616
		private readonly Dictionary<string, Player> dictionary_0 = new Dictionary<string, Player>();

		// Token: 0x040067F9 RID: 26617
		private readonly Dictionary<string, LampController> dictionary_1 = new Dictionary<string, LampController>();

		// Token: 0x040067FA RID: 26618
		private readonly Dictionary<ulong, ControlledLampGroup> dictionary_2 = new Dictionary<ulong, ControlledLampGroup>();

		// Token: 0x040067FB RID: 26619
		public readonly Dictionary<string, Player> allAlivePlayersByID = new Dictionary<string, Player>();

		// Token: 0x040067FC RID: 26620
		public readonly List<Player> AllAlivePlayersList = new List<Player>();

		// Token: 0x040067FD RID: 26621
		protected readonly Dictionary<string, IPlayerOwner> AllAlivePlayerBridges = new Dictionary<string, IPlayerOwner>();

		// Token: 0x040067FE RID: 26622
		protected readonly Dictionary<Collider, IPlayerOwner> AllAlivePlayerBridgesByCollider = new Dictionary<Collider, IPlayerOwner>();

		// Token: 0x040067FF RID: 26623
		protected readonly Dictionary<string, IPlayerOwner> AllPlayerBridgesEverExisted = new Dictionary<string, IPlayerOwner>();

		// Token: 0x04006800 RID: 26624
		public Dictionary<string, ObservedPlayerView> allObservedPlayersByID = new Dictionary<string, ObservedPlayerView>();

		// Token: 0x04006801 RID: 26625
		public MovingPlatform.GClass3596[] PlatformAdapters = Array.Empty<MovingPlatform.GClass3596>();

		// Token: 0x04006802 RID: 26626
		public BorderZone[] BorderZones;

		// Token: 0x04006803 RID: 26627
		private MovingPlatform[] movingPlatform_0;

		// Token: 0x04006804 RID: 26628
		public Player MainPlayer;

		// Token: 0x04006805 RID: 26629
		protected readonly CompositeDisposableClass CompositeDisposable = new CompositeDisposableClass();

		// Token: 0x04006806 RID: 26630
		[CompilerGenerated]
		private readonly Dictionary<Collider, IPlayer> dictionary_3;

		// Token: 0x04006807 RID: 26631
		private readonly List<AmmoPoolObject> list_0 = new List<AmmoPoolObject>(100);

		// Token: 0x04006808 RID: 26632
		private readonly List<LootItemPositionClass> list_1 = new List<LootItemPositionClass>();

		// Token: 0x04006809 RID: 26633
		protected static int _interactiveLootMask;

		// Token: 0x0400680A RID: 26634
		private static int int_0;

		// Token: 0x0400680B RID: 26635
		private static int int_1;

		// Token: 0x0400680C RID: 26636
		private static int int_2;

		// Token: 0x0400680D RID: 26637
		public SpeakerManager SpeakerManager;

		// Token: 0x0400680E RID: 26638
		private static int int_3;

		// Token: 0x0400680F RID: 26639
		private EUpdateQueue eupdateQueue_0;

		// Token: 0x04006810 RID: 26640
		[CompilerGenerated]
		private SyncObjectProcessorClass syncObjectProcessorClass;

		// Token: 0x04006811 RID: 26641
		public GClass705 MineManager;

		// Token: 0x04006812 RID: 26642
		[CompilerGenerated]
		private Action<IKillableLootItem> action_5;

		// Token: 0x04006813 RID: 26643
		protected readonly Dictionary<int, Turnable> Turnables = new Dictionary<int, Turnable>(512);

		// Token: 0x04006814 RID: 26644
		public readonly GClass818<int, WindowBreaker> Windows = new GClass818<int, WindowBreaker>(512);

		// Token: 0x04006815 RID: 26645
		public readonly GClass818<int, Throwable> Grenades = new GClass818<int, Throwable>(0);

		// Token: 0x04006816 RID: 26646
		public List<GrenadeDataPacketStruct> GrenadesCriticalStates = new List<GrenadeDataPacketStruct>();

		// Token: 0x04006817 RID: 26647
		public List<ArtilleryPacketStruct> ArtilleryProjectilesStates = new List<ArtilleryPacketStruct>();

		// Token: 0x04006818 RID: 26648
		private GrenadeFactoryClass grenadeFactoryClass;

		// Token: 0x04006819 RID: 26649
		private bool bool_0;

		// Token: 0x0400681A RID: 26650
		private DependencyGraphClass<IEasyBundle>.GClass1661 gclass1661_0;

		// Token: 0x0400681B RID: 26651
		public BotEventHandler.GDelegate15 OnThrowItem;

		// Token: 0x0400681C RID: 26652
		public BotEventHandler.GDelegate16 OnTakeItem;

		// Token: 0x0400681D RID: 26653
		private readonly List<GameObject> list_2 = new List<GameObject>(100);

		// Token: 0x0400681E RID: 26654
		private BaseRestrictableZone[] baseRestrictableZone_0;

		// Token: 0x0400681F RID: 26655
		protected EffectsCommutator _effectsCommutator;

		// Token: 0x04006820 RID: 26656
		private BallisticCollider ballisticCollider_0;

		// Token: 0x04006821 RID: 26657
		internal World world_0;

		// Token: 0x04006822 RID: 26658
		private World world_1;

		// Token: 0x04006823 RID: 26659
		protected PoolManagerClass ObjectsFactory;

		// Token: 0x04006824 RID: 26660
		private List<WorldInteractiveObject> list_3 = new List<WorldInteractiveObject>();

		// Token: 0x020028A0 RID: 10400
		public struct GStruct162
		{
			// Token: 0x0400E92F RID: 59695
			public Transform Transform;

			// Token: 0x0400E930 RID: 59696
			public bool DoNotPerformPickUpValidation;

			// Token: 0x0400E931 RID: 59697
			public IItemOwner ItemOwner;
		}

		// Token: 0x020028A1 RID: 10401
		public class GClass1524 : Error
		{
			// Token: 0x060120C0 RID: 73920 RVA: 0x0023C2D2 File Offset: 0x0023A4D2
			public GClass1524(string itemOwnerId)
			{
				this.ItemOwnerId = itemOwnerId;
			}

			// Token: 0x060120C1 RID: 73921 RVA: 0x0023C2E1 File Offset: 0x0023A4E1
			public override string ToString()
			{
				return "Could not find item owner with id: " + this.ItemOwnerId;
			}

			// Token: 0x0400E932 RID: 59698
			public readonly string ItemOwnerId;
		}

		// Token: 0x020028A2 RID: 10402
		public class GClass1525 : Error
		{
			// Token: 0x060120C2 RID: 73922 RVA: 0x0023C2F3 File Offset: 0x0023A4F3
			public GClass1525(string parentId, string containerId)
			{
				this.String_0 = parentId;
				this.String_1 = containerId;
			}

			// Token: 0x060120C3 RID: 73923 RVA: 0x0023C309 File Offset: 0x0023A509
			public override string ToString()
			{
				return "Could not find item address with id. ParentId: " + this.String_0 + ", ContainerId: " + this.String_1;
			}

			// Token: 0x0400E933 RID: 59699
			[NonSerialized]
			public string String_0;

			// Token: 0x0400E934 RID: 59700
			[NonSerialized]
			public string String_1;
		}

		// Token: 0x020028A3 RID: 10403
		public class GClass1526 : Error
		{
			// Token: 0x060120C4 RID: 73924 RVA: 0x0023C326 File Offset: 0x0023A526
			public GClass1526(string itemId)
			{
				this.ItemId = itemId;
			}

			// Token: 0x060120C5 RID: 73925 RVA: 0x0023C335 File Offset: 0x0023A535
			public override string ToString()
			{
				return "Could not find item with id: " + this.ItemId;
			}

			// Token: 0x0400E935 RID: 59701
			public readonly string ItemId;
		}

		// Token: 0x020028A4 RID: 10404
		public class GClass1527 : Error
		{
			// Token: 0x060120C6 RID: 73926 RVA: 0x0023C347 File Offset: 0x0023A547
			public GClass1527(Item item, Vector3 playerPosition, Vector3 itemPosition)
			{
				this.Item = item;
				this.PlayerPosition = playerPosition;
				this.ItemPosition = itemPosition;
			}

			// Token: 0x060120C7 RID: 73927 RVA: 0x0023C364 File Offset: 0x0023A564
			public override string ToString()
			{
				return string.Format("{0} at {1} is too far away from {2}", this.Item, this.ItemPosition, this.PlayerPosition);
			}

			// Token: 0x0400E936 RID: 59702
			public readonly Item Item;

			// Token: 0x0400E937 RID: 59703
			public readonly Vector3 PlayerPosition;

			// Token: 0x0400E938 RID: 59704
			public readonly Vector3 ItemPosition;
		}

		// Token: 0x020028A5 RID: 10405
		public class GClass1528 : Error
		{
			// Token: 0x060120C8 RID: 73928 RVA: 0x0023C38C File Offset: 0x0023A58C
			public GClass1528(Player currentPlayer, Item item, [CanBeNull] Player fromPlayer, [CanBeNull] Player toPlayer)
			{
				this.Item = item;
				this.CurrentPlayer = currentPlayer;
				this.FromPlayer = fromPlayer;
				this.ToPlayer = toPlayer;
				this.KnownDirection = true;
			}

			// Token: 0x060120C9 RID: 73929 RVA: 0x0023C3B8 File Offset: 0x0023A5B8
			public GClass1528(Player currentPlayer, Player anotherPlayer, Item item)
			{
				this.Item = item;
				this.CurrentPlayer = currentPlayer;
				this.ToPlayer = anotherPlayer;
				this.KnownDirection = false;
			}

			// Token: 0x060120CA RID: 73930 RVA: 0x0067AC6C File Offset: 0x00678E6C
			public override string ToString()
			{
				if (!this.KnownDirection)
				{
					return string.Format("Player {0} attempts to manipulate with {1} in {2} inventory.", this.CurrentPlayer.FullIdInfo, this.Item, this.method_0(this.ToPlayer));
				}
				return string.Format("Player {0} transfers {1} from {2} to {3}.", new object[]
				{
					this.CurrentPlayer.FullIdInfo,
					this.Item,
					this.method_0(this.FromPlayer),
					this.method_0(this.ToPlayer)
				});
			}

			// Token: 0x060120CB RID: 73931 RVA: 0x0023C3DC File Offset: 0x0023A5DC
			[CompilerGenerated]
			public string method_0(Player player)
			{
				if (player == this.CurrentPlayer)
				{
					return "{SELF}";
				}
				if (!(player == null))
				{
					return "alive player " + player.FullIdInfo;
				}
				return "external container";
			}

			// Token: 0x0400E939 RID: 59705
			public readonly Item Item;

			// Token: 0x0400E93A RID: 59706
			public readonly Player CurrentPlayer;

			// Token: 0x0400E93B RID: 59707
			[CanBeNull]
			public readonly Player FromPlayer;

			// Token: 0x0400E93C RID: 59708
			[CanBeNull]
			public readonly Player ToPlayer;

			// Token: 0x0400E93D RID: 59709
			public readonly bool KnownDirection;
		}

		// Token: 0x020028A6 RID: 10406
		public class GClass1529 : Error
		{
			// Token: 0x060120CC RID: 73932 RVA: 0x0023C411 File Offset: 0x0023A611
			public GClass1529(Player player)
			{
				this.Player = player;
			}

			// Token: 0x060120CD RID: 73933 RVA: 0x0023C420 File Offset: 0x0023A620
			public override string ToString()
			{
				return "Player " + this.Player.FullIdInfo + " transfers his Equipment to another player.";
			}

			// Token: 0x0400E93E RID: 59710
			public readonly Player Player;
		}

		// Token: 0x020028A7 RID: 10407
		public class GClass1530 : Error
		{
			// Token: 0x060120CE RID: 73934 RVA: 0x0023C43C File Offset: 0x0023A63C
			public GClass1530(Player player)
			{
				this.Player = player;
			}

			// Token: 0x060120CF RID: 73935 RVA: 0x0023C44B File Offset: 0x0023A64B
			public override string ToString()
			{
				return "Player " + this.Player.FullIdInfo + " try to pick up OneOff break weapon.";
			}

			// Token: 0x0400E93F RID: 59711
			public readonly Player Player;
		}

		// Token: 0x020028A8 RID: 10408
		public class GClass1531 : Error
		{
			// Token: 0x060120D0 RID: 73936 RVA: 0x0023C467 File Offset: 0x0023A667
			public GClass1531(IItemOwner itemOwner, Item item, Vector3 ownerPosition, Vector3 itemPosition)
			{
				this.ItemOwner = itemOwner;
				this.Item = item;
				this.OwnerPosition = ownerPosition;
				this.ItemPosition = itemPosition;
			}

			// Token: 0x060120D1 RID: 73937 RVA: 0x0023C48C File Offset: 0x0023A68C
			public override string ToString()
			{
				return string.Format(" {0}  at {1} is too far away from {2} at {3}", new object[]
				{
					this.Item,
					this.ItemPosition,
					this.ItemOwner,
					this.OwnerPosition
				});
			}

			// Token: 0x0400E940 RID: 59712
			public readonly IItemOwner ItemOwner;

			// Token: 0x0400E941 RID: 59713
			public readonly Item Item;

			// Token: 0x0400E942 RID: 59714
			public readonly Vector3 OwnerPosition;

			// Token: 0x0400E943 RID: 59715
			public readonly Vector3 ItemPosition;
		}

		// Token: 0x020028A9 RID: 10409
		public class GClass1532 : Error
		{
			// Token: 0x060120D2 RID: 73938 RVA: 0x0023C4CC File Offset: 0x0023A6CC
			public GClass1532(IItemOwner itemOwner, Item item, Vector3 ownerPosition, Vector3 itemPosition, string colliderName)
			{
				this.ItemOwner = itemOwner;
				this.Item = item;
				this.OwnerPosition = ownerPosition;
				this.ItemPosition = itemPosition;
				this.ColliderName = colliderName;
			}

			// Token: 0x060120D3 RID: 73939 RVA: 0x0067ACF0 File Offset: 0x00678EF0
			public override string ToString()
			{
				return string.Format(" {0}  at {1} is blocked from {2} at {3} with {4}", new object[]
				{
					this.Item,
					this.ItemPosition,
					this.ItemOwner,
					this.OwnerPosition,
					this.ColliderName
				});
			}

			// Token: 0x0400E944 RID: 59716
			public readonly IItemOwner ItemOwner;

			// Token: 0x0400E945 RID: 59717
			public readonly Item Item;

			// Token: 0x0400E946 RID: 59718
			public readonly Vector3 OwnerPosition;

			// Token: 0x0400E947 RID: 59719
			public readonly Vector3 ItemPosition;

			// Token: 0x0400E948 RID: 59720
			public string ColliderName;
		}

		// Token: 0x020028AA RID: 10410
		public class GClass1533 : Error
		{
			// Token: 0x060120D4 RID: 73940 RVA: 0x0023C4F9 File Offset: 0x0023A6F9
			public GClass1533(IItemOwner itemOwner, Item item, Vector3 ownerPosition, Vector3 itemPosition)
			{
				this.ItemOwner = itemOwner;
				this.Item = item;
				this.OwnerPosition = ownerPosition;
				this.ItemPosition = itemPosition;
			}

			// Token: 0x060120D5 RID: 73941 RVA: 0x0023C51E File Offset: 0x0023A71E
			public override string ToString()
			{
				return string.Format(" {0}  at {1} cant find by {2} at {3}", new object[]
				{
					this.Item,
					this.ItemPosition,
					this.ItemOwner,
					this.OwnerPosition
				});
			}

			// Token: 0x0400E949 RID: 59721
			public readonly IItemOwner ItemOwner;

			// Token: 0x0400E94A RID: 59722
			public readonly Item Item;

			// Token: 0x0400E94B RID: 59723
			public readonly Vector3 OwnerPosition;

			// Token: 0x0400E94C RID: 59724
			public readonly Vector3 ItemPosition;
		}

		// Token: 0x020028AB RID: 10411
		public class GClass1534 : Error
		{
			// Token: 0x060120D6 RID: 73942 RVA: 0x0023C55E File Offset: 0x0023A75E
			public GClass1534(Item item)
			{
				this.Item = item;
			}

			// Token: 0x060120D7 RID: 73943 RVA: 0x0023C56D File Offset: 0x0023A76D
			public override string ToString()
			{
				string str = "Owner of ";
				Item item = this.Item;
				return str + ((item != null) ? item.ToString() : null) + " is null";
			}

			// Token: 0x0400E94D RID: 59725
			public readonly Item Item;
		}

		// Token: 0x020028AC RID: 10412
		[CompilerGenerated]
		[Serializable]
		public class Class1111
		{
			// Token: 0x060120DA RID: 73946 RVA: 0x0023C5A4 File Offset: 0x0023A7A4
			public bool method_0(IPlayer x)
			{
				return x.HealthController.IsAlive;
			}

			// Token: 0x060120DB RID: 73947 RVA: 0x0023C5B1 File Offset: 0x0023A7B1
			public ResourceKey method_1(string x)
			{
				return new ResourceKey
				{
					path = x
				};
			}

			// Token: 0x060120DC RID: 73948 RVA: 0x0023C5BF File Offset: 0x0023A7BF
			public bool method_2(GInterface30 x)
			{
				return x != null;
			}

			// Token: 0x060120DD RID: 73949 RVA: 0x0023C5C5 File Offset: 0x0023A7C5
			public string method_3(Transform x)
			{
				return x.name;
			}

			// Token: 0x060120DE RID: 73950 RVA: 0x0023C5CD File Offset: 0x0023A7CD
			public MongoID method_4(Item x)
			{
				return x.TemplateId;
			}

			// Token: 0x060120DF RID: 73951 RVA: 0x0023C5D5 File Offset: 0x0023A7D5
			public bool method_5(QuestClass quest)
			{
				return quest.QuestStatus == EQuestStatus.Started;
			}

			// Token: 0x060120E0 RID: 73952 RVA: 0x0023C5E0 File Offset: 0x0023A7E0
			public Item method_6([TupleElementNames(new string[]
			{
				"item",
				"data"
			})] ValueTuple<Item, GameWorld.GStruct162> e)
			{
				return e.Item1;
			}

			// Token: 0x060120E1 RID: 73953 RVA: 0x0023C5E8 File Offset: 0x0023A7E8
			public GClass3735 method_7()
			{
				return new GClass3735();
			}

			// Token: 0x060120E2 RID: 73954 RVA: 0x0023C5EF File Offset: 0x0023A7EF
			public void method_8(GClass3735 calculator)
			{
				calculator.ClearClass();
			}

			// Token: 0x0400E94E RID: 59726
			public static readonly GameWorld.Class1111 class1111_0 = new GameWorld.Class1111();

			// Token: 0x0400E94F RID: 59727
			public static Func<IPlayer, bool> func_0;

			// Token: 0x0400E950 RID: 59728
			public static Func<string, ResourceKey> func_1;

			// Token: 0x0400E951 RID: 59729
			public static Func<GInterface30, bool> func_2;

			// Token: 0x0400E952 RID: 59730
			public static Func<Transform, string> func_3;

			// Token: 0x0400E953 RID: 59731
			public static Func<Item, MongoID> func_4;

			// Token: 0x0400E954 RID: 59732
			public static Func<QuestClass, bool> func_5;

			// Token: 0x0400E955 RID: 59733
			[TupleElementNames(new string[]
			{
				"item",
				"data"
			})]
			public static Func<ValueTuple<Item, GameWorld.GStruct162>, Item> func_6;

			// Token: 0x0400E956 RID: 59734
			public static Func<GClass3735> func_7;

			// Token: 0x0400E957 RID: 59735
			public static Action<GClass3735> action_0;
		}

		// Token: 0x020028AD RID: 10413
		[CompilerGenerated]
		public class Class1112
		{
			// Token: 0x060120E4 RID: 73956 RVA: 0x0023C5FF File Offset: 0x0023A7FF
			public bool method_0(LootItem x)
			{
				return x.ItemId.Equals(this.id);
			}

			// Token: 0x0400E958 RID: 59736
			public string id;
		}

		// Token: 0x020028AE RID: 10414
		[CompilerGenerated]
		public class Class1113
		{
			// Token: 0x060120E6 RID: 73958 RVA: 0x0023C61A File Offset: 0x0023A81A
			public bool method_0(GInterface30 x)
			{
				return x.Id == this.lootId;
			}

			// Token: 0x0400E959 RID: 59737
			public string lootId;
		}

		// Token: 0x020028AF RID: 10415
		[CompilerGenerated]
		public class Class1114
		{
			// Token: 0x060120E8 RID: 73960 RVA: 0x0067AD44 File Offset: 0x00678F44
			public void method_0(LootableContainer container)
			{
				if (!container.GameObjectsToDestroy.IsNullOrEmpty<GameObject>())
				{
					using (List<GameObject>.Enumerator enumerator = container.GameObjectsToDestroy.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							GameObject gameObject = enumerator.Current;
							this.gameWorld_0.list_2.Add(gameObject);
							gameObject.SetActive(false);
						}
						return;
					}
				}
				Transform parent = container.transform.parent;
				this.gameWorld_0.list_2.Add(parent.gameObject);
				parent.gameObject.SetActive(false);
			}

			// Token: 0x060120E9 RID: 73961 RVA: 0x0023C635 File Offset: 0x0023A835
			public bool method_1(LootableContainer x)
			{
				return x.Id.Equals(this.id);
			}

			// Token: 0x0400E95A RID: 59738
			public GameWorld gameWorld_0;

			// Token: 0x0400E95B RID: 59739
			public string id;
		}

		// Token: 0x020028B0 RID: 10416
		[CompilerGenerated]
		public class Class1115
		{
			// Token: 0x060120EB RID: 73963 RVA: 0x0023C650 File Offset: 0x0023A850
			public bool method_0(LootItemPositionClass lootItem)
			{
				return lootItem.Id != this.staticLootSpawn.Id;
			}

			// Token: 0x0400E95C RID: 59740
			public GInterface30 staticLootSpawn;
		}

		// Token: 0x020028B1 RID: 10417
		[CompilerGenerated]
		public class Class1116
		{
			// Token: 0x060120ED RID: 73965 RVA: 0x0023C670 File Offset: 0x0023A870
			public bool method_0(StationaryWeapon x)
			{
				return x.Id == this.id;
			}

			// Token: 0x0400E95D RID: 59741
			public string id;
		}

		// Token: 0x020028B2 RID: 10418
		[CompilerGenerated]
		public class Class1117
		{
			// Token: 0x060120EF RID: 73967 RVA: 0x0023C68B File Offset: 0x0023A88B
			public bool method_0(StationaryWeapon x)
			{
				return x.Item.Id == this.itemId;
			}

			// Token: 0x0400E95E RID: 59742
			public string itemId;
		}

		// Token: 0x020028B3 RID: 10419
		[CompilerGenerated]
		public class Class1118
		{
			// Token: 0x060120F1 RID: 73969 RVA: 0x0023C6AB File Offset: 0x0023A8AB
			public bool method_0(KeyValuePair<IItemOwner, GameWorld.GStruct162> x)
			{
				return x.Key.ID == this.ownerId;
			}

			// Token: 0x0400E95F RID: 59743
			public string ownerId;
		}
	}
}


player类全部代码：
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using AnimationEventSystem;
using AnimationSystem.RootMotionTable;
using Audio.AmbientSubsystem;
using Audio.SpatialSystem;
using Bsg.GameSettings;
using Comfort.Common;
using CommonAssets.Scripts;
using CommonAssets.Scripts.Audio;
using Dissonance;
using Diz.Binding;
using Diz.LanguageExtensions;
using EFT.Animations;
using EFT.AssetsManager;
using EFT.Ballistics;
using EFT.CameraControl;
using EFT.Character.Data;
using EFT.ClientItems.ClientSpecItems;
using EFT.Communications;
using EFT.EnvironmentEffect;
using EFT.Game.Spawning;
using EFT.GameRandoms;
using EFT.HealthSystem;
using EFT.Interactive;
using EFT.Interactive.SecretExfiltrations;
using EFT.InventoryLogic;
using EFT.InventoryLogic.Operations;
using EFT.ItemInHandSubsystem;
using EFT.MovingPlatforms;
using EFT.PrefabSettings;
using EFT.RocketLauncher;
using EFT.SynchronizableObjects;
using EFT.UI;
using EFT.Vaulting;
using EFT.Vehicle;
using EFT.WeaponMounting;
using JetBrains.Annotations;
using JsonType;
using NLog;
using RootMotion.FinalIK;
using Systems.Effects;
using UnityEngine;
using UnityEngine.Audio;

namespace EFT
{
	// Token: 0x02001066 RID: 4198
	public class Player : MonoBehaviour, IPlayer, IOnItemAdded, GInterface179, IOnItemRemoved, IOnSetInHands, MovingPlatform.GInterface459, IDissonancePlayer
	{
		// Token: 0x060080BA RID: 32954 RVA: 0x001CDA02 File Offset: 0x001CBC02
		public static GStruct156<ItemAddress> ToItemAddress(GClass1950 descriptor)
		{
			return Singleton<GameWorld>.Instance.ToItemAddress(descriptor);
		}

		// Token: 0x060080BB RID: 32955 RVA: 0x0047A56C File Offset: 0x0047876C
		public virtual GStruct156<Item> FindItemById(MongoID itemId, bool checkDistance = true, bool checkOwnership = true)
		{
			GStruct156<ValueTuple<Item, GameWorld.GStruct162>> gstruct = this.GameWorld.FindItemWithWorldData(itemId);
			if (gstruct.Failed)
			{
				return gstruct.Error;
			}
			return gstruct.Value.Item1;
		}

		// Token: 0x140001B5 RID: 437
		// (add) Token: 0x060080BC RID: 32956 RVA: 0x0047A5B4 File Offset: 0x004787B4
		// (remove) Token: 0x060080BD RID: 32957 RVA: 0x0047A5EC File Offset: 0x004787EC
		public event Action<float, float, int> OnSpeedChangedEvent;

		// Token: 0x140001B6 RID: 438
		// (add) Token: 0x060080BE RID: 32958 RVA: 0x0047A624 File Offset: 0x00478824
		// (remove) Token: 0x060080BF RID: 32959 RVA: 0x0047A65C File Offset: 0x0047885C
		public event Action<SightComponent> OnSightChangedEvent;

		// Token: 0x140001B7 RID: 439
		// (add) Token: 0x060080C0 RID: 32960 RVA: 0x0047A694 File Offset: 0x00478894
		// (remove) Token: 0x060080C1 RID: 32961 RVA: 0x0047A6CC File Offset: 0x004788CC
		public event Action<bool> OnTacticalInteractionChanged;

		// Token: 0x140001B8 RID: 440
		// (add) Token: 0x060080C2 RID: 32962 RVA: 0x0047A704 File Offset: 0x00478904
		// (remove) Token: 0x060080C3 RID: 32963 RVA: 0x0047A73C File Offset: 0x0047893C
		public event Action<SightComponent, ESmoothScopeState> OnSmoothSightChange;

		// Token: 0x1700131A RID: 4890
		// (get) Token: 0x060080C4 RID: 32964 RVA: 0x001CDA0F File Offset: 0x001CBC0F
		public IAnimator BodyAnimatorCommon
		{
			get
			{
				return this.GetBodyAnimatorCommon();
			}
		}

		// Token: 0x060080C5 RID: 32965 RVA: 0x001CDA17 File Offset: 0x001CBC17
		public IAnimator GetBodyAnimatorCommon()
		{
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this.Spirit.IsActive)
			{
				return this.Spirit.BodyAnimatorWrapper;
			}
			return this._animators[0];
		}

		// Token: 0x1700131B RID: 4891
		// (get) Token: 0x060080C6 RID: 32966 RVA: 0x001CDA46 File Offset: 0x001CBC46
		public IAnimator ArmsAnimatorCommon
		{
			get
			{
				return this.GetArmsAnimatorCommon();
			}
		}

		// Token: 0x1700131C RID: 4892
		// (get) Token: 0x060080C7 RID: 32967 RVA: 0x001CDA4E File Offset: 0x001CBC4E
		public IAnimator UnderbarrelWeaponArmsAnimator
		{
			get
			{
				return this._underbarrelFastAnimator;
			}
		}

		// Token: 0x060080C8 RID: 32968 RVA: 0x001CDA56 File Offset: 0x001CBC56
		public IAnimator GetArmsAnimatorCommon()
		{
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this.Spirit.IsActive)
			{
				return this.Spirit.ArmsAnimator;
			}
			return this._animators[1];
		}

		// Token: 0x060080C9 RID: 32969 RVA: 0x001CDA85 File Offset: 0x001CBC85
		public void SetArmsAnimatorCommon(IAnimator animator)
		{
			this._animators[1] = animator;
		}

		// Token: 0x060080CA RID: 32970 RVA: 0x0047A774 File Offset: 0x00478974
		public RuntimeAnimatorController GetArmsAnimatorControllerCommon()
		{
			IAnimator armsAnimatorCommon = this.GetArmsAnimatorCommon();
			if (armsAnimatorCommon.runtimeAnimatorController is AnimatorOverrideController)
			{
				return ((AnimatorOverrideController)armsAnimatorCommon.runtimeAnimatorController).runtimeAnimatorController;
			}
			return armsAnimatorCommon.runtimeAnimatorController;
		}

		// Token: 0x1700131D RID: 4893
		// (get) Token: 0x060080CB RID: 32971 RVA: 0x001CDA90 File Offset: 0x001CBC90
		public ICharacterController CharacterController
		{
			get
			{
				return this.GetCharacterControllerCommon();
			}
		}

		// Token: 0x060080CC RID: 32972 RVA: 0x001CDA98 File Offset: 0x001CBC98
		public ICharacterController GetCharacterControllerCommon()
		{
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this.Spirit.IsActive)
			{
				return this.Spirit.CharacterController;
			}
			return this._characterController;
		}

		// Token: 0x060080CD RID: 32973 RVA: 0x001CDAC5 File Offset: 0x001CBCC5
		public TriggerColliderSearcher GetTriggerColliderSearcher()
		{
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this.Spirit.IsActive)
			{
				return this.Spirit.TriggerColliderSearcher;
			}
			return this._triggerColliderSearcher;
		}

		// Token: 0x1700131E RID: 4894
		// (get) Token: 0x060080CE RID: 32974 RVA: 0x001CDAF2 File Offset: 0x001CBCF2
		// (set) Token: 0x060080CF RID: 32975 RVA: 0x001CDAFA File Offset: 0x001CBCFA
		public MovementContext MovementContext { get; set; }

		// Token: 0x1700131F RID: 4895
		// (get) Token: 0x060080D0 RID: 32976 RVA: 0x001CDB03 File Offset: 0x001CBD03
		public bool IsResettingLook
		{
			get
			{
				return this._isResettingLook;
			}
		}

		// Token: 0x17001320 RID: 4896
		// (get) Token: 0x060080D1 RID: 32977 RVA: 0x001CDB0B File Offset: 0x001CBD0B
		public bool IsLooking
		{
			get
			{
				return this._isLooking;
			}
		}

		// Token: 0x17001321 RID: 4897
		// (get) Token: 0x060080D2 RID: 32978 RVA: 0x001CDB13 File Offset: 0x001CBD13
		public bool MouseLookControl
		{
			get
			{
				return this._mouseLookControl;
			}
		}

		// Token: 0x17001322 RID: 4898
		// (get) Token: 0x060080D3 RID: 32979 RVA: 0x001CDB1B File Offset: 0x001CBD1B
		public EPlayerPose Pose
		{
			get
			{
				if (this.IsInPronePose)
				{
					return EPlayerPose.Prone;
				}
				if (this.MovementContext.SmoothedPoseLevel >= 0.11f)
				{
					return EPlayerPose.Stand;
				}
				return EPlayerPose.Duck;
			}
		}

		// Token: 0x17001323 RID: 4899
		// (get) Token: 0x060080D4 RID: 32980 RVA: 0x001CDB3C File Offset: 0x001CBD3C
		public float PoseLevel
		{
			get
			{
				return this.MovementContext.PoseLevel;
			}
		}

		// Token: 0x17001324 RID: 4900
		// (get) Token: 0x060080D5 RID: 32981 RVA: 0x001CDB49 File Offset: 0x001CBD49
		public float Speed
		{
			get
			{
				return this.MovementContext.CharacterMovementSpeed;
			}
		}

		// Token: 0x17001325 RID: 4901
		// (get) Token: 0x060080D6 RID: 32982 RVA: 0x001CDB56 File Offset: 0x001CBD56
		// (set) Token: 0x060080D7 RID: 32983 RVA: 0x001CDB63 File Offset: 0x001CBD63
		public Vector2 Rotation
		{
			get
			{
				return this.MovementContext.Rotation;
			}
			set
			{
				this.MovementContext.Rotation = value;
			}
		}

		// Token: 0x17001326 RID: 4902
		// (get) Token: 0x060080D8 RID: 32984 RVA: 0x001CDB71 File Offset: 0x001CBD71
		public float Yaw
		{
			get
			{
				return this.MovementContext.Yaw;
			}
		}

		// Token: 0x17001327 RID: 4903
		// (get) Token: 0x060080D9 RID: 32985 RVA: 0x001CDB7E File Offset: 0x001CBD7E
		public bool IsInPronePose
		{
			get
			{
				return this.MovementContext.IsInPronePose;
			}
		}

		// Token: 0x17001328 RID: 4904
		// (get) Token: 0x060080DA RID: 32986 RVA: 0x001CDB8B File Offset: 0x001CBD8B
		public float Pitch
		{
			get
			{
				return this.MovementContext.Pitch;
			}
		}

		// Token: 0x17001329 RID: 4905
		// (get) Token: 0x060080DB RID: 32987 RVA: 0x001CDB98 File Offset: 0x001CBD98
		public Vector3 Velocity
		{
			get
			{
				return this.MovementContext.Velocity;
			}
		}

		// Token: 0x1700132A RID: 4906
		// (get) Token: 0x060080DC RID: 32988 RVA: 0x001CDBA5 File Offset: 0x001CBDA5
		public Vector3 Motion
		{
			get
			{
				return this.MovementContext.InputMotion;
			}
		}

		// Token: 0x060080DD RID: 32989 RVA: 0x001CDBB2 File Offset: 0x001CBDB2
		public void AddMouseSensitivityModifier(Player.EMouseSensitivityModifier type, float value)
		{
			this._mouseSensitivityModifiers[type] = value;
			this.method_0();
		}

		// Token: 0x060080DE RID: 32990 RVA: 0x001CDBC7 File Offset: 0x001CBDC7
		public void RemoveMouseSensitivityModifier(Player.EMouseSensitivityModifier type)
		{
			this._mouseSensitivityModifiers.Remove(type);
			this.method_0();
		}

		// Token: 0x060080DF RID: 32991 RVA: 0x0047A7AC File Offset: 0x004789AC
		public void method_0()
		{
			this._mouseSensitivityModifier = 0f;
			foreach (float num in this._mouseSensitivityModifiers.Values)
			{
				this._mouseSensitivityModifier += num;
			}
		}

		// Token: 0x060080E0 RID: 32992 RVA: 0x0047A818 File Offset: 0x00478A18
		public float GetRotationMultiplier()
		{
			if (!(this.HandsController != null) || !this.HandsController.IsAiming)
			{
				return this.GetSensitivity() * (1f + this._mouseSensitivityModifier);
			}
			if (this.HandsController.AimingSensitivity < 1E-45f)
			{
				return this.GetAimingSensitivity();
			}
			return this.HandsController.AimingSensitivity;
		}

		// Token: 0x060080E1 RID: 32993 RVA: 0x001CDBDC File Offset: 0x001CBDDC
		public float GetCharacterSpeedMultiplier()
		{
			return 1f;
		}

		// Token: 0x1700132B RID: 4907
		// (get) Token: 0x060080E2 RID: 32994 RVA: 0x001CDBE3 File Offset: 0x001CBDE3
		// (set) Token: 0x060080E3 RID: 32995 RVA: 0x001CDBEB File Offset: 0x001CBDEB
		public Vector2 RotationPitchLimit
		{
			get
			{
				return this._rotationPitchLimit;
			}
			set
			{
				this._targetRotationPitch = value;
			}
		}

		// Token: 0x1700132C RID: 4908
		// (get) Token: 0x060080E4 RID: 32996 RVA: 0x001CDBF4 File Offset: 0x001CBDF4
		// (set) Token: 0x060080E5 RID: 32997 RVA: 0x001CDBFC File Offset: 0x001CBDFC
		public Vector2 InputDirection { get; set; }

		// Token: 0x1700132D RID: 4909
		// (get) Token: 0x060080E6 RID: 32998 RVA: 0x001CDC05 File Offset: 0x001CBE05
		public BaseMovementState CurrentState
		{
			get
			{
				return this.MovementContext.CurrentState;
			}
		}

		// Token: 0x1700132E RID: 4910
		// (get) Token: 0x060080E7 RID: 32999 RVA: 0x001CDC12 File Offset: 0x001CBE12
		public MovementState CurrentManagedState
		{
			get
			{
				return (this.MovementContext.OverridenControlsState ?? this.MovementContext.CurrentState) as MovementState;
			}
		}

		// Token: 0x1700132F RID: 4911
		// (get) Token: 0x060080E8 RID: 33000 RVA: 0x001CDC33 File Offset: 0x001CBE33
		public int CurrentAnimatorStateIndex
		{
			get
			{
				return this.MovementContext.CurrentAnimatorStateIndex;
			}
		}

		// Token: 0x17001330 RID: 4912
		// (get) Token: 0x060080E9 RID: 33001 RVA: 0x001CDC40 File Offset: 0x001CBE40
		// (set) Token: 0x060080EA RID: 33002 RVA: 0x001CDC52 File Offset: 0x001CBE52
		public Vector3 Position
		{
			get
			{
				return this.PlayerBones.BodyTransform.position;
			}
			set
			{
				this.PlayerBones.BodyTransform.position = value;
			}
		}

		// Token: 0x060080EB RID: 33003 RVA: 0x001CDC65 File Offset: 0x001CBE65
		public void method_1()
		{
			this.CreateMovementContext();
			this.PoseMemo = this.MovementContext.PoseLevel;
			this._speedMemo = this.MovementContext.CharacterMovementSpeed;
		}

		// Token: 0x060080EC RID: 33004 RVA: 0x0047A884 File Offset: 0x00478A84
		public virtual void CreateMovementContext()
		{
			LayerMask movement_MASK = EFTHardSettings.Instance.MOVEMENT_MASK;
			this.MovementContext = MovementContext.Create(this, new Func<IAnimator>(this.GetBodyAnimatorCommon), new Func<ICharacterController>(this.GetCharacterControllerCommon), movement_MASK);
		}

		// Token: 0x17001331 RID: 4913
		// (get) Token: 0x060080ED RID: 33005 RVA: 0x001CDC8F File Offset: 0x001CBE8F
		public bool IsForwardInputDirection
		{
			get
			{
				return this.InputDirection.y > 0f;
			}
		}

		// Token: 0x17001332 RID: 4914
		// (get) Token: 0x060080EE RID: 33006 RVA: 0x001CDCA3 File Offset: 0x001CBEA3
		public bool IsSprintEnabled
		{
			get
			{
				return this.MovementContext.IsSprintEnabled;
			}
		}

		// Token: 0x060080EF RID: 33007 RVA: 0x001CDCB0 File Offset: 0x001CBEB0
		public bool method_2(float dir)
		{
			return (this.MovementContext.Tilt * dir).Positive();
		}

		// Token: 0x060080F0 RID: 33008 RVA: 0x0047A8C4 File Offset: 0x00478AC4
		public void method_3(float dir)
		{
			if (this._lastSlowLean)
			{
				return;
			}
			this.CurrentLeanType = Player.LeanType.NormalLean;
			this.MovementContext.SetBlindFire(0f);
			dir = (this.method_2(dir) ? 0f : (dir * 5f));
			this.CurrentManagedState.SetTilt(dir);
		}

		// Token: 0x060080F1 RID: 33009 RVA: 0x001CDCC4 File Offset: 0x001CBEC4
		public void method_4(float fromDir)
		{
			if (this._lastSlowLean)
			{
				return;
			}
			if (this.method_2(fromDir))
			{
				this.CurrentManagedState.SetTilt(0f);
			}
		}

		// Token: 0x060080F2 RID: 33010 RVA: 0x0047A918 File Offset: 0x00478B18
		public void SlowLean(float dir)
		{
			this._lastSlowLean = false;
			if (this.MovementContext.TiltDiff >= 1f)
			{
				return;
			}
			if (Mathf.Abs(dir) <= 0f)
			{
				return;
			}
			this.CurrentLeanType = Player.LeanType.SlowLean;
			dir *= 0.1f;
			this.CurrentManagedState.SetTilt(this.MovementContext.Tilt + dir);
			this._lastSlowLean = true;
		}

		// Token: 0x060080F3 RID: 33011 RVA: 0x001CDCE8 File Offset: 0x001CBEE8
		public void ToggleBlindFire(float blindFireValue)
		{
			if (this.MovementContext.LeftStanceEnabled && blindFireValue != 0f)
			{
				return;
			}
			MovementState currentManagedState = this.CurrentManagedState;
			if (currentManagedState == null)
			{
				return;
			}
			currentManagedState.BlindFire(Math.Sign(blindFireValue));
		}

		// Token: 0x060080F4 RID: 33012 RVA: 0x001CDD1E File Offset: 0x001CBF1E
		public void StopBlindFire()
		{
			MovementState currentManagedState = this.CurrentManagedState;
			if (currentManagedState == null)
			{
				return;
			}
			currentManagedState.BlindFire(0);
		}

		// Token: 0x060080F5 RID: 33013 RVA: 0x001CDD31 File Offset: 0x001CBF31
		public void ToggleStep(int direction)
		{
			if (this.MovementContext.Step != direction)
			{
				this.CurrentManagedState.SetStep(direction);
				return;
			}
			this.ReturnFromStep(direction);
		}

		// Token: 0x060080F6 RID: 33014 RVA: 0x001CDD55 File Offset: 0x001CBF55
		public void ReturnFromStep(int direction)
		{
			if (this.MovementContext.Step == direction)
			{
				this.CurrentManagedState.SetStep(0);
			}
		}

		// Token: 0x060080F7 RID: 33015 RVA: 0x001CDD71 File Offset: 0x001CBF71
		public void method_5(float fallHeight, float jumpHeight)
		{
			this.LandingAdjustments(fallHeight);
			this.PlayGroundedSound(fallHeight, jumpHeight);
		}

		// Token: 0x17001333 RID: 4915
		// (get) Token: 0x060080F8 RID: 33016 RVA: 0x001CDD82 File Offset: 0x001CBF82
		public EFTHardSettings EFTHardSettings_0
		{
			get
			{
				return EFTHardSettings.Instance;
			}
		}

		// Token: 0x060080F9 RID: 33017 RVA: 0x0047A980 File Offset: 0x00478B80
		public virtual void LandingAdjustments(float d)
		{
			if (d < Singleton<BackendConfigSettingsClass>.Instance.Inertia.FallThreshold)
			{
				return;
			}
			float num = EFTHardSettings.Instance.SpeedLimitDuration.Evaluate(d);
			if (num < 1E-45f)
			{
				return;
			}
			float num2 = this.EFTHardSettings_0.SpeedLimitAfterFall.Evaluate(d);
			if (num2 >= 1f)
			{
				return;
			}
			this.MovementContext.ChangeSpeedLimit(num2, Player.ESpeedLimit.Fall, num);
		}

		// Token: 0x060080FA RID: 33018 RVA: 0x001CDD89 File Offset: 0x001CBF89
		public virtual void Move(Vector2 direction)
		{
			this.CurrentManagedState.Move(direction);
			if (direction.sqrMagnitude >= 1E-45f)
			{
				this._lastMovement = Time.time;
			}
			this.InputDirection = direction;
		}

		// Token: 0x060080FB RID: 33019 RVA: 0x001CDDB7 File Offset: 0x001CBFB7
		public void ChangePose(float poseDelta)
		{
			this.CurrentManagedState.ChangePose(poseDelta);
			this.PoseMemo = this.PoseLevel;
			if (poseDelta != 0f)
			{
				this._lastMovement = Time.time;
			}
		}

		// Token: 0x060080FC RID: 33020 RVA: 0x0047A9E4 File Offset: 0x00478BE4
		public void method_6()
		{
			if (!this.IsInPronePose && this.PoseLevel < 0.5f)
			{
				float num = (this.PoseMemo < 0.5f) ? 1f : this.PoseMemo;
				this.CurrentManagedState.ChangePose(num - this.PoseLevel);
				return;
			}
		}

		// Token: 0x060080FD RID: 33021 RVA: 0x0047AA38 File Offset: 0x00478C38
		public void method_7()
		{
			float num = (Math.Abs(this.PoseMemo - this.PoseLevel) < 1E-06f) ? ((this.PoseLevel >= 0.5f) ? 0f : 1f) : this.PoseMemo;
			if (this.IsInPronePose)
			{
				num = this.PoseLevel;
			}
			this.CurrentManagedState.ChangePose(num - this.PoseLevel);
		}

		// Token: 0x060080FE RID: 33022 RVA: 0x001CDDE4 File Offset: 0x001CBFE4
		public void ChangeSpeed(float speedDelta)
		{
			this.CurrentManagedState.ChangeSpeed(speedDelta);
		}

		// Token: 0x060080FF RID: 33023 RVA: 0x0047AAA4 File Offset: 0x00478CA4
		public void RaiseChangeSpeedEvent()
		{
			Action<float, float, int> onSpeedChangedEvent = this.OnSpeedChangedEvent;
			if (onSpeedChangedEvent == null)
			{
				return;
			}
			onSpeedChangedEvent(this.Physical.Sprinting ? this.MovementContext.CharacterMovementSpeed : this.MovementContext.ClampedSpeed, this.MovementContext.MaxSpeed, this.MovementContext.CovertNoiseLevel);
		}

		// Token: 0x06008100 RID: 33024 RVA: 0x001CDDF2 File Offset: 0x001CBFF2
		public void RaiseSightChangedEvent(SightComponent sightComp)
		{
			Action<SightComponent> onSightChangedEvent = this.OnSightChangedEvent;
			if (onSightChangedEvent == null)
			{
				return;
			}
			onSightChangedEvent(sightComp);
		}

		// Token: 0x06008101 RID: 33025 RVA: 0x001CDE05 File Offset: 0x001CC005
		public void RaiseTacticalInteractionChangedEvent(bool isPress)
		{
			Action<bool> onTacticalInteractionChanged = this.OnTacticalInteractionChanged;
			if (onTacticalInteractionChanged == null)
			{
				return;
			}
			onTacticalInteractionChanged(isPress);
		}

		// Token: 0x06008102 RID: 33026 RVA: 0x001CDE18 File Offset: 0x001CC018
		public void RaiseSmoothSightChangeEvent(SightComponent sightComp, ESmoothScopeState state)
		{
			Action<SightComponent, ESmoothScopeState> onSmoothSightChange = this.OnSmoothSightChange;
			if (onSmoothSightChange == null)
			{
				return;
			}
			onSmoothSightChange(sightComp, state);
		}

		// Token: 0x06008103 RID: 33027 RVA: 0x001CDE2C File Offset: 0x001CC02C
		public virtual void AddStateSpeedLimit(float speedDelta, Player.ESpeedLimit cause)
		{
			MovementContext movementContext = this.MovementContext;
			if (movementContext == null)
			{
				return;
			}
			movementContext.AddStateSpeedLimit(speedDelta, cause);
		}

		// Token: 0x06008104 RID: 33028 RVA: 0x001CDE40 File Offset: 0x001CC040
		public virtual void UpdateSpeedLimit(float speedDelta, Player.ESpeedLimit cause)
		{
			MovementContext movementContext = this.MovementContext;
			if (movementContext == null)
			{
				return;
			}
			movementContext.ChangeSpeedLimit(speedDelta, cause);
		}

		// Token: 0x06008105 RID: 33029 RVA: 0x001CDE54 File Offset: 0x001CC054
		public virtual void UpdateSpeedLimit(float speedDelta, Player.ESpeedLimit cause, float duration)
		{
			MovementContext movementContext = this.MovementContext;
			if (movementContext == null)
			{
				return;
			}
			movementContext.ChangeSpeedLimit(speedDelta, cause, duration);
		}

		// Token: 0x06008106 RID: 33030 RVA: 0x001CDE69 File Offset: 0x001CC069
		public virtual void RemoveStateSpeedLimit(Player.ESpeedLimit cause)
		{
			this.MovementContext.RemoveStateSpeedLimit(cause);
		}

		// Token: 0x06008107 RID: 33031 RVA: 0x001CDE77 File Offset: 0x001CC077
		public void method_8()
		{
			if (!this.MovementContext.ClampedSpeed.Positive())
			{
				this.ChangeSpeed(this._speedMemo - this.MovementContext.CharacterMovementSpeed);
			}
		}

		// Token: 0x06008108 RID: 33032 RVA: 0x001CDEA3 File Offset: 0x001CC0A3
		public void method_9()
		{
			if (this.MovementContext.ClampedSpeed.Positive())
			{
				this._speedMemo = this.MovementContext.CharacterMovementSpeed;
				this.ChangeSpeed(-this._speedMemo);
				return;
			}
			this.method_8();
		}

		// Token: 0x06008109 RID: 33033 RVA: 0x0047AAFC File Offset: 0x00478CFC
		public virtual void Rotate(Vector2 deltaRotation, bool ignoreClamp = false)
		{
			if (!deltaRotation.IsAnyComponentInfinity() && !deltaRotation.IsAnyComponentNaN())
			{
				this.CurrentManagedState.Rotate(deltaRotation, ignoreClamp);
				if (deltaRotation.sqrMagnitude >= 1E-45f)
				{
					this._lastMovement = Time.time;
				}
				return;
			}
			UnityEngine.Debug.LogErrorFormat("Attemption to set wrong deltaRotation: {0}", new object[]
			{
				deltaRotation
			});
		}

		// Token: 0x17001334 RID: 4916
		// (get) Token: 0x0600810A RID: 33034 RVA: 0x001CDEDC File Offset: 0x001CC0DC
		public float MovementIdlingTime
		{
			get
			{
				return Time.time - this._lastMovement;
			}
		}

		// Token: 0x0600810B RID: 33035 RVA: 0x0047AB5C File Offset: 0x00478D5C
		public virtual void Look(float deltaLookY, float deltaLookX, bool withReturn = true)
		{
			bool flag = this.HandsController != null && this.HandsController.IsAiming && !this.IsAI;
			EFTHardSettings instance = EFTHardSettings.Instance;
			Vector2 vector = instance.MOUSE_LOOK_HORIZONTAL_LIMIT;
			Vector2 mouse_LOOK_VERTICAL_LIMIT = instance.MOUSE_LOOK_VERTICAL_LIMIT;
			if (flag)
			{
				if (this._cachedMouseLookControl != this._mouseLookControl)
				{
					this._cachedMouseLookControl = this._mouseLookControl;
					int value = Singleton<SharedGameSettingsClass>.Instance.Game.Settings.FieldOfView.Value;
					float x = (!this._mouseLookControl) ? (this.ProceduralWeaponAnimation.CurrentScope.IsOptic ? 35f : ((float)value - 15f)) : ((float)value);
					CameraClass.Instance.SetFov(x, 1f, true);
				}
				vector *= instance.MOUSE_LOOK_LIMIT_IN_AIMING_COEF;
			}
			Vector3 eulerAngles = this.ProceduralWeaponAnimation.HandsContainer.CameraTransform.eulerAngles;
			if (eulerAngles.x >= 50f && eulerAngles.x <= 90f && this.MovementContext.IsSprintEnabled)
			{
				mouse_LOOK_VERTICAL_LIMIT.y = 0f;
			}
			this._horizontal = Mathf.Clamp(this._horizontal - deltaLookY, vector.x, vector.y);
			this._vertical = Mathf.Clamp(this._vertical + deltaLookX, mouse_LOOK_VERTICAL_LIMIT.x, mouse_LOOK_VERTICAL_LIMIT.y);
			float x2 = (this._vertical > 0f) ? (this._vertical * (1f - this._horizontal / vector.y * (this._horizontal / vector.y))) : this._vertical;
			if (this._setResetedLookNextFrame)
			{
				this._isResettingLook = false;
				this._setResetedLookNextFrame = false;
			}
			if (this._resetLook)
			{
				this._mouseLookControl = false;
				this._resetLook = false;
				this._isResettingLook = true;
				deltaLookY = 0f;
				deltaLookX = 0f;
			}
			if (Math.Abs(deltaLookY) >= 1E-45f && Math.Abs(deltaLookX) >= 1E-45f)
			{
				this._mouseLookControl = true;
			}
			if (!this._mouseLookControl && withReturn)
			{
				if (Mathf.Abs(this._horizontal) > 0.01f)
				{
					this._horizontal = Mathf.Lerp(this._horizontal, 0f, Time.deltaTime * 15f);
				}
				else
				{
					this._horizontal = 0f;
				}
				if (Mathf.Abs(this._vertical) > 0.01f)
				{
					this._vertical = Mathf.Lerp(this._vertical, 0f, Time.deltaTime * 15f);
				}
				else
				{
					this._vertical = 0f;
				}
			}
			if (!this._isResettingLook && this._horizontal != 0f && this._vertical != 0f)
			{
				this._isLooking = true;
			}
			else
			{
				this._isLooking = false;
			}
			if (this._horizontal == 0f && this._vertical == 0f)
			{
				this._setResetedLookNextFrame = true;
			}
			this.HeadRotation = new Vector3(x2, this._horizontal, 0f);
			this.ProceduralWeaponAnimation.SetHeadRotation(this.HeadRotation);
		}

		// Token: 0x0600810C RID: 33036 RVA: 0x001CDEEA File Offset: 0x001CC0EA
		public void ResetLookDirection()
		{
			this._resetLook = true;
		}

		// Token: 0x17001335 RID: 4917
		// (get) Token: 0x0600810D RID: 33037 RVA: 0x001CDEF3 File Offset: 0x001CC0F3
		public bool IsVaultingPressed
		{
			get
			{
				return this._isVaultingPressed;
			}
		}

		// Token: 0x0600810E RID: 33038 RVA: 0x001CDEFB File Offset: 0x001CC0FB
		public void Jump()
		{
			if (this._vaultingTiming > Singleton<BackendConfigSettingsClass>.Instance.VaultingSettings.VaultingInputTime)
			{
				return;
			}
			if (!this.MovementContext.PlayerAnimatorGetIsVaulting())
			{
				this.CurrentManagedState.Jump();
			}
		}

		// Token: 0x0600810F RID: 33039 RVA: 0x001CDF2D File Offset: 0x001CC12D
		public void Vaulting()
		{
			if (!this._isVaultingPressed)
			{
				this.method_10();
				return;
			}
			this.method_11();
		}

		// Token: 0x06008110 RID: 33040 RVA: 0x001CDF44 File Offset: 0x001CC144
		public void method_10()
		{
			this.OnStartInventoryOpen += this.method_11;
			this.UpdateEvent += this.method_12;
			this._isVaultingPressed = true;
		}

		// Token: 0x06008111 RID: 33041 RVA: 0x001CDF71 File Offset: 0x001CC171
		public void method_11()
		{
			this.OnStartInventoryOpen -= this.method_11;
			this.UpdateEvent -= this.method_12;
			this._vaultingTiming = 0f;
			this._isVaultingPressed = false;
		}

		// Token: 0x06008112 RID: 33042 RVA: 0x001CDFA9 File Offset: 0x001CC1A9
		public void method_12()
		{
			this.CurrentManagedState.Vaulting();
			this._vaultingTiming += Time.deltaTime;
		}

		// Token: 0x06008113 RID: 33043 RVA: 0x001CDFC8 File Offset: 0x001CC1C8
		public void EnableSprint(bool enable)
		{
			if (this.CurrentManagedState == null)
			{
				return;
			}
			this.CurrentManagedState.EnableSprint(enable, false);
		}

		// Token: 0x06008114 RID: 33044 RVA: 0x0047AE68 File Offset: 0x00479068
		public void ToggleSprint()
		{
			bool enable = !this.Physical.Sprinting;
			this.CurrentManagedState.EnableSprint(enable, true);
		}

		// Token: 0x06008115 RID: 33045 RVA: 0x001CDFE0 File Offset: 0x001CC1E0
		public void ToggleHoldingBreath()
		{
			this.CurrentManagedState.EnableBreath(!this.Physical.HoldingBreath);
		}

		// Token: 0x06008116 RID: 33046 RVA: 0x001CDFFB File Offset: 0x001CC1FB
		public void StopHoldingBreath()
		{
			if (this.Physical.HoldingBreath)
			{
				this.CurrentManagedState.EnableBreath(false);
			}
		}

		// Token: 0x06008117 RID: 33047 RVA: 0x001CE016 File Offset: 0x001CC216
		public void method_13(float deltaTime)
		{
			this.MovementContext.ManualUpdate(deltaTime);
		}

		// Token: 0x06008118 RID: 33048 RVA: 0x0047AE94 File Offset: 0x00479094
		public void HeightInterpolation(float timeDeltatime)
		{
			if (Mathf.Approximately(timeDeltatime, 0f))
			{
				return;
			}
			float num = this.IsInPronePose ? 0f : (this.Transform.position.y - this._prevHeight);
			float num2 = Mathf.SmoothDamp(this.PlayerBones.AnimatedTransform.localPosition.y - num, 0f, ref this._dampVelocity, this._currentSmoothSpeed, 1000000f, timeDeltatime);
			this.PlayerBones.AnimatedTransform.localPosition = new Vector3(this.PlayerBones.AnimatedTransform.localPosition.x, Mathf.Clamp(num2, -0.2f, 0.2f), this.PlayerBones.AnimatedTransform.localPosition.z);
			this._currentSmoothSpeed = Mathf.Lerp(this._currentSmoothSpeed, (Mathf.Abs(num2) > this._previousY) ? (this.HeightSmoothTime * 0.3f) : this.HeightSmoothTime, timeDeltatime);
			this._previousY = Mathf.Abs(num2);
		}

		// Token: 0x06008119 RID: 33049 RVA: 0x0047AF9C File Offset: 0x0047919C
		public void method_14()
		{
			if (!Mathf.Approximately(this.PlayerBones.AnimatedTransform.localPosition.y, 0f))
			{
				this.PlayerBones.AnimatedTransform.localPosition = new Vector3(this.PlayerBones.AnimatedTransform.localPosition.x, 0f, this.PlayerBones.AnimatedTransform.localPosition.z);
			}
			this._prevHeight = this.Transform.position.y;
			this._previousY = 0f;
		}

		// Token: 0x0600811A RID: 33050 RVA: 0x001CE024 File Offset: 0x001CC224
		public virtual void ToggleProne()
		{
			if (!this.MovementContext.IsAnimatorInteractionOn)
			{
				this.CurrentManagedState.Prone();
			}
		}

		// Token: 0x0600811B RID: 33051 RVA: 0x0047B030 File Offset: 0x00479230
		public void method_15()
		{
			CompoundItem compoundItem = this.InventoryController.Inventory.Equipment.GetSlot(EquipmentSlot.Headwear).ContainedItem as CompoundItem;
			if (compoundItem != null)
			{
				TogglableComponent togglableComponent = compoundItem.GetItemComponentsInChildren(true).FirstOrDefault<TogglableComponent>();
				if (togglableComponent != null)
				{
					this.InventoryController.TryRunNetworkTransaction(togglableComponent.Set(!togglableComponent.On, true, false), null);
				}
			}
		}

		// Token: 0x0600811C RID: 33052 RVA: 0x0047B098 File Offset: 0x00479298
		public virtual void vmethod_0(WorldInteractiveObject interactiveObject, InteractionResult interactionResult, Action callback)
		{
			EInteractionType interactionType = interactionResult.InteractionType;
			UnityEngine.Debug.LogFormat("<color=yellow>interact with door, interaction type '{0}'</color>", new object[]
			{
				interactionType
			});
			this.CurrentManagedState.StartDoorInteraction(interactiveObject, interactionResult, callback);
			this.UpdateInteractionCast();
		}

		// Token: 0x0600811D RID: 33053 RVA: 0x001CE03E File Offset: 0x001CC23E
		public virtual void vmethod_1(WorldInteractiveObject door, InteractionResult interactionResult)
		{
			if (door == null)
			{
				return;
			}
			this.CurrentManagedState.ExecuteDoorInteraction(door, interactionResult, null, this);
		}

		// Token: 0x0600811E RID: 33054 RVA: 0x001CE059 File Offset: 0x001CC259
		public virtual void vmethod_2(BTRSide btr, byte placeId, EInteractionType interaction)
		{
		}

		// Token: 0x0600811F RID: 33055 RVA: 0x001CE05B File Offset: 0x001CC25B
		public virtual void vmethod_3(TransitControllerAbstractClass controller, int transitPointId, string keyId, EDateTime time)
		{
		}

		// Token: 0x06008120 RID: 33056 RVA: 0x001CE05D File Offset: 0x001CC25D
		public virtual void vmethod_4(TripwireSynchronizableObject tripwire)
		{
		}

		// Token: 0x06008121 RID: 33057 RVA: 0x001CE05F File Offset: 0x001CC25F
		public virtual void vmethod_5(GClass2282 controller, int objectId, EventObject.EInteraction interaction)
		{
		}

		// Token: 0x06008122 RID: 33058 RVA: 0x001CE061 File Offset: 0x001CC261
		public virtual void vmethod_6(string itemId, string zoneId, bool successful)
		{
			this.PlantItem(itemId, zoneId, successful);
		}

		// Token: 0x06008123 RID: 33059 RVA: 0x001CE06C File Offset: 0x001CC26C
		public void PlantItem(string itemId, string zoneId, bool successful)
		{
			if (successful)
			{
				this.Profile.ItemDroppedAtPlace(itemId, zoneId);
			}
		}

		// Token: 0x06008124 RID: 33060 RVA: 0x001CE07E File Offset: 0x001CC27E
		public virtual void PlantItemLocalOnly(Item item, string zone)
		{
			this.PlantItem(item.TemplateId, zone, true);
		}

		// Token: 0x17001336 RID: 4918
		// (get) Token: 0x06008125 RID: 33061 RVA: 0x001CE093 File Offset: 0x001CC293
		public virtual bool OnHisWayToOperateStationaryWeapon
		{
			get
			{
				return false;
			}
		}

		// Token: 0x06008126 RID: 33062 RVA: 0x0047B0DC File Offset: 0x004792DC
		public virtual void OperateStationaryWeapon(StationaryWeapon stationaryWeapon, StationaryPacketStruct.EStationaryCommand command)
		{
			if (command == StationaryPacketStruct.EStationaryCommand.Occupy)
			{
				if (Vector3.Distance(this.Position, stationaryWeapon.transform.position) > 2f)
				{
					UnityEngine.Debug.LogErrorFormat(this.GetPlayer, "Player [{0}] in position {1} attempts to occupy stationary weapon [{2}:{3}] in position {4} (threshold 2 meters)", new object[]
					{
						this.GetPlayer.FullIdInfo,
						this.Position.ToString("F2"),
						stationaryWeapon.Item.ShortName,
						stationaryWeapon.Id,
						stationaryWeapon.transform.position
					});
				}
				if (stationaryWeapon.IsAvailable(this.ProfileId))
				{
					stationaryWeapon.SetOperator(this.ProfileId, false);
					this.method_126();
					this.MovementContext.StationaryWeapon = stationaryWeapon;
					this.MovementContext.InteractionParameters = stationaryWeapon.GetInteractionParameters();
					this.MovementContext.PlayerAnimatorSetApproached(false);
					this.MovementContext.PlayerAnimatorSetStationary(true);
					this.RemoveLeftHandItem(1f);
					this.MovementContext.PlayerAnimatorSetStationaryAnimation((int)stationaryWeapon.Animation);
					return;
				}
			}
			else if (command == StationaryPacketStruct.EStationaryCommand.Leave)
			{
				if (this.ActiveSlot != null && this.ActiveSlot.ContainedItem != null)
				{
					this.SetInHands(this.ActiveSlot.ContainedItem, new Callback<IHandsController>(Player.Class1318.class1318_0.method_0));
					return;
				}
				this.SetFirstAvailableItem(new Callback<IHandsController>(Player.Class1318.class1318_0.method_1));
				return;
			}
			else
			{
				this.MovementContext.PlayerAnimatorSetStationary(false);
				if (this.MovementContext.StationaryWeapon != null)
				{
					this.MovementContext.StationaryWeapon.Unlock(this.ProfileId);
				}
			}
		}

		// Token: 0x06008127 RID: 33063 RVA: 0x0047B28C File Offset: 0x0047948C
		public void FastForwardToStationaryWeapon(Item item, Vector2 stationaryRotation, Quaternion playerRotation, Quaternion stationaryPlayerRotation)
		{
			StationaryWeapon stationaryWeapon = this.GameWorld.FindStationaryWeaponByItemId(item.Id);
			if (stationaryWeapon == null)
			{
				return;
			}
			stationaryWeapon.SetOperator(this.ProfileId, false);
			this.MovementContext.StationaryWeapon = stationaryWeapon;
			this.Teleport(stationaryWeapon.GetInteractionParameters().InteractionPosition, false);
			bool enabled = this.BodyAnimatorCommon.enabled;
			bool keepAnimatorControllerStateOnDisable = this.BodyAnimatorCommon.keepAnimatorControllerStateOnDisable;
			this.BodyAnimatorCommon.keepAnimatorControllerStateOnDisable = true;
			this.BodyAnimatorCommon.enabled = false;
			this.MovementContext.PlayerAnimatorSetApproached(true);
			this.MovementContext.PlayerAnimatorSetStationary(true);
			this.MovementContext.PlayerAnimatorSetStationaryAnimation((int)stationaryWeapon.Animation);
			this.Transform.rotation = stationaryPlayerRotation;
			this.MovementContext.Rotation = stationaryRotation;
			this.MovementContext.UpdateStationaryDeltaAngle();
			for (int i = 0; i < 150; i++)
			{
				this.BodyAnimatorCommon.Update(0.01f);
			}
			this.BodyAnimatorCommon.enabled = enabled;
			this.BodyAnimatorCommon.keepAnimatorControllerStateOnDisable = keepAnimatorControllerStateOnDisable;
			this.Teleport(stationaryWeapon.GetInteractionParameters().InteractionPosition, false);
			if (stationaryWeapon.Animation == StationaryWeapon.EStationaryAnimationType.AGS_17)
			{
				Vector3 eulerAngles = playerRotation.eulerAngles;
				this.Transform.rotation = Quaternion.Euler(0f, eulerAngles.y, eulerAngles.z);
				return;
			}
			this.Transform.rotation = stationaryPlayerRotation;
		}

		// Token: 0x06008128 RID: 33064 RVA: 0x0047B3EC File Offset: 0x004795EC
		public void Crutch_FinalizeStationaryWeapState(StationaryPacketStruct swPacket)
		{
			if (this.MovementContext.CurrentState.Name == EPlayerState.Stationary && !swPacket.IsStationaryFinal)
			{
				this.MovementContext.PlayerAnimatorSetStationary(false);
				if (this.MovementContext.StationaryWeapon != null)
				{
					this.MovementContext.StationaryWeapon.Unlock(this.ProfileId);
				}
			}
		}

		// Token: 0x06008129 RID: 33065 RVA: 0x0047B44C File Offset: 0x0047964C
		public void TryMountWeapon()
		{
			if (this.HasFirearmInHands())
			{
				Player.FirearmController firearmController = this.HandsController as Player.FirearmController;
				if (firearmController != null)
				{
					if (!firearmController.Weapon.IsMountable || this.MovementContext.IsStationaryWeaponInHands || !this.MovementContext.IsGrounded || firearmController.IsInReloadOperation() || firearmController.IsInSpawnOperation() || firearmController.IsInInteraction() || firearmController.IsInRemoveOperation() || this.MovementContext.BlindFire != 0 || !this.MovementContext.IsGrounded)
					{
						return;
					}
					this._weaponMountingComponent.TryMountWeapon(firearmController);
					return;
				}
			}
		}

		// Token: 0x140001B9 RID: 441
		// (add) Token: 0x0600812A RID: 33066 RVA: 0x0047B4E8 File Offset: 0x004796E8
		// (remove) Token: 0x0600812B RID: 33067 RVA: 0x0047B520 File Offset: 0x00479720
		public event Player.GDelegate65 OnDamageReceived;

		// Token: 0x17001337 RID: 4919
		// (get) Token: 0x0600812C RID: 33068 RVA: 0x001CE096 File Offset: 0x001CC296
		public bool OnScreen
		{
			get
			{
				return this._playerBody.IsVisible();
			}
		}

		// Token: 0x17001338 RID: 4920
		// (get) Token: 0x0600812D RID: 33069 RVA: 0x001CE0A3 File Offset: 0x001CC2A3
		public PlayerBody PlayerBody
		{
			get
			{
				return this._playerBody;
			}
		}

		// Token: 0x17001339 RID: 4921
		// (get) Token: 0x0600812E RID: 33070 RVA: 0x001CE0AB File Offset: 0x001CC2AB
		public float HandsToBodyAngle
		{
			get
			{
				return this.MovementContext.HandsToBodyAngle;
			}
		}

		// Token: 0x1700133A RID: 4922
		// (get) Token: 0x0600812F RID: 33071 RVA: 0x001CE0B8 File Offset: 0x001CC2B8
		public Func<int> CompassValue
		{
			get
			{
				if (this._compassArrow != null)
				{
					return new Func<int>(this._compassArrow.PanelValue);
				}
				return null;
			}
		}

		// Token: 0x1700133B RID: 4923
		// (get) Token: 0x06008130 RID: 33072 RVA: 0x001CE0DB File Offset: 0x001CC2DB
		// (set) Token: 0x06008131 RID: 33073 RVA: 0x001CE0E3 File Offset: 0x001CC2E3
		public bool HasGamePlayerOwner { get; set; }

		// Token: 0x1700133C RID: 4924
		// (get) Token: 0x06008132 RID: 33074 RVA: 0x001CE0EC File Offset: 0x001CC2EC
		// (set) Token: 0x06008133 RID: 33075 RVA: 0x0047B558 File Offset: 0x00479758
		public virtual EPointOfView PointOfView
		{
			get
			{
				return this._playerBody.PointOfView.Value;
			}
			set
			{
				if (this._playerBody.PointOfView.Value == value && !this._pointOfViewUndecided)
				{
					return;
				}
				this._pointOfViewUndecided = false;
				this._playerBody.PointOfView.Value = value;
				this.CalculateScaleValueByFov((float)Singleton<SharedGameSettingsClass>.Instance.Game.Settings.FieldOfView);
				this.SetCompensationScale(false);
				if (value == EPointOfView.ThirdPerson)
				{
					this.PlayerBones.Ribcage.Original.localScale = new Vector3(1f, 1f, 1f);
				}
				this.MovementContext.PlayerAnimatorPointOfView(value);
				BindableEvent pointOfViewChanged = this.PointOfViewChanged;
				if (pointOfViewChanged != null)
				{
					pointOfViewChanged.Invoke();
				}
				this._playerBody.UpdatePlayerRenders(this._playerBody.PointOfView.Value, this.Side);
				this.ProceduralWeaponAnimation.PointOfView = value;
			}
		}

		// Token: 0x1700133D RID: 4925
		// (get) Token: 0x06008134 RID: 33076 RVA: 0x001CE0FE File Offset: 0x001CC2FE
		// (set) Token: 0x06008135 RID: 33077 RVA: 0x001CE106 File Offset: 0x001CC306
		public TripwireVisualPlacer TripwireVisualPlacer_0 { get; set; }

		// Token: 0x1700133E RID: 4926
		// (get) Token: 0x06008136 RID: 33078 RVA: 0x001CE10F File Offset: 0x001CC30F
		public bool FirstPersonPointOfView
		{
			get
			{
				return this.PointOfView.IsFirstPerson();
			}
		}

		// Token: 0x1700133F RID: 4927
		// (get) Token: 0x06008137 RID: 33079 RVA: 0x001CE11C File Offset: 0x001CC31C
		// (set) Token: 0x06008138 RID: 33080 RVA: 0x001CE124 File Offset: 0x001CC324
		public bool UsedSimplifiedSkeleton { get; set; }

		// Token: 0x17001340 RID: 4928
		// (get) Token: 0x06008139 RID: 33081 RVA: 0x001CE12D File Offset: 0x001CC32D
		public BindableEvent PointOfViewChanged { get; } = new BindableEvent();

		// Token: 0x140001BA RID: 442
		// (add) Token: 0x0600813A RID: 33082 RVA: 0x0047B638 File Offset: 0x00479838
		// (remove) Token: 0x0600813B RID: 33083 RVA: 0x0047B670 File Offset: 0x00479870
		public event Action<DamageInfoStruct, EBodyPart, float> BeingHitAction;

		// Token: 0x140001BB RID: 443
		// (add) Token: 0x0600813C RID: 33084 RVA: 0x0047B6A8 File Offset: 0x004798A8
		// (remove) Token: 0x0600813D RID: 33085 RVA: 0x0047B6E0 File Offset: 0x004798E0
		public event Action<bool> OnPropVisibility;

		// Token: 0x140001BC RID: 444
		// (add) Token: 0x0600813E RID: 33086 RVA: 0x0047B718 File Offset: 0x00479918
		// (remove) Token: 0x0600813F RID: 33087 RVA: 0x0047B750 File Offset: 0x00479950
		public event Action<string> OnShowAmmoCountZeroingPanel;

		// Token: 0x140001BD RID: 445
		// (add) Token: 0x06008140 RID: 33088 RVA: 0x0047B788 File Offset: 0x00479988
		// (remove) Token: 0x06008141 RID: 33089 RVA: 0x0047B7C0 File Offset: 0x004799C0
		public event Action<Weapon.EFireMode> OnShowFireMode;

		// Token: 0x140001BE RID: 446
		// (add) Token: 0x06008142 RID: 33090 RVA: 0x0047B7F8 File Offset: 0x004799F8
		// (remove) Token: 0x06008143 RID: 33091 RVA: 0x0047B830 File Offset: 0x00479A30
		public event Action<int, int, int, string, bool> OnShowAmmoDetails;

		// Token: 0x17001341 RID: 4929
		// (get) Token: 0x06008144 RID: 33092 RVA: 0x001CE135 File Offset: 0x001CC335
		// (set) Token: 0x06008145 RID: 33093 RVA: 0x001CE13D File Offset: 0x001CC33D
		public Vector3 BeaconPosition { get; set; }

		// Token: 0x17001342 RID: 4930
		// (get) Token: 0x06008146 RID: 33094 RVA: 0x001CE146 File Offset: 0x001CC346
		// (set) Token: 0x06008147 RID: 33095 RVA: 0x001CE14E File Offset: 0x001CC34E
		public Quaternion BeaconRotation { get; set; }

		// Token: 0x17001343 RID: 4931
		// (get) Token: 0x06008148 RID: 33096 RVA: 0x001CE157 File Offset: 0x001CC357
		public float ErgonomicsPenalty
		{
			get
			{
				return this._ergonomicsPenalty;
			}
		}

		// Token: 0x17001344 RID: 4932
		// (get) Token: 0x06008149 RID: 33097 RVA: 0x001CE15F File Offset: 0x001CC35F
		// (set) Token: 0x0600814A RID: 33098 RVA: 0x001CE167 File Offset: 0x001CC367
		public ObjectInHandsAnimator HandsAnimator
		{
			get
			{
				return this._handsAnimator;
			}
			set
			{
				this._handsAnimator = value;
			}
		}

		// Token: 0x17001345 RID: 4933
		// (get) Token: 0x0600814B RID: 33099 RVA: 0x001CE170 File Offset: 0x001CC370
		// (set) Token: 0x0600814C RID: 33100 RVA: 0x001CE178 File Offset: 0x001CC378
		public GameObject CameraContainer { get; set; }

		// Token: 0x17001346 RID: 4934
		// (get) Token: 0x0600814D RID: 33101 RVA: 0x001CE181 File Offset: 0x001CC381
		// (set) Token: 0x0600814E RID: 33102 RVA: 0x001CE189 File Offset: 0x001CC389
		public Transform CameraPosition { get; set; }

		// Token: 0x17001347 RID: 4935
		// (get) Token: 0x0600814F RID: 33103 RVA: 0x001CE192 File Offset: 0x001CC392
		// (set) Token: 0x06008150 RID: 33104 RVA: 0x001CE19A File Offset: 0x001CC39A
		public ProceduralWeaponAnimation ProceduralWeaponAnimation { get; set; }

		// Token: 0x17001348 RID: 4936
		// (get) Token: 0x06008151 RID: 33105 RVA: 0x001CE1A3 File Offset: 0x001CC3A3
		// (set) Token: 0x06008152 RID: 33106 RVA: 0x001CE1AB File Offset: 0x001CC3AB
		public bool AllowToPlantBeacon { get; set; }

		// Token: 0x17001349 RID: 4937
		// (get) Token: 0x06008153 RID: 33107 RVA: 0x001CE1B4 File Offset: 0x001CC3B4
		public Vector3 LookDirection
		{
			get
			{
				return this.MovementContext.LookDirection;
			}
		}

		// Token: 0x06008154 RID: 33108 RVA: 0x001CE1C1 File Offset: 0x001CC3C1
		public void SetRadioTransmitterView(RadioTransmitterView rtView)
		{
			this._radioTransmitterView = rtView;
		}

		// Token: 0x06008155 RID: 33109 RVA: 0x001CE1CA File Offset: 0x001CC3CA
		public void ReceiveDamage(float damage, EBodyPart part, EDamageType type, float absorbed, MaterialType special)
		{
			Player.GDelegate65 onDamageReceived = this.OnDamageReceived;
			if (onDamageReceived == null)
			{
				return;
			}
			onDamageReceived(damage, part, type, absorbed, special);
		}

		// Token: 0x06008156 RID: 33110 RVA: 0x001CE1E3 File Offset: 0x001CC3E3
		public void ShowAmmoCountZeroingPanel(string message)
		{
			Action<string> onShowAmmoCountZeroingPanel = this.OnShowAmmoCountZeroingPanel;
			if (onShowAmmoCountZeroingPanel == null)
			{
				return;
			}
			onShowAmmoCountZeroingPanel(message);
		}

		// Token: 0x06008157 RID: 33111 RVA: 0x0047B868 File Offset: 0x00479A68
		public void VisualPass()
		{
			if (this.CustomAnimationsAreProcessing)
			{
				return;
			}
			float num = 0f;
			if (!this.FirstPersonPointOfView)
			{
				num = CameraClass.Instance.Distance(this.Transform.position);
			}
			bool flag = this.FirstPersonPointOfView || (BackendConfigAbstractClass.Config.UseSpiritPlayer && !this.Spirit.IsActive) || (this.IsVisible && num <= EFTHardSettings.Instance.CULL_GROUNDER);
			if ((this._armsupdated || this.ArmsUpdateMode == Player.EUpdateMode.Auto) && flag && (this.EnabledAnimators & Player.EAnimatorMask.Procedural) != (Player.EAnimatorMask)0 && !this.UsedSimplifiedSkeleton)
			{
				this.ProceduralWeaponAnimation.ProcessEffectors((this._nFixedFrames > 0) ? this._fixedTime : this._armsTime, Mathf.Max(0, this._nFixedFrames), this.Motion, this.Velocity);
				this.PlayerBones.Offset = this.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.localPosition;
				this.PlayerBones.DeltaRotation = this.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.localRotation;
			}
			if (this._bodyupdated)
			{
				if (flag && !this.UsedSimplifiedSkeleton)
				{
					this.RestoreIKPos();
					this.HeightInterpolation(this._bodyTime);
					this.FBBIKUpdate(num);
					this.MouseLook(false);
					if ((this.EnabledAnimators & Player.EAnimatorMask.IK) != (Player.EAnimatorMask)0)
					{
						float num2 = this.FirstPersonPointOfView ? this.method_25(PlayerAnimator.FIRST_PERSON_CURVE_WEIGHT) : 1f;
						float positionCacheValue = this.method_25(PlayerAnimator.POSITION_CACHE_FOR_WEAPON_PROCEDURAL) * num2;
						float num3 = this.method_25(PlayerAnimator.LEFT_STANCE_CURVE);
						this.ProceduralWeaponAnimation.GetLeftStanceCurrentCurveValue(num3);
						this._firstPersonRightHand = 1f - this.method_25(PlayerAnimator.RIGHT_HAND_WEIGHT) * num2;
						this._firstPersonLeftHand = 1f - this.method_25(PlayerAnimator.LEFT_HAND_WEIGHT) * num2;
						this.ThirdPersonWeaponRootAuthority = (this.MovementContext.IsInMountedState ? 0f : (this.method_25(PlayerAnimator.WEAPON_ROOT_3RD) * num2));
						if (this.FirstPersonPointOfView)
						{
							this._smoothLW = ((this._smoothLW > this._firstPersonLeftHand) ? this._firstPersonLeftHand : Mathf.SmoothDamp(this._smoothLW, this._firstPersonLeftHand, ref this._shoulderVel, 0.2f));
							if (this.MovementContext.IsInMountedState && !this.IsInPronePose)
							{
								this.PlayerBones.SetShoulders(1f, 1f);
							}
							else
							{
								this.PlayerBones.SetShoulders(1f - this.method_25(PlayerAnimator.LEFT_SHOULDER_WEIGHT), 1f - this.method_25(PlayerAnimator.RIGHT_SHOULDER_WEIGHT));
							}
						}
						else
						{
							this.method_23(num);
						}
						if (this._armsupdated || this.ArmsUpdateMode == Player.EUpdateMode.Auto)
						{
							float thirdPersonAuthority = this.ThirdPersonWeaponRootAuthority;
							if (this.PointOfView == EPointOfView.ThirdPerson && this.MovementContext.StationaryWeapon != null)
							{
								thirdPersonAuthority = 0f;
							}
							bool inSprint = this.MovementContext.CurrentState.Name == EPlayerState.Sprint;
							bool lastAnimValue = this.MovementContext.LeftStanceController.LastAnimValue;
							bool leftStance = this.MovementContext.LeftStanceController.LeftStance;
							if (this.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying)
							{
								this.MovementContext.LeftStanceController.DisableLeftStanceAnimFromBodyAction();
							}
							if (this._isInteractionPlayeingLastFrame && !this.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying)
							{
								this.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromBodyAction(false);
							}
							this._isInteractionPlayeingLastFrame = this.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying;
							this.PlayerBones.ShiftWeaponRoot(this._bodyTime, this.PointOfView, thirdPersonAuthority, false, positionCacheValue, num3, inSprint, lastAnimValue, leftStance, this.ProceduralWeaponAnimation.IsAiming, this.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying, this._leftHandController.IsUsing);
						}
						this.PlayerBones.RotateHead(0f, this.ProceduralWeaponAnimation.GetHeadRotation(), this.MovementContext.LeftStanceEnabled && this.HasFirearmInHands(), num3, this.ProceduralWeaponAnimation.IsAiming);
						this.HandPosers[0].weight = this._firstPersonLeftHand;
						this._limbs[0].solver.IKRotationWeight = (this._limbs[0].solver.IKPositionWeight = this._firstPersonLeftHand);
						this._limbs[1].solver.IKRotationWeight = (this._limbs[1].solver.IKPositionWeight = this._firstPersonRightHand);
						this.method_20(num);
						this.method_24(num2);
						this.method_19(num);
						if (this._firstPersonRightHand < 1f)
						{
							this.PlayerBones.Kinematics(this._markers[1], this._firstPersonRightHand);
						}
					}
					float num4 = this.method_25(PlayerAnimator.AIMING_LAYER_CURVE);
					this.MovementContext.PlayerAnimator.Animator.SetLayerWeight(6, 1f - num4);
					this._prevHeight = this.Transform.position.y;
				}
				else
				{
					this.method_14();
					this.MouseLook(false);
				}
			}
			if (num > EFTHardSettings.Instance.AnimatorCullDistance)
			{
				this.BodyAnimatorCommon.cullingMode = AnimatorCullingMode.CullUpdateTransforms;
				this.ArmsAnimatorCommon.cullingMode = ((this._handsController is Player.EmptyHandsController || this._handsController is Player.KnifeController || this._handsController is Player.UsableItemController) ? AnimatorCullingMode.AlwaysAnimate : AnimatorCullingMode.CullUpdateTransforms);
			}
			else
			{
				this.BodyAnimatorCommon.cullingMode = AnimatorCullingMode.AlwaysAnimate;
				this.ArmsAnimatorCommon.cullingMode = AnimatorCullingMode.AlwaysAnimate;
			}
			if (this._armsupdated || this.ArmsUpdateMode == Player.EUpdateMode.Auto)
			{
				this.ProceduralWeaponAnimation.LateTransformations(Time.deltaTime);
				if (this.HandsController != null)
				{
					this.HandsController.ManualLateUpdate(Time.deltaTime);
				}
			}
			if (this.UsedSimplifiedSkeleton)
			{
				Transform child = this.PlayerBones.Weapon_Root_Anim.GetChild(0);
				child.localPosition = Vector3.zero;
				child.localRotation = Quaternion.identity;
			}
		}

		// Token: 0x06008158 RID: 33112 RVA: 0x0047BE5C File Offset: 0x0047A05C
		public virtual void LateUpdate()
		{
			MovementContext movementContext = this.MovementContext;
			if (movementContext != null)
			{
				movementContext.AnimatorStatesLateUpdate();
			}
			this.DistanceDirty = true;
			this.OcclusionDirty = true;
			if (this.HealthController != null && this.HealthController.IsAlive)
			{
				this.Physical.LateUpdate();
				this.VisualPass();
				this._armsupdated = false;
				this._bodyupdated = false;
				if (this._nFixedFrames > 0)
				{
					this._nFixedFrames = 0;
					this._fixedTime = 0f;
				}
				if (this._beaconDummy != null)
				{
					Vector3 forward = this._playerLookRaycastTransform.forward;
					RaycastHit raycastHit;
					if (Physics.Raycast(new Ray(this._playerLookRaycastTransform.position + forward / 2f, forward), out raycastHit, 1.5f, LayerMaskClass.HighPolyWithTerrainMask))
					{
						this._beaconDummy.transform.position = raycastHit.point;
						this._beaconDummy.transform.rotation = Quaternion.LookRotation(raycastHit.normal);
						this._beaconMaterialSetter.SetAvailable(this._beaconPlacer.Available);
						this.AllowToPlantBeacon = this._beaconPlacer.Available;
						if (this.AllowToPlantBeacon)
						{
							this.BeaconPosition = this._beaconDummy.transform.position;
							this.BeaconRotation = this._beaconDummy.transform.rotation;
						}
					}
					else
					{
						this._beaconDummy.transform.position = this._playerLookRaycastTransform.position + this._playerLookRaycastTransform.forward;
						this._beaconDummy.transform.rotation = Quaternion.identity;
						this._beaconMaterialSetter.SetAvailable(false);
						this.AllowToPlantBeacon = false;
					}
				}
				if (this.TripwireVisualPlacer_0 != null)
				{
					this.TripwireVisualPlacer_0.ProcessPlacement(this.InteractionRay, this.WeaponRoot.position);
				}
				this.ProceduralWeaponAnimation.StartFovCoroutine(this);
				this.PropUpdate();
			}
			this.ComplexLateUpdate(EUpdateQueue.Update, this.DeltaTime);
			if (this.POM != null && !this.IsAI)
			{
				this.POM.ExtrudeCamera();
			}
		}

		// Token: 0x06008159 RID: 33113 RVA: 0x0047C088 File Offset: 0x0047A288
		public void PropUpdate()
		{
			if (!this._propActive)
			{
				return;
			}
			if (this._hasAnimatorPropBones && this._propActive)
			{
				for (int i = 0; i < this._animatorPropTransforms.Length; i++)
				{
					this._propTransforms[i].SetPositionAndRotation(this._animatorPropTransforms[i].position, this._animatorPropTransforms[i].rotation);
				}
			}
			if (this._firstPersonLeftHand < 1f)
			{
				Quaternion rhs = Quaternion.Inverse(this._markers[0].rotation) * this._animatorPropTransforms[0].rotation;
				Vector3 position = this._markers[0].InverseTransformPoint(this._animatorPropTransforms[0].position);
				this._propTransforms[0].position = this.PlayerBones.LeftPalm.TransformPoint(position);
				this._propTransforms[0].rotation = this.PlayerBones.LeftPalm.rotation * rhs;
			}
		}

		// Token: 0x0600815A RID: 33114 RVA: 0x0047C17C File Offset: 0x0047A37C
		public void CalculateScaleValueByFov(float fov)
		{
			float t = Mathf.InverseLerp(50f, 75f, fov);
			this._ribcageScaleCompensated = Mathf.Lerp(1f, 0.65f, t);
		}

		// Token: 0x0600815B RID: 33115 RVA: 0x001CE1F6 File Offset: 0x001CC3F6
		public void RestoreRibcageScale()
		{
			this.RibcageScaleCurrentTarget = 1f;
		}

		// Token: 0x0600815C RID: 33116 RVA: 0x001CE203 File Offset: 0x001CC403
		public void SetCompensationScale(bool force = false)
		{
			this.RibcageScaleCurrentTarget = this._ribcageScaleCompensated;
			if (force)
			{
				this.RibcageScaleCurrent = this.RibcageScaleCurrentTarget;
				this.ProceduralWeaponAnimation.ResetFovAdjustments(this);
			}
			this.ProceduralWeaponAnimation.SetFovParams(this._ribcageScaleCompensated);
		}

		// Token: 0x0600815D RID: 33117 RVA: 0x0047C1B0 File Offset: 0x0047A3B0
		public void OnMakingShot([NotNull] IWeapon weapon, Vector3 force)
		{
			Player.Class1351 @class = new Player.Class1351();
			@class.player_0 = this;
			@class.weapon = weapon;
			this.ExecuteSkill(new Action(@class.method_0));
			this.IncreaseAwareness(15f);
			if (this.AIData != null)
			{
				Player.FirearmController firearmController = this.HandsController as Player.FirearmController;
				AISoundType spredPower = AISoundType.gun;
				if (firearmController != null && firearmController.IsSilenced)
				{
					spredPower = AISoundType.silencedGun;
				}
				this.AIData.TryPlayShootSound(this.GetPlayer, this.Position, spredPower);
				if (this.AIData.IsAI)
				{
					this.AIData.BotOwner.ShootData.ShootDoneWeapon();
				}
			}
			if (this.FirstPersonPointOfView && this.IsYourPlayer && GClass3692.IsReflexAvailable() && GClass3692.IsAutomaticReflexAnalyzerSupported())
			{
				CameraClass.Instance.ReflexController.DoReflexTriggerFlash();
			}
			if (this.FirstPersonPointOfView)
			{
				return;
			}
			this._turnOffFbbikAt = Time.time + this._fbbikCooldown;
			this._fbbik.solver.Quick = false;
			float d = Mathf.Sqrt(@class.weapon.TotalWeight) * @class.weapon.RecoilForceBack / 2400f;
			force *= d;
			foreach (HitReaction.HitPoint hitPoint in this.HitReaction.Recoil)
			{
				hitPoint.Hit(force, this.PlayerBones.WeaponRoot.position);
			}
		}

		// Token: 0x0600815E RID: 33118 RVA: 0x001CE23D File Offset: 0x001CC43D
		public IEnumerator HitDelay(Action callback)
		{
			Player.Class1360 @class = new Player.Class1360(0);
			@class.callback = callback;
			return @class;
		}

		// Token: 0x0600815F RID: 33119 RVA: 0x0047C334 File Offset: 0x0047A534
		public virtual void ShotReactions(DamageInfoStruct shot, EBodyPart bodyPart)
		{
			if (this.UsedSimplifiedSkeleton)
			{
				Vector3 normalized = shot.Direction.normalized;
				normalized.y = 0f;
				normalized = normalized.normalized;
				Vector3 vector = this.Transform.rotation * normalized;
				this.MovementContext.PlayerAnimator.SetHit((int)bodyPart, -vector.z, -vector.x);
			}
			else
			{
				Vector3 normalized2 = shot.Direction.normalized;
				if (this.PointOfView == EPointOfView.ThirdPerson)
				{
					this._turnOffFbbikAt = Time.time + this._fbbikCooldown;
					this._fbbik.solver.Quick = false;
					BodyPartCollider bodyPartCollider = shot.HittedBallisticCollider as BodyPartCollider;
					if (bodyPartCollider != null)
					{
						this.HitReaction.Hit(bodyPartCollider.BodyPartColliderType, bodyPartCollider.BodyPartType, normalized2, shot.HitPoint, false);
					}
				}
				KnifeItemClass knifeItemClass = shot.Weapon as KnifeItemClass;
				if (knifeItemClass != null)
				{
					KnifeComponent itemComponent = knifeItemClass.GetItemComponent<KnifeComponent>();
					Vector3 normalized3 = (shot.Player.iPlayer.Transform.position - this.Transform.position).normalized;
					Vector3 lhs = Vector3.Cross(normalized3, Vector3.up);
					float y = normalized2.y;
					float num = Vector3.Dot(lhs, normalized2);
					float num2 = 1f - Mathf.Abs(Vector3.Dot(normalized3, normalized2));
					num2 = ((bodyPart == EBodyPart.Head) ? num2 : Mathf.Sqrt(num2));
					this.Rotation += new Vector2(-num, -y).normalized * (itemComponent.Template.AppliedTrunkRotation.Random(false) * num2);
					this.ProceduralWeaponAnimation.ForceReact.AddForce(new Vector3(-y, num, 0f).normalized, num2, 1f, itemComponent.Template.AppliedHeadRotation.Random(false));
				}
			}
			if (Singleton<Effects>.Instantiated)
			{
				this._preAllocatedRenderersList.Clear();
				this._playerBody.GetBodyRenderersNonAlloc(this._preAllocatedRenderersList);
				Singleton<Effects>.Instance.EffectsCommutator.PlayerMeshesHit(this._preAllocatedRenderersList, shot.HitPoint, -shot.HitNormal);
			}
		}

		// Token: 0x06008160 RID: 33120 RVA: 0x0047C560 File Offset: 0x0047A760
		public void method_16(EPointOfView pointOfView)
		{
			this.MovementContext.OnStateChanged += this.method_17;
			this._ribcageChildRotations = new Quaternion[this.PlayerBones.FovSpecialTransforms.Length];
			this._limbs = this.PlayerBones.Ribcage.Original.GetComponentsInChildren<LimbIK>(true);
			this._limbs[0].enabled = false;
			this._limbs[1].enabled = false;
			this._twistBones = this.PlayerBones.Ribcage.Original.GetComponentsInChildren<TwistRelax>();
			this.HandPosers = this.PlayerBones.Ribcage.Original.GetComponentsInChildren<HandPoser>();
			this.method_18();
			this.PointOfView = pointOfView;
			this.ProceduralWeaponAnimation.PointOfView = pointOfView;
			this._fbbik.enabled = false;
			this._fbbik.solver.Quick = true;
			this.Grounder.ik = this._fbbik;
			this.Grounder.enabled = false;
			CameraClass.Instance.FoVUpdateAction += this.OnFovUpdatedEvent;
			this.OnFovUpdatedEvent((int)CameraClass.Instance.Fov);
			this.SubscribeVisualEvents();
		}

		// Token: 0x06008161 RID: 33121 RVA: 0x0047C68C File Offset: 0x0047A88C
		public void method_17(EPlayerState previousState, EPlayerState nextState)
		{
			if (!this._isGrenadeOrKnife || this.HandsAnimator == null)
			{
				return;
			}
			if (this.FirstPersonPointOfView)
			{
				this.HandsAnimator.SetPlayerState(ObjectInHandsAnimator.PlayerState.None);
				return;
			}
			switch (nextState)
			{
			case EPlayerState.ProneIdle:
			case EPlayerState.ProneMove:
				break;
			case EPlayerState.Run:
				goto IL_55;
			case EPlayerState.Sprint:
				this.HandsAnimator.SetPlayerState(ObjectInHandsAnimator.PlayerState.Sprint);
				return;
			case EPlayerState.Jump:
				this.HandsAnimator.SetPlayerState(ObjectInHandsAnimator.PlayerState.Jump);
				return;
			default:
				if (nextState != EPlayerState.Transit2Prone)
				{
					goto IL_55;
				}
				break;
			}
			this.HandsAnimator.SetPlayerState(ObjectInHandsAnimator.PlayerState.Prone);
			return;
			IL_55:
			this.HandsAnimator.SetPlayerState(ObjectInHandsAnimator.PlayerState.Idle);
		}

		// Token: 0x06008162 RID: 33122 RVA: 0x001CE24C File Offset: 0x001CC44C
		public virtual void OnFovUpdatedEvent(int fov)
		{
			if (!this.HealthController.IsAlive)
			{
				return;
			}
			this.CalculateScaleValueByFov((float)fov);
			this.SetCompensationScale(true);
		}

		// Token: 0x06008163 RID: 33123 RVA: 0x001CE26B File Offset: 0x001CC46B
		public virtual void OnHealthEffectVisualAdded(IEffect effect)
		{
			if (effect is GInterface340 && Singleton<Effects>.Instantiated)
			{
				Singleton<Effects>.Instance.EffectsCommutator.StartBleedingForPlayer(this);
			}
		}

		// Token: 0x06008164 RID: 33124 RVA: 0x001CE28C File Offset: 0x001CC48C
		public virtual void OnHealthEffectVisualRemoved(IEffect effect)
		{
			if (effect is GInterface340 && Singleton<Effects>.Instantiated)
			{
				Singleton<Effects>.Instance.EffectsCommutator.StopBleedingForPlayer(this);
			}
		}

		// Token: 0x06008165 RID: 33125 RVA: 0x001CE2AD File Offset: 0x001CC4AD
		public virtual void OnPlayerVisualDied(EDamageType damageType)
		{
			if (Singleton<Effects>.Instantiated)
			{
				Singleton<Effects>.Instance.EffectsCommutator.StopBleedingForPlayer(this);
			}
		}

		// Token: 0x06008166 RID: 33126 RVA: 0x0047C718 File Offset: 0x0047A918
		public void SubscribeVisualEvents()
		{
			this.HealthController.EffectStartedEvent += this.OnHealthEffectVisualAdded;
			this.HealthController.EffectResidualEvent += this.OnHealthEffectVisualRemoved;
			this.HealthController.DiedEvent += this.OnPlayerVisualDied;
		}

		// Token: 0x06008167 RID: 33127 RVA: 0x0047C770 File Offset: 0x0047A970
		public void UnsubscribeVisualEvents()
		{
			this.HealthController.EffectStartedEvent -= this.OnHealthEffectVisualAdded;
			this.HealthController.EffectResidualEvent -= this.OnHealthEffectVisualRemoved;
			this.HealthController.DiedEvent -= this.OnPlayerVisualDied;
		}

		// Token: 0x1700134A RID: 4938
		// (get) Token: 0x06008168 RID: 33128 RVA: 0x001CE2C6 File Offset: 0x001CC4C6
		public BifacialTransform WeaponRoot
		{
			get
			{
				return this.PlayerBones.WeaponRoot;
			}
		}

		// Token: 0x1700134B RID: 4939
		// (get) Token: 0x06008169 RID: 33129 RVA: 0x001CE2D3 File Offset: 0x001CC4D3
		public BifacialTransform Fireport
		{
			get
			{
				return this.PlayerBones.Fireport;
			}
		}

		// Token: 0x1700134C RID: 4940
		// (get) Token: 0x0600816A RID: 33130 RVA: 0x001CE2E0 File Offset: 0x001CC4E0
		public BifacialTransform[] MultiBarrelFireports
		{
			get
			{
				return this.PlayerBones.MultiBarrelsFireports;
			}
		}

		// Token: 0x1700134D RID: 4941
		// (get) Token: 0x0600816B RID: 33131 RVA: 0x001CE2ED File Offset: 0x001CC4ED
		public Quaternion TargetHandsRotation
		{
			get
			{
				return Quaternion.Euler(this.MovementContext.Pitch, this.MovementContext.Yaw, 0f);
			}
		}

		// Token: 0x1700134E RID: 4942
		// (get) Token: 0x0600816C RID: 33132 RVA: 0x0047C7C8 File Offset: 0x0047A9C8
		public Quaternion CurrentHandsRotaion
		{
			get
			{
				if ((this.FirstPersonPointOfView ? this.method_25(PlayerAnimator.FIRST_PERSON_CURVE_WEIGHT) : 1f) == 0f)
				{
					this._currentHandsRotation = Quaternion.Euler(Mathf.LerpAngle(this._currentHandsRotation.eulerAngles.x, this.TargetHandsRotation.eulerAngles.x, 0.9f), Mathf.LerpAngle(this._currentHandsRotation.eulerAngles.y, this.TargetHandsRotation.eulerAngles.y, 0.9f), 0f);
				}
				else
				{
					this._currentHandsRotation = Quaternion.Euler(Mathf.LerpAngle(this._currentHandsRotation.eulerAngles.x, this.TargetHandsRotation.eulerAngles.x, 0.3f), Mathf.LerpAngle(this._currentHandsRotation.eulerAngles.y, this.TargetHandsRotation.eulerAngles.y, 0.3f), 0f);
				}
				return this._currentHandsRotation;
			}
		}

		// Token: 0x1700134F RID: 4943
		// (get) Token: 0x0600816D RID: 33133 RVA: 0x001CE30F File Offset: 0x001CC50F
		public Quaternion HandsRotation
		{
			get
			{
				if (!this._customHandRotator.IsValid)
				{
					return Quaternion.Euler(this.MovementContext.Pitch, this.MovementContext.Yaw, 0f);
				}
				return this._customHandRotator.GetRotation();
			}
		}

		// Token: 0x0600816E RID: 33134 RVA: 0x001CE34A File Offset: 0x001CC54A
		public void SwitchHeadLightsAnimation()
		{
			if (this.StateIsSuitableForHandInput && !this.IsHeadLightsAnimationActive)
			{
				this.MovementContext.SetInteractInHands(EInteraction.HelmetRailGear);
			}
			this.IsHeadLightsAnimationActive = true;
			base.StartCoroutine(this.method_140());
		}

		// Token: 0x0600816F RID: 33135 RVA: 0x001CE37D File Offset: 0x001CC57D
		public virtual void MouseLook(bool forceApplyToOriginalRibcage = false)
		{
			if (!BackendConfigAbstractClass.Config.UseSpiritPlayer || !this.Spirit.IsActive || forceApplyToOriginalRibcage)
			{
				Action<Player> rotationAction = this.MovementContext.RotationAction;
				if (rotationAction == null)
				{
					return;
				}
				rotationAction(this);
			}
		}

		// Token: 0x06008170 RID: 33136 RVA: 0x0047C8D4 File Offset: 0x0047AAD4
		public void method_18()
		{
			this.CameraContainer = this.Transform.Original.FindTransform("CameraContainer").gameObject;
			this.CameraPosition = this.Transform.Original.FindTransform("Cam");
			this.ProceduralWeaponAnimation = this.PlayerBones.Ribcage.Original.GetComponent<ProceduralWeaponAnimation>();
			this.ProceduralWeaponAnimation.CameraContainer = this.CameraContainer;
			this.ProceduralWeaponAnimation.Walk.Speed = this.MovementContext.CharacterMovementSpeed;
			this.ProceduralWeaponAnimation.Breath.Physical = this.Physical;
			this.ProceduralWeaponAnimation.HandShakeEffector.Physical = this.Physical;
			this.ProceduralWeaponAnimation.OnPreCollision += this.IkStoreRaw;
			this.MovementContext.OnPoseChanged += this.method_141;
			this.OnHealthEffectRemoved(null);
		}

		// Token: 0x06008171 RID: 33137 RVA: 0x0047C9C4 File Offset: 0x0047ABC4
		public void UpdateLauncherBones(bool launcherEnable, WeaponPrefab weaponPrefab)
		{
			if (launcherEnable)
			{
				Transform transform = weaponPrefab.transform;
				Transform transform2 = this.PlayerBones.WeaponRoot.Original.GetComponentInChildren<AlternativePropBone>().transform;
				this.ProceduralWeaponAnimation.SetLauncherWeaponBone(weaponPrefab.transform, transform2);
				this.HandsController.HandsHierarchy.GatherUnderbarrelWeaponIK(transform, this._elbowBends);
				return;
			}
			this.UpdateBonesOnWeaponChange(this.HandsController.HandsHierarchy);
		}

		// Token: 0x06008172 RID: 33138 RVA: 0x0047CA34 File Offset: 0x0047AC34
		public void UpdateFirstPersonGrip(GripPose.EGripType type = GripPose.EGripType.Common, TransformLinks transforms = null)
		{
			Player.Class1352 @class = new Player.Class1352();
			@class.type = type;
			@class.player_0 = this;
			this.HandPosers[0].GripWeight = 0f;
			if (transforms != null)
			{
				this.HandPosers[0].MapGrip(transforms.GetTransform(ECharacterWeaponBones.HumanLPalm));
				this.HandPosers[1].MapGrip(transforms.GetTransform(ECharacterWeaponBones.HumanRPalm));
				Poser poser = this.HandPosers[0];
				Poser poser2 = this.HandPosers[1];
				float weight = 1f;
				float weight2 = 1f;
				poser2.weight = weight;
				poser.weight = weight2;
				this.ProceduralWeaponAnimation.HandsContainer.CameraAnimatedFP = transforms.GetTransform(ECharacterWeaponBones.Camera_animated);
			}
			else
			{
				Poser poser3 = this.HandPosers[0];
				Poser poser4 = this.HandPosers[1];
				float weight3 = 0f;
				float weight2 = 0f;
				poser4.weight = weight3;
				poser3.weight = weight2;
			}
			GripPose[] source = this.PlayerBones.WeaponRoot.Original.GetComponentsInChildren<GripPose>().Where(new Func<GripPose, bool>(@class.method_0)).ToArray<GripPose>();
			GripPose gripPose = source.Where(new Func<GripPose, bool>(Player.Class1318.class1318_0.method_3)).OrderByDescending(new Func<GripPose, bool>(Player.Class1318.class1318_0.method_4)).ThenByDescending(new Func<GripPose, int>(@class.method_1)).FirstOrDefault<GripPose>();
			GripPose gripPose2 = source.Where(new Func<GripPose, bool>(Player.Class1318.class1318_0.method_5)).OrderByDescending(new Func<GripPose, int>(@class.method_2)).FirstOrDefault<GripPose>();
			this.HandPosers[0].SetGrip(gripPose);
			this.HandPosers[1].SetGrip(gripPose2);
			this.HandPosers[1].IgnoreIndexFinger = (gripPose2 != null);
			this._ikTargets = new Transform[]
			{
				gripPose ? gripPose.transform : null,
				gripPose2 ? gripPose2.transform : null
			};
		}

		// Token: 0x06008173 RID: 33139 RVA: 0x0047CC28 File Offset: 0x0047AE28
		public void UpdateBonesOnWeaponChange(TransformLinks links)
		{
			this.PlayerBones.UpdateImportantBones(links);
			TransformHelperClass.SetLayersRecursively<MeshRenderer>(links.gameObject, LayerMask.NameToLayer("Player"), new string[]
			{
				"Shells"
			});
			this._elbowBends = new Transform[2];
			links.GatherIK(this._markers, this._gripReferences, this._elbowBends);
			this._propBone = links.GetTransformOutOfRangeSafe(ECharacterWeaponBones.prop);
			this._hasAnimatorPropBones = (this._propBone != null);
			if (this._hasAnimatorPropBones)
			{
				this._animatorPropTransforms[0] = this._propBone;
				this._animatorPropTransforms[1] = this._propBone.GetChild(0);
				this._animatorPropTransforms[2] = this._propBone.GetChild(1);
			}
			this._vestMarker = ((links.Transforms.Length > 18) ? links.GetTransform(ECharacterWeaponBones.weapon_vest_IK_marker) : null);
			this.UpdateFirstPersonGrip(GripPose.EGripType.Common, links);
		}

		// Token: 0x06008174 RID: 33140 RVA: 0x0047CD0C File Offset: 0x0047AF0C
		public void FBBIKUpdate(float distance)
		{
			if ((this.EnabledAnimators & Player.EAnimatorMask.FBBIK) == (Player.EAnimatorMask)0)
			{
				return;
			}
			if (this.PointOfView == EPointOfView.ThirdPerson)
			{
				this._fbbik.solver.iterations = (int)Mathf.Clamp(15f / distance, 0f, 2f);
				if (!this._fbbik.solver.Quick && Time.time > this._turnOffFbbikAt)
				{
					this._fbbik.solver.Quick = true;
				}
			}
			this._fbbik.solver.Update();
		}

		// Token: 0x06008175 RID: 33141 RVA: 0x0047CD94 File Offset: 0x0047AF94
		public void method_19(float d)
		{
			if (d > 300f)
			{
				return;
			}
			this._limbs[0].solver.Update();
			if (d > 70f)
			{
				return;
			}
			this._limbs[1].solver.Update();
			bool skip;
			if (!(skip = (d > 40f)))
			{
				TwistRelax[] twistBones = this._twistBones;
				for (int i = 0; i < twistBones.Length; i++)
				{
					twistBones[i].Relax();
				}
			}
			this.HandPosers[0].ManualUpdate(skip);
			this.HandPosers[1].ManualUpdate(skip);
		}

		// Token: 0x06008176 RID: 33142 RVA: 0x001CE3B6 File Offset: 0x001CC5B6
		public Vector3 ProjectLocalPosition(Vector3 position)
		{
			return this.PlayerBones.WeaponRoot.TransformPoint(this.PlayerBones.Weapon_Root_Anim.InverseTransformPoint(position));
		}

		// Token: 0x06008177 RID: 33143 RVA: 0x0047CE1C File Offset: 0x0047B01C
		public void DropItemDead(Item item, GameObject prefab)
		{
			GClass4062.ReleaseBeginSample("Player.DropItemDead", "DropItemDead");
			int layer = LayerMask.NameToLayer("Deadbody");
			int num = LayerMask.NameToLayer("Shells");
			AssetPoolObject[] componentsInChildren = prefab.GetComponentsInChildren<AssetPoolObject>(true);
			Collider collider = null;
			foreach (AssetPoolObject assetPoolObject in componentsInChildren)
			{
				foreach (Collider collider2 in assetPoolObject.Colliders)
				{
					if (!collider2.isTrigger && collider2.gameObject.layer != num)
					{
						assetPoolObject.StoreCollider(collider2);
						collider2.enabled = true;
						collider2.gameObject.layer = layer;
						if (collider == null || collider.bounds.extents.sqrMagnitude < collider2.bounds.extents.sqrMagnitude)
						{
							collider = collider2;
						}
					}
				}
			}
			this._garbage = new Player.GClass2004
			{
				Transform = prefab.transform
			};
			Rigidbody rigidbody = prefab.AddComponent<Rigidbody>();
			LootItem component = prefab.GetComponent<LootItem>();
			if (component != null)
			{
				component.SetItemAndRigidbody(item, rigidbody);
			}
			this._garbage.Shift = ((rigidbody != null) ? rigidbody.centerOfMass : Vector3.zero);
			if (collider)
			{
				this._garbage.Transportee = collider.gameObject.AddComponent<CommonTransportee>();
				this._garbage.Transportee.ParentTransform = prefab.transform;
			}
			foreach (object obj in prefab.transform)
			{
				((Transform)obj).localPosition -= this._garbage.Shift;
			}
			TransformLinks componentInChildren = prefab.GetComponentInChildren<TransformLinks>();
			bool flag;
			if (!(flag = (item is PistolItemClass || item is ThrowWeapItemClass || item.GetItemComponent<KnifeComponent>() != null)))
			{
				this.HandPosers[1].Lerp2Target(EFTHardSettings.Instance.RIGHT_HAND_QTS, 5f, 0.5f);
			}
			RigidbodySpawner rigidbodySpawner = flag ? this.PlayerBones.Forearms[1].GetComponent<RigidbodySpawner>() : base.GetComponentInChildren<RigidbodySpawner>();
			this.Corpse.Ragdoll.AttachWeapon(rigidbody, base.gameObject, this.PlayerBones, componentInChildren, flag, this.Velocity);
			rigidbodySpawner.RemoveEvent += this.RemoveAttachment;
		}

		// Token: 0x06008178 RID: 33144 RVA: 0x001CE3D9 File Offset: 0x001CC5D9
		public void RemoveAttachment(RigidbodySpawner spawner)
		{
			if (spawner != null)
			{
				spawner.RemoveEvent -= this.RemoveAttachment;
			}
			Player.GClass2004 garbage = this._garbage;
			if (garbage == null)
			{
				return;
			}
			garbage.RemovePhysics();
		}

		// Token: 0x06008179 RID: 33145 RVA: 0x0047D0C8 File Offset: 0x0047B2C8
		public void ReleaseHand()
		{
			if (this._garbage != null)
			{
				this._garbage.Destroy();
				this._garbage = null;
			}
			this.method_118();
			this.HandPosers[1].Lerp2Target(EFTHardSettings.Instance.RIGHT_HAND_QTS, 5f, 0.5f);
			this.ProceduralWeaponAnimation.OnPreCollision -= this.IkStoreRaw;
		}

		// Token: 0x0600817A RID: 33146 RVA: 0x0047D130 File Offset: 0x0047B330
		public void SpawnInHands(Item item, string parentBone)
		{
			this._spawnedKey = Singleton<PoolManagerClass>.Instance.CreateItem(item, Player.GetVisibleToCamera(this), this, true);
			Transform transform = this._spawnedKey.transform.FindTransform("pivot");
			Transform transform2 = this._limbs[0].solver.bone3.transform.FindTransform(parentBone);
			this._spawnedKey.transform.SetParent(transform2, false);
			this._spawnedKey.transform.localRotation = Quaternion.identity;
			this._spawnedKey.transform.localPosition = Vector3.zero;
			this._spawnedKey.SetActive(true);
			if (transform != null)
			{
				Quaternion rhs = Quaternion.Inverse(transform.rotation) * transform2.rotation;
				this._spawnedKey.transform.localRotation *= rhs;
				Vector3 b = transform2.position - transform.position;
				this._spawnedKey.transform.position += b;
			}
			else
			{
				string str = "pivot not found in ";
				GameObject spawnedKey = this._spawnedKey;
				UnityEngine.Debug.LogError(str + ((spawnedKey != null) ? spawnedKey.ToString() : null) + " for keyId = " + item.Id);
			}
			AudioClip itemClip = Singleton<GUISounds>.Instance.GetItemClip(item.ItemSound, EInventorySoundType.pickup);
			if (itemClip != null)
			{
				BetterSource source = MonoBehaviourSingleton<BetterAudio>.Instance.PlayAtPoint(this.Transform.position, itemClip, BetterAudio.AudioSourceGroupType.Collisions, 30, 1f, EOcclusionTest.None, null, !this.FirstPersonPointOfView, true, true, true);
				if (!this.FirstPersonPointOfView && MonoBehaviourSingleton<SpatialAudioSystem>.Instantiated)
				{
					MonoBehaviourSingleton<SpatialAudioSystem>.Instance.ProcessSourceOcclusion(this, source, false);
				}
			}
		}

		// Token: 0x0600817B RID: 33147 RVA: 0x001CE406 File Offset: 0x001CC606
		public void ClearPlanting()
		{
			this.TripwireVisualPlacer_0.ClearPlanting();
			this.TripwireVisualPlacer_0.gameObject.SetActive(false);
		}

		// Token: 0x0600817C RID: 33148 RVA: 0x0047D2D4 File Offset: 0x0047B4D4
		public TripwireVisualPlacer CreatePlantPlanner()
		{
			if (this.TripwireVisualPlacer_0 == null)
			{
				GameObject gameObject = UnityEngine.Object.Instantiate<GameObject>(Resources.Load("Prefabs/tripwire_planner") as GameObject);
				gameObject.gameObject.SetActive(true);
				gameObject.name = "PlantPlaner";
				this.TripwireVisualPlacer_0 = gameObject.GetComponent<TripwireVisualPlacer>();
			}
			this.TripwireVisualPlacer_0.gameObject.SetActive(true);
			this.TripwireVisualPlacer_0.transform.position = this.WeaponRoot.position;
			return this.TripwireVisualPlacer_0;
		}

		// Token: 0x0600817D RID: 33149 RVA: 0x001CE424 File Offset: 0x001CC624
		public void InitFirstTripwirePoint()
		{
			this.TripwireVisualPlacer_0.InitFirstPoint(this.InteractionRay);
		}

		// Token: 0x0600817E RID: 33150 RVA: 0x0047D35C File Offset: 0x0047B55C
		public GameObject CreateBeacon(Item item, Vector3 position)
		{
			if (this._beaconDummy == null)
			{
				GameObject original = Singleton<PoolManagerClass>.Instance.CreateLootPrefab(item, ECameraType.Default, null);
				this._beaconDummy = UnityEngine.Object.Instantiate<GameObject>(original, position, Quaternion.identity);
				this._beaconDummy.gameObject.SetActive(true);
				this._beaconDummy.name = "BeaconDummy";
				AssetPoolObject component = this._beaconDummy.GetComponent<AssetPoolObject>();
				foreach (Collider collider in component.Colliders)
				{
					collider.enabled = false;
				}
				BoxCollider boxCollider = this._beaconDummy.AddComponent<BoxCollider>();
				boxCollider.enabled = false;
				component.RegisteredComponentsToClean.Add(boxCollider);
				this._beaconMaterialSetter = this._beaconDummy.AddComponent<PreviewMaterialSetter>();
				this._beaconMaterialSetter.SetAvailable(true);
				component.RegisteredComponentsToClean.Add(this._beaconMaterialSetter);
				this._beaconPlacer = this._beaconDummy.AddComponent<BeaconPlacer>();
			}
			return this._beaconDummy;
		}

		// Token: 0x0600817F RID: 33151 RVA: 0x001CE437 File Offset: 0x001CC637
		public void DestroyBeacon()
		{
			if (this._beaconDummy == null)
			{
				return;
			}
			UnityEngine.Object.Destroy(this._beaconDummy);
			this._beaconDummy = null;
			this._beaconMaterialSetter = null;
			this._beaconPlacer = null;
		}

		// Token: 0x06008180 RID: 33152 RVA: 0x001CE468 File Offset: 0x001CC668
		public void ClearHands()
		{
			if (this._spawnedKey == null)
			{
				return;
			}
			AssetPoolObject.ReturnToPool(this._spawnedKey, true);
			this._spawnedKey = null;
		}

		// Token: 0x06008181 RID: 33153 RVA: 0x0047D470 File Offset: 0x0047B670
		public void RestoreIKPos()
		{
			if (this._stored)
			{
				ObjectInHandsAnimator handsAnimator = this.HandsAnimator;
				this._interactionLayerWeight = ((handsAnimator != null) ? handsAnimator.GetLayerWeight(this.HandsAnimator.LACTIONS_LAYER_INDEX) : 0f);
				this._rawWeight = ((this._rawWeight < this._interactionLayerWeight) ? this._interactionLayerWeight : Mathf.SmoothDamp(this._rawWeight, this._interactionLayerWeight, ref this._rawDampVelocity, 0.2f));
				if (this._rawWeight > 0.005f)
				{
					if (this._hasAnimatorPropBones && this._hasProp)
					{
						this._propBone.position = this._propRawPosition;
						this._propBone.rotation = this._propRawRotation;
					}
					this._markers[0].position = Vector3.Lerp(this._markers[0].position, this._lMarkerRawPosition, this._rawWeight);
					this._markers[0].rotation = Quaternion.Slerp(this._markers[0].rotation, this._lMarkerRawRotation, this._rawWeight);
					this._elbowBends[0].position = this._lElbowRawPosition;
				}
				this._stored = false;
			}
		}

		// Token: 0x06008182 RID: 33154 RVA: 0x0047D59C File Offset: 0x0047B79C
		public void IkStoreRaw()
		{
			if (this._hasAnimatorPropBones && this._hasProp)
			{
				this._propRawPosition = this._propBone.position;
				this._propRawRotation = this._propBone.rotation;
			}
			if (this._markers[0] == null)
			{
				return;
			}
			this._lMarkerRawPosition = this._markers[0].position;
			this._lMarkerRawRotation = this._markers[0].rotation;
			if (this._elbowBends != null && this._elbowBends.Length != 0)
			{
				this._lElbowRawPosition = this._elbowBends[0].position;
				this._rElbowRawPosition = this._elbowBends[1].position;
				this._stored = true;
				return;
			}
		}

		// Token: 0x06008183 RID: 33155 RVA: 0x0047D654 File Offset: 0x0047B854
		public void method_20(float distance2Camera)
		{
			for (int i = 0; i < 2; i++)
			{
				if (!(this._markers[i] == null) && Math.Abs(this._limbs[i].solver.IKPositionWeight) >= 1E-45f)
				{
					if (this._ikTargets[i] != null && distance2Camera < 40f)
					{
						float value = Vector3.Distance(this._markers[i].position, this._gripReferences[i].position);
						float num = Mathf.InverseLerp(0.1f, 0f, value);
						this.HandPosers[i].GripWeight = num;
						this._ikPosition = Vector3.Lerp(this._markers[i].position, this._ikTargets[i].position, num);
						this._ikRotation = Quaternion.Lerp(this._markers[i].rotation, this._ikTargets[i].rotation, num);
					}
					else
					{
						this._ikPosition = this._markers[i].position;
						this._ikRotation = this._markers[i].rotation;
					}
					if (this.LeftHandInteractionTarget != null && i == 0)
					{
						this._ikPosition = Vector3.Lerp(this._ikPosition, this.LeftHandInteractionTarget.transform.position, this.ThirdIkWeight.Value);
						this._ikRotation = Quaternion.Slerp(this._ikRotation, this.LeftHandInteractionTarget.transform.rotation, this.ThirdIkWeight.Value);
					}
					this._limbs[i].solver.SetIKPosition(this._ikPosition);
					this._limbs[i].solver.SetIKRotation(this._ikRotation);
				}
			}
		}

		// Token: 0x06008184 RID: 33156 RVA: 0x001CE48C File Offset: 0x001CC68C
		public RuntimeAnimatorController CreateAnimatorController()
		{
			return Singleton<IEasyAssets>.Instance.GetAsset(this.UsedSimplifiedSkeleton ? ResourceKeyManagerAbstractClass.ZOMBIE_ANIMATOR_CONTROLLER : ResourceKeyManagerAbstractClass.PLAYER_DEFAULT_ANIMATOR_CONTROLLER);
		}

		// Token: 0x06008185 RID: 33157 RVA: 0x0047D814 File Offset: 0x0047BA14
		public void method_21()
		{
			if (this.Profile.Side != EPlayerSide.Savage)
			{
				return;
			}
			this._animators[0].SetLayerWeight(16, 0f);
			if (this.Profile.Info.Settings.Role == WildSpawnType.bossBoar)
			{
				this._animators[0].runtimeAnimatorController = Singleton<IEasyAssets>.Instance.GetAsset(ResourceKeyManagerAbstractClass.BOSS_KABAN_ANIMATOR_CONTROLLER);
				this._animators[0].SetLayerWeight(16, 1f);
				return;
			}
		}

		// Token: 0x06008186 RID: 33158 RVA: 0x0047D890 File Offset: 0x0047BA90
		public void method_22()
		{
			if (!BackendConfigAbstractClass.Config.UseBodyFastAnimator && !BackendConfigAbstractClass.Config.UseSpiritPlayer && !this.UsedSimplifiedSkeleton)
			{
				this.method_21();
			}
			if (this._animators[0].runtimeAnimatorController == null && !BackendConfigAbstractClass.Config.UseBodyFastAnimator)
			{
				RuntimeAnimatorController runtimeAnimatorController = this.CreateAnimatorController();
				this._animators[0].runtimeAnimatorController = runtimeAnimatorController;
			}
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
			{
				bool useFastAnimator = this.Profile.Info.Settings.Role.ShallUseFastAnimator() && BackendConfigAbstractClass.Config.UseSpiritFastAnimator;
				this.Spirit.InitBodyAnimator(this._animators[0].updateMode, useFastAnimator);
			}
		}

		// Token: 0x06008187 RID: 33159 RVA: 0x001CE4AC File Offset: 0x001CC6AC
		public virtual bool UpdateGrenadeAnimatorDuePoV()
		{
			return this.PointOfView == EPointOfView.ThirdPerson;
		}

		// Token: 0x06008188 RID: 33160 RVA: 0x001CE4B7 File Offset: 0x001CC6B7
		public void SetEnvironment(string profileID, EnvironmentType environmentType)
		{
			if (profileID != this.ProfileId)
			{
				return;
			}
			this.Environment = environmentType;
		}

		// Token: 0x06008189 RID: 33161 RVA: 0x0047D948 File Offset: 0x0047BB48
		public void method_23(float distance)
		{
			if (distance > 70f)
			{
				return;
			}
			if (this._markers[0] != null && this._vestMarker != null)
			{
				Player.FirearmController firearmController = this._handsController as Player.FirearmController;
				this._utilityLayerWeight = ((((firearmController != null && firearmController.IsInReloadOperation()) || this._handsController.IsInventoryOpen()) && !this.IsSprintEnabled) ? Mathf.InverseLerp(this.UtilityLayerRange.x, this.UtilityLayerRange.y, Vector3.Distance(this._markers[0].position, this._vestMarker.position)) : Mathf.Lerp(this._utilityLayerWeight, 0f, Time.deltaTime * this.UtilityLayerLerpSpeed));
				this.BodyAnimatorCommon.SetLayerWeight(2, this._utilityLayerWeight);
				return;
			}
			this.BodyAnimatorCommon.SetLayerWeight(2, 0f);
		}

		// Token: 0x0600818A RID: 33162 RVA: 0x0047DA38 File Offset: 0x0047BC38
		public void method_24(float curveWeight)
		{
			if (this._elbowBends != null && !(this._elbowBends[0] == null))
			{
				Quaternion rotation = Quaternion.Euler(0.65f * this.MovementContext.Pitch, this.MovementContext.Yaw, 0f);
				Vector3 b = rotation * this.ProceduralWeaponAnimation.TurnAway.RElbowShift;
				Vector3 b2 = rotation * this.ProceduralWeaponAnimation.TurnAway.LElbowShift;
				float num = curveWeight * this.method_25(PlayerAnimator.ELBOW_LEFT_WEIGHT);
				if (num < 1f)
				{
					this.PlayerBones.BendGoals[0].position = Vector3.Lerp(this._elbowBends[0].position + b2, this.PlayerBones.BendGoals[0].position, num);
				}
				float num2 = curveWeight * this.method_25(PlayerAnimator.ELBOW_RIGHT_WEIGHT);
				if (num2 < 1f)
				{
					this.PlayerBones.BendGoals[1].position = Vector3.Lerp(this._elbowBends[1].position + b, this.PlayerBones.BendGoals[1].position, num2);
				}
				return;
			}
		}

		// Token: 0x0600818B RID: 33163 RVA: 0x001CE4CF File Offset: 0x001CC6CF
		public float method_25(int hash)
		{
			return Mathf.Min(this._animators[0].GetFloat(hash), 1f);
		}

		// Token: 0x0600818C RID: 33164 RVA: 0x0047DB60 File Offset: 0x0047BD60
		public bool method_26()
		{
			foreach (KeyValuePair<EBoundItem, Item> keyValuePair in this.Inventory.FastAccess.BoundItems)
			{
				if (keyValuePair.Value is CompassItemClass)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600818D RID: 33165 RVA: 0x0047DBCC File Offset: 0x0047BDCC
		public void CreateCompass()
		{
			if (!this._compassInstantiated && this.method_26())
			{
				Transform transform = Singleton<PoolManagerClass>.Instance.CreateFromPool<Transform>(new ResourceKey
				{
					path = "assets/content/weapons/additional_hands/item_compass.bundle"
				});
				transform.SetParent(this.PlayerBones.Ribcage.Original, false);
				transform.localRotation = Quaternion.identity;
				transform.localPosition = Vector3.zero;
				this.method_27(transform.gameObject);
				this._compassInstantiated = true;
				return;
			}
		}

		// Token: 0x0600818E RID: 33166 RVA: 0x0047DC48 File Offset: 0x0047BE48
		public void method_27(GameObject obj)
		{
			this._hasProp = (obj != null);
			if (this._hasProp)
			{
				this._compassArrow = obj.GetComponentInChildren<CompassArrow>();
				this._compassArrow.NorthDirection = Singleton<LevelSettings>.Instance.NorthVector;
				this._compassArrow.enabled = true;
				this._propTransforms[0] = obj.transform;
				this._propTransforms[1] = obj.transform.FindTransform("prop_bone_001");
				this._propTransforms[2] = obj.transform.FindTransform("prop_bone_002");
				obj.SetActive(false);
				return;
			}
			this._propTransforms = new Transform[3];
			this._propActive = false;
			if (this._compassArrow)
			{
				this._compassArrow.enabled = false;
				this._compassArrow = null;
			}
		}

		// Token: 0x0600818F RID: 33167 RVA: 0x0047DD10 File Offset: 0x0047BF10
		public void SetPropVisibility(bool isVisible)
		{
			if (this._playerBody != null && this.FirstPersonPointOfView)
			{
				Action<bool> onPropVisibility = this.OnPropVisibility;
				if (onPropVisibility != null)
				{
					onPropVisibility(isVisible);
				}
			}
			if (this._hasProp && this._hasAnimatorPropBones)
			{
				this._propTransforms[0].gameObject.SetActive(isVisible);
				this._propTransforms[0].transform.SetPositionAndRotation(this._animatorPropTransforms[0].position, this._animatorPropTransforms[0].rotation);
				this._compassArrow.enabled = isVisible;
				this._propActive = isVisible;
			}
		}

		// Token: 0x06008190 RID: 33168 RVA: 0x001CE4E9 File Offset: 0x001CC6E9
		public void OnRadiolocationZoneEnter()
		{
			UnityEngine.Debug.Log(this.Profile.Nickname + "enter in radiolocation zone on client");
		}

		// Token: 0x06008191 RID: 33169 RVA: 0x001CE505 File Offset: 0x001CC705
		public void OnRadiolocationZoneExit()
		{
			UnityEngine.Debug.Log(this.Profile.Nickname + "exit from radiolocation zone on client");
		}

		// Token: 0x06008192 RID: 33170 RVA: 0x001CE521 File Offset: 0x001CC721
		public virtual bool IsVisibleByCullingObject(float cullingDistance)
		{
			return true;
		}

		// Token: 0x06008193 RID: 33171 RVA: 0x0047DDA8 File Offset: 0x0047BFA8
		public virtual void SetAlertedFloat(float alertedFloat)
		{
			if (!this.UsedSimplifiedSkeleton)
			{
				return;
			}
			if (Mathf.Approximately(alertedFloat, 1f))
			{
				this.MovementContext.PlayerAnimatorEnableInert(false);
			}
			this.MovementContext.PlayerAnimator.SetAlert(Mathf.Approximately(alertedFloat, 1f));
			this.MovementContext.PlayerAnimator.SetAlertFloat(alertedFloat);
		}

		// Token: 0x06008194 RID: 33172 RVA: 0x001CE524 File Offset: 0x001CC724
		public virtual void TriggerZombieLost()
		{
			if (!this.UsedSimplifiedSkeleton)
			{
				return;
			}
			this.MovementContext.PlayerAnimatorEnableInert(false);
			this.MovementContext.PlayerAnimator.TriggerIsLost();
		}

		// Token: 0x17001350 RID: 4944
		// (get) Token: 0x06008195 RID: 33173 RVA: 0x001CE54B File Offset: 0x001CC74B
		// (set) Token: 0x06008196 RID: 33174 RVA: 0x001CE553 File Offset: 0x001CC753
		public EnvironmentType Environment { get; set; }

		// Token: 0x17001351 RID: 4945
		// (get) Token: 0x06008197 RID: 33175 RVA: 0x001CE55C File Offset: 0x001CC75C
		public virtual float LandingThreshold
		{
			get
			{
				return 0.3f;
			}
		}

		// Token: 0x17001352 RID: 4946
		// (get) Token: 0x06008198 RID: 33176 RVA: 0x001CE563 File Offset: 0x001CC763
		public float Single_0
		{
			get
			{
				return Mathf.Sign(this.BodyAnimatorCommon.GetFloat(this._animatorFootstepCurveHash));
			}
		}

		// Token: 0x17001353 RID: 4947
		// (get) Token: 0x06008199 RID: 33177 RVA: 0x001CE57B File Offset: 0x001CC77B
		// (set) Token: 0x0600819A RID: 33178 RVA: 0x0047DE04 File Offset: 0x0047C004
		public AudioSource VoipAudioSource
		{
			get
			{
				return this._voipAudioSource;
			}
			set
			{
				this._voipAudioSource = value;
				Action voipSourceBinding = this._voipSourceBinding;
				if (voipSourceBinding != null)
				{
					voipSourceBinding();
				}
				this._voipSourceBinding = null;
				if (this._voipAudioSource == null)
				{
					return;
				}
				SoundSettingsControllerClass settings = Singleton<SharedGameSettingsClass>.Instance.Sound.Settings;
				this._voipSourceBinding = settings.VoipEnabled.Bind(new Action<bool>(this.method_142));
			}
		}

		// Token: 0x17001354 RID: 4948
		// (get) Token: 0x0600819B RID: 33179 RVA: 0x001CE583 File Offset: 0x001CC783
		public virtual float MINStepSoundSpeedFactor
		{
			get
			{
				return 0.2f;
			}
		}

		// Token: 0x17001355 RID: 4949
		// (get) Token: 0x0600819C RID: 33180 RVA: 0x001CE58A File Offset: 0x001CC78A
		public ETagStatus Fraction
		{
			get
			{
				if (this.Profile.Info.Side == EPlayerSide.Bear)
				{
					return ETagStatus.Bear;
				}
				if (this.Profile.Info.Side != EPlayerSide.Usec)
				{
					return ETagStatus.Scav;
				}
				return ETagStatus.Usec;
			}
		}

		// Token: 0x17001356 RID: 4950
		// (get) Token: 0x0600819D RID: 33181 RVA: 0x001CE5BD File Offset: 0x001CC7BD
		public float SinceLastStep
		{
			get
			{
				return Time.time - this._lastStepTime;
			}
		}

		// Token: 0x17001357 RID: 4951
		// (get) Token: 0x0600819E RID: 33182 RVA: 0x001CE5CB File Offset: 0x001CC7CB
		public virtual float ProtagonistHearing
		{
			get
			{
				return 1f;
			}
		}

		// Token: 0x17001358 RID: 4952
		// (get) Token: 0x0600819F RID: 33183 RVA: 0x0047DE6C File Offset: 0x0047C06C
		public virtual float Distance
		{
			get
			{
				if (this.DistanceDirty)
				{
					this._distance = (this.PointOfView.IsFirstPerson() ? 0f : CameraClass.Instance.Distance(this.Transform.position));
					this.DistanceDirty = false;
				}
				return this._distance;
			}
		}

		// Token: 0x17001359 RID: 4953
		// (get) Token: 0x060081A0 RID: 33184 RVA: 0x001CE5D2 File Offset: 0x001CC7D2
		// (set) Token: 0x060081A1 RID: 33185 RVA: 0x001CE5EE File Offset: 0x001CC7EE
		public BetterSource SpeechSource
		{
			get
			{
				if (this._speechSource == null)
				{
					this.CreateSpeechSource();
				}
				return this._speechSource;
			}
			set
			{
				this._speechSource = value;
			}
		}

		// Token: 0x1700135A RID: 4954
		// (get) Token: 0x060081A2 RID: 33186 RVA: 0x001CE5F7 File Offset: 0x001CC7F7
		public bool IsUnderRoof
		{
			get
			{
				if (!this._useSimpleUnderRoofCheck)
				{
					return !RainController.IsCameraUnderRain;
				}
				return this.Environment == EnvironmentType.Indoor;
			}
		}

		// Token: 0x1700135B RID: 4955
		// (get) Token: 0x060081A3 RID: 33187 RVA: 0x001CE613 File Offset: 0x001CC813
		public float Single_1
		{
			get
			{
				return 1f - this.Skills.BotSoundCoef;
			}
		}

		// Token: 0x060081A4 RID: 33188 RVA: 0x0047DEC0 File Offset: 0x0047C0C0
		public virtual void InitAudioController()
		{
			this.method_28();
			this.SetAudioProtagonist();
			this._sourcePrewarmer = new GClass885();
			this.CompositeDisposable.AddDisposable(this.SearchController.SearchOperations.ItemsChanged.Bind(new Action(this.method_45)));
			this._stepLayerMask = LayerMaskClass.AudioControllerStepLayerMask;
			this._soundBySurface = new Dictionary<BaseBallistic.ESurfaceSound, SurfaceSet>();
			IEasyAssets instance = Singleton<IEasyAssets>.Instance;
			this._hearingSettings = instance.GetAsset("assets/content/audio/prefabs/character/firstpersonplayerhearingsettings.bundle", null);
			this._playerSounds = instance.GetAsset("assets/content/audio/prefabs/movement/sounds.bundle", null);
			this._gearSoundBank = this._playerSounds.Gear;
			this._gearMediumSoundBank = this._playerSounds.GearMedium;
			this._gearFastSoundBank = this._playerSounds.GearFast;
			this._backpackDropBank = this._playerSounds.BackpackDrop;
			this._tinnitus = this._playerSounds.TinnitusSound;
			this.FaceshieldOn = this._playerSounds.FaceShieldOn;
			this.FaceshieldOff = this._playerSounds.FaceShieldOff;
			this.NightVisionOn = this._playerSounds.NightVisionOn;
			this.NightVisionOff = this._playerSounds.NightVisionOff;
			this.ThermalVisionOn = this._playerSounds.ThermalVisionOn;
			this.ThermalVisionOff = this._playerSounds.ThermalVisionOff;
			this.SwitchHeadlights = this._playerSounds.SwitchHeadlights;
			this.FractureSound = this._playerSounds.FractureSound;
			this._animatorFootstepCurveHash = this.BodyAnimatorCommon.StringToHash("FootStep");
			this.PropIn = (this._playerSounds.PropIn ? new BaseSoundPlayer.SoundElement
			{
				SoundClips = new AudioClip[]
				{
					this._playerSounds.PropIn
				},
				RollOff = 10
			} : null);
			this.PropOut = (this._playerSounds.PropOut ? new BaseSoundPlayer.SoundElement
			{
				SoundClips = new AudioClip[]
				{
					this._playerSounds.PropOut
				},
				RollOff = 10
			} : null);
			foreach (SurfaceSet surfaceSet in this._playerSounds.Sets)
			{
				if (!this._soundBySurface.ContainsKey(surfaceSet.Surface))
				{
					this._soundBySurface.Add(surfaceSet.Surface, surfaceSet);
				}
				else
				{
					UnityEngine.Debug.LogError(surfaceSet.Surface.ToString() + " surface sounds are duplicated");
				}
			}
			this._currentSet = this._soundBySurface[BaseBallistic.ESurfaceSound.Concrete];
			this.MovementContext.OnStateChanged += this.method_55;
			MovementContext movementContext = this.MovementContext;
			movementContext.OnGrounded = (Action<float, float>)Delegate.Combine(movementContext.OnGrounded, new Action<float, float>(this.method_5));
			this._healthController.ApplyDamageEvent += this.method_74;
			this._healthController.DiedEvent += this.method_52;
			this._healthController.EffectStartedEvent += this.method_53;
			this._healthController.EffectRemovedEvent += this.method_54;
			this.InitAudioSources();
			this._idleCoroutine = base.StartCoroutine(this.method_72(EPlayerState.Idle));
			this._exhaustionAudibilityUnsub = this.Physical.SubscribeToAudibleEffects(new Action(this.method_36));
			GenericEventTranslator eventTranslator = this.EventTranslator;
			eventTranslator.OnSoundBankPlay = (Action<string>)Delegate.Combine(eventTranslator.OnSoundBankPlay, new Action<string>(this.PlaySoundBank));
			foreach (KeyValuePair<BaseBallistic.ESurfaceSound, SurfaceSet> keyValuePair in this._soundBySurface)
			{
				this._runSurfaceCheck = Math.Max(this._runSurfaceCheck, keyValuePair.Value.RunSoundBank.Rolloff);
				this._sprintSurfaceCheck = Math.Max(this._sprintSurfaceCheck, keyValuePair.Value.SprintSoundBank.Rolloff);
				this._landSurfaceCheck = Mathf.Max(this._landSurfaceCheck, keyValuePair.Value.LandingSoundBank.Rolloff);
				this._proneSurfaceCheck = Mathf.Max(this._proneSurfaceCheck, keyValuePair.Value.ProneSoundBank.Rolloff);
			}
			this.Speaker.OnRelease += this.OnSpeakerRelease;
			this.FaceShieldObserver.Changed.Bind(new Action(this.PlayFaceShieldSound));
			this.NightVisionObserver.Changed.Bind(new Action(this.PlayNightVisionSound));
			this.ThermalVisionObserver.Changed.Bind(new Action(this.PlayThermalVisionSound));
			this.Muffled = false;
			if (this.FaceShieldObserver.Component != null)
			{
				this.method_38();
			}
			if (this.FaceCoverObserver.Component != null)
			{
				this.method_39();
			}
			this.method_29();
			this.CreateGearSource();
			this.method_41();
			PlayerMountingPointData playerMountingPointData = this.MovementContext.PlayerMountingPointData;
			playerMountingPointData.OnEnterMountedState = (Action<float>)Delegate.Combine(playerMountingPointData.OnEnterMountedState, new Action<float>(this.method_77));
			PlayerMountingPointData playerMountingPointData2 = this.MovementContext.PlayerMountingPointData;
			playerMountingPointData2.OnExitMountedState = (Action<float>)Delegate.Combine(playerMountingPointData2.OnExitMountedState, new Action<float>(this.method_78));
			this.method_42();
			this._priorityCalculator = new GClass1180(200, 128, 64);
		}

		// Token: 0x060081A5 RID: 33189 RVA: 0x0047E430 File Offset: 0x0047C630
		public void method_28()
		{
			GClass1706 instance = Singleton<GClass1706>.Instance;
			if (instance != null)
			{
				this._playerAudioSettings = instance.AudioSettings.PlayerSettings;
			}
		}

		// Token: 0x060081A6 RID: 33190 RVA: 0x0047E458 File Offset: 0x0047C658
		public void method_29()
		{
			Class443.OnInitialized -= this.method_30;
			if (Class443.Controller != null)
			{
				this.method_30(Class443.Controller);
				return;
			}
			UnityEngine.Debug.Log("winter controller initialization failed, try to subscribe");
			Class443.OnInitialized += this.method_30;
		}

		// Token: 0x060081A7 RID: 33191 RVA: 0x001CE62B File Offset: 0x001CC82B
		public void method_30(GInterface29 controller)
		{
			Class443.OnInitialized -= this.method_30;
			this.method_31(controller.Status);
			controller.StatusChangedEvent += this.method_31;
		}

		// Token: 0x060081A8 RID: 33192 RVA: 0x0047E4A4 File Offset: 0x0047C6A4
		public void method_31(ESeasonStatus seasonStatus)
		{
			SurfaceSet surfaceSet;
			if (!this._playerSounds.TryGetSeasonMovementSet(seasonStatus, out surfaceSet))
			{
				UnityEngine.Debug.Log(string.Format("Can't find movement sound set for season: {0}", seasonStatus));
				return;
			}
			if (MonoBehaviourSingleton<AmbientAudioSystem>.Instantiated)
			{
				this._useSimpleUnderRoofCheck = MonoBehaviourSingleton<AmbientAudioSystem>.Instance.UseSimpleUnderRoofCheck;
			}
			else
			{
				UnityEngine.Debug.LogWarning("Ambient Audio System not init, use default under roof check for step layer");
			}
			bool useOcclusion = this.PointOfView == EPointOfView.ThirdPerson && this is LocalPlayer;
			this._specificStepAudioController = new LocalPlayerStepAudioControllerClass(surfaceSet, this, 0.1f, useOcclusion, seasonStatus);
			this.method_35();
		}

		// Token: 0x060081A9 RID: 33193 RVA: 0x0047E52C File Offset: 0x0047C72C
		public void InitVaultingAudioControllers(IVaultingParameters vaultingParams)
		{
			IPlayerAnimatorEvents playerAnimatorEvents = this.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents;
			Sounds asset = Singleton<IEasyAssets>.Instance.GetAsset("assets/content/audio/prefabs/movement/sounds.bundle", null);
			this._vaultAudioController = new GClass2682(asset, MonoBehaviourSingleton<BetterAudio>.Instance, MonoBehaviourSingleton<SpatialAudioSystem>.Instance, playerAnimatorEvents.VaultingSoundsEvents, vaultingParams, this, EVaultingSoundType.Vault);
			this._sprintVaultAudioController = new GClass2682(asset, MonoBehaviourSingleton<BetterAudio>.Instance, MonoBehaviourSingleton<SpatialAudioSystem>.Instance, playerAnimatorEvents.SprintVaultSoundsEvents, vaultingParams, this, EVaultingSoundType.SprintVault);
			this._climbAudioController = new GClass2682(asset, MonoBehaviourSingleton<BetterAudio>.Instance, MonoBehaviourSingleton<SpatialAudioSystem>.Instance, playerAnimatorEvents.ClimbSoundsEvents, vaultingParams, this, EVaultingSoundType.Climb);
		}

		// Token: 0x060081AA RID: 33194 RVA: 0x001CE65C File Offset: 0x001CC85C
		public void method_32()
		{
			GClass2681 vaultAudioController = this._vaultAudioController;
			if (vaultAudioController != null)
			{
				vaultAudioController.Dispose();
			}
			GClass2681 sprintVaultAudioController = this._sprintVaultAudioController;
			if (sprintVaultAudioController != null)
			{
				sprintVaultAudioController.Dispose();
			}
			GClass2681 climbAudioController = this._climbAudioController;
			if (climbAudioController == null)
			{
				return;
			}
			climbAudioController.Dispose();
		}

		// Token: 0x060081AB RID: 33195 RVA: 0x001CE690 File Offset: 0x001CC890
		public void PlayTripwireInteractionSound(float plantTime, bool hasMultiTool)
		{
			this._tripwireInteractionSoundController.PlayInteractionSound(hasMultiTool);
			this.SendTripwireInteractionSoundState(EInteractionStatus.Started, true, hasMultiTool);
		}

		// Token: 0x060081AC RID: 33196 RVA: 0x001CE6A7 File Offset: 0x001CC8A7
		public void StopTripwireInteractionSound(bool isSuccess, bool hasMultiTool)
		{
			this._tripwireInteractionSoundController.StopInteractionSound(isSuccess, hasMultiTool);
			this.SendTripwireInteractionSoundState(EInteractionStatus.Finished, isSuccess, hasMultiTool);
		}

		// Token: 0x060081AD RID: 33197 RVA: 0x0047E5C0 File Offset: 0x0047C7C0
		public virtual void PlayToggleSound(ref bool previousState, bool isOn, AudioClip toggleOn, AudioClip toggleOff)
		{
			if (previousState != isOn)
			{
				Singleton<BetterAudio>.Instance.PlayAtPoint(this.Transform.Original.position + this.SpeechLocalPosition, isOn ? toggleOn : toggleOff, this.Distance, BetterAudio.AudioSourceGroupType.Character, 5, 1f, EOcclusionTest.None, null, false);
			}
			previousState = isOn;
		}

		// Token: 0x060081AE RID: 33198 RVA: 0x0047E614 File Offset: 0x0047C814
		public void PlayTacticalSound()
		{
			Singleton<BetterAudio>.Instance.PlayAtPoint(this.Transform.Original.position + this.SpeechLocalPosition, this.SwitchHeadlights, this.Distance, BetterAudio.AudioSourceGroupType.Character, 5, 1f, EOcclusionTest.None, null, false);
		}

		// Token: 0x060081AF RID: 33199 RVA: 0x0047E660 File Offset: 0x0047C860
		public void PlayFaceShieldSound()
		{
			FaceShieldComponent component = this.FaceShieldObserver.Component;
			bool isOn = component != null && (component.Togglable == null || component.Togglable.On);
			this.PlayToggleSound(ref this.PreviousFaceShield, isOn, this.FaceshieldOn, this.FaceshieldOff);
		}

		// Token: 0x060081B0 RID: 33200 RVA: 0x0047E6B0 File Offset: 0x0047C8B0
		public void PlayNightVisionSound()
		{
			NightVisionComponent component = this.NightVisionObserver.Component;
			bool isOn = component != null && (component.Togglable == null || component.Togglable.On);
			this.PlayToggleSound(ref this.PreviousNightVision, isOn, this.NightVisionOn, this.NightVisionOff);
		}

		// Token: 0x060081B1 RID: 33201 RVA: 0x0047E700 File Offset: 0x0047C900
		public void PlayThermalVisionSound()
		{
			ThermalVisionComponent component = this.ThermalVisionObserver.Component;
			bool isOn = component != null && (component.Togglable == null || component.Togglable.On);
			this.PlayToggleSound(ref this.PreviousThermalVision, isOn, this.ThermalVisionOn, this.ThermalVisionOff);
		}

		// Token: 0x060081B2 RID: 33202 RVA: 0x001CE6BF File Offset: 0x001CC8BF
		public virtual void SetAudioProtagonist()
		{
		}

		// Token: 0x060081B3 RID: 33203 RVA: 0x001CE6C1 File Offset: 0x001CC8C1
		public void AddVolume(BetterPropagationVolume volume)
		{
			this._soundPropagationVolumes.Add(volume);
			if (volume.MutuallyExclusive)
			{
				this._mutuallyExclusive = volume;
			}
		}

		// Token: 0x060081B4 RID: 33204 RVA: 0x0047E750 File Offset: 0x0047C950
		public void RemoveVolume(BetterPropagationVolume volume)
		{
			int num = this._soundPropagationVolumes.IndexOf(volume);
			if (num >= 0)
			{
				this._soundPropagationVolumes.RemoveAt(num);
			}
			this._mutuallyExclusive = this._soundPropagationVolumes.FirstOrDefault(new Func<BetterPropagationVolume, bool>(Player.Class1318.class1318_0.method_6));
		}

		// Token: 0x060081B5 RID: 33205 RVA: 0x0047E7AC File Offset: 0x0047C9AC
		public List<BetterPropagationVolume> GetPropagationVolume()
		{
			this._volumesBuffer.Clear();
			if (this._mutuallyExclusive != null)
			{
				this._volumesBuffer.Add(this._mutuallyExclusive);
			}
			else
			{
				this._volumesBuffer.AddRange(this._soundPropagationVolumes);
			}
			return this._volumesBuffer;
		}

		// Token: 0x060081B6 RID: 33206 RVA: 0x001CE6DE File Offset: 0x001CC8DE
		public void ToggleMuteSpeechSource(bool muteSpeech)
		{
			this.SpeechSource.source1.mute = muteSpeech;
		}

		// Token: 0x060081B7 RID: 33207 RVA: 0x0047E7FC File Offset: 0x0047C9FC
		public void PlaySpeechFromTime(TaggedClip clip, float time)
		{
			this.method_68(this.SpeechSource, (float)clip.Falloff);
			if (this.method_34(this.SpeechSource.MaxDistance))
			{
				return;
			}
			this.UpdateMuffledState();
			this.SpeechSource.SetActive(true);
			this.method_44(this.SpeechSource);
			this.SpeechSource.source1.spatialBlend = (this.PointOfView.IsFirstPerson() ? 0f : 1f);
			this._speechSource.HrtfIntensity = (this.PointOfView.IsFirstPerson() ? 0f : 1f);
			this._speechSource.DirectivityIntensity = (this.PointOfView.IsFirstPerson() ? 0f : 0.5f);
			this.SpeechSource.source1.time = time;
			float volume = clip.Volume;
			this.SpeechSource.Play(clip.Clip, null, 1f, volume, this.PointOfView.IsFirstPerson(), false);
		}

		// Token: 0x060081B8 RID: 33208 RVA: 0x001CE6F1 File Offset: 0x001CC8F1
		public void method_33(TaggedClip clip)
		{
			this.PlaySpeechFromTime(clip, 0f);
		}

		// Token: 0x060081B9 RID: 33209 RVA: 0x0047E8FC File Offset: 0x0047CAFC
		public virtual void UpdateMuffledState()
		{
			if (this.OcclusionDirty && MonoBehaviourSingleton<BetterAudio>.Instantiated)
			{
				this.OcclusionDirty = false;
				BetterAudio instance = MonoBehaviourSingleton<BetterAudio>.Instance;
				AudioMixerGroup mixerGroup = (this.PointOfView == EPointOfView.FirstPerson) ? instance.ClientPlayerSpeechMixer : instance.ObservedPlayerSpeechMixer;
				if (this.PointOfView == EPointOfView.ThirdPerson)
				{
					if (this.Muffled)
					{
						mixerGroup = instance.SimpleOccludedMixerGroup;
					}
				}
				else
				{
					mixerGroup = (this.Muffled ? instance.SelfSpeechReverb : instance.ClientPlayerSpeechMixer);
				}
				this.SpeechSource.SetMixerGroup(mixerGroup);
				return;
			}
		}

		// Token: 0x060081BA RID: 33210 RVA: 0x0047E97C File Offset: 0x0047CB7C
		public virtual bool CheckSurface(float range)
		{
			if (this.method_34(range))
			{
				return false;
			}
			ValueTuple<bool, BaseBallistic.ESurfaceSound> valueTuple = this.method_75();
			bool item = valueTuple.Item1;
			BaseBallistic.ESurfaceSound item2 = valueTuple.Item2;
			this.method_76(item, item2);
			if (this.Environment == EnvironmentType.Outdoor)
			{
				this.method_35();
			}
			return true;
		}

		// Token: 0x060081BB RID: 33211 RVA: 0x0047E9C0 File Offset: 0x0047CBC0
		public bool method_34(float spreadRange)
		{
			if (this.FirstPersonPointOfView)
			{
				return false;
			}
			float maxDistance = spreadRange * this.ProtagonistHearing + this.CHECK_RANGE_BUFF;
			return !GClass2313.IsInRange(this.Position, maxDistance);
		}

		// Token: 0x060081BC RID: 33212 RVA: 0x001CE6FF File Offset: 0x001CC8FF
		public void method_35()
		{
			this._specificStepAudioController.UpdateUnderRoofStatus(this.IsUnderRoof);
			this.SendUnderRoofStatus(this.IsUnderRoof);
		}

		// Token: 0x060081BD RID: 33213 RVA: 0x0047E9F8 File Offset: 0x0047CBF8
		public void method_36()
		{
			bool breathIsAudible;
			if ((breathIsAudible = this.Physical.BreathIsAudible) == this._exhaustionIsAudible)
			{
				return;
			}
			this._exhaustionIsAudible = breathIsAudible;
			this.HeavyBreath = false;
			this.UpdateBreathStatus();
		}

		// Token: 0x060081BE RID: 33214 RVA: 0x0047EA30 File Offset: 0x0047CC30
		public virtual void UpdateBreathStatus()
		{
			ETagStatus healthStatus = this.HealthStatus;
			bool flag;
			if (healthStatus != ETagStatus.BadlyInjured)
			{
				if (healthStatus != ETagStatus.Dying)
				{
					flag = false;
					goto IL_2B;
				}
			}
			flag = (this.HealthController.FindActiveEffect<GInterface358>(EBodyPart.Common) == null);
			IL_2B:
			bool flag3;
			bool flag2 = (flag3 = flag) || this._exhaustionIsAudible || this.Muffled;
			if (!this.HeavyBreath && flag2)
			{
				ETagStatus etagStatus = flag3 ? healthStatus : ETagStatus.Healthy;
				ETagStatus etagStatus2 = this._exhaustionIsAudible ? ETagStatus.Aware : ETagStatus.Unaware;
				if (etagStatus == ETagStatus.Healthy && etagStatus2 == ETagStatus.Unaware)
				{
					this.Speaker.Play(EPhraseTrigger.OnBreath, etagStatus | etagStatus2, true, new int?(-1));
				}
				else
				{
					this.Speaker.Play(EPhraseTrigger.OnBreath, etagStatus | etagStatus2, true, null);
				}
			}
			this.HeavyBreath = flag2;
		}

		// Token: 0x060081BF RID: 33215 RVA: 0x001CE71E File Offset: 0x001CC91E
		public void OnSpeakerRelease(bool force)
		{
			this.HeavyBreath = false;
			if (this._healthController.IsAlive)
			{
				this.UpdateBreathStatus();
			}
			if (this.HeavyBreath && !force)
			{
				return;
			}
			this.method_37();
		}

		// Token: 0x060081C0 RID: 33216 RVA: 0x001CE74C File Offset: 0x001CC94C
		public void method_37()
		{
			if (this._speechSource == null)
			{
				return;
			}
			this._speechSource.SetParent(null, true);
			this._speechSource.Release();
			this._speechSource = null;
		}

		// Token: 0x060081C1 RID: 33217 RVA: 0x0047EAF4 File Offset: 0x0047CCF4
		public void method_38()
		{
			FaceShieldComponent component = this.FaceShieldObserver.Component;
			this.method_40(component, EquipmentSlot.Headwear);
			this.method_89();
		}

		// Token: 0x060081C2 RID: 33218 RVA: 0x0047EB1C File Offset: 0x0047CD1C
		public void method_39()
		{
			FaceShieldComponent component = this.FaceCoverObserver.Component;
			this.method_40(component, EquipmentSlot.FaceCover);
			this.method_89();
		}

		// Token: 0x060081C3 RID: 33219 RVA: 0x0047EB44 File Offset: 0x0047CD44
		public void method_40(FaceShieldComponent fs, EquipmentSlot equipmentSlot)
		{
			this.Muffled = false;
			bool flag = false;
			bool flag2;
			if (flag2 = (fs != null && (fs.Togglable == null || fs.Togglable.On)))
			{
				CompoundItem compoundItem = this.Equipment.GetSlot(equipmentSlot).ContainedItem as CompoundItem;
				bool flag3;
				if (compoundItem != null)
				{
					flag3 = compoundItem.GetItemComponentsInChildren(true).SelectMany(new Func<CompositeArmorComponent, IEnumerable<EBodyPartColliderType>>(Player.Class1318.class1318_0.method_7)).Contains(EBodyPartColliderType.Jaw);
				}
				else
				{
					flag3 = false;
				}
				flag = flag3;
			}
			this.Muffled = (flag2 && flag);
			if (this.FirstPersonPointOfView)
			{
				this.UpdateBreathStatus();
				if (!flag2 && this.Speaker != null && !this.HeavyBreath && this.Speaker.Importance == 0)
				{
					this.Speaker.Shut();
				}
			}
			this.UpdateMuffledState();
			this.SendVoiceMuffledState(this.Muffled);
		}

		// Token: 0x060081C4 RID: 33220 RVA: 0x001CE77C File Offset: 0x001CC97C
		public virtual void SendVoiceMuffledState(bool isMuffled)
		{
		}

		// Token: 0x060081C5 RID: 33221 RVA: 0x001CE77E File Offset: 0x001CC97E
		public virtual void InitAudioSources()
		{
			this.CreateNestedSource();
		}

		// Token: 0x060081C6 RID: 33222 RVA: 0x0047EC20 File Offset: 0x0047CE20
		public virtual void CreateNestedSource()
		{
			BetterAudio instance = MonoBehaviourSingleton<BetterAudio>.Instance;
			this.NestedStepSoundSource = instance.GetSource(BetterAudio.AudioSourceGroupType.Character, true, true);
			if (this.NestedStepSoundSource == null)
			{
				return;
			}
			bool flag = this.PointOfView == EPointOfView.FirstPerson;
			this.NestedStepSoundSource.SetMixerGroup(flag ? instance.ClientPlayerMovementMixer : instance.ObservedPlayerMovementMixer);
			this.NestedStepSoundSource.EnabledEQ(!flag);
			if (!flag && MonoBehaviourSingleton<SpatialAudioSystem>.Instantiated)
			{
				MonoBehaviourSingleton<SpatialAudioSystem>.Instance.ProcessSourceOcclusion(this, this.NestedStepSoundSource, this.method_80());
			}
			this.NestedStepSoundSource.EnableSpatialization = !flag;
			this.NestedStepSoundSource.HrtfIntensity = (flag ? 0f : 1f);
			this.NestedStepSoundSource.SetParent(this.Transform.Original, false);
			this.NestedStepSoundSource.LocalPosition = new Vector3(0f, 0.1f, 0f);
			this.method_66(EAudioMovementState.Run, false);
			this.method_44(this.NestedStepSoundSource);
		}

		// Token: 0x060081C7 RID: 33223 RVA: 0x0047ED18 File Offset: 0x0047CF18
		public virtual void CreateSpeechSource()
		{
			BetterAudio instance = MonoBehaviourSingleton<BetterAudio>.Instance;
			this._speechSource = instance.GetSource(BetterAudio.AudioSourceGroupType.Speech, false, true);
			if (this._speechSource == null)
			{
				return;
			}
			bool flag = this.PointOfView == EPointOfView.FirstPerson;
			this._speechSource.EnabledEQ(!flag);
			this._speechSource.SetMixerGroup(flag ? instance.ClientPlayerSpeechMixer : instance.ObservedPlayerSpeechMixer);
			if (!flag && MonoBehaviourSingleton<SpatialAudioSystem>.Instantiated)
			{
				MonoBehaviourSingleton<SpatialAudioSystem>.Instance.ProcessSourceOcclusion(this, this._speechSource, this.method_80());
			}
			this._speechSource.EnableSpatialization = !flag;
			this._speechSource.StartTrackingPosition(this.PlayerBones.Head.Original, default(Vector3));
			this._speechSource.LocalPosition = this.PlayerBones.Head.localPosition;
			this._speechSource.transform.rotation = this.PlayerBones.Head.localRotation;
			this.method_44(this._speechSource);
		}

		// Token: 0x060081C8 RID: 33224 RVA: 0x0047EE14 File Offset: 0x0047D014
		public void CreateGearSource()
		{
			if (this._gearSource != null)
			{
				return;
			}
			BetterAudio instance = MonoBehaviourSingleton<BetterAudio>.Instance;
			this._gearSource = instance.GetSource(BetterAudio.AudioSourceGroupType.Character, false, true);
			bool flag = this.PointOfView == EPointOfView.FirstPerson;
			this._gearSource.EnabledEQ(!flag);
			if (!flag && MonoBehaviourSingleton<SpatialAudioSystem>.Instantiated)
			{
				MonoBehaviourSingleton<SpatialAudioSystem>.Instance.ProcessSourceOcclusion(this, this._gearSource, this.method_80());
			}
			this._gearSource.SetBaseVolume(flag ? 0.85f : 1f);
			this._gearSource.HrtfIntensity = (flag ? 0f : 1f);
			this._gearSource.EnableSpatialization = !flag;
			this._gearSource.SetParent(this.Transform.Original, false);
			this._gearSource.LocalPosition = new Vector3(0f, 0.1f, 0f);
			this._gearSource.SetMixerGroup(flag ? instance.ClientPlayerMovementMixer : instance.ObservedPlayerMovementMixer);
		}

		// Token: 0x060081C9 RID: 33225 RVA: 0x001CE786 File Offset: 0x001CC986
		public void method_41()
		{
			this._tripwireInteractionSoundController = new GClass2580(this);
		}

		// Token: 0x060081CA RID: 33226 RVA: 0x0047EF18 File Offset: 0x0047D118
		public void method_42()
		{
			IPlayerAnimatorEvents playerAnimatorEvents = this.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents;
			this._dropBackPackEvents = playerAnimatorEvents.DropBackpackEvents;
			this._dropBackPackEvents.OnBackpackDropEvent += this.method_79;
		}

		// Token: 0x060081CB RID: 33227 RVA: 0x001CE794 File Offset: 0x001CC994
		public void method_43(BetterSource source)
		{
			if (this.PointOfView.IsFirstPerson())
			{
				return;
			}
			this._sourcePrewarmer.ProcessPlayPrewarmSound(source, this.Distance);
		}

		// Token: 0x060081CC RID: 33228 RVA: 0x001CE7B6 File Offset: 0x001CC9B6
		public void method_44(BetterSource source)
		{
			if (this.PointOfView.IsFirstPerson())
			{
				return;
			}
			this._sourcePrewarmer.PlayPrewarmSound(source);
		}

		// Token: 0x060081CD RID: 33229 RVA: 0x001CE7D2 File Offset: 0x001CC9D2
		public IEnumerator SupportAudioSourceCoroutine()
		{
			while (this._searchCount > 0f && this._healthController.IsAlive)
			{
				float num = this.PointOfView.IsFirstPerson() ? 0f : CameraClass.Instance.SqrDistance(this.Position);
				float num2 = this.method_69(EAudioMovementState.Search) * this.method_69(EAudioMovementState.Search);
				if (num <= num2)
				{
					BetterSource betterSource = this.method_46(this._lastClip);
					AudioMixerGroup mixerGroup = this.PointOfView.IsFirstPerson() ? MonoBehaviourSingleton<BetterAudio>.Instance.ClientPlayerMovementMixer : MonoBehaviourSingleton<BetterAudio>.Instance.ObservedPlayerMovementMixer;
					float volume = this._playerAudioSettings.SearchSoundVolume.GetVolume(this.PointOfView);
					betterSource.SetMixerGroup(mixerGroup);
					betterSource.SetBaseVolume(volume);
					if (!betterSource.source1.isPlaying)
					{
						betterSource.SetActive(true);
						betterSource.Play(betterSource.GetClip(0), null, 1f, volume, true, false);
					}
				}
				else
				{
					this.method_47();
				}
				yield return new WaitForSeconds(0.5f);
			}
			this.method_47();
			yield break;
		}

		// Token: 0x060081CE RID: 33230 RVA: 0x0047EF60 File Offset: 0x0047D160
		public void method_45()
		{
			this._searchCount = (float)this.SearchController.SearchOperations.Count<SearchContentOperation>();
			if (this._searchCount > 0f)
			{
				if (this._currentSourceCoroutine != null)
				{
					base.StopCoroutine(this._currentSourceCoroutine);
				}
				AudioClip lootingClip;
				try
				{
					string searchSound = this.SearchController.SearchOperations.Last<SearchContentOperation>().Item.SearchSound;
					lootingClip = Singleton<GUISounds>.Instance.GetLootingClip(searchSound);
				}
				catch (Exception)
				{
					GInterface155<SearchContentOperation> searchOperations = this.SearchController.SearchOperations;
					SearchableItemItemClass searchableItemItemClass = searchOperations.Any<SearchContentOperation>() ? searchOperations.Last<SearchContentOperation>().Item : null;
					string text = (searchableItemItemClass != null) ? searchableItemItemClass.SearchSound : null;
					string text2 = (searchableItemItemClass != null) ? searchableItemItemClass.ShortName : null;
					UnityEngine.Debug.LogError(string.Format("SearchEventNRE1: searchOp {0} item is null {1} itemSound {2} itemName {3}", new object[]
					{
						searchOperations.Count<SearchContentOperation>(),
						searchableItemItemClass == null,
						text,
						text2
					}));
					return;
				}
				if (lootingClip == null)
				{
					return;
				}
				BetterSource betterSource = this.method_46(lootingClip);
				try
				{
					betterSource.Loop = true;
					betterSource.Position = this.MovementContext.PlayerColliderCenter + this.MovementContext.TransformForwardVector / 4f;
					this.method_68(betterSource, this.method_67(EAudioMovementState.Search, false));
				}
				catch (Exception)
				{
					UnityEngine.Debug.LogError(string.Format("SearchEventNRE2: source is null {0} Movement context is null {1}", betterSource == null, this.MovementContext == null));
					return;
				}
				this._currentSourceCoroutine = base.StartCoroutine(this.SupportAudioSourceCoroutine());
				this._lastClip = lootingClip;
				return;
			}
			else
			{
				this.method_47();
				if (this._currentSourceCoroutine != null)
				{
					base.StopCoroutine(this._currentSourceCoroutine);
					this._currentSourceCoroutine = null;
				}
			}
		}

		// Token: 0x060081CF RID: 33231 RVA: 0x0047F134 File Offset: 0x0047D334
		public BetterSource method_46(AudioClip clip)
		{
			if (this._searchSource == null)
			{
				this._searchSource = MonoBehaviourSingleton<BetterAudio>.Instance.GetSource(BetterAudio.AudioSourceGroupType.Character, false, true);
				this._searchSource.EnabledEQ(!this.PointOfView.IsFirstPerson());
				if (this._searchSource != null)
				{
					if (this.PointOfView == EPointOfView.ThirdPerson && MonoBehaviourSingleton<SpatialAudioSystem>.Instantiated)
					{
						MonoBehaviourSingleton<SpatialAudioSystem>.Instance.ProcessSourceOcclusion(this, this._searchSource, this.method_80());
					}
					this.method_44(this._searchSource);
					this._searchSource.EnableSpatialization = (this.PointOfView == EPointOfView.ThirdPerson);
					this._searchSource.source1.clip = clip;
				}
			}
			return this._searchSource;
		}

		// Token: 0x060081D0 RID: 33232 RVA: 0x001CE7E1 File Offset: 0x001CC9E1
		public void method_47()
		{
			if (this._searchSource == null)
			{
				return;
			}
			this._searchSource.Stop(0f);
			this._searchSource.Release();
			this._searchSource = null;
		}

		// Token: 0x060081D1 RID: 33233 RVA: 0x0047F1EC File Offset: 0x0047D3EC
		public void PlayInteractionSound(AudioClip clip, float volume = 1f, bool loop = true, bool stereo = true)
		{
			if (!this.PointOfView.IsFirstPerson())
			{
				return;
			}
			this.StopInteractionSound(0f);
			this._interactionSource = MonoBehaviourSingleton<BetterAudio>.Instance.GetSource(BetterAudio.AudioSourceGroupType.Nonspatial, true, true);
			this._interactionSource.Position = this.Position;
			this._interactionSource.Loop = loop;
			this._interactionSource.source1.clip = clip;
			this._interactionSource.SetBaseVolume(volume);
			this._interactionSource.EnableStereo(stereo);
			this._interactionSource.Play(clip, null, 1f, volume, stereo, false);
		}

		// Token: 0x060081D2 RID: 33234 RVA: 0x0047F284 File Offset: 0x0047D484
		public void StopInteractionSound(float fadeTime = 0f)
		{
			if (this._interactionSource == null)
			{
				return;
			}
			if (fadeTime > 0f && this.PointOfView.IsFirstPerson())
			{
				this._interactionSource.VolumeFadeOut(fadeTime, new Action(this.method_143));
				return;
			}
			this.method_143();
		}

		// Token: 0x060081D3 RID: 33235 RVA: 0x0047F2D8 File Offset: 0x0047D4D8
		public virtual void PlayGroundedSound(float fallHeight, float jumpHeight)
		{
			if (Time.realtimeSinceStartup < this._nextJumpAfter)
			{
				return;
			}
			if (!this.method_48())
			{
				return;
			}
			float num = fallHeight;
			if (!this.method_49())
			{
				num = Mathf.Max(fallHeight, jumpHeight);
			}
			if (num > this.LandingThreshold && this.CheckSurface(this._landSurfaceCheck))
			{
				this.method_43(this.NestedStepSoundSource);
				float volume = Mathf.InverseLerp(0.1f, this.LandingThreshold * 2.5f, num);
				this.DefaultPlay(this._currentSet.LandingSoundBank, volume, EAudioMovementState.Land);
				this._nextJumpAfter = Time.realtimeSinceStartup + 0.5f;
			}
		}

		// Token: 0x060081D4 RID: 33236 RVA: 0x0047F370 File Offset: 0x0047D570
		public bool method_48()
		{
			BaseMovementState previousState = this.MovementContext.PreviousState;
			EPlayerState eplayerState = (previousState != null) ? previousState.Name : EPlayerState.None;
			BaseMovementState currentState = this.MovementContext.CurrentState;
			EPlayerState eplayerState2 = (currentState != null) ? currentState.Name : EPlayerState.None;
			if (eplayerState2 != EPlayerState.Run)
			{
				if (eplayerState2 != EPlayerState.Sprint)
				{
					return eplayerState != EPlayerState.ClimbUp && eplayerState2 != EPlayerState.ClimbUp && eplayerState != EPlayerState.VaultingLanding;
				}
			}
			return true;
		}

		// Token: 0x060081D5 RID: 33237 RVA: 0x001CE814 File Offset: 0x001CCA14
		public bool method_49()
		{
			BaseMovementState previousState = this.MovementContext.PreviousState;
			return ((previousState != null) ? previousState.Name : EPlayerState.None) == EPlayerState.ClimbUp;
		}

		// Token: 0x060081D6 RID: 33238 RVA: 0x0047F3D0 File Offset: 0x0047D5D0
		public void method_50()
		{
			if (this.NestedStepSoundSource != null && !this._enqueuedForRelease)
			{
				this._enqueuedForRelease = true;
				this.NestedStepSoundSource.SetParent(null, true);
				BetterAudio betterAudio;
				if (MonoBehaviourSingleton<BetterAudio>.Exist(out betterAudio))
				{
					betterAudio.AddToAudioSourceQueue(this.NestedStepSoundSource, AudioSettings.dspTime + 1.0);
				}
				this.NestedStepSoundSource = null;
			}
			Action exhaustionAudibilityUnsub = this._exhaustionAudibilityUnsub;
			if (exhaustionAudibilityUnsub != null)
			{
				exhaustionAudibilityUnsub();
			}
			this._exhaustionAudibilityUnsub = null;
			this._specificStepAudioController.Dispose();
		}

		// Token: 0x060081D7 RID: 33239 RVA: 0x001CE831 File Offset: 0x001CCA31
		public void method_51()
		{
			if (this._gearSource != null)
			{
				this._gearSource.SetParent(null, true);
				this._gearSource.Release();
				this._gearSource = null;
			}
		}

		// Token: 0x060081D8 RID: 33240 RVA: 0x0047F458 File Offset: 0x0047D658
		public void method_52(EDamageType damageType)
		{
			foreach (Coroutine coroutine in new Coroutine[]
			{
				this._sprintCoroutine,
				this._runCoroutine,
				this._idleCoroutine
			})
			{
				if (coroutine != null)
				{
					base.StopCoroutine(coroutine);
				}
			}
			this.method_50();
			this.method_32();
			this.method_51();
			this.StopInteractionSound(0f);
			Class443.OnInitialized -= this.method_30;
			if (Class443.Controller != null)
			{
				Class443.Controller.StatusChangedEvent -= this.method_31;
			}
		}

		// Token: 0x060081D9 RID: 33241 RVA: 0x001CE860 File Offset: 0x001CCA60
		public void method_53(IEffect healthEffect)
		{
			this._damageThresholdAudioChecker.AddHealthEffect(healthEffect);
		}

		// Token: 0x060081DA RID: 33242 RVA: 0x001CE86E File Offset: 0x001CCA6E
		public void method_54(IEffect healthEffect)
		{
			this._damageThresholdAudioChecker.RemoveHealthEffect(healthEffect);
		}

		// Token: 0x060081DB RID: 33243 RVA: 0x0047F4F0 File Offset: 0x0047D6F0
		public void method_55(EPlayerState previousState, EPlayerState nextstate)
		{
			this.method_43(this.NestedStepSoundSource);
			switch (previousState)
			{
			case EPlayerState.Idle:
				break;
			case EPlayerState.ProneIdle:
			case EPlayerState.ProneMove:
				goto IL_144;
			case EPlayerState.Run:
				goto IL_66;
			case EPlayerState.Sprint:
				if (this._sprintCoroutine != null)
				{
					base.StopCoroutine(this._sprintCoroutine);
					if (!this._playedAtLeastOneStep && this.CheckSurface(this._sprintSurfaceCheck))
					{
						this.DefaultPlay(this._currentSet.SprintSoundBank, 1f, EAudioMovementState.Sprint);
					}
				}
				if (nextstate == EPlayerState.Transition || nextstate == EPlayerState.Idle)
				{
					float num = this.FirstPersonPointOfView ? this._currentSet.StopSoundBank.BaseVolume : 1f;
					this.DefaultPlay(this._currentSet.StopSoundBank, num * this.MovementContext.CovertMovementVolume, EAudioMovementState.Stop);
					goto IL_144;
				}
				goto IL_144;
			default:
				switch (previousState)
				{
				case EPlayerState.IdleZombieState:
				case EPlayerState.TurnZombieState:
					break;
				case EPlayerState.MoveZombieState:
				case EPlayerState.StartMoveZombieState:
				case EPlayerState.EndMoveZombieState:
					goto IL_66;
				default:
					goto IL_144;
				}
				break;
			}
			if (this._idleCoroutine != null)
			{
				base.StopCoroutine(this._idleCoroutine);
				goto IL_144;
			}
			goto IL_144;
			IL_66:
			if (this._runCoroutine != null)
			{
				base.StopCoroutine(this._runCoroutine);
				if (!this._playedAtLeastOneStep && this.SinceLastStep > 0.66f)
				{
					if (this.CheckSurface(this._runSurfaceCheck))
					{
						this.PlayStepSound();
					}
					this._lastStepTime = Time.time;
				}
			}
			IL_144:
			if (nextstate <= EPlayerState.Prone2Stand)
			{
				switch (nextstate)
				{
				case EPlayerState.Idle:
					goto IL_1DE;
				case EPlayerState.ProneIdle:
				case EPlayerState.ProneMove:
					break;
				case EPlayerState.Run:
					goto IL_1F2;
				case EPlayerState.Sprint:
					this._sprintCoroutine = base.StartCoroutine(this.method_71(nextstate));
					return;
				case EPlayerState.Jump:
					this.DefaultPlay(this._currentSet.JumpSoundBank, 1f, EAudioMovementState.Jump);
					this.method_60(this.MovementContext.CovertEquipmentNoise, true);
					break;
				default:
					if (nextstate != EPlayerState.Prone2Stand)
					{
						return;
					}
					this.method_60(0.7f, true);
					return;
				}
				return;
			}
			if (nextstate != EPlayerState.Transit2Prone)
			{
				switch (nextstate)
				{
				case EPlayerState.IdleZombieState:
				case EPlayerState.TurnZombieState:
					break;
				case EPlayerState.MoveZombieState:
				case EPlayerState.StartMoveZombieState:
				case EPlayerState.EndMoveZombieState:
					goto IL_1F2;
				default:
					return;
				}
			}
			else
			{
				EAudioMovementState movementState = (previousState == EPlayerState.Sprint) ? EAudioMovementState.Drop : EAudioMovementState.None;
				float volume = 0.7f * this.MovementContext.CovertMovementVolume;
				if (previousState == EPlayerState.Sprint)
				{
					this.DefaultPlay(this._currentSet.ProneDropSoundBank, volume, movementState);
					return;
				}
				this.method_60(volume, true);
				return;
			}
			IL_1DE:
			this._idleCoroutine = base.StartCoroutine(this.method_72(nextstate));
			return;
			IL_1F2:
			this._runCoroutine = base.StartCoroutine(this.method_73(nextstate));
		}

		// Token: 0x060081DC RID: 33244 RVA: 0x0047F740 File Offset: 0x0047D940
		public void DefaultPlay(SoundBank bank, float volume = 1f, EAudioMovementState movementState = EAudioMovementState.None)
		{
			if (bank == null)
			{
				string arg = (this._currentSet != null) ? this._currentSet.ToString() : "None";
				UnityEngine.Debug.LogError(string.Format("Bank is null for state {0}. Current set is {1}", movementState, arg));
				return;
			}
			this.UpdateMuffledState();
			this.method_65(this.NestedStepSoundSource);
			this.method_66(movementState, false);
			volume *= this.method_64(movementState);
			bank.Play(this.NestedStepSoundSource, EnvironmentType.Outdoor, this.Distance, volume, this.Distance, this.FirstPersonPointOfView, true);
			this._specificStepAudioController.Play(movementState, this.Environment, this.Distance, volume, this.Distance, this.FirstPersonPointOfView);
		}

		// Token: 0x060081DD RID: 33245 RVA: 0x0047F7F8 File Offset: 0x0047D9F8
		public void PlayStepSound()
		{
			this.UpdateMuffledState();
			SoundBank soundBank = (this.Pose == EPlayerPose.Duck) ? this._currentSet.DuckSoundBank : this._currentSet.RunSoundBank;
			EAudioMovementState movementState = (this.Pose == EPlayerPose.Duck) ? EAudioMovementState.Duck : EAudioMovementState.Run;
			float num = this.MovementContext.ClampedSpeed;
			float covertMovementVolumeBySpeed = this.MovementContext.CovertMovementVolumeBySpeed;
			num = Mathf.Max(this.Physical.MinStepSound, num) * covertMovementVolumeBySpeed;
			float num2 = this.method_57();
			float num3 = this.method_64(movementState);
			float num4 = (this.FirstPersonPointOfView || this.method_80()) ? soundBank.RandomVolume : 1f;
			float num5 = covertMovementVolumeBySpeed * num2 * num3 * num4;
			this.method_66(movementState, true);
			soundBank.Play(this.NestedStepSoundSource, EnvironmentType.Outdoor, this.Distance, num5, num, this.FirstPersonPointOfView, true);
			this._specificStepAudioController.Play(movementState, this.Environment, this.Distance, num5, num, this.FirstPersonPointOfView);
			float num6 = this.method_56(num);
			if (num6 > 0f)
			{
				base.StartCoroutine(this.method_70(num6));
			}
		}

		// Token: 0x060081DE RID: 33246 RVA: 0x0047F910 File Offset: 0x0047DB10
		public float method_56(float speed)
		{
			if (this.Pose != EPlayerPose.Duck)
			{
				return Mathf.Clamp(speed * 0.75f * Mathf.Sqrt(this.MovementContext.PoseLevel), 0.1f, 0.5f);
			}
			return Mathf.Clamp(speed, 0f, 0.3f);
		}

		// Token: 0x060081DF RID: 33247 RVA: 0x001CE87C File Offset: 0x001CCA7C
		public float method_57()
		{
			return Mathf.Clamp(this.method_59(), this._playerAudioSettings.MinSpeedVolumeMult, 1f);
		}

		// Token: 0x060081E0 RID: 33248 RVA: 0x0047F960 File Offset: 0x0047DB60
		public float method_58()
		{
			float t = this.method_59();
			return Mathf.Lerp(this._playerAudioSettings.MinSpeedRolloffMult, 1f, t);
		}

		// Token: 0x060081E1 RID: 33249 RVA: 0x001CE899 File Offset: 0x001CCA99
		public float method_59()
		{
			return Mathf.InverseLerp(0f, this.MovementContext.MaxSpeed, this.MovementContext.CharacterMovementSpeed);
		}

		// Token: 0x060081E2 RID: 33250 RVA: 0x0047F98C File Offset: 0x0047DB8C
		public void method_60(float volume = 1f, bool fast = false)
		{
			SoundBank bank = fast ? this._gearFastSoundBank : this._gearSoundBank;
			this.method_61(bank, volume);
		}

		// Token: 0x060081E3 RID: 33251 RVA: 0x0047F9B4 File Offset: 0x0047DBB4
		public void method_61(SoundBank bank, float volume = 1f)
		{
			if (!this._healthController.IsAlive)
			{
				return;
			}
			this.UpdateMuffledState();
			float rolloff = this.method_67(EAudioMovementState.Gear, false);
			volume *= this.method_64(EAudioMovementState.Gear) * this.MovementContext.CovertEquipmentNoise;
			this._gearSource.SetActive(true);
			this.method_68(this._gearSource, rolloff);
			bank.Play(this._gearSource, EnvironmentType.Outdoor, this.Distance, volume, this.Distance, this.FirstPersonPointOfView, true);
		}

		// Token: 0x060081E4 RID: 33252 RVA: 0x0047FA34 File Offset: 0x0047DC34
		public void method_62(float speed = 55f)
		{
			if (Time.time - this._lastTimeTurnSound >= this.maxLengthTurnSound)
			{
				float num = Mathf.InverseLerp(1f, 360f + (1f - this.MovementContext.PoseLevel) * 360f, this.method_63());
				SoundBank turnSoundBank = this._currentSet.TurnSoundBank;
				float volume = num * this.MovementContext.CovertMovementVolume * turnSoundBank.BaseVolume;
				this.DefaultPlay(turnSoundBank, volume, EAudioMovementState.Turn);
				this._lastTimeTurnSound = Time.time;
				if (num > 0.4f)
				{
					this.method_60(volume, false);
				}
			}
		}

		// Token: 0x060081E5 RID: 33253 RVA: 0x001CE8BB File Offset: 0x001CCABB
		public float method_63()
		{
			return Mathf.Max(this.UsedSimplifiedSkeleton ? 45f : 0f, this.MovementContext.AverageRotationSpeed.Avarage);
		}

		// Token: 0x060081E6 RID: 33254 RVA: 0x0047FAC8 File Offset: 0x0047DCC8
		public void PlaySoundBank(string soundBank)
		{
			if (soundBank == "Prone")
			{
				if (this.SinceLastStep < 0.5f)
				{
					return;
				}
				if (this.CheckSurface(this._proneSurfaceCheck))
				{
					this.UpdateMuffledState();
					this.method_65(this.NestedStepSoundSource);
					SoundBank proneSoundBank = this._currentSet.ProneSoundBank;
					float b = this.MovementContext.CovertMovementVolume * this.MovementContext.ClampedSpeed * this._currentSet.ProneSoundBank.BaseVolume;
					float num = Mathf.Max(0.4f, b);
					num *= this.method_64(EAudioMovementState.Prone);
					this.method_66(EAudioMovementState.Prone, false);
					proneSoundBank.Play(this.NestedStepSoundSource, EnvironmentType.Outdoor, this.Distance, num, this.Distance, this.FirstPersonPointOfView, true);
					this._specificStepAudioController.Play(EAudioMovementState.Prone, this.Environment, this.Distance, num, this.Distance, this.FirstPersonPointOfView);
					this._lastStepTime = Time.time;
				}
			}
		}

		// Token: 0x060081E7 RID: 33255 RVA: 0x0047FBB8 File Offset: 0x0047DDB8
		public float method_64(EAudioMovementState movementState)
		{
			float num = this.PointOfView.IsFirstPerson() ? 70f : this._playerAudioSettings.BaseMaxMovementRolloff;
			return this.method_69(movementState) / num * this.Single_1;
		}

		// Token: 0x060081E8 RID: 33256 RVA: 0x0047FBF8 File Offset: 0x0047DDF8
		public void method_65(BetterSource source)
		{
			int priority = this._priorityCalculator.CalculatePriority(this.Distance, source.MaxDistance);
			source.SetPriority(priority);
		}

		// Token: 0x060081E9 RID: 33257 RVA: 0x001CE8E6 File Offset: 0x001CCAE6
		public void method_66(EAudioMovementState movementState = EAudioMovementState.None, bool includeSpeedMult = false)
		{
			this.method_68(this.NestedStepSoundSource, this.method_67(movementState, includeSpeedMult));
			this._specificStepAudioController.UpdateSoundRolloff(this.NestedStepSoundSource.MaxDistance);
		}

		// Token: 0x060081EA RID: 33258 RVA: 0x0047FC24 File Offset: 0x0047DE24
		public float method_67(EAudioMovementState movementState = EAudioMovementState.None, bool includeSpeedMult = false)
		{
			float num = includeSpeedMult ? this.method_58() : 1f;
			float num2 = this.PointOfView.IsFirstPerson() ? 70f : this._playerAudioSettings.BaseMaxMovementRolloff;
			float multByMovement = this._playerAudioSettings.GetMultByMovement(movementState);
			float num3 = num2 * this.ProtagonistHearing * this.Physical.SoundRadius * multByMovement * num;
			this._cachedMovementRolloff[movementState] = num3;
			return num3;
		}

		// Token: 0x060081EB RID: 33259 RVA: 0x0047FC94 File Offset: 0x0047DE94
		public void method_68(BetterSource source, float rolloff)
		{
			float rolloff2 = rolloff * this._playerAudioSettings.GetRolloffMultByEnvironment(this.Environment) * this.ProtagonistHearing;
			source.SetRolloff(rolloff2);
		}

		// Token: 0x060081EC RID: 33260 RVA: 0x0047FCC4 File Offset: 0x0047DEC4
		public float method_69(EAudioMovementState movementState)
		{
			float result;
			if (!this._cachedMovementRolloff.TryGetValue(movementState, out result))
			{
				return this.method_67(movementState, false);
			}
			return result;
		}

		// Token: 0x060081ED RID: 33261 RVA: 0x001CE912 File Offset: 0x001CCB12
		public IEnumerator method_70(float volume = 1f)
		{
			Player.Class1359 @class = new Player.Class1359(0);
			@class.player_0 = this;
			@class.volume = volume;
			return @class;
		}

		// Token: 0x060081EE RID: 33262 RVA: 0x001CE928 File Offset: 0x001CCB28
		public IEnumerator method_71(EPlayerState state = EPlayerState.Sprint)
		{
			Player.Class1366 @class = new Player.Class1366(0);
			@class.player_0 = this;
			@class.state = state;
			return @class;
		}

		// Token: 0x060081EF RID: 33263 RVA: 0x001CE93E File Offset: 0x001CCB3E
		public IEnumerator method_72(EPlayerState state = EPlayerState.Idle)
		{
			while (this.CurrentState.Name == state && this.HealthController.IsAlive)
			{
				float num = Math.Abs(this.HandsToBodyAngle);
				if (num > EFTHardSettings.Instance.TURN_ANGLE)
				{
					this.method_62(num);
					yield return new WaitForSeconds(EFTHardSettings.Instance.TURN_SOUND_DELAY);
				}
				yield return null;
			}
			yield break;
		}

		// Token: 0x060081F0 RID: 33264 RVA: 0x001CE954 File Offset: 0x001CCB54
		public IEnumerator method_73(EPlayerState state = EPlayerState.Run)
		{
			Player.Class1365 @class = new Player.Class1365(0);
			@class.player_0 = this;
			@class.state = state;
			return @class;
		}

		// Token: 0x060081F1 RID: 33265 RVA: 0x0047FCEC File Offset: 0x0047DEEC
		public void method_74(EBodyPart bodyPart, float damage, DamageInfoStruct damageInfo)
		{
			EDamageType damageType = damageInfo.DamageType;
			if (!this.IsAI && damageType == EDamageType.Fall && damage > this.MIN_FALL_DAMAGE)
			{
				this.Say(EPhraseTrigger.OnBeingHurt, true, 0f, (ETagStatus)0, 100, false);
				return;
			}
			if (!this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers) || damage > 4f)
			{
				if (damageType.IsSelfInflicted())
				{
					bool flag = this.HealthController.FindActiveEffect<GInterface358>(EBodyPart.Common) != null;
					bool flag2;
					if (this.HealthStatus != ETagStatus.BadlyInjured)
					{
						if (this.HealthStatus != ETagStatus.Dying)
						{
							flag2 = false;
							goto IL_80;
						}
					}
					flag2 = !flag;
					IL_80:
					if (!flag2 && this._damageThresholdAudioChecker.TryReachThreshold(damageType))
					{
						this.Say(EPhraseTrigger.OnBeingHurt, true, 0f, (ETagStatus)0, 100, false);
						return;
					}
				}
				else
				{
					this.Say(EPhraseTrigger.OnBeingHurt, true, 0f, (ETagStatus)0, 100, false);
				}
			}
		}

		// Token: 0x060081F2 RID: 33266 RVA: 0x0047FDB0 File Offset: 0x0047DFB0
		[return: TupleElementNames(new string[]
		{
			"hit",
			"surfaceSound"
		})]
		public ValueTuple<bool, BaseBallistic.ESurfaceSound> method_75()
		{
			Vector3 playerColliderCenter = this.MovementContext.PlayerColliderCenter;
			float num = this.MovementContext.CharacterController.height + 0.5f;
			Vector3 endPos = playerColliderCenter + Vector3.down * num;
			BaseBallistic.ESurfaceSound item = BaseBallistic.ESurfaceSound.Concrete;
			RaycastHit raycastHit;
			if (!GClass943.GetNearestHit(playerColliderCenter, endPos, out raycastHit, num, this._stepLayerMask))
			{
				return new ValueTuple<bool, BaseBallistic.ESurfaceSound>(false, item);
			}
			if (raycastHit.collider == null)
			{
				return new ValueTuple<bool, BaseBallistic.ESurfaceSound>(false, item);
			}
			BaseBallistic component = raycastHit.collider.GetComponent<BaseBallistic>();
			if (component != null)
			{
				item = component.GetSurfaceSound(raycastHit.point);
			}
			return new ValueTuple<bool, BaseBallistic.ESurfaceSound>(true, item);
		}

		// Token: 0x060081F3 RID: 33267 RVA: 0x0047FE58 File Offset: 0x0047E058
		public void method_76(bool hit, BaseBallistic.ESurfaceSound surfaceSound)
		{
			if (!hit)
			{
				return;
			}
			if (this.CurrentSurface != surfaceSound)
			{
				this.CurrentSurface = surfaceSound;
				this._currentSet = this._soundBySurface[surfaceSound];
				this._specificStepAudioController.UpdateSurface(surfaceSound);
			}
			this.MovementContext.SoftSurface = (this.CurrentSurface == BaseBallistic.ESurfaceSound.Asphalt || this.CurrentSurface == BaseBallistic.ESurfaceSound.Concrete || this.CurrentSurface == BaseBallistic.ESurfaceSound.Gravel || this.CurrentSurface == BaseBallistic.ESurfaceSound.Soil || this.CurrentSurface == BaseBallistic.ESurfaceSound.Wood || this.CurrentSurface == BaseBallistic.ESurfaceSound.WoodThick || this.CurrentSurface == BaseBallistic.ESurfaceSound.Puddle);
		}

		// Token: 0x060081F4 RID: 33268 RVA: 0x001CE96A File Offset: 0x001CCB6A
		public void method_77(float timeToMount)
		{
			this.method_61(this._gearMediumSoundBank, this._gearMediumSoundBank.RandomVolume);
		}

		// Token: 0x060081F5 RID: 33269 RVA: 0x001CE983 File Offset: 0x001CCB83
		public void method_78(float timeToUnmount)
		{
			this.method_61(this._gearMediumSoundBank, this._gearMediumSoundBank.RandomVolume);
		}

		// Token: 0x060081F6 RID: 33270 RVA: 0x001CE99C File Offset: 0x001CCB9C
		public void method_79(IAnimatorEventParameter animatorEventParameter)
		{
			this.method_61(this._backpackDropBank, this._backpackDropBank.RandomVolume);
		}

		// Token: 0x060081F7 RID: 33271 RVA: 0x001CE9B5 File Offset: 0x001CCBB5
		public bool method_80()
		{
			return !this.FirstPersonPointOfView && this.UsedSimplifiedSkeleton;
		}

		// Token: 0x060081F8 RID: 33272 RVA: 0x001CE9C7 File Offset: 0x001CCBC7
		public virtual void SendUnderRoofStatus(bool isUnderRoof)
		{
		}

		// Token: 0x060081F9 RID: 33273 RVA: 0x001CE9C9 File Offset: 0x001CCBC9
		public virtual void SendTripwireInteractionSoundState(EInteractionStatus interactionStatus, bool isSuccess, bool hasMultiTool)
		{
		}

		// Token: 0x060081FA RID: 33274 RVA: 0x0047FEE8 File Offset: 0x0047E0E8
		public void method_81()
		{
			Action soundUnsubscribeOnDestroy = this._soundUnsubscribeOnDestroy;
			if (soundUnsubscribeOnDestroy != null)
			{
				soundUnsubscribeOnDestroy();
			}
			this._soundUnsubscribeOnDestroy = null;
			if (Class443.Controller != null)
			{
				Class443.Controller.StatusChangedEvent -= this.method_31;
			}
			GInterface268 tripwireInteractionSoundController = this._tripwireInteractionSoundController;
			if (tripwireInteractionSoundController != null)
			{
				tripwireInteractionSoundController.Dispose();
			}
			if (this.MovementContext != null)
			{
				PlayerMountingPointData playerMountingPointData = this.MovementContext.PlayerMountingPointData;
				playerMountingPointData.OnEnterMountedState = (Action<float>)Delegate.Remove(playerMountingPointData.OnEnterMountedState, new Action<float>(this.method_77));
				PlayerMountingPointData playerMountingPointData2 = this.MovementContext.PlayerMountingPointData;
				playerMountingPointData2.OnExitMountedState = (Action<float>)Delegate.Remove(playerMountingPointData2.OnExitMountedState, new Action<float>(this.method_78));
			}
			if (this._dropBackPackEvents != null)
			{
				this._dropBackPackEvents.OnBackpackDropEvent -= this.method_79;
			}
			if (this._healthController != null)
			{
				this._healthController.ApplyDamageEvent -= this.method_74;
				this._healthController.DiedEvent -= this.method_52;
				this._healthController.EffectStartedEvent -= this.method_53;
				this._healthController.EffectRemovedEvent -= this.method_54;
			}
		}

		// Token: 0x1700135C RID: 4956
		// (get) Token: 0x060081FB RID: 33275 RVA: 0x001CE9CB File Offset: 0x001CCBCB
		// (set) Token: 0x060081FC RID: 33276 RVA: 0x001CE9D3 File Offset: 0x001CCBD3
		public GameWorld GameWorld { get; set; }

		// Token: 0x1700135D RID: 4957
		// (get) Token: 0x060081FD RID: 33277 RVA: 0x001CE9DC File Offset: 0x001CCBDC
		// (set) Token: 0x060081FE RID: 33278 RVA: 0x001CE9E4 File Offset: 0x001CCBE4
		public bool IsInBufferZone { get; set; }

		// Token: 0x140001BF RID: 447
		// (add) Token: 0x060081FF RID: 33279 RVA: 0x00480020 File Offset: 0x0047E220
		// (remove) Token: 0x06008200 RID: 33280 RVA: 0x00480058 File Offset: 0x0047E258
		public event GDelegate70 OnPlayerDead;

		// Token: 0x140001C0 RID: 448
		// (add) Token: 0x06008201 RID: 33281 RVA: 0x00480090 File Offset: 0x0047E290
		// (remove) Token: 0x06008202 RID: 33282 RVA: 0x004800C4 File Offset: 0x0047E2C4
		public static event Action<Player, IPlayer, DamageInfoStruct, EBodyPart> OnPlayerDeadStatic;

		// Token: 0x140001C1 RID: 449
		// (add) Token: 0x06008203 RID: 33283 RVA: 0x004800F8 File Offset: 0x0047E2F8
		// (remove) Token: 0x06008204 RID: 33284 RVA: 0x00480130 File Offset: 0x0047E330
		public event GDelegate71 OnPlayerDeadOrUnspawn;

		// Token: 0x140001C2 RID: 450
		// (add) Token: 0x06008205 RID: 33285 RVA: 0x00480168 File Offset: 0x0047E368
		// (remove) Token: 0x06008206 RID: 33286 RVA: 0x004801A0 File Offset: 0x0047E3A0
		public event Action<bool> OnSenseChanged;

		// Token: 0x140001C3 RID: 451
		// (add) Token: 0x06008207 RID: 33287 RVA: 0x004801D8 File Offset: 0x0047E3D8
		// (remove) Token: 0x06008208 RID: 33288 RVA: 0x00480210 File Offset: 0x0047E410
		public event Action PossibleInteractionsChanged;

		// Token: 0x140001C4 RID: 452
		// (add) Token: 0x06008209 RID: 33289 RVA: 0x00480248 File Offset: 0x0047E448
		// (remove) Token: 0x0600820A RID: 33290 RVA: 0x00480280 File Offset: 0x0047E480
		public event Action<EPhraseTrigger, int> PhraseSituation;

		// Token: 0x140001C5 RID: 453
		// (add) Token: 0x0600820B RID: 33291 RVA: 0x004802B8 File Offset: 0x0047E4B8
		// (remove) Token: 0x0600820C RID: 33292 RVA: 0x004802F0 File Offset: 0x0047E4F0
		public event Action<VisorsItemClass, bool> OnGlassesChanged;

		// Token: 0x140001C6 RID: 454
		// (add) Token: 0x0600820D RID: 33293 RVA: 0x00480328 File Offset: 0x0047E528
		// (remove) Token: 0x0600820E RID: 33294 RVA: 0x00480360 File Offset: 0x0047E560
		public event Action<float> OnBlindnessProtectionChanged;

		// Token: 0x140001C7 RID: 455
		// (add) Token: 0x0600820F RID: 33295 RVA: 0x00480398 File Offset: 0x0047E598
		// (remove) Token: 0x06008210 RID: 33296 RVA: 0x004803D0 File Offset: 0x0047E5D0
		public event Action<Player, bool> OnInventoryOpened;

		// Token: 0x140001C8 RID: 456
		// (add) Token: 0x06008211 RID: 33297 RVA: 0x00480408 File Offset: 0x0047E608
		// (remove) Token: 0x06008212 RID: 33298 RVA: 0x00480440 File Offset: 0x0047E640
		public event Action OnStartInventoryOpen;

		// Token: 0x140001C9 RID: 457
		// (add) Token: 0x06008213 RID: 33299 RVA: 0x00480478 File Offset: 0x0047E678
		// (remove) Token: 0x06008214 RID: 33300 RVA: 0x004804B0 File Offset: 0x0047E6B0
		public event Action OnStartQuickdrawPistol;

		// Token: 0x1700135E RID: 4958
		// (get) Token: 0x06008215 RID: 33301 RVA: 0x001CE9ED File Offset: 0x001CCBED
		// (set) Token: 0x06008216 RID: 33302 RVA: 0x001CE9F5 File Offset: 0x001CCBF5
		public GenericEventTranslator EventTranslator { get; set; }

		// Token: 0x1700135F RID: 4959
		// (get) Token: 0x06008217 RID: 33303 RVA: 0x001CE9FE File Offset: 0x001CCBFE
		public IVaultingComponent VaultingComponent
		{
			get
			{
				return this._vaultingComponent;
			}
		}

		// Token: 0x17001360 RID: 4960
		// (get) Token: 0x06008218 RID: 33304 RVA: 0x001CEA06 File Offset: 0x001CCC06
		public IVaultingComponentDebug VaultingComponentDebug
		{
			get
			{
				return this._vaultingComponentDebug;
			}
		}

		// Token: 0x17001361 RID: 4961
		// (get) Token: 0x06008219 RID: 33305 RVA: 0x001CEA0E File Offset: 0x001CCC0E
		public IVaultingParameters VaultingParameters
		{
			get
			{
				return this._vaultingParameters;
			}
		}

		// Token: 0x17001362 RID: 4962
		// (get) Token: 0x0600821A RID: 33306 RVA: 0x001CEA16 File Offset: 0x001CCC16
		public IVaultingGameplayRestrictions VaultingGameplayRestrictions
		{
			get
			{
				return this._vaultingGameplayRestrictions;
			}
		}

		// Token: 0x17001363 RID: 4963
		// (get) Token: 0x0600821B RID: 33307 RVA: 0x001CEA1E File Offset: 0x001CCC1E
		public bool IsEnableVaulting
		{
			get
			{
				return Singleton<BackendConfigSettingsClass>.Instance.VaultingSettings.IsActive;
			}
		}

		// Token: 0x17001364 RID: 4964
		// (get) Token: 0x0600821C RID: 33308 RVA: 0x001CEA2F File Offset: 0x001CCC2F
		public IWeaponMountingComponent WeaponMountingComponent
		{
			get
			{
				return this._weaponMountingComponent;
			}
		}

		// Token: 0x17001365 RID: 4965
		// (get) Token: 0x0600821D RID: 33309 RVA: 0x001CEA37 File Offset: 0x001CCC37
		public ILeftHandController LeftHandController
		{
			get
			{
				return this._leftHandController;
			}
		}

		// Token: 0x17001366 RID: 4966
		// (get) Token: 0x0600821E RID: 33310 RVA: 0x001CEA3F File Offset: 0x001CCC3F
		// (set) Token: 0x0600821F RID: 33311 RVA: 0x001CEA47 File Offset: 0x001CCC47
		public Player.GClass2059<NightVisionComponent> NightVisionObserver { get; set; }

		// Token: 0x17001367 RID: 4967
		// (get) Token: 0x06008220 RID: 33312 RVA: 0x001CEA50 File Offset: 0x001CCC50
		// (set) Token: 0x06008221 RID: 33313 RVA: 0x001CEA58 File Offset: 0x001CCC58
		public Player.GClass2059<ThermalVisionComponent> ThermalVisionObserver { get; set; }

		// Token: 0x17001368 RID: 4968
		// (get) Token: 0x06008222 RID: 33314 RVA: 0x001CEA61 File Offset: 0x001CCC61
		// (set) Token: 0x06008223 RID: 33315 RVA: 0x001CEA69 File Offset: 0x001CCC69
		public Player.GClass2059<FaceShieldComponent> FaceShieldObserver { get; set; }

		// Token: 0x17001369 RID: 4969
		// (get) Token: 0x06008224 RID: 33316 RVA: 0x001CEA72 File Offset: 0x001CCC72
		// (set) Token: 0x06008225 RID: 33317 RVA: 0x001CEA7A File Offset: 0x001CCC7A
		public Player.GClass2059<FaceShieldComponent> FaceCoverObserver { get; set; }

		// Token: 0x1700136A RID: 4970
		// (get) Token: 0x06008226 RID: 33318 RVA: 0x001CEA83 File Offset: 0x001CCC83
		// (set) Token: 0x06008227 RID: 33319 RVA: 0x001CEA8B File Offset: 0x001CCC8B
		public string Location { get; set; }

		// Token: 0x1700136B RID: 4971
		// (get) Token: 0x06008228 RID: 33320 RVA: 0x001CEA94 File Offset: 0x001CCC94
		// (set) Token: 0x06008229 RID: 33321 RVA: 0x001CEA9C File Offset: 0x001CCC9C
		public ISpawnPoint SpawnPoint { get; set; }

		// Token: 0x1700136C RID: 4972
		// (get) Token: 0x0600822A RID: 33322 RVA: 0x001CEAA5 File Offset: 0x001CCCA5
		// (set) Token: 0x0600822B RID: 33323 RVA: 0x001CEAAD File Offset: 0x001CCCAD
		public float RayLength { get; set; }

		// Token: 0x1700136D RID: 4973
		// (get) Token: 0x0600822C RID: 33324 RVA: 0x001CEAB6 File Offset: 0x001CCCB6
		// (set) Token: 0x0600822D RID: 33325 RVA: 0x001CEABE File Offset: 0x001CCCBE
		public InteractableObject InteractableObject { get; set; }

		// Token: 0x1700136E RID: 4974
		// (get) Token: 0x0600822E RID: 33326 RVA: 0x001CEAC7 File Offset: 0x001CCCC7
		// (set) Token: 0x0600822F RID: 33327 RVA: 0x001CEACF File Offset: 0x001CCCCF
		public bool InteractableObjectIsProxy { get; set; }

		// Token: 0x1700136F RID: 4975
		// (get) Token: 0x06008230 RID: 33328 RVA: 0x001CEAD8 File Offset: 0x001CCCD8
		// (set) Token: 0x06008231 RID: 33329 RVA: 0x001CEAE0 File Offset: 0x001CCCE0
		public bool IsAgressorInLighthouseTraderZone { get; set; }

		// Token: 0x17001370 RID: 4976
		// (get) Token: 0x06008232 RID: 33330 RVA: 0x001CEAE9 File Offset: 0x001CCCE9
		// (set) Token: 0x06008233 RID: 33331 RVA: 0x001CEAF1 File Offset: 0x001CCCF1
		public Player InteractablePlayer { get; set; }

		// Token: 0x17001371 RID: 4977
		// (get) Token: 0x06008234 RID: 33332 RVA: 0x001CEAFA File Offset: 0x001CCCFA
		// (set) Token: 0x06008235 RID: 33333 RVA: 0x001CEB02 File Offset: 0x001CCD02
		public PlaceItemTrigger PlaceItemZone { get; set; }

		// Token: 0x17001372 RID: 4978
		// (get) Token: 0x06008236 RID: 33334 RVA: 0x001CEB0B File Offset: 0x001CCD0B
		// (set) Token: 0x06008237 RID: 33335 RVA: 0x001CEB13 File Offset: 0x001CCD13
		public ExfiltrationPoint ExfiltrationPoint { get; set; }

		// Token: 0x17001373 RID: 4979
		// (get) Token: 0x06008238 RID: 33336 RVA: 0x001CEB1C File Offset: 0x001CCD1C
		// (set) Token: 0x06008239 RID: 33337 RVA: 0x001CEB24 File Offset: 0x001CCD24
		public bool ExitTriggerZone { get; set; }

		// Token: 0x17001374 RID: 4980
		// (get) Token: 0x0600823A RID: 33338 RVA: 0x001CEB2D File Offset: 0x001CCD2D
		// (set) Token: 0x0600823B RID: 33339 RVA: 0x001CEB35 File Offset: 0x001CCD35
		public MalfunctionRandom MalfRandoms { get; set; } = new MalfunctionRandom(0);

		// Token: 0x17001375 RID: 4981
		// (get) Token: 0x0600823C RID: 33340 RVA: 0x001CEB3E File Offset: 0x001CCD3E
		public string Infiltration
		{
			get
			{
				return this.Profile.Info.EntryPoint;
			}
		}

		// Token: 0x17001376 RID: 4982
		// (get) Token: 0x0600823D RID: 33341 RVA: 0x001CEB50 File Offset: 0x001CCD50
		public string GroupId
		{
			get
			{
				return this.Profile.Info.GroupId;
			}
		}

		// Token: 0x17001377 RID: 4983
		// (get) Token: 0x0600823E RID: 33342 RVA: 0x001CEB62 File Offset: 0x001CCD62
		public string TeamId
		{
			get
			{
				return this.Profile.Info.TeamId;
			}
		}

		// Token: 0x17001378 RID: 4984
		// (get) Token: 0x0600823F RID: 33343 RVA: 0x001CEB74 File Offset: 0x001CCD74
		public float CarryingWeightRelativeModifier
		{
			get
			{
				return this.Skills.CarryingWeightRelativeModifier * this.HealthController.CarryingWeightRelativeModifier;
			}
		}

		// Token: 0x17001379 RID: 4985
		// (get) Token: 0x06008240 RID: 33344 RVA: 0x001CEB8D File Offset: 0x001CCD8D
		public float CarryingWeightAbsoluteModifier
		{
			get
			{
				return this.HealthController.CarryingWeightAbsoluteModifier;
			}
		}

		// Token: 0x1700137A RID: 4986
		// (get) Token: 0x06008241 RID: 33345 RVA: 0x001CEB9A File Offset: 0x001CCD9A
		public Inventory Inventory
		{
			get
			{
				return this.InventoryController.Inventory;
			}
		}

		// Token: 0x1700137B RID: 4987
		// (get) Token: 0x06008242 RID: 33346 RVA: 0x001CEBA7 File Offset: 0x001CCDA7
		public InventoryEquipment Equipment
		{
			get
			{
				return this.Inventory.Equipment;
			}
		}

		// Token: 0x1700137C RID: 4988
		// (get) Token: 0x06008243 RID: 33347 RVA: 0x001CEBB4 File Offset: 0x001CCDB4
		// (set) Token: 0x06008244 RID: 33348 RVA: 0x001CEBBC File Offset: 0x001CCDBC
		public bool IsInventoryOpened
		{
			get
			{
				return this._isInventoryOpened;
			}
			set
			{
				this._isInventoryOpened = value;
			}
		}

		// Token: 0x1700137D RID: 4989
		// (get) Token: 0x06008245 RID: 33349 RVA: 0x001CEBC5 File Offset: 0x001CCDC5
		public RecodableItemsHandler RecodableItemsHandler
		{
			get
			{
				return this.recodableItemsHandler;
			}
		}

		// Token: 0x1700137E RID: 4990
		// (get) Token: 0x06008246 RID: 33350 RVA: 0x004804E8 File Offset: 0x0047E6E8
		public float BlindnessDuration
		{
			get
			{
				ThermalVisionComponent component = this.ThermalVisionObserver.Component;
				if (((component != null) ? component.Togglable : null) != null && this.ThermalVisionObserver.Component.Togglable.On)
				{
					return 0f;
				}
				FaceShieldComponent component2 = this.FaceShieldObserver.Component;
				float num = (component2 != null && (component2.Togglable == null || component2.Togglable.On)) ? (1f - component2.BlindnessProtection) : 1f;
				VisorsItemClass visorsItemClass = this.Equipment.GetSlot(EquipmentSlot.Eyewear).ContainedItem as VisorsItemClass;
				float num2 = (visorsItemClass != null) ? (1f - visorsItemClass.BlindnessProtection) : 1f;
				FaceCoverItemClass faceCoverItemClass = this.Equipment.GetSlot(EquipmentSlot.FaceCover).ContainedItem as FaceCoverItemClass;
				if (faceCoverItemClass == null)
				{
					return num * num2;
				}
				FaceShieldComponent faceShield = faceCoverItemClass.FaceShield;
				bool flag = faceShield != null && (faceShield.Togglable == null || faceShield.Togglable.On);
				return num * num2 * (flag ? (1f - faceShield.BlindnessProtection) : 1f);
			}
		}

		// Token: 0x1700137F RID: 4991
		// (get) Token: 0x06008247 RID: 33351 RVA: 0x00480600 File Offset: 0x0047E800
		public int CurrentHour
		{
			get
			{
				if (this.GameWorld != null && this.GameWorld.GameDateTime != null)
				{
					return this.GameWorld.GameDateTime.Calculate().Hour;
				}
				return 0;
			}
		}

		// Token: 0x17001380 RID: 4992
		// (get) Token: 0x06008249 RID: 33353 RVA: 0x001CEBCD File Offset: 0x001CCDCD
		// (set) Token: 0x06008248 RID: 33352 RVA: 0x00480644 File Offset: 0x0047E844
		public bool Boolean_0
		{
			get
			{
				return this._sense;
			}
			set
			{
				this._sense = value;
				bool flag = this.HandsController != null && this.HandsController.IsAiming;
				bool flag2 = this._sense && !flag;
				if (this._displaySense != flag2)
				{
					this._displaySense = flag2;
					Action<bool> onSenseChanged = this.OnSenseChanged;
					if (onSenseChanged == null)
					{
						return;
					}
					onSenseChanged(this._displaySense);
				}
			}
		}

		// Token: 0x17001381 RID: 4993
		// (get) Token: 0x0600824A RID: 33354 RVA: 0x004806AC File Offset: 0x0047E8AC
		public string KillerId
		{
			get
			{
				IPlayerOwner player = this.LastDamageInfo.Player;
				if (player != null)
				{
					if (this != player)
					{
						return player.iPlayer.ProfileId;
					}
				}
				return null;
			}
		}

		// Token: 0x17001382 RID: 4994
		// (get) Token: 0x0600824B RID: 33355 RVA: 0x004806DC File Offset: 0x0047E8DC
		public string KillerAccountId
		{
			get
			{
				IPlayerOwner player = this.LastDamageInfo.Player;
				if (player != null)
				{
					if (this != player)
					{
						return player.iPlayer.AccountId;
					}
				}
				return null;
			}
		}

		// Token: 0x17001383 RID: 4995
		// (get) Token: 0x0600824C RID: 33356 RVA: 0x0048070C File Offset: 0x0047E90C
		public bool HasGlasses
		{
			get
			{
				VisorsItemClass visorsItemClass;
				return this.TryFindGlasses(out visorsItemClass);
			}
		}

		// Token: 0x17001384 RID: 4996
		// (get) Token: 0x0600824D RID: 33357 RVA: 0x001CEBD5 File Offset: 0x001CCDD5
		public bool HandsIsEmpty
		{
			get
			{
				return this.HandsController is Player.EmptyHandsController;
			}
		}

		// Token: 0x17001385 RID: 4997
		// (get) Token: 0x0600824E RID: 33358 RVA: 0x001CEBE5 File Offset: 0x001CCDE5
		public bool IsWeaponOrKnifeInHands
		{
			get
			{
				return this.HandsController is Player.FirearmController || this.HandsController is Player.BaseKnifeController;
			}
		}

		// Token: 0x0600824F RID: 33359 RVA: 0x00480724 File Offset: 0x0047E924
		public static TPlayer Create<TPlayer>(GameWorld gameWorld, ResourceKey assetName, int playerId, Vector3 position, EUpdateQueue updateQueue, Player.EUpdateMode armsUpdateMode, Player.EUpdateMode bodyUpdateMode, CharacterControllerSpawner.Mode characterControllerMode, Func<float> getSensitivity, Func<float> getAimingSensitivity, string prefix, bool isThirdPerson, bool useSimplifiedSkeleton = false) where TPlayer : Player
		{
			GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreatePlayerObject(assetName);
			gameObject.name = prefix + gameObject.name;
			gameObject.transform.parent = null;
			Animator componentInChildren = gameObject.GetComponentInChildren<Animator>(true);
			gameObject.SetActive(true);
			return Player.smethod_0<TPlayer>(gameWorld, gameObject, componentInChildren, playerId, position, updateQueue, armsUpdateMode, bodyUpdateMode, characterControllerMode, getSensitivity, getAimingSensitivity, isThirdPerson, useSimplifiedSkeleton);
		}

		// Token: 0x06008250 RID: 33360 RVA: 0x00480788 File Offset: 0x0047E988
		public static T smethod_0<T>(GameWorld gameWorld, GameObject poolObject, Animator animator, int playerId, Vector3 position, EUpdateQueue updateQueue, Player.EUpdateMode armsUpdateMode, Player.EUpdateMode bodyUpdateMode, CharacterControllerSpawner.Mode characterControllerMode, Func<float> getSensitivity, Func<float> getAimingSensitivity, bool isThirdPerson, bool useSimplifiedSkeleton = false) where T : Player
		{
			PlayerPoolObject component = poolObject.GetComponent<PlayerPoolObject>();
			T t = poolObject.AddComponent<T>();
			t.PlayerId = playerId;
			component.RegisteredComponentsToClean.Add(t);
			t.GameWorld = gameWorld;
			t._updateQueue = updateQueue;
			t.GetSensitivity = getSensitivity;
			t.GetAimingSensitivity = getAimingSensitivity;
			t.MalfRandoms = new MalfunctionRandom(UnityEngine.Random.Range(int.MinValue, int.MaxValue));
			t._heavyVestsDeflectRandoms = new GClass3727(512, 0, 0);
			t._armsUpdateMode = armsUpdateMode;
			t.TrunkRotationLimit = EFTHardSettings.Instance.HANDS_TO_BODY_MAX_ANGLE;
			t._bodyUpdateMode = bodyUpdateMode;
			t.PlayerBones = component.PlayerBones;
			t.PlayerBones.Player = t;
			t._animators = new IAnimator[2];
			t.CreateBodyAnimator(animator, updateQueue, useSimplifiedSkeleton);
			t.UsedSimplifiedSkeleton = useSimplifiedSkeleton;
			foreach (Collider collider in component.Colliders)
			{
				collider.enabled = true;
			}
			t.Transform.Original.position = position;
			t._characterController = component.CharacterControllerSpawner.Spawn(characterControllerMode, t, t.gameObject, false, isThirdPerson);
			t._triggerColliderSearcher = component.CharacterControllerSpawner.TriggerColliderSearcher;
			t._customHandRotator = new GClass2093();
			t.POM = component.PlayerOverlapManager;
			if (t.POM != null)
			{
				t.POM.Init(t._characterController.GetCollider());
			}
			IKAuthority[] behaviours = t.BodyAnimatorCommon.GetBehaviours<IKAuthority>();
			for (int i = 0; i < behaviours.Length; i++)
			{
				behaviours[i].PlayerBones = t.PlayerBones;
			}
			t.Grounder = component.GrounderFbbik;
			t.Grounder.enabled = true;
			t._fbbik = component.FullBodyBipedIk;
			t.HitReaction = component.HitReaction;
			t.HitReaction.enabled = false;
			t._limbs = component.LimbIks;
			LimbIK[] limbs = t._limbs;
			for (int i = 0; i < limbs.Length; i++)
			{
				limbs[i].enabled = true;
			}
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
			{
				PlayerSpirit playerSpirit = Singleton<PoolManagerClass>.Instance.CreateFromPool<PlayerSpirit>(useSimplifiedSkeleton ? ResourceKeyManagerAbstractClass.ZOMBIE_SPIRIT_RESOURCE_KEY : ResourceKeyManagerAbstractClass.PLAYER_SPIRIT_RESOURCE_KEY);
				playerSpirit.transform.position = Vector3.zero;
				playerSpirit.gameObject.SetActive(true);
				t.Spirit = playerSpirit;
				t.Transform.Original.SetParent(playerSpirit.transform, false);
				playerSpirit.Init(t, position, t._bodyUpdateMode != Player.EUpdateMode.None, characterControllerMode, null);
			}
			t.Logger = new Player.GClass724(LoggerMode.Add);
			return t;
		}

		// Token: 0x06008251 RID: 33361 RVA: 0x001CEC04 File Offset: 0x001CCE04
		public virtual BasePhysicalClass CreatePhysical()
		{
			return new PlayerPhysicalClass();
		}

		// Token: 0x06008252 RID: 33362 RVA: 0x00480B10 File Offset: 0x0047ED10
		public virtual void CreateBodyAnimator(Animator animator, EUpdateQueue updateQueue, bool useSimplifiedSkeleton)
		{
			if (BackendConfigAbstractClass.Config.UseBodyFastAnimator)
			{
				FastAnimatorControllerClass fastAnimatorController = GClass1346.Deserialize(Singleton<IEasyAssets>.Instance.GetAsset(this.UsedSimplifiedSkeleton ? ResourceKeyManagerAbstractClass.ZOMBIE_FAST_ANIMATOR_CONTROLLER : ResourceKeyManagerAbstractClass.PLAYER_FAST_ANIMATOR_CONTROLLER).bytes);
				RootMotionBlendTable asset = Singleton<IEasyAssets>.Instance.GetAsset(this.UsedSimplifiedSkeleton ? ResourceKeyManagerAbstractClass.ZOMBIE_ROOTMOTION_TABLE : ResourceKeyManagerAbstractClass.PLAYER_ROOTMOTION_TABLE);
				asset.LoadNodes();
				this._bodyUpdateMode = Player.EUpdateMode.Manual;
				this._animators[0] = GClass1445.CreateAnimator(fastAnimatorController, asset._loadedNodes, this.PlayerBones.BodyTransform.Original, this.PlayerBones.PlayableAnimator);
				this._animators[0].cullingMode = AnimatorCullingMode.AlwaysAnimate;
				this._animators[0].updateMode = ((updateQueue == EUpdateQueue.FixedUpdate) ? AnimatorUpdateMode.AnimatePhysics : AnimatorUpdateMode.Normal);
				CharacterClipsKeeper asset2 = Singleton<IEasyAssets>.Instance.GetAsset(this.UsedSimplifiedSkeleton ? ResourceKeyManagerAbstractClass.ZOMBIE_ANIMATION_CLIPS_KEEPER : ResourceKeyManagerAbstractClass.PLAYER_ANIMATION_CLIPS_KEEPER);
				FastAnimatorProcessorClass fastAnimatorProcessorClass = this._animators[0] as FastAnimatorProcessorClass;
				this.PlayerBones.PlayableAnimator.Init(this._animators[0], fastAnimatorProcessorClass.GetParametersCache(), asset, asset2, false);
				this.PlayerBones.PlayableAnimator.SetCuller(new GClass1340(this.PlayerBones.PlayableAnimator));
				this.PlayerBones.PlayableAnimator.Play();
				for (int i = 0; i < this.PlayerBones.PlayableAnimator.initialLayerInfo.Length; i++)
				{
					this._animators[0].SetLayerWeight(i, this.PlayerBones.PlayableAnimator.initialLayerInfo[i].weight);
				}
				return;
			}
			this._animators[0] = GClass1445.CreateAnimator(animator);
			this._animators[0].cullingMode = AnimatorCullingMode.AlwaysAnimate;
			this._animators[0].updateMode = ((updateQueue == EUpdateQueue.FixedUpdate) ? AnimatorUpdateMode.AnimatePhysics : AnimatorUpdateMode.Normal);
			if (useSimplifiedSkeleton)
			{
				return;
			}
			this._animators[0].SetLayerWeight(17, 0f);
			this._animators[0].SetLayerWeight(19, 0f);
			if (this.IsAI)
			{
				this._animators[0].SetLayerWeight(15, 0f);
			}
		}

		// Token: 0x06008253 RID: 33363 RVA: 0x00480D14 File Offset: 0x0047EF14
		public void method_82()
		{
			if (!(this._createdAnimator == null) && !(this._createdRuntimeAnimatorController == null) && !BackendConfigAbstractClass.Config.UseBodyFastAnimator)
			{
				this._animators[0].runtimeAnimatorController = this._createdRuntimeAnimatorController;
				if (this._createdAnimator.runtimeAnimatorController == null)
				{
					this._createdAnimator.runtimeAnimatorController = this._createdRuntimeAnimatorController;
				}
				this._createdAnimator = null;
				this._createdRuntimeAnimatorController = null;
				return;
			}
		}

		// Token: 0x06008254 RID: 33364 RVA: 0x00480D90 File Offset: 0x0047EF90
		public virtual Task Init(Quaternion rotation, string layerName, EPointOfView pointOfView, Profile profile, Player.PlayerInventoryController inventoryController, IHealthController healthController, IStatisticsManager statisticsManager, AbstractQuestControllerClass questController, AbstractAchievementControllerClass achievementsController, AbstractPrestigeControllerClass prestigeController, GClass3617 dialogController, IViewFilter filter, Player.EVoipState voipState, bool aiControlled = false, bool async = true)
		{
			Player.Struct329 @struct;
			@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
			@struct.player_0 = this;
			@struct.rotation = rotation;
			@struct.layerName = layerName;
			@struct.pointOfView = pointOfView;
			@struct.profile = profile;
			@struct.inventoryController = inventoryController;
			@struct.healthController = healthController;
			@struct.statisticsManager = statisticsManager;
			@struct.questController = questController;
			@struct.achievementsController = achievementsController;
			@struct.prestigeController = prestigeController;
			@struct.dialogController = dialogController;
			@struct.filter = filter;
			@struct.voipState = voipState;
			@struct.aiControlled = aiControlled;
			@struct.async = async;
			@struct.int_0 = -1;
			@struct.asyncTaskMethodBuilder_0.Start<Player.Struct329>(ref @struct);
			return @struct.asyncTaskMethodBuilder_0.Task;
		}

		// Token: 0x06008255 RID: 33365 RVA: 0x00480E58 File Offset: 0x0047F058
		public virtual void InitializeLeftHandController()
		{
			this._leftHandController = new GClass2725(this.MovementContext.PlayerAnimator.Animator, this.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.LeftHandInteractionEvents, this.PlayerBones.LeftPalm);
		}

		// Token: 0x06008256 RID: 33366 RVA: 0x00480EA8 File Offset: 0x0047F0A8
		public void method_83(bool aiControlled)
		{
			if (aiControlled)
			{
				return;
			}
			BackendConfigSettingsClass.GClass1753 mountingSettings = Singleton<BackendConfigSettingsClass>.Instance.MountingSettings;
			this._weaponMountingComponent = new GClass2667(this._playerBody.PlayerBones.weaponMountingView, this.MovementContext, this.ProceduralWeaponAnimation, mountingSettings.PointDetectionSettings, mountingSettings.MovementSettings, this.ProceduralWeaponAnimation.HandsContainer);
			this.HandsChangingEvent += this._weaponMountingComponent.CancelFindingPoint;
		}

		// Token: 0x06008257 RID: 33367 RVA: 0x00480F1C File Offset: 0x0047F11C
		public virtual void InitVaultingComponent(bool aiControlled)
		{
			if (aiControlled)
			{
				return;
			}
			BackendConfigSettingsClass.VaultingGlobalSettings vaultingSettings = Singleton<BackendConfigSettingsClass>.Instance.VaultingSettings;
			if (!vaultingSettings.IsActive)
			{
				return;
			}
			GClass2679 gclass = new GClass2679(this.MovementContext, vaultingSettings, new Func<bool>(this.method_144), new Func<bool>(this.method_145), new Func<bool>(this.method_146));
			this._vaultingComponent = gclass;
			this._vaultingComponentDebug = gclass;
			this._vaultingParameters = gclass;
			this.UpdateEvent += this._vaultingComponent.DoVaultingTick;
			this._vaultingGameplayRestrictions = new GClass2680(this, gclass);
			this.InitVaultingAudioControllers(this._vaultingParameters);
		}

		// Token: 0x06008258 RID: 33368 RVA: 0x00480FB8 File Offset: 0x0047F1B8
		public virtual void CreateSlotObservers()
		{
			this.NightVisionObserver = new Player.GClass2059<NightVisionComponent>(this.Equipment.GetSlot(EquipmentSlot.Headwear), new Func<NightVisionComponent, Action, Action>(Player.Class1318.class1318_0.method_8));
			this.ThermalVisionObserver = new Player.GClass2059<ThermalVisionComponent>(this.Equipment.GetSlot(EquipmentSlot.Headwear), new Func<ThermalVisionComponent, Action, Action>(Player.Class1318.class1318_0.method_9));
			this.FaceShieldObserver = new Player.GClass2059<FaceShieldComponent>(this.Equipment.GetSlot(EquipmentSlot.Headwear), new Func<FaceShieldComponent, Action, Action>(Player.Class1318.class1318_0.method_10));
			this.FaceCoverObserver = new Player.GClass2059<FaceShieldComponent>(this.Equipment.GetSlot(EquipmentSlot.FaceCover), new Func<FaceShieldComponent, Action, Action>(Player.Class1318.class1318_0.method_11));
		}

		// Token: 0x06008259 RID: 33369 RVA: 0x001CEC0B File Offset: 0x001CCE0B
		public void method_84(EBodyPart arg1, ValueStruct arg2)
		{
			this.ExecuteSkill(new Action<float>(this.Skills.SurgeryAction.Complete));
			this.UpdateSpeedLimitByHealth();
		}

		// Token: 0x0600825A RID: 33370 RVA: 0x001CEC30 File Offset: 0x001CCE30
		public void method_85(EBodyPart arg1, EDamageType arg2)
		{
			if ((arg1 == EBodyPart.LeftLeg || arg1 == EBodyPart.RightLeg) && this.CurrentState.Name == EPlayerState.Sprint)
			{
				this.StartInflictSelfDamageCoroutine();
			}
			this.UpdateConditionsAfterBodyPartStateChanged(arg1);
		}

		// Token: 0x0600825B RID: 33371 RVA: 0x001CEC55 File Offset: 0x001CCE55
		public void BindSlotViewChangedAction(EquipmentSlot slot, Action<GameObject> action)
		{
			this._playerBody.SlotViews.GetByKey(slot).ParentedModel.Bind(action);
		}

		// Token: 0x0600825C RID: 33372 RVA: 0x004810A4 File Offset: 0x0047F2A4
		public void method_86(GameObject _)
		{
			this._helmetLightControllers = this.PlayerBones.Head.Original.GetComponentsInChildrenActiveIgnoreFirstLevel<TacticalComboVisualController>();
			foreach (TacticalComboVisualController tacticalComboVisualController in this._helmetLightControllers)
			{
				tacticalComboVisualController.UpdateBeams(false);
			}
			this.SendHeadlightsPacket(true);
		}

		// Token: 0x0600825D RID: 33373 RVA: 0x00481114 File Offset: 0x0047F314
		public virtual void Say(EPhraseTrigger phrase, bool demand = false, float delay = 0f, ETagStatus mask = (ETagStatus)0, int probability = 100, bool aggressive = false)
		{
			if (phrase == EPhraseTrigger.Cooperation)
			{
				this.vmethod_7(EInteraction.FriendlyGesture);
			}
			if (phrase == EPhraseTrigger.MumblePhrase)
			{
				phrase = ((aggressive || Time.time < this.Awareness) ? EPhraseTrigger.OnFight : EPhraseTrigger.OnMutter);
			}
			if (!this.Speaker.OnDemandOnly || demand)
			{
				if (Singleton<BotEventHandler>.Instantiated)
				{
					Singleton<BotEventHandler>.Instance.SayPhrase(this, phrase);
				}
				if (demand || probability > 99 || probability > UnityEngine.Random.Range(0, 100))
				{
					ETagStatus etagStatus = (aggressive || this.Awareness > Time.time) ? ETagStatus.Combat : ETagStatus.Unaware;
					if (delay > 0f)
					{
						this.Speaker.Queue(phrase, this.HealthStatus | mask | etagStatus, delay, demand);
						return;
					}
					this.Speaker.Play(phrase, this.HealthStatus | mask | etagStatus, demand, null);
				}
				return;
			}
			Action<EPhraseTrigger, int> phraseSituation = this.PhraseSituation;
			if (phraseSituation == null)
			{
				return;
			}
			phraseSituation(phrase, 5);
		}

		// Token: 0x0600825E RID: 33374 RVA: 0x001CEC74 File Offset: 0x001CCE74
		public void NeedRepairMalfPhraseSituation(Weapon.EMalfunctionState malfState, bool isKnown)
		{
			if (isKnown && (malfState == Weapon.EMalfunctionState.SoftSlide || malfState == Weapon.EMalfunctionState.HardSlide))
			{
				Action<EPhraseTrigger, int> phraseSituation = this.PhraseSituation;
				if (phraseSituation == null)
				{
					return;
				}
				phraseSituation(EPhraseTrigger.OnWeaponJammed, 5);
				return;
			}
			else
			{
				Action<EPhraseTrigger, int> phraseSituation2 = this.PhraseSituation;
				if (phraseSituation2 == null)
				{
					return;
				}
				phraseSituation2(EPhraseTrigger.WeaponBroken, 5);
				return;
			}
		}

		// Token: 0x17001386 RID: 4998
		// (get) Token: 0x0600825F RID: 33375 RVA: 0x001CECA8 File Offset: 0x001CCEA8
		public virtual Vector3 LocalShotDirection
		{
			get
			{
				return this.ProceduralWeaponAnimation.ShotDirection;
			}
		}

		// Token: 0x06008260 RID: 33376 RVA: 0x001CECB5 File Offset: 0x001CCEB5
		public virtual void OnPhraseTold(EPhraseTrigger @event, TaggedClip clip, TagBank bank, PhraseSpeakerClass speaker)
		{
			this.method_33(clip);
		}

		// Token: 0x17001387 RID: 4999
		// (get) Token: 0x06008261 RID: 33377 RVA: 0x004811F4 File Offset: 0x0047F3F4
		public ETagStatus HealthStatus
		{
			get
			{
				float normalized = this.HealthController.GetBodyPartHealth(EBodyPart.Common, false).Normalized;
				int num;
				int num2;
				this.HealthController.GetBodyPartsInCriticalCondition(0.15f, out num, out num2);
				if (num2 > 0 || normalized < 0.2f)
				{
					return ETagStatus.Dying;
				}
				if (num > 2 || normalized < 0.4f)
				{
					return ETagStatus.BadlyInjured;
				}
				if (normalized < 0.9f)
				{
					return ETagStatus.Injured;
				}
				return ETagStatus.Healthy;
			}
		}

		// Token: 0x06008262 RID: 33378 RVA: 0x001CECBE File Offset: 0x001CCEBE
		public void OnControllerColliderHit(ControllerColliderHit hit)
		{
			this.MovementContext.OnControllerColliderHit(hit);
		}

		// Token: 0x06008263 RID: 33379 RVA: 0x00481264 File Offset: 0x0047F464
		public virtual void OnDestroy()
		{
			this.Destroyed = true;
			Class443.OnInitialized -= this.method_30;
			CameraClass.Instance.FoVUpdateAction -= this.OnFovUpdatedEvent;
			if (this.Speaker != null)
			{
				this.Speaker.OnPhraseTold -= this.OnPhraseTold;
				this.Speaker.OnDestroy();
			}
			this.method_50();
			this.method_32();
			this.method_51();
			this.StopInteractionSound(0f);
			this.Dispose();
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this.Spirit != null)
			{
				this.Spirit.IsStub = true;
				UnityEngine.Object.Destroy(this.Spirit.gameObject);
			}
		}

		// Token: 0x06008264 RID: 33380 RVA: 0x001CECCC File Offset: 0x001CCECC
		public virtual void TraderStandingHandler(Profile.TraderInfo traderInfo)
		{
		}

		// Token: 0x06008265 RID: 33381 RVA: 0x001CECCE File Offset: 0x001CCECE
		public virtual void OnInteractWithLightHouseTraderZone(GStruct434[] AllowedPlayers, GStruct434[] UnallowedPlayers)
		{
		}

		// Token: 0x06008266 RID: 33382 RVA: 0x001CECD0 File Offset: 0x001CCED0
		public virtual void OnLighthouseTraderZoneDebugToolSwitch(bool active)
		{
		}

		// Token: 0x06008267 RID: 33383 RVA: 0x001CECD2 File Offset: 0x001CCED2
		public virtual void ShowStringNotification(string message)
		{
		}

		// Token: 0x06008268 RID: 33384 RVA: 0x001CECD4 File Offset: 0x001CCED4
		public void method_87(EBodyPart bodyPart, float diff, DamageInfoStruct damageInfo)
		{
			if (Mathf.Abs(diff) < 0.01f)
			{
				return;
			}
			this.UpdateConditionsAfterBodyPartStateChanged(bodyPart);
		}

		// Token: 0x06008269 RID: 33385 RVA: 0x001CECEB File Offset: 0x001CCEEB
		public void UpdateConditionsAfterBodyPartStateChanged(EBodyPart bodyPart)
		{
			if (bodyPart != EBodyPart.LeftLeg)
			{
				if (bodyPart != EBodyPart.RightLeg)
				{
					if (bodyPart == EBodyPart.LeftArm || bodyPart == EBodyPart.RightArm)
					{
						this.UpdateArmsCondition();
						goto IL_20;
					}
					goto IL_20;
				}
			}
			this.UpdateSpeedLimitByHealth();
			IL_20:
			this.UpdateBreathStatus();
		}

		// Token: 0x0600826A RID: 33386 RVA: 0x00481324 File Offset: 0x0047F524
		public virtual void UpdateArmsCondition()
		{
			if (this.HealthController.FindActiveEffect<GInterface358>(EBodyPart.Common) != null)
			{
				this.MovementContext.SetPhysicalCondition(EPhysicalCondition.LeftArmDamaged, false);
				this.MovementContext.SetPhysicalCondition(EPhysicalCondition.RightArmDamaged, false);
				return;
			}
			bool val = this.HealthController.IsBodyPartBroken(EBodyPart.LeftArm) || this.HealthController.IsBodyPartDestroyed(EBodyPart.LeftArm);
			bool val2 = this.HealthController.IsBodyPartBroken(EBodyPart.RightArm) || this.HealthController.IsBodyPartDestroyed(EBodyPart.RightArm);
			this.MovementContext.SetPhysicalCondition(EPhysicalCondition.LeftArmDamaged, val);
			this.MovementContext.SetPhysicalCondition(EPhysicalCondition.RightArmDamaged, val2);
		}

		// Token: 0x0600826B RID: 33387 RVA: 0x004813B8 File Offset: 0x0047F5B8
		public virtual void OnChangeRadioTransmitterState(bool isEncoded, RadioTransmitterStatus status, bool isAgressor)
		{
			RadioTransmitterRecodableComponent radioTransmitterRecodableComponent;
			if (this.RecodableItemsHandler.TryToGetRecodableComponent<RadioTransmitterRecodableComponent>(out radioTransmitterRecodableComponent))
			{
				radioTransmitterRecodableComponent.SetStatus(status);
			}
			this.IsAgressorInLighthouseTraderZone = isAgressor;
		}

		// Token: 0x0600826C RID: 33388 RVA: 0x004813E4 File Offset: 0x0047F5E4
		public virtual void OnHealthEffectAdded(IEffect effect)
		{
			Player.Class1356 @class = new Player.Class1356();
			@class.player_0 = this;
			@class.effect = effect;
			bool flag = true;
			if (@class.effect is GInterface355)
			{
				this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Tremor, true);
			}
			else if (@class.effect is GInterface357)
			{
				if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers))
				{
					flag = false;
				}
			}
			else if (!(@class.effect is GInterface358) && !(@class.effect is GInterface350) && !(@class.effect is GInterface342))
			{
				if (@class.effect is GInterface371)
				{
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Panic, true);
				}
				else if (@class.effect is GInterface361)
				{
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Tremor, true);
				}
				else
				{
					GInterface376 ginterface = @class.effect as GInterface376;
					if (ginterface != null)
					{
						this.MovementContext.SetPhysicalCondition(EPhysicalCondition.UsingMeds, true);
						if (ginterface.NoMove)
						{
							this.MovementContext.SetPhysicalCondition(EPhysicalCondition.HealingLegs, true);
						}
					}
					else if (@class.effect is GInterface356)
					{
						this.ExecuteSkill(new Action(@class.method_0));
					}
					else if (@class.effect is GInterface366)
					{
						this.Fatigue = @class.effect;
					}
					else if (@class.effect is GInterface352)
					{
						this.method_88(@class.effect.WorkStateTime);
					}
				}
			}
			else
			{
				this.UpdateSpeedLimitByHealth();
				this.UpdateArmsCondition();
				if (@class.effect is GInterface350)
				{
					this.Physical.BerserkRestorationFactor = true;
					this.Say(EPhraseTrigger.OnFight, true, 0f, (ETagStatus)0, 100, false);
				}
				GInterface342 ginterface2 = @class.effect as GInterface342;
				if (ginterface2 != null && !ginterface2.WasPaused && this.FractureSound != null && Singleton<BetterAudio>.Instantiated)
				{
					BetterSource betterSource = Singleton<BetterAudio>.Instance.PlayAtPoint(this.Position, this.FractureSound, CameraClass.Instance.Distance(this.Position), BetterAudio.AudioSourceGroupType.Character, 15, 1f, EOcclusionTest.None, null, false);
					SpatialAudioSystem spatialAudioSystem;
					if (!this.PointOfView.IsFirstPerson() && betterSource != null && MonoBehaviourSingleton<SpatialAudioSystem>.Exist(out spatialAudioSystem))
					{
						spatialAudioSystem.ProcessSourceOcclusion(this, betterSource, false);
					}
				}
			}
			if (flag)
			{
				this.ExecuteSkill(new Action(@class.method_1));
			}
		}

		// Token: 0x0600826D RID: 33389 RVA: 0x001CED13 File Offset: 0x001CCF13
		public void method_88(float time)
		{
			if (!this.IsAI && !(this.Equipment.GetSlot(EquipmentSlot.Earpiece).ContainedItem is HeadphonesItemClass))
			{
				Singleton<BetterAudio>.Instance.StartTinnitusEffect(time, this._tinnitus);
			}
		}

		// Token: 0x0600826E RID: 33390 RVA: 0x00481644 File Offset: 0x0047F844
		public virtual void OnHealthEffectRemoved(IEffect effect)
		{
			if (effect is GInterface355)
			{
				this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Tremor, false);
				return;
			}
			if (!(effect is GInterface358) && !(effect is GInterface350) && !(effect is GInterface342))
			{
				if (effect is GInterface361 && this._healthController.FindActiveEffect<GInterface361>(EBodyPart.Common) == null)
				{
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Tremor, false);
					return;
				}
				if (effect is GInterface371 && this._healthController.FindActiveEffect<GInterface371>(EBodyPart.Common) == null)
				{
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.Panic, false);
					return;
				}
				if (effect is GInterface376 && this._healthController.FindActiveEffect<GInterface376>(EBodyPart.Common) == null)
				{
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.UsingMeds, false);
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.HealingLegs, false);
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.RightLegDamaged, this.HealthController.IsBodyPartBroken(EBodyPart.RightLeg) || this.HealthController.IsBodyPartDestroyed(EBodyPart.RightLeg));
					this.MovementContext.SetPhysicalCondition(EPhysicalCondition.LeftLegDamaged, this.HealthController.IsBodyPartBroken(EBodyPart.LeftLeg) || this.HealthController.IsBodyPartDestroyed(EBodyPart.LeftLeg));
					return;
				}
				if (effect is GInterface356)
				{
					this.ExecuteSkill(new Action(this.method_147));
					return;
				}
				if (effect is GInterface366)
				{
					this.Fatigue = null;
				}
			}
			else
			{
				this.UpdateSpeedLimitByHealth();
				this.UpdateArmsCondition();
				if (effect is GInterface350)
				{
					this.Physical.BerserkRestorationFactor = false;
					return;
				}
			}
		}

		// Token: 0x0600826F RID: 33391 RVA: 0x004817B8 File Offset: 0x0047F9B8
		public virtual void UpdateSpeedLimitByHealth()
		{
			this.MovementContext.SetPhysicalCondition(EPhysicalCondition.OnPainkillers, this.HealthController.FindActiveEffect<GInterface358>(EBodyPart.Common) != null || this.HealthController.FindActiveEffect<GInterface350>(EBodyPart.Common) != null);
			this.MovementContext.SetPhysicalCondition(EPhysicalCondition.RightLegDamaged, this.HealthController.IsBodyPartBroken(EBodyPart.RightLeg) || this.HealthController.IsBodyPartDestroyed(EBodyPart.RightLeg));
			this.MovementContext.SetPhysicalCondition(EPhysicalCondition.LeftLegDamaged, this.HealthController.IsBodyPartBroken(EBodyPart.LeftLeg) || this.HealthController.IsBodyPartDestroyed(EBodyPart.LeftLeg));
			this.RemoveStateSpeedLimit(Player.ESpeedLimit.HealthCondition);
			if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightLegDamaged) || this.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftLegDamaged))
			{
				if (!this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers))
				{
					this.MovementContext.EnableSprint(false);
					if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightLegDamaged) && this.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftLegDamaged))
					{
						this.AddStateSpeedLimit(0.2f, Player.ESpeedLimit.HealthCondition);
					}
					else
					{
						this.AddStateSpeedLimit(0.3f, Player.ESpeedLimit.HealthCondition);
					}
				}
				if (this.CurrentState.Name == EPlayerState.Sprint)
				{
					this.StartInflictSelfDamageCoroutine();
				}
			}
		}

		// Token: 0x06008270 RID: 33392 RVA: 0x001CED47 File Offset: 0x001CCF47
		public void OnItemRemoved(GEventArgs3 eventArgs)
		{
			if (eventArgs.Status == CommandStatus.Succeed)
			{
				this.OnItemAddedOrRemoved(eventArgs.Item, eventArgs.From, false);
			}
		}

		// Token: 0x06008271 RID: 33393 RVA: 0x001CED65 File Offset: 0x001CCF65
		public void OnSetInHands(GEventArgs9 eventArgs)
		{
			if (eventArgs.Status == CommandStatus.Succeed)
			{
				this._itemInHands.Value = eventArgs.Item;
			}
		}

		// Token: 0x06008272 RID: 33394 RVA: 0x004818D0 File Offset: 0x0047FAD0
		public void OnItemAdded(GEventArgs2 eventArgs)
		{
			if (eventArgs.Status == CommandStatus.Succeed)
			{
				this.OnItemAddedOrRemoved(eventArgs.Item, eventArgs.To, true);
				ArmorComponent itemComponent = eventArgs.Item.GetItemComponent<ArmorComponent>();
				if (itemComponent != null)
				{
					this.OnArmorPointsChanged(itemComponent, true);
				}
				SideEffectComponent itemComponent2 = eventArgs.Item.GetItemComponent<SideEffectComponent>();
				if (itemComponent2 != null)
				{
					this.OnSideEffectApplied(itemComponent2);
				}
			}
		}

		// Token: 0x06008273 RID: 33395 RVA: 0x00481928 File Offset: 0x0047FB28
		public void SwitchHeadLights(bool togglesActive, bool changesState)
		{
			if (!this.IsHeadLightsAnimationActive && this.StateIsSuitableForHandInput && this._helmetLightControllers.Any<TacticalComboVisualController>())
			{
				foreach (TacticalComboVisualController tacticalComboVisualController in this._helmetLightControllers)
				{
					FirearmLightStateStruct lightState = tacticalComboVisualController.LightMod.GetLightState(togglesActive, changesState);
					tacticalComboVisualController.LightMod.SetLightState(lightState);
				}
				this.SendHeadlightsPacket(false);
				this.SwitchHeadLightsAnimation();
				return;
			}
		}

		// Token: 0x06008274 RID: 33396 RVA: 0x001CED81 File Offset: 0x001CCF81
		public virtual void SendHeadlightsPacket(bool isSilent)
		{
		}

		// Token: 0x06008275 RID: 33397 RVA: 0x001CED83 File Offset: 0x001CCF83
		public virtual void SendWeaponLightPacket()
		{
		}

		// Token: 0x06008276 RID: 33398 RVA: 0x004819B4 File Offset: 0x0047FBB4
		public void UpdatePhonesReally()
		{
			GClass2596 gclass;
			if (!GClass3670.TryGetData<GClass2596>(out gclass))
			{
				return;
			}
			CompoundItem compoundItem = this.Equipment.GetSlot(EquipmentSlot.Headwear).ContainedItem as CompoundItem;
			CompoundItem compoundItem2 = this.Equipment.GetSlot(EquipmentSlot.FaceCover).ContainedItem as CompoundItem;
			HeadphonesItemClass headphonesItemClass = (this.Equipment.GetSlot(EquipmentSlot.Earpiece).ContainedItem as HeadphonesItemClass) ?? ((compoundItem != null) ? compoundItem.GetAllItemsFromCollection().OfType<HeadphonesItemClass>().FirstOrDefault<HeadphonesItemClass>() : null);
			HeadphonesTemplateClass template = gclass.Default;
			if (headphonesItemClass != null)
			{
				template = headphonesItemClass.Template;
			}
			if (template.IsDefault())
			{
				ArmoredEquipmentTemplateClass armoredEquipmentTemplateClass = ((compoundItem != null) ? compoundItem.Template : null) as ArmoredEquipmentTemplateClass;
				if (armoredEquipmentTemplateClass != null)
				{
					EDeafStrength deafStrength = compoundItem.GetItemComponentsInChildren(true).Select(new Func<CompositeArmorComponent, EDeafStrength>(Player.Class1318.class1318_0.method_12)).Append(armoredEquipmentTemplateClass.DeafStrength).OrderByDescending(new Func<EDeafStrength, int>(Player.Class1318.class1318_0.method_13)).FirstOrDefault<EDeafStrength>();
					template = gclass.GetHeadphonesTemplateByDeaf(deafStrength);
				}
			}
			if (template.IsDefault() && compoundItem2 != null)
			{
				EDeafStrength deafStrength2 = compoundItem2.GetItemComponentsInChildren(true).Select(new Func<CompositeArmorComponent, EDeafStrength>(Player.Class1318.class1318_0.method_14)).OrderByDescending(new Func<EDeafStrength, int>(Player.Class1318.class1318_0.method_15)).FirstOrDefault<EDeafStrength>();
				template = gclass.GetHeadphonesTemplateByDeaf(deafStrength2);
			}
			Singleton<BetterAudio>.Instance.ApplyHeadphonesTemplate(template);
		}

		// Token: 0x06008277 RID: 33399 RVA: 0x001CED85 File Offset: 0x001CCF85
		public virtual void UpdatePhones()
		{
			if (this.IsYourPlayer)
			{
				this.UpdatePhonesReally();
			}
		}

		// Token: 0x06008278 RID: 33400 RVA: 0x00481B48 File Offset: 0x0047FD48
		public virtual void OnItemAddedOrRemoved(Item item, ItemAddress location, bool added)
		{
			Player.Class1357 @class = new Player.Class1357();
			if (location is GClass3393)
			{
				return;
			}
			@class.headSlots = new Slot[]
			{
				this.Equipment.GetSlot(EquipmentSlot.Eyewear),
				this.Equipment.GetSlot(EquipmentSlot.Headwear),
				this.Equipment.GetSlot(EquipmentSlot.FaceCover)
			};
			IEnumerable<ItemAddress> allParentLocations = location.GetAllParentLocations(true);
			if (allParentLocations.Any(new Func<ItemAddress, bool>(@class.method_0)))
			{
				VisorsItemClass arg2;
				bool arg = this.TryFindGlasses(out arg2);
				Action<VisorsItemClass, bool> onGlassesChanged = this.OnGlassesChanged;
				if (onGlassesChanged != null)
				{
					onGlassesChanged(arg2, arg);
				}
				this.method_89();
				if (item.GetItemComponentsInChildren(true).Any<NightVisionComponent>())
				{
					this.NightVisionObserver.Update();
				}
				if (item.GetItemComponentsInChildren(true).Any<ThermalVisionComponent>())
				{
					this.ThermalVisionObserver.Update();
				}
				if (item.GetItemComponentsInChildren(true).Any<FaceShieldComponent>())
				{
					this.FaceShieldObserver.Update();
					this.FaceCoverObserver.Update();
				}
			}
			@class.armorSlots = Inventory.ArmorSlots.Select(new Func<EquipmentSlot, Slot>(this.Equipment.GetSlot)).ToArray<Slot>();
			if ((item.GetItemComponentsInChildren(true).Any<ArmorComponent>() && allParentLocations.Any(new Func<ItemAddress, bool>(@class.method_1))) || item.GetItemComponent<EquipmentPenaltyComponent>() != null)
			{
				this.RecalculateEquipmentParams();
			}
			this.UpdatePhones();
		}

		// Token: 0x06008279 RID: 33401 RVA: 0x00481C90 File Offset: 0x0047FE90
		public bool TryFindGlasses(out VisorsItemClass glasses)
		{
			VisorsItemClass visorsItemClass = this.Equipment.GetSlot(EquipmentSlot.Eyewear).ContainedItem as VisorsItemClass;
			if (visorsItemClass != null)
			{
				glasses = visorsItemClass;
				return true;
			}
			VisorsItemClass visorsItemClass2 = this.Equipment.GetSlot(EquipmentSlot.Headwear).ContainedItem as VisorsItemClass;
			if (visorsItemClass2 != null)
			{
				glasses = visorsItemClass2;
				return true;
			}
			glasses = null;
			return false;
		}

		// Token: 0x0600827A RID: 33402 RVA: 0x00481CE4 File Offset: 0x0047FEE4
		public void method_89()
		{
			float blindnessProtection = this.GetBlindnessProtection();
			if (this._currentBlindnessProtection.ApproxEquals(blindnessProtection))
			{
				return;
			}
			this._currentBlindnessProtection = blindnessProtection;
			Action<float> onBlindnessProtectionChanged = this.OnBlindnessProtectionChanged;
			if (onBlindnessProtectionChanged == null)
			{
				return;
			}
			onBlindnessProtectionChanged(blindnessProtection);
		}

		// Token: 0x0600827B RID: 33403 RVA: 0x00481D20 File Offset: 0x0047FF20
		public float GetBlindnessProtection()
		{
			float num = 0f;
			foreach (EquipmentSlot slotName in new EquipmentSlot[]
			{
				EquipmentSlot.Eyewear,
				EquipmentSlot.Headwear,
				EquipmentSlot.FaceCover
			})
			{
				ArmoredEquipmentItemClass armoredEquipmentItemClass = this.Equipment.GetSlot(slotName).ContainedItem as ArmoredEquipmentItemClass;
				if (armoredEquipmentItemClass != null)
				{
					num = ((armoredEquipmentItemClass.BlindnessProtection > num) ? armoredEquipmentItemClass.BlindnessProtection : num);
				}
			}
			Item containedItem = this.Equipment.GetSlot(EquipmentSlot.Headwear).ContainedItem;
			if (containedItem != null)
			{
				foreach (Item item in containedItem.GetAllItems())
				{
					ArmoredEquipmentItemClass armoredEquipmentItemClass2 = item as ArmoredEquipmentItemClass;
					FaceShieldComponent faceShieldComponent;
					if (armoredEquipmentItemClass2 != null && armoredEquipmentItemClass2.BlindnessProtection >= num && (!armoredEquipmentItemClass2.TryGetItemComponent<FaceShieldComponent>(out faceShieldComponent) || faceShieldComponent.Togglable == null || faceShieldComponent.Togglable.On))
					{
						num = armoredEquipmentItemClass2.BlindnessProtection;
					}
				}
			}
			return num;
		}

		// Token: 0x17001388 RID: 5000
		// (get) Token: 0x0600827C RID: 33404 RVA: 0x00481E20 File Offset: 0x00480020
		public string TryGetId
		{
			get
			{
				Profile profile = this.Profile;
				string result;
				if (profile != null)
				{
					if ((result = profile.Id) != null)
					{
						return result;
					}
				}
				result = this.PlayerId.ToString();
				return result;
			}
		}

		// Token: 0x17001389 RID: 5001
		// (get) Token: 0x0600827D RID: 33405 RVA: 0x001CED95 File Offset: 0x001CCF95
		// (set) Token: 0x0600827E RID: 33406 RVA: 0x001CED9D File Offset: 0x001CCF9D
		public int PlayerId { get; set; }

		// Token: 0x1700138A RID: 5002
		// (get) Token: 0x0600827F RID: 33407 RVA: 0x001CEDA6 File Offset: 0x001CCFA6
		public string ProfileId
		{
			get
			{
				return this.Profile.Id;
			}
		}

		// Token: 0x1700138B RID: 5003
		// (get) Token: 0x06008280 RID: 33408 RVA: 0x001CEDB3 File Offset: 0x001CCFB3
		public string AccountId
		{
			get
			{
				return this.Profile.AccountId;
			}
		}

		// Token: 0x1700138C RID: 5004
		// (get) Token: 0x06008281 RID: 33409 RVA: 0x001CEDC0 File Offset: 0x001CCFC0
		// (set) Token: 0x06008282 RID: 33410 RVA: 0x001CEDC8 File Offset: 0x001CCFC8
		public Profile Profile { get; set; }

		// Token: 0x1700138D RID: 5005
		// (get) Token: 0x06008283 RID: 33411 RVA: 0x001CEDD1 File Offset: 0x001CCFD1
		// (set) Token: 0x06008284 RID: 33412 RVA: 0x001CEDD9 File Offset: 0x001CCFD9
		public IStatisticsManager StatisticsManager { get; set; }

		// Token: 0x1700138E RID: 5006
		// (get) Token: 0x06008285 RID: 33413 RVA: 0x001CEDE2 File Offset: 0x001CCFE2
		public SkillManager Skills
		{
			get
			{
				Profile profile = this.Profile;
				if (profile == null)
				{
					return null;
				}
				return profile.Skills;
			}
		}

		// Token: 0x140001CA RID: 458
		// (add) Token: 0x06008286 RID: 33414 RVA: 0x00481E54 File Offset: 0x00480054
		// (remove) Token: 0x06008287 RID: 33415 RVA: 0x00481E8C File Offset: 0x0048008C
		public event Action<string, int> OnSpecialPlaceVisited;

		// Token: 0x1700138F RID: 5007
		// (get) Token: 0x06008288 RID: 33416 RVA: 0x001CEDF5 File Offset: 0x001CCFF5
		public EUpdateQueue UpdateQueue
		{
			get
			{
				return this._updateQueue;
			}
		}

		// Token: 0x17001390 RID: 5008
		// (get) Token: 0x06008289 RID: 33417 RVA: 0x001CEDFD File Offset: 0x001CCFFD
		public EUpdateQueue ArmsUpdateQueue
		{
			get
			{
				return this._armsUpdateQueue;
			}
		}

		// Token: 0x17001391 RID: 5009
		// (get) Token: 0x0600828A RID: 33418 RVA: 0x001CEE05 File Offset: 0x001CD005
		// (set) Token: 0x0600828B RID: 33419 RVA: 0x001CEE0D File Offset: 0x001CD00D
		public ECameraType VisibleToCameraType { get; set; }

		// Token: 0x17001392 RID: 5010
		// (get) Token: 0x0600828C RID: 33420 RVA: 0x001CEE16 File Offset: 0x001CD016
		// (set) Token: 0x0600828D RID: 33421 RVA: 0x001CEE1E File Offset: 0x001CD01E
		public bool IsVisibleToCamera { get; set; } = true;

		// Token: 0x0600828E RID: 33422 RVA: 0x001CEE27 File Offset: 0x001CD027
		public static ECameraType GetVisibleToCamera(IPlayer player)
		{
			if (player == null)
			{
				return ECameraType.Default;
			}
			return player.VisibleToCameraType;
		}

		// Token: 0x17001393 RID: 5011
		// (get) Token: 0x0600828F RID: 33423 RVA: 0x001CEE34 File Offset: 0x001CD034
		public EUpdateQueue PhysicalUpdateQueue
		{
			get
			{
				return EUpdateQueue.Update;
			}
		}

		// Token: 0x17001394 RID: 5012
		// (get) Token: 0x06008290 RID: 33424 RVA: 0x001CEE37 File Offset: 0x001CD037
		public Player.EUpdateMode ArmsUpdateMode
		{
			get
			{
				return this._armsUpdateMode;
			}
		}

		// Token: 0x17001395 RID: 5013
		// (get) Token: 0x06008291 RID: 33425 RVA: 0x001CEE3F File Offset: 0x001CD03F
		public Player.EUpdateMode BodyUpdateMode
		{
			get
			{
				return this._bodyUpdateMode;
			}
		}

		// Token: 0x06008292 RID: 33426 RVA: 0x00481EC4 File Offset: 0x004800C4
		[CanBeNull]
		public TItem TryGetItemInHands<TItem>() where TItem : Item
		{
			if (this._handsController == null)
			{
				return default(TItem);
			}
			return this._handsController.Item as TItem;
		}

		// Token: 0x17001396 RID: 5014
		// (get) Token: 0x06008293 RID: 33427 RVA: 0x001CEE47 File Offset: 0x001CD047
		public Player GetPlayer
		{
			get
			{
				return this;
			}
		}

		// Token: 0x17001397 RID: 5015
		// (get) Token: 0x06008294 RID: 33428 RVA: 0x001CEE4A File Offset: 0x001CD04A
		// (set) Token: 0x06008295 RID: 33429 RVA: 0x001CEE52 File Offset: 0x001CD052
		public IAIData AIData { get; set; }

		// Token: 0x17001398 RID: 5016
		// (get) Token: 0x06008296 RID: 33430 RVA: 0x001CEE5B File Offset: 0x001CD05B
		// (set) Token: 0x06008297 RID: 33431 RVA: 0x001CEE63 File Offset: 0x001CD063
		public PlayerLoyaltyData Loyalty { get; set; }

		// Token: 0x17001399 RID: 5017
		// (get) Token: 0x06008298 RID: 33432 RVA: 0x001CEE6C File Offset: 0x001CD06C
		public bool IsAI
		{
			get
			{
				return this.AIData != null && this.AIData.IsAI;
			}
		}

		// Token: 0x06008299 RID: 33433 RVA: 0x001CEE83 File Offset: 0x001CD083
		public virtual void OnDeserializeFromServer(byte channelId, IDataReader reader)
		{
		}

		// Token: 0x0600829A RID: 33434 RVA: 0x00481F00 File Offset: 0x00480100
		public RadioTransmitterRecodableComponent FindRadioTransmitter()
		{
			RadioTransmitterRecodableComponent result;
			if (this.RecodableItemsHandler.TryToGetRecodableComponent<RadioTransmitterRecodableComponent>(out result))
			{
				return result;
			}
			return null;
		}

		// Token: 0x0600829B RID: 33435 RVA: 0x00481F20 File Offset: 0x00480120
		public CultistAmuletItemClass FindCultistAmulet()
		{
			Slot[] slots = (this.InventoryController.Inventory.Equipment.GetSlot(EquipmentSlot.Pockets).ContainedItem as PocketsItemClass).Slots;
			for (int i = 0; i < slots.Length; i++)
			{
				CultistAmuletItemClass cultistAmuletItemClass = slots[i].ContainedItem as CultistAmuletItemClass;
				if (cultistAmuletItemClass != null)
				{
					return cultistAmuletItemClass;
				}
			}
			return null;
		}

		// Token: 0x0600829C RID: 33436 RVA: 0x00481F78 File Offset: 0x00480178
		public bool HasMarkOfUnknown(out MarkOfUnknownItemClass markOfUnknown)
		{
			CompoundItem compoundItem = this.InventoryController.Inventory.Equipment.GetSlot(EquipmentSlot.Pockets).ContainedItem as PocketsItemClass;
			markOfUnknown = null;
			Slot[] slots = compoundItem.Slots;
			for (int i = 0; i < slots.Length; i++)
			{
				MarkOfUnknownItemClass markOfUnknownItemClass = slots[i].ContainedItem as MarkOfUnknownItemClass;
				if (markOfUnknownItemClass != null)
				{
					markOfUnknown = markOfUnknownItemClass;
					return true;
				}
			}
			return false;
		}

		// Token: 0x140001CB RID: 459
		// (add) Token: 0x0600829D RID: 33437 RVA: 0x00481FD4 File Offset: 0x004801D4
		// (remove) Token: 0x0600829E RID: 33438 RVA: 0x0048200C File Offset: 0x0048020C
		public event Action<IPlayer> OnIPlayerDeadOrUnspawn;

		// Token: 0x1700139A RID: 5018
		// (get) Token: 0x0600829F RID: 33439 RVA: 0x001CEE85 File Offset: 0x001CD085
		// (set) Token: 0x060082A0 RID: 33440 RVA: 0x001CEE8D File Offset: 0x001CD08D
		public Dictionary<BodyPartType, EnemyPart> MainParts { get; set; }

		// Token: 0x140001CC RID: 460
		// (add) Token: 0x060082A1 RID: 33441 RVA: 0x00482044 File Offset: 0x00480244
		// (remove) Token: 0x060082A2 RID: 33442 RVA: 0x0048207C File Offset: 0x0048027C
		public event Action<Player.AbstractHandsController, Player.AbstractHandsController> OnHandsControllerChanged;

		// Token: 0x060082A3 RID: 33443 RVA: 0x004820B4 File Offset: 0x004802B4
		public bool HasFirearmInHands()
		{
			Player.FirearmController firearmController = this.HandsController as Player.FirearmController;
			return firearmController != null && !firearmController.Weapon.IsStationaryWeapon;
		}

		// Token: 0x1700139B RID: 5019
		// (get) Token: 0x060082A4 RID: 33444 RVA: 0x001CEE96 File Offset: 0x001CD096
		// (set) Token: 0x060082A5 RID: 33445 RVA: 0x004820E0 File Offset: 0x004802E0
		public virtual Player.AbstractHandsController HandsController
		{
			get
			{
				return this._handsController;
			}
			set
			{
				Player.AbstractHandsController handsController = this._handsController;
				this._handsController = value;
				PlayerAnimator.EWeaponAnimationType weaponAnimationType = this.GetWeaponAnimationType(this._handsController);
				this.MovementContext.PlayerAnimatorSetWeaponId(weaponAnimationType);
				this._isGrenadeOrKnife = (this._handsController != null && weaponAnimationType > PlayerAnimator.EWeaponAnimationType.Rifle);
				if (this._isGrenadeOrKnife)
				{
					this.method_17(this.MovementContext.CurrentState.Name, this.MovementContext.CurrentState.Name);
				}
				if (handsController != this._handsController && this.OnHandsControllerChanged != null)
				{
					this.OnHandsControllerChanged(handsController, this._handsController);
				}
			}
		}

		// Token: 0x060082A6 RID: 33446 RVA: 0x00482180 File Offset: 0x00480380
		public PlayerAnimator.EWeaponAnimationType GetWeaponAnimationType(Player.AbstractHandsController handsController)
		{
			if (handsController == null || handsController.Item == null || handsController is Player.EmptyHandsController)
			{
				return PlayerAnimator.EWeaponAnimationType.EmptyHands;
			}
			Item item = handsController.Item;
			if (item is PistolItemClass || item is PortableRangeFinderItemClass || item is RadioTransmitterItemClass)
			{
				return PlayerAnimator.EWeaponAnimationType.Pistol;
			}
			RevolverItemClass revolverItemClass = item as RevolverItemClass;
			if (revolverItemClass != null)
			{
				if (!revolverItemClass.WeapClass.Equals("pistol"))
				{
					return PlayerAnimator.EWeaponAnimationType.Rifle;
				}
				return PlayerAnimator.EWeaponAnimationType.Pistol;
			}
			else
			{
				GrenadeLauncherItemClass grenadeLauncherItemClass = item as GrenadeLauncherItemClass;
				if (grenadeLauncherItemClass != null && grenadeLauncherItemClass.IsFlareGun)
				{
					return PlayerAnimator.EWeaponAnimationType.Pistol;
				}
				if (item.GetItemComponent<KnifeComponent>() != null)
				{
					return PlayerAnimator.EWeaponAnimationType.Knife;
				}
				if (item is ThrowWeapItemClass)
				{
					return PlayerAnimator.EWeaponAnimationType.ThrowWeapon;
				}
				if (item is RocketLauncherItemClass)
				{
					return PlayerAnimator.EWeaponAnimationType.RocketLauncher;
				}
				return PlayerAnimator.EWeaponAnimationType.Rifle;
			}
		}

		// Token: 0x1700139C RID: 5020
		// (get) Token: 0x060082A7 RID: 33447 RVA: 0x001CEE9E File Offset: 0x001CD09E
		public EPlayerState CurrentStateName
		{
			get
			{
				return this.MovementContext.CurrentState.Name;
			}
		}

		// Token: 0x1700139D RID: 5021
		// (get) Token: 0x060082A8 RID: 33448 RVA: 0x001CEEB0 File Offset: 0x001CD0B0
		public virtual InventoryController InventoryController
		{
			get
			{
				return this._inventoryController;
			}
		}

		// Token: 0x1700139E RID: 5022
		// (get) Token: 0x060082A9 RID: 33449 RVA: 0x001CEEB8 File Offset: 0x001CD0B8
		public AbstractQuestControllerClass AbstractQuestControllerClass
		{
			get
			{
				return this._questController;
			}
		}

		// Token: 0x1700139F RID: 5023
		// (get) Token: 0x060082AA RID: 33450 RVA: 0x001CEEC0 File Offset: 0x001CD0C0
		public IPlayerSearchController SearchController
		{
			get
			{
				return this._inventoryController.PlayerSearchController;
			}
		}

		// Token: 0x170013A0 RID: 5024
		// (get) Token: 0x060082AB RID: 33451 RVA: 0x001CEECD File Offset: 0x001CD0CD
		public AbstractAchievementControllerClass AbstractAchievementControllerClass
		{
			get
			{
				return this._achievementsController;
			}
		}

		// Token: 0x170013A1 RID: 5025
		// (get) Token: 0x060082AC RID: 33452 RVA: 0x001CEED5 File Offset: 0x001CD0D5
		public AbstractPrestigeControllerClass AbstractPrestigeControllerClass
		{
			get
			{
				return this._prestigeController;
			}
		}

		// Token: 0x170013A2 RID: 5026
		// (get) Token: 0x060082AD RID: 33453 RVA: 0x001CEEDD File Offset: 0x001CD0DD
		public GClass3617 GClass3617_0
		{
			get
			{
				return this._dialogController;
			}
		}

		// Token: 0x170013A3 RID: 5027
		// (get) Token: 0x060082AE RID: 33454 RVA: 0x001CEEE5 File Offset: 0x001CD0E5
		public IEnumerable<GInterface518> IEnumerable_0
		{
			get
			{
				if (this._questController != null)
				{
					yield return this._questController;
				}
				if (this._achievementsController != null)
				{
					yield return this._achievementsController;
				}
				if (this._prestigeController != null)
				{
					yield return this._prestigeController;
				}
				yield break;
			}
		}

		// Token: 0x170013A4 RID: 5028
		// (get) Token: 0x060082AF RID: 33455 RVA: 0x001CEEF5 File Offset: 0x001CD0F5
		public int Id
		{
			get
			{
				return this.PlayerId;
			}
		}

		// Token: 0x170013A5 RID: 5029
		// (get) Token: 0x060082B0 RID: 33456 RVA: 0x00482220 File Offset: 0x00480420
		public string FullIdInfoClean
		{
			get
			{
				string result;
				if ((result = this._fullIdInfo) == null)
				{
					string[] array = new string[7];
					array[0] = "[";
					int num = 1;
					Profile profile = this.Profile;
					string text;
					if (profile != null)
					{
						if ((text = profile.Nickname) != null)
						{
							goto IL_39;
						}
					}
					text = "null";
					IL_39:
					array[num] = text;
					array[2] = "|";
					int num2 = 3;
					Profile profile2 = this.Profile;
					string text2;
					if (profile2 != null)
					{
						if ((text2 = profile2.AccountId) != null)
						{
							goto IL_5F;
						}
					}
					text2 = "null";
					IL_5F:
					array[num2] = text2;
					array[4] = "|";
					int num3 = 5;
					Profile profile3 = this.Profile;
					string text3;
					if (profile3 != null)
					{
						if ((text3 = profile3.Id) != null)
						{
							goto IL_85;
						}
					}
					text3 = "null";
					IL_85:
					array[num3] = text3;
					array[6] = "]";
					result = (this._fullIdInfo = string.Concat(array));
				}
				return result;
			}
		}

		// Token: 0x170013A6 RID: 5030
		// (get) Token: 0x060082B1 RID: 33457 RVA: 0x001CEEFD File Offset: 0x001CD0FD
		public virtual string FullIdInfo
		{
			get
			{
				return this.FullIdInfoClean;
			}
		}

		// Token: 0x170013A7 RID: 5031
		// (get) Token: 0x060082B2 RID: 33458 RVA: 0x001CEF05 File Offset: 0x001CD105
		public EPlayerSide Side
		{
			get
			{
				return this.Profile.Info.Side;
			}
		}

		// Token: 0x170013A8 RID: 5032
		// (get) Token: 0x060082B3 RID: 33459 RVA: 0x001CEF17 File Offset: 0x001CD117
		public BifacialTransform Transform
		{
			get
			{
				return this.PlayerBones.BodyTransform;
			}
		}

		// Token: 0x170013A9 RID: 5033
		// (get) Token: 0x060082B4 RID: 33460 RVA: 0x001CEF24 File Offset: 0x001CD124
		public IHealthController HealthController
		{
			get
			{
				return this._healthController;
			}
		}

		// Token: 0x170013AA RID: 5034
		// (get) Token: 0x060082B5 RID: 33461 RVA: 0x001CEF2C File Offset: 0x001CD12C
		public ActiveHealthController ActiveHealthController
		{
			get
			{
				return this._healthController as ActiveHealthController;
			}
		}

		// Token: 0x170013AB RID: 5035
		// (get) Token: 0x060082B6 RID: 33462 RVA: 0x001CEF39 File Offset: 0x001CD139
		// (set) Token: 0x060082B7 RID: 33463 RVA: 0x001CEF41 File Offset: 0x001CD141
		public virtual float Awareness
		{
			get
			{
				return this._awareness;
			}
			set
			{
				this._awareness = value;
			}
		}

		// Token: 0x060082B8 RID: 33464 RVA: 0x001CEF4A File Offset: 0x001CD14A
		public void SetDeltaTimeDelegate(Player.GDelegate66 deltaTimeDelegate)
		{
			this._deltaTimeDelegate = (deltaTimeDelegate ?? Player._defaultDeltaTimeDelegate);
		}

		// Token: 0x170013AC RID: 5036
		// (get) Token: 0x060082B9 RID: 33465 RVA: 0x001CEF5C File Offset: 0x001CD15C
		public float DeltaTime
		{
			get
			{
				return this._deltaTimeDelegate();
			}
		}

		// Token: 0x060082BA RID: 33466 RVA: 0x001CEF69 File Offset: 0x001CD169
		public void FixedUpdate()
		{
			this._nFixedFrames++;
			this._fixedTime += Time.fixedDeltaTime;
		}

		// Token: 0x060082BB RID: 33467 RVA: 0x001CEF8B File Offset: 0x001CD18B
		public virtual void FixedUpdateTick()
		{
			this.ComplexUpdate(EUpdateQueue.FixedUpdate, Time.fixedUnscaledDeltaTime);
		}

		// Token: 0x060082BC RID: 33468 RVA: 0x001CEF99 File Offset: 0x001CD199
		public virtual void AfterMainTick()
		{
		}

		// Token: 0x060082BD RID: 33469 RVA: 0x004822C8 File Offset: 0x004804C8
		public virtual void UpdateTick()
		{
			float deltaTime = this.DeltaTime;
			this.ComplexUpdate(EUpdateQueue.Update, deltaTime);
		}

		// Token: 0x060082BE RID: 33470 RVA: 0x001CEF9B File Offset: 0x001CD19B
		public IEnumerator method_90()
		{
			Player.Class1363 @class = new Player.Class1363(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x140001CD RID: 461
		// (add) Token: 0x060082BF RID: 33471 RVA: 0x004822E4 File Offset: 0x004804E4
		// (remove) Token: 0x060082C0 RID: 33472 RVA: 0x0048231C File Offset: 0x0048051C
		public event Action UpdateEvent;

		// Token: 0x140001CE RID: 462
		// (add) Token: 0x060082C1 RID: 33473 RVA: 0x00482354 File Offset: 0x00480554
		// (remove) Token: 0x060082C2 RID: 33474 RVA: 0x0048238C File Offset: 0x0048058C
		public event Action FixedUpdateEvent;

		// Token: 0x060082C3 RID: 33475 RVA: 0x004823C4 File Offset: 0x004805C4
		public void ComplexUpdate(EUpdateQueue queue, float deltaTime)
		{
			if (this.HealthController != null && this.HealthController.IsAlive)
			{
				if (this.UpdateQueue == queue)
				{
					this.ManualUpdate(deltaTime, null, 1);
					this._bodyupdated = true;
					this._bodyTime = deltaTime;
				}
				if (this.ArmsUpdateQueue == queue)
				{
					this.ArmsUpdate(deltaTime);
					this._armsupdated = true;
					this._armsTime = deltaTime;
				}
				if (this.PhysicalUpdateQueue == queue)
				{
					this.Physical.Update(deltaTime);
				}
				if (queue == EUpdateQueue.Update)
				{
					Action updateEvent = this.UpdateEvent;
					if (updateEvent != null)
					{
						updateEvent();
					}
				}
				if (queue == EUpdateQueue.FixedUpdate)
				{
					Action fixedUpdateEvent = this.FixedUpdateEvent;
					if (fixedUpdateEvent == null)
					{
						return;
					}
					fixedUpdateEvent();
				}
				return;
			}
		}

		// Token: 0x060082C4 RID: 33476 RVA: 0x001CEFAA File Offset: 0x001CD1AA
		public virtual void ComplexLateUpdate(EUpdateQueue queue, float deltaTime)
		{
			if (this.ArmsUpdateQueue == queue && this.ArmsUpdateMode == Player.EUpdateMode.Auto)
			{
				this.method_91(deltaTime);
			}
			this.MovementContext.LateFixedUpdate();
			IAIData aidata = this.AIData;
			if (aidata == null)
			{
				return;
			}
			aidata.LateUpdate();
		}

		// Token: 0x060082C5 RID: 33477 RVA: 0x00482470 File Offset: 0x00480670
		public virtual void ArmsUpdate(float deltaTime)
		{
			if (this._handsController != null)
			{
				this._handsController.ManualUpdate(deltaTime);
			}
			if (this.ArmsUpdateMode == Player.EUpdateMode.Manual)
			{
				this.ArmsAnimatorCommon.Update(deltaTime);
				IAnimator underbarrelWeaponArmsAnimator = this.UnderbarrelWeaponArmsAnimator;
				if (underbarrelWeaponArmsAnimator != null)
				{
					underbarrelWeaponArmsAnimator.Update(deltaTime);
				}
			}
			this._armsupdated = true;
			this._armsTime = deltaTime;
			if (this.ArmsUpdateMode == Player.EUpdateMode.Manual)
			{
				this.method_91(deltaTime);
			}
		}

		// Token: 0x060082C6 RID: 33478 RVA: 0x004824DC File Offset: 0x004806DC
		public virtual void BodyUpdate(float deltaTime, int loop = 1)
		{
			if (this.BodyUpdateMode == Player.EUpdateMode.Manual)
			{
				for (int i = 0; i < loop; i++)
				{
					float dt = deltaTime / (float)loop;
					this.BodyAnimatorCommon.Update(dt);
				}
			}
			if (BackendConfigAbstractClass.Config.UseBodyFastAnimator && this.HealthController != null && this.HealthController.IsAlive)
			{
				this.PlayerBones.PlayableAnimator.Process(this.IsVisible, deltaTime);
			}
		}

		// Token: 0x060082C7 RID: 33479 RVA: 0x00482548 File Offset: 0x00480748
		public virtual void ManualUpdate(float deltaTime, float? platformDeltaTime = null, int loop = 1)
		{
			this.LastDeltaTime = deltaTime;
			if (Mathf.Approximately(deltaTime, 0f))
			{
				UnityEngine.Debug.LogErrorFormat("[ServerPlayer.ManualUpdate] deltaTime = {0}", new object[]
				{
					deltaTime
				});
				return;
			}
			this.method_13(deltaTime);
			if (loop == 1)
			{
				this.HealthControllerUpdate(platformDeltaTime ?? deltaTime);
			}
			this.BodyUpdate(deltaTime, 1);
			if (Vector2.Distance(this._targetRotationPitch, this._rotationPitchLimit) < 0.1f)
			{
				this._rotationPitchLimit = this._targetRotationPitch;
			}
			else
			{
				this._rotationPitchLimit = Vector2.Lerp(this._rotationPitchLimit, this._targetRotationPitch, 0.1f);
			}
			this.UpdateTriggerColliderSearcher(deltaTime, true);
		}

		// Token: 0x060082C8 RID: 33480 RVA: 0x001CEFDF File Offset: 0x001CD1DF
		public virtual void HealthControllerUpdate(float deltaTime)
		{
			if (!(this._healthController is HealthControllerClass))
			{
				this._healthController.ManualUpdate(deltaTime);
			}
		}

		// Token: 0x060082C9 RID: 33481 RVA: 0x001CEFFA File Offset: 0x001CD1FA
		public virtual void UpdateTriggerColliderSearcher(float deltaTime, bool isCloseToCamera = true)
		{
			this.GetTriggerColliderSearcher().ManualUpdate(deltaTime, isCloseToCamera);
		}

		// Token: 0x060082CA RID: 33482 RVA: 0x001CF009 File Offset: 0x001CD209
		public void method_91(float deltaTime)
		{
			if (this._handsController != null)
			{
				this._handsController.EmitEvents();
				if (this.IsYourPlayer)
				{
					EFTPhysicsClass.SyncTransformsClass.SyncTransforms();
				}
				this._handsController.BallisticUpdate(deltaTime);
			}
		}

		// Token: 0x060082CB RID: 33483 RVA: 0x001CF03D File Offset: 0x001CD23D
		public void SetOwnerToAIData(BotOwner bot)
		{
			if (this.AIData == null)
			{
				this.AIData = new PlayerAIDataClass(bot, this);
			}
			else
			{
				this.AIData.BotOwner = bot;
			}
			this.Physical.EncumberDisabled = true;
		}

		// Token: 0x170013AD RID: 5037
		// (get) Token: 0x060082CC RID: 33484 RVA: 0x001CF06E File Offset: 0x001CD26E
		public virtual Ray InteractionRay
		{
			get
			{
				return new Ray(this._playerLookRaycastTransform.position - this._playerLookRaycastTransform.forward * EFTHardSettings.Instance.BEHIND_CAST, this._playerLookRaycastTransform.forward);
			}
		}

		// Token: 0x170013AE RID: 5038
		// (get) Token: 0x060082CD RID: 33485 RVA: 0x001CF0AA File Offset: 0x001CD2AA
		// (set) Token: 0x060082CE RID: 33486 RVA: 0x001CF0B2 File Offset: 0x001CD2B2
		public Vector3 InteractionRayOriginOnStartOperation { get; set; }

		// Token: 0x170013AF RID: 5039
		// (get) Token: 0x060082CF RID: 33487 RVA: 0x001CF0BB File Offset: 0x001CD2BB
		// (set) Token: 0x060082D0 RID: 33488 RVA: 0x001CF0C3 File Offset: 0x001CD2C3
		public Vector3 InteractionRayDirectionOnStartOperation { get; set; }

		// Token: 0x060082D1 RID: 33489 RVA: 0x004825FC File Offset: 0x004807FC
		public void SaveInteractionRayInfo()
		{
			this.InteractionRayOriginOnStartOperation = this.InteractionRay.origin;
			this.InteractionRayDirectionOnStartOperation = this.InteractionRay.direction;
		}

		// Token: 0x060082D2 RID: 33490 RVA: 0x00482634 File Offset: 0x00480834
		public virtual void InteractionRaycast()
		{
			if (this._playerLookRaycastTransform == null || !this.HealthController.IsAlive)
			{
				return;
			}
			InteractableObject interactableObject = null;
			this.InteractableObjectIsProxy = false;
			Player player = null;
			Ray interactionRay = this.InteractionRay;
			if (this.CurrentState.CanInteract && this.HandsController && this.HandsController.CanInteract())
			{
				RaycastHit raycastHit;
				GameObject gameObject = GameWorld.FindInteractable(interactionRay, out raycastHit);
				if (gameObject != null)
				{
					InteractiveProxy interactiveProxy = null;
					interactableObject = gameObject.GetComponentInParent<InteractableObject>();
					if (interactableObject == null)
					{
						interactiveProxy = gameObject.GetComponent<InteractiveProxy>();
						if (interactiveProxy != null && raycastHit.distance < EFTHardSettings.Instance.DOOR_RAYCAST_DISTANCE + EFTHardSettings.Instance.BEHIND_CAST)
						{
							this.InteractableObjectIsProxy = true;
							interactableObject = interactiveProxy.Link;
						}
					}
					if (interactableObject != null && interactiveProxy == null)
					{
						if (interactableObject.InteractsFromAppropriateDirection(this.LookDirection))
						{
							if (raycastHit.distance <= EFTHardSettings.Instance.LOOT_RAYCAST_DISTANCE + EFTHardSettings.Instance.BEHIND_CAST && interactableObject.isActiveAndEnabled)
							{
								if (raycastHit.distance > EFTHardSettings.Instance.DOOR_RAYCAST_DISTANCE + EFTHardSettings.Instance.BEHIND_CAST && interactableObject is Door)
								{
									interactableObject = null;
								}
							}
							else
							{
								interactableObject = null;
							}
						}
						else
						{
							interactableObject = null;
						}
					}
					player = ((interactableObject == null) ? gameObject.GetComponent<Player>() : null);
				}
				this.RayLength = raycastHit.distance;
			}
			WorldInteractiveObject worldInteractiveObject = interactableObject as WorldInteractiveObject;
			if (worldInteractiveObject != null)
			{
				BufferGateSwitcher bufferGateSwitcher = worldInteractiveObject as BufferGateSwitcher;
				if (bufferGateSwitcher != null)
				{
					EDoorState bufferGatesState = bufferGateSwitcher.BufferGatesState;
					if (interactableObject == this.InteractableObject)
					{
						this._nextCastHasForceEvent = true;
					}
				}
				else
				{
					EDoorState doorState = worldInteractiveObject.DoorState;
					if (doorState != EDoorState.Interacting && worldInteractiveObject.Operatable && (doorState != EDoorState.Locked || worldInteractiveObject.DoorKeyOpenInteraction != EInteraction.DoorCardOpen || this.InteractableObjectIsProxy))
					{
						if (!this.InteractableObjectIsProxy || doorState == EDoorState.Locked)
						{
							if (interactableObject == this.InteractableObject && this._lastInteractionState != doorState)
							{
								this._nextCastHasForceEvent = true;
								goto IL_1FC;
							}
							goto IL_1FC;
						}
					}
					interactableObject = null;
				}
				IL_1FC:
				if (worldInteractiveObject != null && worldInteractiveObject.NoInteractionsAllowed)
				{
					interactableObject = null;
				}
			}
			else
			{
				LootItem lootItem = interactableObject as LootItem;
				if (lootItem != null)
				{
					Weapon weapon = lootItem.Item as Weapon;
					if (weapon != null && weapon.IsOneOff && weapon.Repairable.Durability == 0f)
					{
						interactableObject = null;
					}
				}
				else
				{
					StationaryWeapon stationaryWeapon = interactableObject as StationaryWeapon;
					if (stationaryWeapon != null)
					{
						if (stationaryWeapon.Locked)
						{
							interactableObject = null;
						}
						else if (interactableObject == this.InteractableObject && this._lastInteractionState != stationaryWeapon.State)
						{
							this._nextCastHasForceEvent = true;
						}
					}
					else
					{
						LookAtProxy lookAtProxy = interactableObject as LookAtProxy;
						if (lookAtProxy != null)
						{
							lookAtProxy.Execute();
						}
						else if (interactableObject != null)
						{
							if (this._lastStateUpdateTime != interactableObject.StateUpdateTime)
							{
								this._nextCastHasForceEvent = true;
							}
							this._lastStateUpdateTime = interactableObject.StateUpdateTime;
						}
					}
				}
			}
			if (interactableObject != this.InteractableObject || this._nextCastHasForceEvent)
			{
				this._nextCastHasForceEvent = false;
				this.InteractableObject = interactableObject;
				WorldInteractiveObject worldInteractiveObject2 = this.InteractableObject as WorldInteractiveObject;
				if (worldInteractiveObject2 != null)
				{
					this._lastInteractionState = worldInteractiveObject2.DoorState;
				}
				else
				{
					StationaryWeapon stationaryWeapon2 = this.InteractableObject as StationaryWeapon;
					if (stationaryWeapon2 != null)
					{
						this._lastInteractionState = stationaryWeapon2.State;
					}
				}
				Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
				if (possibleInteractionsChanged != null)
				{
					possibleInteractionsChanged();
				}
			}
			if (player != this.InteractablePlayer || this._nextCastHasForceEvent)
			{
				this._nextCastHasForceEvent = false;
				this.InteractablePlayer = ((player != this) ? player : null);
				if (player == this)
				{
					UnityEngine.Debug.LogWarning(this.Profile.Nickname + " wants to interact to himself");
				}
				Action possibleInteractionsChanged2 = this.PossibleInteractionsChanged;
				if (possibleInteractionsChanged2 != null)
				{
					possibleInteractionsChanged2();
				}
			}
			if (player == null && interactableObject == null)
			{
				float radius = 0.1f * (1f + this.Skills.PerceptionLootDot);
				float distance = 1.5f;
				if (this.Skills.PerceptionEliteNoIdea)
				{
					distance = 2.35f;
					radius = 1.1f;
					interactionRay.origin = this.Transform.position + Vector3.up * 3f;
					interactionRay.direction = Vector3.down;
				}
				this.Boolean_0 = GameWorld.InteractionSense(interactionRay.origin, interactionRay.direction, radius, distance);
				return;
			}
			this.Boolean_0 = false;
		}

		// Token: 0x060082D3 RID: 33491 RVA: 0x001CF0CC File Offset: 0x001CD2CC
		public virtual void PauseAllEffectsOnPlayer()
		{
		}

		// Token: 0x060082D4 RID: 33492 RVA: 0x001CF0CE File Offset: 0x001CD2CE
		public virtual void UnpauseAllEffectsOnPlayer()
		{
		}

		// Token: 0x060082D5 RID: 33493 RVA: 0x00482AAC File Offset: 0x00480CAC
		public virtual void ShowHelloNotification(string sender)
		{
			NotificationManagerClass.DisplayMessageNotification(string.Format("{0} ask to cooperate".Localized(null), sender), ENotificationDurationType.Default, ENotificationIconType.Default, null);
		}

		// Token: 0x060082D6 RID: 33494 RVA: 0x001CF0D0 File Offset: 0x001CD2D0
		public void ResetInteractionRaycast(IKillableLootItem @object)
		{
			if (@object != this.InteractableObject)
			{
				return;
			}
			this.InteractableObject = null;
			Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
			if (possibleInteractionsChanged == null)
			{
				return;
			}
			possibleInteractionsChanged();
		}

		// Token: 0x060082D7 RID: 33495 RVA: 0x001CF0F3 File Offset: 0x001CD2F3
		public void OnPlaceItemTriggerChanged([CanBeNull] PlaceItemTrigger zone)
		{
			this.PlaceItemZone = zone;
			if (zone == null)
			{
				this.DestroyBeacon();
			}
			Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
			if (possibleInteractionsChanged == null)
			{
				return;
			}
			possibleInteractionsChanged();
		}

		// Token: 0x060082D8 RID: 33496 RVA: 0x00482ADC File Offset: 0x00480CDC
		public void AddTriggerZone(TriggerWithId zone)
		{
			string id = zone.Id;
			if (this.TriggerZones.Contains(id))
			{
				return;
			}
			this.TriggerZones.Add(id);
		}

		// Token: 0x060082D9 RID: 33497 RVA: 0x00482B0C File Offset: 0x00480D0C
		public void RemoveTriggerZone(TriggerWithId zone)
		{
			string id = zone.Id;
			if (!this.TriggerZones.Contains(id))
			{
				return;
			}
			this.TriggerZones.Remove(id);
		}

		// Token: 0x170013B0 RID: 5040
		// (get) Token: 0x060082DA RID: 33498 RVA: 0x001CF11B File Offset: 0x001CD31B
		// (set) Token: 0x060082DB RID: 33499 RVA: 0x00482B3C File Offset: 0x00480D3C
		public int Int32_0
		{
			get
			{
				return this._negativeBuffsCount;
			}
			set
			{
				if (this._negativeBuffsCount < 1 && value > 0)
				{
					this.ExecuteSkill(new Action(this.method_148));
				}
				if (this._negativeBuffsCount > 0 && value < 1)
				{
					this.ExecuteSkill(new Action(this.method_149));
				}
				this._negativeBuffsCount = value;
			}
		}

		// Token: 0x170013B1 RID: 5041
		// (get) Token: 0x060082DC RID: 33500 RVA: 0x001CF123 File Offset: 0x001CD323
		// (set) Token: 0x060082DD RID: 33501 RVA: 0x001CF135 File Offset: 0x001CD335
		public virtual bool IsVisible
		{
			get
			{
				return this.FirstPersonPointOfView || this.OnScreen;
			}
			set
			{
			}
		}

		// Token: 0x170013B2 RID: 5042
		// (get) Token: 0x060082DE RID: 33502 RVA: 0x001CF137 File Offset: 0x001CD337
		public virtual float SqrCameraDistance
		{
			get
			{
				if (this.FirstPersonPointOfView)
				{
					return 0f;
				}
				return CameraClass.Instance.SqrDistance(this.Transform.position);
			}
		}

		// Token: 0x060082DF RID: 33503 RVA: 0x001CF15C File Offset: 0x001CD35C
		public void SetInteractInHands(EInteraction interaction)
		{
			this.MovementContext.SetInteractInHands(interaction);
		}

		// Token: 0x060082E0 RID: 33504 RVA: 0x001CF16A File Offset: 0x001CD36A
		public void UpdateInteractionCast()
		{
			this._nextCastHasForceEvent = true;
		}

		// Token: 0x060082E1 RID: 33505 RVA: 0x001CF173 File Offset: 0x001CD373
		public Vector3 PlayerColliderPointOnCenterAxis(float relativeHeight)
		{
			return this.MovementContext.PlayerColliderPointOnCenterAxis(relativeHeight);
		}

		// Token: 0x170013B3 RID: 5043
		// (get) Token: 0x060082E2 RID: 33506 RVA: 0x001CF181 File Offset: 0x001CD381
		// (set) Token: 0x060082E3 RID: 33507 RVA: 0x001CF189 File Offset: 0x001CD389
		public PlayerBones PlayerBones { get; set; }

		// Token: 0x060082E4 RID: 33508 RVA: 0x00482B90 File Offset: 0x00480D90
		public virtual void SetupHitColliders()
		{
			this._hitColliders = base.GetComponentsInChildren<BodyPartCollider>();
			this._armorPlateColliders = base.GetComponentsInChildren<ArmorPlateCollider>(true);
			foreach (BodyPartCollider bodyPartCollider in this._hitColliders)
			{
				this.method_92(bodyPartCollider, false);
			}
			foreach (ArmorPlateCollider bodyPartCollider2 in this._armorPlateColliders)
			{
				this.method_92(bodyPartCollider2, true);
			}
		}

		// Token: 0x060082E5 RID: 33509 RVA: 0x00482BFC File Offset: 0x00480DFC
		public void method_92(BodyPartCollider bodyPartCollider, bool includeChild)
		{
			int layer = LayerMask.NameToLayer("HitCollider");
			bodyPartCollider.SetUpPlayer(this);
			bodyPartCollider.PlayerProfileID = this.ProfileId;
			bodyPartCollider.gameObject.layer = layer;
			if (!includeChild)
			{
				return;
			}
			foreach (object obj in bodyPartCollider.transform)
			{
				((Transform)obj).gameObject.layer = layer;
			}
		}

		// Token: 0x060082E6 RID: 33510 RVA: 0x00482C88 File Offset: 0x00480E88
		public virtual void SetInventoryOpened(bool opened)
		{
			if (opened)
			{
				this.MovementContext.SetBlindFire(0);
				if (this.MovementContext.IsInMountedState)
				{
					this.MovementContext.ExitMountedState();
				}
			}
			else
			{
				if (this._waitInventoryCoroutine != null)
				{
					base.StopCoroutine(this._waitInventoryCoroutine);
				}
				this.MovementContext.PlayerAnimator.SetInventory(false);
				this.MovementContext.PlayerAnimator.SetInventoryOperation(false);
				this.OnInventoryInteraction(false, false);
			}
			this._isInventoryOpened = opened;
			this.InventoryOpenRaiseAction(opened);
			if (this._handsController != null)
			{
				this._handsController.SetInventoryOpened(opened);
				if (opened)
				{
					this.MovementContext.PlayerAnimator.AnimatedInteractions.ForceStopInteractions();
					this._waitInventoryCoroutine = base.StartCoroutine(this.method_93());
				}
			}
		}

		// Token: 0x060082E7 RID: 33511 RVA: 0x001CF192 File Offset: 0x001CD392
		public IEnumerator method_93()
		{
			Player.Class1369 @class = new Player.Class1369(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x060082E8 RID: 33512 RVA: 0x001CF1A1 File Offset: 0x001CD3A1
		public void InventoryOpenRaiseAction(bool opened)
		{
			Action onStartInventoryOpen = this.OnStartInventoryOpen;
			if (onStartInventoryOpen != null)
			{
				onStartInventoryOpen();
			}
			Action<Player, bool> onInventoryOpened = this.OnInventoryOpened;
			if (onInventoryOpened == null)
			{
				return;
			}
			onInventoryOpened(this, opened);
		}

		// Token: 0x060082E9 RID: 33513 RVA: 0x00482D50 File Offset: 0x00480F50
		public virtual void ExecuteShotSkill(Item weapon)
		{
			if (!(weapon is ThrowWeapItemClass) && !this.IsAI)
			{
				Type type = weapon.GetType();
				if (typeof(GClass3308).IsAssignableFrom(type))
				{
					type = typeof(GClass3308);
				}
				float val = this.Skills.WeaponBuffs.ContainsKey(type) ? this.Skills.WeaponBuffs[type][EBuffId.WeaponDoubleMastering].Value : 1f;
				this.Skills.WeaponShotAction.Complete(weapon, val);
				return;
			}
		}

		// Token: 0x060082EA RID: 33514 RVA: 0x00482DDC File Offset: 0x00480FDC
		public virtual void ManageAggressor(DamageInfoStruct damageInfo, EBodyPart bodyPart, EBodyPartColliderType colliderType)
		{
			if (this._isDeadAlready)
			{
				return;
			}
			if (!this.HealthController.IsAlive)
			{
				this._isDeadAlready = true;
			}
			Player player = (damageInfo.Player == null) ? null : this.GameWorld.GetEverExistedPlayerByID(damageInfo.Player.iPlayer.ProfileId);
			if (player == this)
			{
				return;
			}
			if (player == null)
			{
				if (damageInfo.Player != null && damageInfo.Player.iPlayer != null)
				{
					GClass788 aggressor = new GClass788(damageInfo.Player.iPlayer.AccountId, damageInfo.Player.iPlayer.ProfileId, damageInfo.Player.Nickname, damageInfo.Player.iPlayer.Profile.Info.MainProfileNickname, damageInfo.Player.iPlayer.Side, colliderType, (damageInfo.Weapon != null) ? damageInfo.Weapon.ShortName : string.Empty, damageInfo.Player.iPlayer.Profile.Info.SelectedMemberCategory, damageInfo.Player.iPlayer.Profile.Info.Settings.Role, damageInfo.Player.iPlayer.Profile.PrestigeLevel);
					this.Profile.EftStats.Aggressor = aggressor;
					this.LastAggressor = damageInfo.Player.iPlayer;
					this.LastDamageInfo = damageInfo;
					this.LastBodyPart = bodyPart;
				}
				else
				{
					this.Profile.EftStats.Aggressor = null;
					this.LastAggressor = null;
					this.LastDamageInfo = damageInfo;
					this.LastBodyPart = bodyPart;
				}
				if (damageInfo.DamageType == EDamageType.Artillery)
				{
					GClass788 aggressor2 = new GClass788("0", "66f3fad50ec64d74847d049d", "UI/Artillery/ArtaManName".Localized(null), string.Empty, EPlayerSide.Savage, colliderType, "UI/Artillery/ArtilleryWeaponName", EMemberCategory.Default, WildSpawnType.assault, 0);
					this.Profile.EftStats.Aggressor = aggressor2;
					this.LastAggressor = null;
					this.LastDamageInfo = damageInfo;
					this.LastBodyPart = bodyPart;
				}
				return;
			}
			if (damageInfo.Weapon != null && !player.Profile.Info.GroupId.EqualsAndNotNull(this.Profile.Info.GroupId))
			{
				player.ExecuteShotSkill(damageInfo.Weapon);
			}
			bool isHeavyDamage = damageInfo.DidBodyDamage / this.HealthController.GetBodyPartHealth(bodyPart, false).Maximum >= 0.6f && this.HealthController.FindExistingEffect<GInterface341>(bodyPart) != null;
			player.StatisticsManager.OnEnemyDamage(damageInfo, bodyPart, this.Profile.Id, this.Profile.Info.Side, this.Profile.Info.Settings.Role, this.Profile.Info.GroupId, this.HealthController.GetBodyPartHealth(EBodyPart.Common, false).Maximum, isHeavyDamage, Vector3.Distance(player.Transform.position, this.Transform.position), this.CurrentHour, this.Inventory.EquippedInSlotsTemplateIds, this.HealthController.BodyPartEffects, this.TriggerZones);
			if (string.IsNullOrEmpty(player.Profile.Info.Nickname) || player == this || player.ProfileId == this.ProfileId)
			{
				return;
			}
			this.method_94(damageInfo, bodyPart, player);
			this.LastAggressor = player;
			this.LastDamageInfo = damageInfo;
			this.LastBodyPart = bodyPart;
			IAIData aidata = player.AIData;
			Profile profile = (aidata != null && aidata.IsAI) ? null : player.Profile;
			this.Profile.EftStats.Aggressor = new GClass788((profile != null) ? profile.AccountId : null, (profile != null) ? profile.Id : null, player.Profile.Nickname, player.Profile.Info.MainProfileNickname, player.Profile.Info.Side, colliderType, (damageInfo.Weapon != null) ? damageInfo.Weapon.ShortName : string.Empty, player.Profile.Info.SelectedMemberCategory, player.Profile.Info.Settings.Role, player.Profile.Info.PrestigeLevel);
			if (!this.HealthController.IsAlive)
			{
				player.Say(EPhraseTrigger.OnEnemyDown, false, UnityEngine.Random.Range(0f, 1f), this.Speaker.SideTag, 70, false);
				return;
			}
			bool flag = true;
			if (player.IsAI && damageInfo.Weapon != null && damageInfo.Weapon is KnifeItemClass)
			{
				flag = false;
			}
			if (flag)
			{
				player.Say(EPhraseTrigger.OnEnemyShot, false, UnityEngine.Random.Range(0f, 1f), this.Speaker.SideTag, 30, false);
				this.GameWorld.SpeakerManager.GroupEvent(this.PlayerId, EPhraseTrigger.Hit, this.Transform.position, player.Speaker.SideTag, 30);
			}
		}

		// Token: 0x060082EB RID: 33515 RVA: 0x001CF1C6 File Offset: 0x001CD3C6
		public void method_94(DamageInfoStruct damageInfo, EBodyPart bodyPart, Player aggressor)
		{
			if (aggressor != null && aggressor.AIData.IsAI)
			{
				BotOwner botOwner = aggressor.AIData.BotOwner;
				botOwner.EnemiesController.HitTarget(this, damageInfo, bodyPart);
				botOwner.BotPersonalStats.HitTarget(this, damageInfo, bodyPart);
			}
		}

		// Token: 0x060082EC RID: 33516 RVA: 0x004832AC File Offset: 0x004814AC
		public virtual void ApplyExplosionDamageToArmor(Dictionary<ExplosiveHitArmorColliderStruct, float> armorDamage, DamageInfoStruct damageInfo)
		{
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			foreach (ArmorComponent armorComponent in this._preAllocatedArmorComponents)
			{
				float num = 0f;
				foreach (KeyValuePair<ExplosiveHitArmorColliderStruct, float> keyValuePair in armorDamage)
				{
					if (armorComponent.ShotMatches(keyValuePair.Key.BodyPartColliderType, keyValuePair.Key.ArmorPlateCollider))
					{
						num += keyValuePair.Value;
					}
				}
				if (num > 0f)
				{
					num = armorComponent.ApplyExplosionDurabilityDamage(num, damageInfo, this._preAllocatedArmorComponents);
					this.method_96(num, armorComponent);
				}
			}
		}

		// Token: 0x060082ED RID: 33517 RVA: 0x004833A4 File Offset: 0x004815A4
		public bool IsShotDeflectedByHeavyArmor(EBodyPartColliderType colliderType, EArmorPlateCollider armorPlateCollider, int shotSeed)
		{
			if (!this.Skills.HeavyVestNoBodyDamageDeflectChance)
			{
				return false;
			}
			BackendConfigSettingsClass.GClass1790 heavyVests = Singleton<BackendConfigSettingsClass>.Instance.SkillsSettings.HeavyVests;
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			foreach (ArmorComponent armorComponent in this._preAllocatedArmorComponents)
			{
				RepairableComponent repairable = armorComponent.Repairable;
				if (armorComponent.ArmorType == EArmorType.Heavy && repairable.Durability >= heavyVests.RicochetChanceHVestsCurrentDurabilityThreshold * repairable.MaxDurability && repairable.Durability >= heavyVests.RicochetChanceHVestsMaxDurabilityThreshold * (float)repairable.TemplateDurability && armorComponent.ShotMatches(colliderType, armorPlateCollider) && this._heavyVestsDeflectRandoms.GetRandom(shotSeed) < heavyVests.RicochetChanceHVestsEliteLevel)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x060082EE RID: 33518 RVA: 0x00483498 File Offset: 0x00481698
		public bool method_95(EBodyPartColliderType colliderType)
		{
			if (!this.Skills.LightVestBleedingProtection)
			{
				return false;
			}
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			foreach (ArmorComponent armorComponent in this._preAllocatedArmorComponents)
			{
				if (!armorComponent.IsDestroyed && armorComponent.ArmorType == EArmorType.Light)
				{
					using (IEnumerator<EBodyPartColliderType> enumerator2 = armorComponent.ArmorColliders.GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							if (enumerator2.Current == colliderType)
							{
								return true;
							}
						}
					}
				}
			}
			return false;
		}

		// Token: 0x060082EF RID: 33519 RVA: 0x00483568 File Offset: 0x00481768
		public void method_96(float armorDamage, ArmorComponent armorComponent)
		{
			Player.Class1319 @class = new Player.Class1319();
			@class.player_0 = this;
			@class.armorDamage = armorDamage;
			if (@class.armorDamage > 0.1f && !armorComponent.IsDestroyed)
			{
				EArmorType armorType = armorComponent.ArmorType;
				if (armorType == EArmorType.Light)
				{
					this.ExecuteSkill(new Action(@class.method_0));
					return;
				}
				if (armorType != EArmorType.Heavy)
				{
					return;
				}
				this.ExecuteSkill(new Action(@class.method_1));
			}
		}

		// Token: 0x060082F0 RID: 33520 RVA: 0x004835D8 File Offset: 0x004817D8
		[CanBeNull]
		public List<ArmorComponent> ProceedDamageThroughArmor(ref DamageInfoStruct damageInfo, EBodyPartColliderType colliderType, EArmorPlateCollider armorPlateCollider, bool damageInfoIsLocal = true)
		{
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			List<ArmorComponent> list = null;
			bool flag = false;
			bool flag2 = false;
			bool flag3 = false;
			using (List<ArmorComponent>.Enumerator enumerator = this._preAllocatedArmorComponents.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (flag3 = (enumerator.Current.Item.TemplateId == GClass3382.InvincibleBalaclava))
					{
						break;
					}
				}
			}
			for (int i = 0; i < this._preAllocatedArmorComponents.Count; i++)
			{
				ArmorComponent armorComponent = this._preAllocatedArmorComponents[i];
				float num = 0f;
				if (armorComponent.ShotMatches(colliderType, armorPlateCollider))
				{
					if (flag || flag2)
					{
						float num2 = armorComponent.BluntThroughput;
						if (armorComponent.ArmorType == EArmorType.Heavy)
						{
							num2 *= 1f - this.Skills.HeavyVestBluntThroughputDamageReduction;
						}
						damageInfo.Damage *= num2;
					}
					else
					{
						if (list == null)
						{
							list = new List<ArmorComponent>();
						}
						list.Add(armorComponent);
						if (this._healthController.IsAlive)
						{
							num = armorComponent.ApplyDamage(ref damageInfo, colliderType, armorPlateCollider, damageInfoIsLocal, this._preAllocatedArmorComponents, this.Skills.LightVestMeleeWeaponDamageReduction, this.Skills.HeavyVestBluntThroughputDamageReduction);
							this.method_96(num, armorComponent);
						}
						flag = (armorComponent.Item.Id == damageInfo.BlockedBy);
						flag2 = (armorComponent.Item.Id == damageInfo.DeflectedBy);
					}
				}
				if (num > 0.1f)
				{
					this.OnArmorPointsChanged(armorComponent, false);
				}
			}
			if (flag3)
			{
				damageInfo.Damage = 0f;
			}
			return list;
		}

		// Token: 0x060082F1 RID: 33521 RVA: 0x001CF204 File Offset: 0x001CD404
		public virtual void OnArmorPointsChanged(ArmorComponent armor, bool children = false)
		{
		}

		// Token: 0x060082F2 RID: 33522 RVA: 0x001CF206 File Offset: 0x001CD406
		public virtual void OnSideEffectApplied(SideEffectComponent sideEffect)
		{
		}

		// Token: 0x060082F3 RID: 33523 RVA: 0x00483800 File Offset: 0x00481A00
		public void SetDogtagInfo(GStruct368 deathPacket)
		{
			EPlayerSide eplayerSide = (EPlayerSide)deathPacket.Side;
			WildSpawnType role = (WildSpawnType)deathPacket.Role;
			if (role != WildSpawnType.pmcBEAR)
			{
				if (role == WildSpawnType.pmcUSEC)
				{
					eplayerSide = EPlayerSide.Usec;
				}
			}
			else
			{
				eplayerSide = EPlayerSide.Bear;
			}
			if (eplayerSide == EPlayerSide.Savage)
			{
				return;
			}
			Item containedItem = this.Equipment.GetSlot(EquipmentSlot.Dogtag).ContainedItem;
			if (containedItem == null)
			{
				UnityEngine.Debug.LogErrorFormat("> DogTag slot item is null somehow. Side: {0}. Name {1}", new object[]
				{
					eplayerSide,
					this.FullIdInfo
				});
				return;
			}
			DogtagComponent itemComponent = containedItem.GetItemComponent<DogtagComponent>();
			if (itemComponent != null)
			{
				itemComponent.Item.SpawnedInSession = true;
				itemComponent.AccountId = deathPacket.AccountId;
				itemComponent.ProfileId = deathPacket.ProfileId;
				itemComponent.Nickname = deathPacket.Nickname;
				itemComponent.KillerAccountId = deathPacket.KillerAccountId;
				itemComponent.KillerProfileId = deathPacket.KillerProfileId;
				itemComponent.KillerName = deathPacket.KillerName;
				itemComponent.Side = eplayerSide;
				itemComponent.Level = deathPacket.Level;
				itemComponent.Time = EFTDateTimeClass.UniversalDateTimeFromUnixTime(deathPacket.Time).ToLocalTime();
				itemComponent.Status = deathPacket.Status;
				itemComponent.WeaponName = deathPacket.WeaponName;
				itemComponent.GroupId = this.GroupId;
				return;
			}
			UnityEngine.Debug.LogError("> DogTagComponent on dog tag slot is null. Something went horrifically wrong!");
		}

		// Token: 0x060082F4 RID: 33524 RVA: 0x00483928 File Offset: 0x00481B28
		public void RecalculateEquipmentParams()
		{
			float num = 0f;
			float num2 = 0f;
			float ergonomicsPenalty = this.ErgonomicsPenalty;
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			EArmorPlateCollider earmorPlateCollider = (EArmorPlateCollider)0;
			foreach (ArmorComponent armorComponent in this._preAllocatedArmorComponents)
			{
				if (armorComponent.Repairable.Durability >= Mathf.Epsilon)
				{
					earmorPlateCollider |= armorComponent.ArmorPlateCollidersMask;
				}
			}
			if (this.PlayerBones)
			{
				this.PlayerBones.SetArmorPlateCollidersState(earmorPlateCollider);
			}
			this._ergonomicsPenalty = 0f;
			for (int i = 0; i < this._preAllocatedArmorComponents.Count; i++)
			{
				ArmorComponent armorComponent2 = this._preAllocatedArmorComponents[i];
				float num3 = 0f;
				if (armorComponent2.ArmorType == EArmorType.Light)
				{
					num3 = this.Skills.LightVestMoveSpeedPenaltyReduction;
				}
				if (armorComponent2.ArmorType == EArmorType.Heavy)
				{
					num3 = this.Skills.HeavyVestMoveSpeedPenaltyReduction;
				}
				num += armorComponent2.SpeedPenalty * (1f - num3);
				num2 += armorComponent2.MousePenalty * (1f - num3);
				this._ergonomicsPenalty += armorComponent2.WeaponErgonomicPenalty;
			}
			this._preAllocatedBackpackPenaltyComponent = this.Inventory.GetPutOnBackpack();
			if (this._preAllocatedBackpackPenaltyComponent != null)
			{
				num += this._preAllocatedBackpackPenaltyComponent.Template.SpeedPenaltyPercent;
				num2 += this._preAllocatedBackpackPenaltyComponent.Template.MousePenalty;
				this._ergonomicsPenalty += this._preAllocatedBackpackPenaltyComponent.Template.WeaponErgonomicPenalty;
			}
			this._preAllocatedArmorComponents.Clear();
			this._ergonomicsPenalty /= 100f;
			this.RemoveStateSpeedLimit(Player.ESpeedLimit.Armor);
			if (num < 0f)
			{
				this.AddStateSpeedLimit((100f + num) / 100f * this.MovementContext.MaxSpeed, Player.ESpeedLimit.Armor);
			}
			if (Math.Abs(this._ergonomicsPenalty - ergonomicsPenalty) > 0f)
			{
				this.ProceduralWeaponAnimation.UpdateWeaponVariables();
			}
			this.RemoveMouseSensitivityModifier(Player.EMouseSensitivityModifier.Armor);
			if (num2 < 0f)
			{
				this.AddMouseSensitivityModifier(Player.EMouseSensitivityModifier.Armor, num2 / 100f);
			}
		}

		// Token: 0x060082F5 RID: 33525 RVA: 0x00483B78 File Offset: 0x00481D78
		public virtual void ApplyHitDebuff(float damage, float staminaBurnRate, EBodyPart bodyPartType, EDamageType damageType)
		{
			if (damageType.IsEnemyDamage())
			{
				this.IncreaseAwareness(20f);
			}
			if (this.HealthController.IsAlive && (!this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers) || damage > 4f) && !this.IsAI)
			{
				if (this.Speaker != null)
				{
					this.Speaker.Play(EPhraseTrigger.OnBeingHurt, this.HealthStatus, true, null);
				}
				else
				{
					UnityEngine.Debug.LogError("Player Speaker is null");
				}
			}
			if (!damageType.IsWeaponInduced())
			{
				return;
			}
			this._accumulatedDebuffDamage = ((this._lastHitDebuffFrame == Time.frameCount) ? (this._accumulatedDebuffDamage + staminaBurnRate) : staminaBurnRate);
			float num = Mathf.InverseLerp(55f, 10f, this._accumulatedDebuffDamage);
			if (num < 1f)
			{
				this.UpdateSpeedLimit(num, Player.ESpeedLimit.Shot, 0.66f);
			}
			this._lastHitDebuffFrame = Time.frameCount;
			this.Physical.BulletHit(staminaBurnRate);
			if ((bodyPartType == EBodyPart.LeftLeg || bodyPartType == EBodyPart.RightLeg) && !this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers))
			{
				this.Physical.Sprint(false);
			}
		}

		// Token: 0x060082F6 RID: 33526 RVA: 0x00483C88 File Offset: 0x00481E88
		public virtual bool SetShotStatus(BodyPartCollider bodypart, EftBulletClass shot, Vector3 hitpoint, Vector3 shotNormal, Vector3 shotDirection)
		{
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			ArmorPlateCollider armorPlateCollider = bodypart as ArmorPlateCollider;
			EArmorPlateCollider armorPlateCollider2 = (armorPlateCollider == null) ? ((EArmorPlateCollider)0) : armorPlateCollider.ArmorPlateColliderType;
			for (int i = 0; i < this._preAllocatedArmorComponents.Count; i++)
			{
				ArmorComponent armorComponent = this._preAllocatedArmorComponents[i];
				if (armorComponent.ShotMatches(bodypart.BodyPartColliderType, armorPlateCollider2))
				{
					if (armorComponent.Deflects(shotDirection, shotNormal, shot))
					{
						return true;
					}
					if (shot.BlockedBy == null)
					{
						armorComponent.SetPenetrationStatus(shot);
					}
				}
			}
			return false;
		}

		// Token: 0x060082F7 RID: 33527 RVA: 0x00483D24 File Offset: 0x00481F24
		public bool CheckArmorHitByDirection(BodyPartCollider bodyPart)
		{
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			ArmorPlateCollider armorPlateCollider = bodyPart as ArmorPlateCollider;
			EArmorPlateCollider armorPlateCollider2 = (armorPlateCollider == null) ? ((EArmorPlateCollider)0) : armorPlateCollider.ArmorPlateColliderType;
			using (List<ArmorComponent>.Enumerator enumerator = this._preAllocatedArmorComponents.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (enumerator.Current.ShotMatches(bodyPart.BodyPartColliderType, armorPlateCollider2))
					{
						return true;
					}
				}
			}
			return false;
		}

		// Token: 0x060082F8 RID: 33528 RVA: 0x00483DBC File Offset: 0x00481FBC
		public bool TryGetArmorResistData(BodyPartCollider bodyPart, float penetrationPower, out ArmorResistanceStruct armorResistanceData)
		{
			armorResistanceData = default(ArmorResistanceStruct);
			this._preAllocatedArmorComponents.Clear();
			this.Inventory.GetPutOnArmorsNonAlloc(this._preAllocatedArmorComponents);
			ArmorPlateCollider armorPlateCollider = bodyPart as ArmorPlateCollider;
			EArmorPlateCollider armorPlateCollider2 = (armorPlateCollider == null) ? ((EArmorPlateCollider)0) : armorPlateCollider.ArmorPlateColliderType;
			for (int i = 0; i < this._preAllocatedArmorComponents.Count; i++)
			{
				ArmorComponent armorComponent = this._preAllocatedArmorComponents[i];
				if (armorComponent.ShotMatches(bodyPart.BodyPartColliderType, armorPlateCollider2))
				{
					armorResistanceData = GClass659.RealResistance(armorComponent.Repairable.Durability, (float)armorComponent.Repairable.TemplateDurability, armorComponent.ArmorClass, penetrationPower);
					return true;
				}
			}
			return false;
		}

		// Token: 0x060082F9 RID: 33529 RVA: 0x00483E64 File Offset: 0x00482064
		public virtual ShotInfoClass ApplyShot(DamageInfoStruct damageInfo, EBodyPart bodyPartType, EBodyPartColliderType colliderType, EArmorPlateCollider armorPlateCollider, ShotIdStruct shotId)
		{
			if (!this._healthController.IsAlive)
			{
				return null;
			}
			IPlayerOwner player = damageInfo.Player;
			if (player != null && player.IsAI)
			{
				IAIData aidata = damageInfo.Player.AIData;
				BotOwner botOwner = (aidata != null) ? aidata.BotOwner : null;
				if (botOwner != null && !botOwner.ShouldApplyDamage(this, damageInfo, bodyPartType))
				{
					return null;
				}
			}
			bool flag = damageInfo.DeflectedBy != null;
			float damage = damageInfo.Damage;
			List<ArmorComponent> list = this.ProceedDamageThroughArmor(ref damageInfo, colliderType, armorPlateCollider, true);
			this.method_97(list);
			MaterialType material = flag ? MaterialType.HelmetRicochet : ((list == null || list.Count < 1) ? MaterialType.Body : list[0].Material);
			ShotInfoClass shotInfoClass = new ShotInfoClass
			{
				PoV = this.PointOfView,
				Penetrated = damageInfo.Penetrated,
				Material = material
			};
			float num = damage - damageInfo.Damage;
			this.ProceedLocalAbsorbedDamage(ref damageInfo, num);
			this.ApplyDamageInfo(damageInfo, bodyPartType, colliderType, 0f);
			this.ShotReactions(damageInfo, bodyPartType);
			this.ReceiveDamage(damageInfo.Damage, bodyPartType, damageInfo.DamageType, num, shotInfoClass.Material);
			return shotInfoClass;
		}

		// Token: 0x060082FA RID: 33530 RVA: 0x00483F7C File Offset: 0x0048217C
		public void method_97(List<ArmorComponent> damagedArmor)
		{
			if (damagedArmor == null)
			{
				return;
			}
			bool flag = false;
			using (List<ArmorComponent>.Enumerator enumerator = damagedArmor.GetEnumerator())
			{
				while (enumerator.MoveNext())
				{
					if (enumerator.Current.Repairable.Durability <= Mathf.Epsilon)
					{
						flag = true;
						break;
					}
				}
			}
			if (!flag)
			{
				return;
			}
			this.RecalculateEquipmentParams();
		}

		// Token: 0x060082FB RID: 33531 RVA: 0x001CF208 File Offset: 0x001CD408
		public virtual void ProceedLocalAbsorbedDamage(ref DamageInfoStruct damageInfo, float absorbedDamage)
		{
		}

		// Token: 0x060082FC RID: 33532 RVA: 0x00483FE8 File Offset: 0x004821E8
		public virtual void ApplyDamageInfo(DamageInfoStruct damageInfo, EBodyPart bodyPartType, EBodyPartColliderType colliderType, float absorbed)
		{
			if (!this._healthController.IsAlive)
			{
				return;
			}
			EDamageType damageType = damageInfo.DamageType;
			this.LastDamagedBodyPart = bodyPartType;
			IPlayerOwner player = damageInfo.Player;
			Player player2 = (player != null) ? this.GameWorld.GetAlivePlayerByProfileID(player.iPlayer.ProfileId) : null;
			if (this.ActiveHealthController != null)
			{
				this.ActiveHealthController.DoWoundRelapse(damageInfo.Damage, bodyPartType);
				this.LastAggressor = ((player != null) ? player.iPlayer : null);
				this.LastDamageInfo = damageInfo;
				this.LastBodyPart = bodyPartType;
				damageInfo.BleedBlock = this.method_95(colliderType);
				float num = this.ActiveHealthController.ApplyDamage(bodyPartType, damageInfo.Damage, damageInfo);
				damageInfo.DidBodyDamage = num;
				this.ActiveHealthController.BluntContusion(bodyPartType, absorbed);
				SideEffectComponent sideEffect;
				if (num.Positive() && this.ActiveHealthController.TryApplySideEffects(damageInfo, bodyPartType, out sideEffect) && player2 != null)
				{
					player2.OnSideEffectApplied(sideEffect);
				}
			}
			else
			{
				damageInfo.DidBodyDamage = 0f;
			}
			if (player2 != null)
			{
				player2.Loyalty.MarkAsAggressor(this);
			}
			this.ManageAggressor(damageInfo, bodyPartType, colliderType);
			this.ApplyHitDebuff(damageInfo.Damage, damageInfo.StaminaBurnRate * damageInfo.Damage, bodyPartType, damageType);
			if (!damageType.IsWeaponInduced())
			{
				this.ReceiveDamage(damageInfo.Damage, bodyPartType, damageType, 0f, MaterialType.None);
			}
			Action<DamageInfoStruct, EBodyPart, float> beingHitAction = this.BeingHitAction;
			if (beingHitAction != null)
			{
				beingHitAction(damageInfo, bodyPartType, 0f);
			}
			if (Singleton<BotEventHandler>.Instantiated)
			{
				Singleton<BotEventHandler>.Instance.BeingHitAction(damageInfo, this);
			}
			if (player != null && !this.HealthController.IsAlive)
			{
				if (Singleton<BotEventHandler>.Instantiated)
				{
					Singleton<BotEventHandler>.Instance.Kill(player.iPlayer, this.GetPlayer);
				}
				return;
			}
		}

		// Token: 0x060082FD RID: 33533 RVA: 0x001CF20A File Offset: 0x001CD40A
		public virtual void AddDetailedHitInfo(EDamageType damageType, int d, int absorbed, int staminaLoss, EBodyPart part, MaterialType special)
		{
		}

		// Token: 0x170013B4 RID: 5044
		// (get) Token: 0x060082FE RID: 33534 RVA: 0x001CF20C File Offset: 0x001CD40C
		public int OwnerId
		{
			get
			{
				return this.PlayerId;
			}
		}

		// Token: 0x060082FF RID: 33535 RVA: 0x001CF214 File Offset: 0x001CD414
		public virtual bool ShouldVocalizeDeath(EBodyPart bodyPart)
		{
			return bodyPart > EBodyPart.Head;
		}

		// Token: 0x06008300 RID: 33536 RVA: 0x0048418C File Offset: 0x0048238C
		public virtual void OnBeenKilledByAggressor(IPlayer aggressor, DamageInfoStruct damageInfo, EBodyPart bodyPart, EDamageType lethalDamageType)
		{
			if (this.AggressorFound)
			{
				return;
			}
			if (this == aggressor)
			{
				return;
			}
			this.AggressorFound = true;
			IAIData aidata = aggressor.AIData;
			if (aidata != null)
			{
				aidata.KillEnemy(this);
			}
			Player alivePlayerByProfileID = this.GameWorld.GetAlivePlayerByProfileID(aggressor.ProfileId);
			if (alivePlayerByProfileID == null)
			{
				return;
			}
			bool isFriendly = false;
			if (alivePlayerByProfileID.AIData != null && !alivePlayerByProfileID.AIData.IsAI && this.AIData != null && this.AIData.BotOwner != null)
			{
				CultistAmuletItemClass cultistAmuletItemClass;
				isFriendly = ((this.Profile.Info.Settings.Role == WildSpawnType.exUsec && this.AIData.BotOwner.BotsController.BotTradersServices.LighthouseKeeperServices.IsPlayerExUsecFriendly(alivePlayerByProfileID)) | (this.Profile.Info.Settings.Role.IsSectant() && this._inventoryController.HasCultistAmulet(out cultistAmuletItemClass)));
			}
			float distance = Vector3.Distance(aggressor.Position, this.Position);
			alivePlayerByProfileID.StatisticsManager.OnEnemyKill(damageInfo, lethalDamageType, bodyPart, this.Profile.Info.Side, this.Profile.Info.Settings.Role, this.Profile.AccountId, this.Profile.Id, this.Profile.Nickname, this.Profile.Info.GroupId, this.Profile.Info.Level, this.Profile.Info.Settings.Experience, distance, this.CurrentHour, this.Inventory.EquippedInSlotsTemplateIds, this.HealthController.BodyPartEffects, this.TriggerZones, isFriendly, this.IsAI);
		}

		// Token: 0x06008301 RID: 33537 RVA: 0x00484344 File Offset: 0x00482544
		public virtual void OnDead(EDamageType damageType)
		{
			GClass4062.ReleaseBeginSample("Player.OnDead", "OnDead");
			if (this.LastAggressor != null)
			{
				this.OnBeenKilledByAggressor(this.LastAggressor, this.LastDamageInfo, this.LastBodyPart, damageType);
			}
			if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
			{
				this.Spirit.Die();
			}
			this.LastDamageType = damageType;
			GClass4062.ReleaseBeginSample("Player.OnDead.OnPlayerDeadInvoke", "OnDead");
			GDelegate70 onPlayerDead = this.OnPlayerDead;
			if (onPlayerDead != null)
			{
				onPlayerDead(this, this.LastAggressor, this.LastDamageInfo, this.LastBodyPart);
			}
			Action<Player, IPlayer, DamageInfoStruct, EBodyPart> onPlayerDeadStatic = Player.OnPlayerDeadStatic;
			if (onPlayerDeadStatic != null)
			{
				onPlayerDeadStatic(this, this.LastAggressor, this.LastDamageInfo, this.LastBodyPart);
			}
			GDelegate71 onPlayerDeadOrUnspawn = this.OnPlayerDeadOrUnspawn;
			if (onPlayerDeadOrUnspawn != null)
			{
				onPlayerDeadOrUnspawn(this);
			}
			Action<IPlayer> onIPlayerDeadOrUnspawn = this.OnIPlayerDeadOrUnspawn;
			if (onIPlayerDeadOrUnspawn != null)
			{
				onIPlayerDeadOrUnspawn(this);
			}
			GClass4062.ReleaseBeginSample("Player.OnDead.SoundWork", "OnDead");
			if (this.ShouldVocalizeDeath(this.LastDamagedBodyPart))
			{
				EPhraseTrigger trigger = this.LastDamageType.IsWeaponInduced() ? EPhraseTrigger.OnDeath : EPhraseTrigger.OnAgony;
				try
				{
					this.Speaker.Play(trigger, this.HealthStatus, true, null);
					goto IL_12F;
				}
				catch (Exception ex)
				{
					UnityEngine.Debug.LogError(ex.Message);
					goto IL_12F;
				}
			}
			this.Speaker.Shut();
			IL_12F:
			this.MovementContext.ReleaseDoorIfInteractingWithOne();
			this.PlayDeathSound();
			this.MovementContext.OnStateChanged -= this.method_17;
			this.MovementContext.PhysicalConditionChanged -= this.ProceduralWeaponAnimation.PhysicalConditionUpdated;
			this.InventoryController.UnregisterView(this);
			GClass4062.ReleaseBeginSample("Player.OnDead._exfilUnsubscribe", "OnDead");
			this.ExfilUnsubscribe();
			this.EnabledAnimators = (Player.EAnimatorMask)0;
			GClass4062.ReleaseBeginSample("Player.OnDead.DisableAnimators", "OnDead");
			this.BodyAnimatorCommon.enabled = false;
			if (BackendConfigAbstractClass.Config.UseBodyFastAnimator)
			{
				this.PlayerBones.PlayableAnimator.Stop();
			}
			this.ArmsAnimatorCommon.enabled = false;
			GClass4062.ReleaseBeginSample("Player.OnDead.DisableCharacterController", "OnDead");
			this._characterController.isEnabled = false;
			SkillManager skills = this.Skills;
			if (skills != null)
			{
				skills.Terminate();
			}
			this.Physical.Unsubscribe();
			if (this.POM != null)
			{
				this.POM.Off();
			}
			try
			{
				if (this.HandsController != null)
				{
					this.HandsController.OnPlayerDead();
				}
			}
			catch (Exception arg)
			{
				UnityEngine.Debug.LogError(string.Format("Safe ex: {0}", arg));
			}
			this.FastForwardCurrentOperations();
			GClass4062.ReleaseBeginSample("Player.OnDead.InteractionInfoCallback", "OnDead");
			Action callback = this.MovementContext.InteractionInfo.Callback;
			if (callback != null)
			{
				callback();
			}
			this._healthController.DiedEvent -= this.OnDead;
			if (this._propActive)
			{
				this._propTransforms[0].parent = this.PlayerBones.LeftPalm;
				if (this._compassArrow)
				{
					this._compassArrow.enabled = false;
				}
				this._propActive = false;
			}
			else
			{
				this.HandPosers[0].Lerp2Target(EFTHardSettings.Instance.LEFT_HAND_QTS, 5f, 0.5f);
			}
			bool usedSimplifiedSkeleton;
			if (usedSimplifiedSkeleton = this.UsedSimplifiedSkeleton)
			{
				List<Item> list = this._inventoryController.Inventory.Equipment.GetFirstLevelItems().ToList<Item>();
				int count = list.Count;
				int num = 0;
				foreach (Item item in list)
				{
					GStruct154<GClass3410> gstruct = InteractionsHandlerClass.RemoveWithoutRestrictions(item, this._inventoryController);
					if (gstruct.Failed)
					{
						UnityEngine.Debug.LogError(string.Format("Error during remove zombie loot: \n{0}", gstruct.Error));
						num++;
					}
				}
			}
			InteractionsHandlerClass.DestroyOverLimit(this.Equipment, this.InventoryController);
			this.Corpse = this.CreateCorpse();
			this.Corpse.IsZombieCorpse = usedSimplifiedSkeleton;
			this.ApplyCorpseImpulse();
			if (this._triggerColliderSearcher != null)
			{
				this._triggerColliderSearcher.IsEnabled = false;
			}
			GClass4062.ReleaseBeginSample("Player.OnDead.OnDeadCoroutine", "OnDead");
			if (this.MovementContext.StationaryWeapon != null)
			{
				this.MovementContext.StationaryWeapon.Unlock(this.ProfileId);
			}
			if (this.MovementContext.StationaryWeapon != null && this.MovementContext.StationaryWeapon.Item == this._handsController.Item)
			{
				this.MovementContext.StationaryWeapon.Show();
				this.ReleaseHand();
				return;
			}
			this.Corpse.SetItemInHandsLootedCallback(new Action(this.ReleaseHand));
			base.StartCoroutine(this.method_98());
		}

		// Token: 0x06008302 RID: 33538 RVA: 0x00484800 File Offset: 0x00482A00
		public virtual void PlayDeathSound()
		{
			if (base.gameObject.GetComponent<GInterface209>() != null && this is ClientPlayer)
			{
				float time = 0f;
				if (this.Speaker != null && this.Speaker.Speaking)
				{
					time = this.Speaker.TimeLeft;
				}
				StaticManager.Instance.WaitSeconds(time, new Action(Player.Class1318.class1318_0.method_16));
			}
		}

		// Token: 0x06008303 RID: 33539 RVA: 0x001CF21A File Offset: 0x001CD41A
		public IEnumerator method_98()
		{
			Player.Class1364 @class = new Player.Class1364(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x06008304 RID: 33540 RVA: 0x001CF229 File Offset: 0x001CD429
		public virtual Corpse CreateCorpse()
		{
			return this.CreateCorpse<Corpse>(this.Velocity);
		}

		// Token: 0x06008305 RID: 33541 RVA: 0x00484874 File Offset: 0x00482A74
		public T CreateCorpse<T>(Vector3 velocity) where T : Corpse
		{
			Player.FirearmController firearmController = this.HandsController as Player.FirearmController;
			GClass768 containerCollectionView = null;
			if (firearmController != null)
			{
				containerCollectionView = firearmController.CCV;
			}
			return Corpse.CreateCorpse<T>(base.gameObject, this.ProfileId, this.Equipment, this.Profile.Customization, false, this.GameWorld, this.Side, velocity, this.PlayerBones.Pelvis.Original, this._itemInHands, false, containerCollectionView, this.InventoryController.CurrentId);
		}

		// Token: 0x06008306 RID: 33542 RVA: 0x004848F4 File Offset: 0x00482AF4
		public virtual void ApplyCorpseImpulse()
		{
			float num = EFTHardSettings.Instance.HIT_FORCE;
			num *= 0.3f + 0.7f * Mathf.InverseLerp(50f, 20f, this.LastDamageInfo.PenetrationPower);
			this._corpseAppliedForce = num;
			this.Corpse.Ragdoll.ApplyImpulse(this.LastDamageInfo.HitCollider, this.LastDamageInfo.Direction, this.LastDamageInfo.HitPoint, num);
		}

		// Token: 0x06008307 RID: 33543 RVA: 0x001CF237 File Offset: 0x001CD437
		public void ExitTriggerStatusChanged(bool status)
		{
			this.ExitTriggerZone = status;
			this.OnExitTriggerVisited.Invoke();
		}

		// Token: 0x140001CF RID: 463
		// (add) Token: 0x06008308 RID: 33544 RVA: 0x00484970 File Offset: 0x00482B70
		// (remove) Token: 0x06008309 RID: 33545 RVA: 0x004849A8 File Offset: 0x00482BA8
		public event Action<ExfiltrationPoint, bool> OnEpInteraction;

		// Token: 0x0600830A RID: 33546 RVA: 0x001CF24B File Offset: 0x001CD44B
		public virtual void SetExfiltrationPoint(ExfiltrationPoint point, bool entered)
		{
			Action<ExfiltrationPoint, bool> onEpInteraction = this.OnEpInteraction;
			if (onEpInteraction != null)
			{
				onEpInteraction(point, entered);
			}
			this.ExfiltrationPoint = (entered ? point : null);
			Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
			if (possibleInteractionsChanged == null)
			{
				return;
			}
			possibleInteractionsChanged();
		}

		// Token: 0x0600830B RID: 33547 RVA: 0x001CF27D File Offset: 0x001CD47D
		public void SearchForInteractions()
		{
			this._nextCastHasForceEvent = true;
			Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
			if (possibleInteractionsChanged == null)
			{
				return;
			}
			possibleInteractionsChanged();
		}

		// Token: 0x0600830C RID: 33548 RVA: 0x001CF296 File Offset: 0x001CD496
		public void ForceInteractionsChanged()
		{
			Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
			if (possibleInteractionsChanged == null)
			{
				return;
			}
			possibleInteractionsChanged();
		}

		// Token: 0x0600830D RID: 33549 RVA: 0x001CF2A8 File Offset: 0x001CD4A8
		public virtual void vmethod_7(EInteraction gesture)
		{
			this.MovementContext.SetInteractInHands(gesture);
		}

		// Token: 0x0600830E RID: 33550 RVA: 0x001CF2B6 File Offset: 0x001CD4B6
		public virtual void TriggerPhraseCommand(EPhraseTrigger phrase, int netPhraseId)
		{
		}

		// Token: 0x170013B5 RID: 5045
		// (get) Token: 0x0600830F RID: 33551 RVA: 0x001CF2B8 File Offset: 0x001CD4B8
		// (set) Token: 0x06008310 RID: 33552 RVA: 0x001CF2C0 File Offset: 0x001CD4C0
		public BotsGroup BotsGroup { get; set; }

		// Token: 0x06008311 RID: 33553 RVA: 0x001CF2C9 File Offset: 0x001CD4C9
		public void AddAlly(IPlayer enemy)
		{
		}

		// Token: 0x06008312 RID: 33554 RVA: 0x001CF2CB File Offset: 0x001CD4CB
		public void SetGroup(BotsGroup newBotsGroup)
		{
		}

		// Token: 0x06008313 RID: 33555 RVA: 0x004849E0 File Offset: 0x00482BE0
		public virtual void KillMe(EBodyPartColliderType colliderType, float damage)
		{
			Player.Class1320 @class = new Player.Class1320();
			@class.colliderType = colliderType;
			if (!this.HealthController.IsAlive)
			{
				return;
			}
			BodyPartCollider bodyPartCollider = this._hitColliders.First(new Func<BodyPartCollider, bool>(@class.method_0));
			DamageInfoStruct damageInfo = new DamageInfoStruct
			{
				DamageType = EDamageType.Sniper,
				Damage = damage,
				Direction = this.Transform.forward,
				HitCollider = bodyPartCollider.Collider
			};
			this.ApplyShot(damageInfo, bodyPartCollider.BodyPartType, @class.colliderType, (EArmorPlateCollider)0, ShotIdStruct.EMPTY_SHOT_ID);
		}

		// Token: 0x06008314 RID: 33556 RVA: 0x00484A78 File Offset: 0x00482C78
		public virtual void DevelopResetDiscardLimits()
		{
			if (!this.Profile.Info.MemberCategory.Is(EMemberCategory.Developer))
			{
				return;
			}
			GInterface416 ginterface = this.InventoryController as GInterface416;
			if (ginterface != null)
			{
				ginterface.ResetDiscardLimits();
			}
		}

		// Token: 0x06008315 RID: 33557 RVA: 0x001CF2CD File Offset: 0x001CD4CD
		public virtual void DevelopSetEncodedRadioTransmitter(bool value)
		{
		}

		// Token: 0x06008316 RID: 33558 RVA: 0x001CF2CF File Offset: 0x001CD4CF
		public virtual void DevelopSetActiveLighthouseTraderZoneDebug(bool value)
		{
		}

		// Token: 0x06008317 RID: 33559 RVA: 0x001CF2D1 File Offset: 0x001CD4D1
		public virtual void GetRadioTransmitterStatusFromServer()
		{
		}

		// Token: 0x06008318 RID: 33560 RVA: 0x001CF2D3 File Offset: 0x001CD4D3
		public virtual void KillAIs()
		{
		}

		// Token: 0x06008319 RID: 33561 RVA: 0x001CF2D5 File Offset: 0x001CD4D5
		public virtual void SetEventState(EEventState value)
		{
		}

		// Token: 0x0600831A RID: 33562 RVA: 0x001CF2D7 File Offset: 0x001CD4D7
		public virtual void SpawnAI(int count)
		{
		}

		// Token: 0x0600831B RID: 33563 RVA: 0x001CF2D9 File Offset: 0x001CD4D9
		public virtual void DevelopUnlockDoors(bool openDoors)
		{
		}

		// Token: 0x0600831C RID: 33564 RVA: 0x001CF2DB File Offset: 0x001CD4DB
		public virtual void Heal(EBodyPart bodyPart, float value)
		{
		}

		// Token: 0x0600831D RID: 33565 RVA: 0x001CF2DD File Offset: 0x001CD4DD
		public virtual void DebugSnapshotAllPlayers()
		{
		}

		// Token: 0x0600831E RID: 33566 RVA: 0x001CF2DF File Offset: 0x001CD4DF
		public virtual void DebugSpawnAirdrop(bool spawnNearPlayer, Vector3 playerPosition)
		{
		}

		// Token: 0x0600831F RID: 33567 RVA: 0x001CF2E1 File Offset: 0x001CD4E1
		public void SetCallbackForInteraction(Action<Action> cb)
		{
			this._openAction = cb;
		}

		// Token: 0x06008320 RID: 33568 RVA: 0x00484AB4 File Offset: 0x00482CB4
		public virtual void TryInteractionCallback(LootableContainer container)
		{
			Player.Class1321 @class = new Player.Class1321();
			@class.container = container;
			@class.player_0 = this;
			if (@class.container != null)
			{
				Action<Action> openAction = this._openAction;
				if (openAction != null)
				{
					openAction(new Action(@class.method_0));
				}
			}
			this._openAction = null;
		}

		// Token: 0x06008321 RID: 33569 RVA: 0x001CF2EA File Offset: 0x001CD4EA
		public void method_99()
		{
			this.Pedometer.Start();
			this.StatisticsManager.BeginStatisticsSession();
		}

		// Token: 0x06008322 RID: 33570 RVA: 0x00484B08 File Offset: 0x00482D08
		public virtual void OnGameSessionEnd(ExitStatus exitStatus, float pastTime, string locationId, string exitName)
		{
			if (this._gameSessionEndWasCalled)
			{
				return;
			}
			try
			{
				this._gameSessionEndWasCalled = true;
				this.Pedometer.Stop();
				this.Int32_0 = 0;
				this.ExecuteSkill(new Action(this.method_150));
				this.ExecuteSkill(new Action(this.method_151));
				this.Profile.EftStats.LastPlayerState = null;
				this.StatisticsManager.EndStatisticsSession(exitStatus, pastTime);
				foreach (GInterface518 ginterface in this.IEnumerable_0)
				{
					ginterface.CheckExitConditionCounters(exitStatus, pastTime, locationId, exitName, this.HealthController.BodyPartEffects, this.TriggerZones);
				}
				GClass4007 gclass = this.AbstractQuestControllerClass as GClass4007;
				if (gclass != null)
				{
					gclass.ManageQuestStatusesForPveOfflineGameEnd();
				}
				if (exitStatus != ExitStatus.Transit)
				{
					AbstractQuestControllerClass questController = this._questController;
					if (questController != null)
					{
						questController.ResetCurrentNullableCounters();
					}
				}
				AbstractAchievementControllerClass achievementsController = this._achievementsController;
				if (achievementsController != null)
				{
					achievementsController.ResetCurrentNullableCounters();
				}
				this.method_118();
				if (exitStatus != ExitStatus.Killed && exitStatus != ExitStatus.Left)
				{
					this.method_119();
				}
				this.method_120();
				if (this.MovementContext.Platform != null)
				{
					this.GetOff(this.MovementContext.Platform);
				}
				this.Skills.OnSkillLevelChanged -= this.OnSkillLevelChanged;
				this.Skills.OnSkillExperienceChanged -= this.OnSkillExperienceChanged;
				this.Skills.WeaponMastered -= this.OnWeaponMastered;
				this.Skills.OnMasteringExperienceChanged -= this.OnMasteringExperienceChanged;
				this.Skills.ImmunityAvoidPoisonChance.OnResult -= this.method_100;
				this.Skills.ImmunityAvoidMiscEffectsChance.OnResult -= this.method_100;
				this.StatisticsManager.OnUniqueLoot -= this.method_110;
				this.MovementContext.OnStateChanged -= this.method_116;
				this.HealthController.ApplyDamageEvent -= this.method_112;
				this.HealthController.EnergyChangedEvent -= this.method_115;
				this.HealthController.HydrationChangedEvent -= this.method_111;
				this.HealthController.EffectResidualEvent -= this.method_113;
				this.HealthController.StimulatorBuffActivationEvent -= this.method_103;
				this.HealthController.TemperatureChangedEvent -= this.method_104;
				this.SearchController.OnItemFound -= this.method_105;
				this.SearchController.OnItemFullySearchedEvent -= this.method_106;
				this.InventoryController.OnAmmoLoaded -= this.method_107;
				this.InventoryController.OnAmmoUnloaded -= this.method_108;
				this.InventoryController.OnMagazineCheck -= this.method_109;
				this.HealthController.EffectStartedEvent -= this.OnHealthEffectAdded;
				this.HealthController.EffectResidualEvent -= this.OnHealthEffectRemoved;
				this.HealthController.HealthChangedEvent -= this.method_87;
				this.HealthController.BodyPartDestroyedEvent -= this.method_85;
				this.HealthController.BodyPartRestoredEvent -= this.method_84;
				this.Profile.OnTraderStandingChanged -= this.TraderStandingHandler;
				Action unsubscribeOnEndSession = this._unsubscribeOnEndSession;
				if (unsubscribeOnEndSession != null)
				{
					unsubscribeOnEndSession();
				}
				this._unsubscribeOnEndSession = null;
				this.UnsubscribeVisualEvents();
			}
			catch (Exception arg)
			{
				UnityEngine.Debug.LogError(string.Format("Safe ex: {0}", arg));
			}
		}

		// Token: 0x06008323 RID: 33571 RVA: 0x00484EF0 File Offset: 0x004830F0
		public virtual void ConnectSkillManager()
		{
			this.Skills.OnSkillLevelChanged += this.OnSkillLevelChanged;
			this.Skills.OnSkillExperienceChanged += this.OnSkillExperienceChanged;
			this.Skills.WeaponMastered += this.OnWeaponMastered;
			this.Skills.OnMasteringExperienceChanged += this.OnMasteringExperienceChanged;
			this.Skills.ImmunityAvoidPoisonChance.OnResult += this.method_100;
			this.Skills.ImmunityAvoidMiscEffectsChance.OnResult += this.method_100;
			this.StatisticsManager.OnUniqueLoot += this.method_110;
			this.MovementContext.OnStateChanged += this.method_116;
			this.HealthController.ApplyDamageEvent += this.method_112;
			this.HealthController.EnergyChangedEvent += this.method_115;
			this.HealthController.HydrationChangedEvent += this.method_111;
			this.HealthController.EffectResidualEvent += this.method_113;
			this.HealthController.StimulatorBuffActivationEvent += this.method_103;
			this.HealthController.TemperatureChangedEvent += this.method_104;
			this.SearchController.OnItemFound += this.method_105;
			this.SearchController.OnItemFullySearchedEvent += this.method_106;
			this.InventoryController.OnAmmoLoaded += this.method_107;
			this.InventoryController.OnAmmoUnloaded += this.method_108;
			this.InventoryController.OnMagazineCheck += this.method_109;
			this._unsubscribeOnEndSession = GlobalEventHandlerClass.Instance.SubscribeOnEvent<GClass3552>(new Action<GClass3552>(this.method_152));
		}

		// Token: 0x06008324 RID: 33572 RVA: 0x001CF302 File Offset: 0x001CD502
		public void method_100(bool result)
		{
			this.HealthController.AddImmunityNotificationEffect();
		}

		// Token: 0x06008325 RID: 33573 RVA: 0x001CF30F File Offset: 0x001CD50F
		public void method_101(IEffect obj)
		{
			if (obj is GInterface343)
			{
				this.Skills.Dehydration.Begin();
				return;
			}
			if (obj is GInterface344)
			{
				this.Skills.Exhaustion.Begin();
			}
		}

		// Token: 0x06008326 RID: 33574 RVA: 0x001CF342 File Offset: 0x001CD542
		public void method_102(IEffect obj)
		{
			if (obj is GInterface343)
			{
				this.ExecuteSkill(new Action(this.method_153));
				return;
			}
			if (obj is GInterface344)
			{
				this.ExecuteSkill(new Action(this.method_154));
			}
		}

		// Token: 0x06008327 RID: 33575 RVA: 0x004850DC File Offset: 0x004832DC
		public void method_103(IPlayerBuff buff)
		{
			if (!buff.Settings.BuffType.IsBuff(buff.Settings.Value))
			{
				this.Int32_0 += (buff.Active ? 1 : -1);
			}
			BindableEvent onLevelUp = this.Skills.Endurance.OnLevelUp;
			if (onLevelUp == null)
			{
				return;
			}
			onLevelUp.Invoke();
		}

		// Token: 0x06008328 RID: 33576 RVA: 0x001CF379 File Offset: 0x001CD579
		public void method_104(float tempCelsio)
		{
			this.PlayerBody.SetTemperatureForBody(tempCelsio);
		}

		// Token: 0x06008329 RID: 33577 RVA: 0x0048513C File Offset: 0x0048333C
		public void method_105(Item item)
		{
			Player.Class1322 @class = new Player.Class1322();
			@class.player_0 = this;
			if (item is StackableItemItemClass)
			{
				return;
			}
			IItemOwner owner = item.Parent.GetOwner();
			@class.onCorpse = (owner.RootItem is InventoryEquipment);
			this.ExecuteSkill(new Action(@class.method_0));
		}

		// Token: 0x0600832A RID: 33578 RVA: 0x001CF387 File Offset: 0x001CD587
		public void method_106()
		{
			this.ExecuteSkill(new Action<float>(this.Skills.SearchAction.Complete));
		}

		// Token: 0x0600832B RID: 33579 RVA: 0x00485194 File Offset: 0x00483394
		public void method_107(int count)
		{
			Player.Class1323 @class = new Player.Class1323();
			@class.player_0 = this;
			@class.count = count;
			this.ExecuteSkill(new Action(@class.method_0));
		}

		// Token: 0x0600832C RID: 33580 RVA: 0x004851C8 File Offset: 0x004833C8
		public void method_108(int count)
		{
			Player.Class1324 @class = new Player.Class1324();
			@class.player_0 = this;
			@class.count = count;
			this.ExecuteSkill(new Action(@class.method_0));
		}

		// Token: 0x0600832D RID: 33581 RVA: 0x001CF3A6 File Offset: 0x001CD5A6
		public void method_109()
		{
			this.ExecuteSkill(new Action(this.method_155));
		}

		// Token: 0x0600832E RID: 33582 RVA: 0x001CF3BA File Offset: 0x001CD5BA
		public void method_110()
		{
			this.ExecuteSkill(new Action(this.method_156));
		}

		// Token: 0x0600832F RID: 33583 RVA: 0x004851FC File Offset: 0x004833FC
		public void method_111(float diff)
		{
			Player.Class1325 @class = new Player.Class1325();
			@class.player_0 = this;
			@class.diff = diff;
			this.ExecuteSkill(new Action(@class.method_0));
		}

		// Token: 0x06008330 RID: 33584 RVA: 0x00485230 File Offset: 0x00483430
		public void method_112(EBodyPart bodyPart, float damage, DamageInfoStruct damageInfo)
		{
			Player.Class1326 @class = new Player.Class1326();
			@class.player_0 = this;
			@class.damage = damage;
			if (!damageInfo.DamageType.IsSelfInflicted())
			{
				this.ExecuteSkill(new Action(@class.method_0));
			}
		}

		// Token: 0x06008331 RID: 33585 RVA: 0x00485270 File Offset: 0x00483470
		public void method_113(IEffect healthEffect)
		{
			GInterface376 ginterface = healthEffect as GInterface376;
			if (ginterface == null)
			{
				return;
			}
			foreach (GInterface518 ginterface2 in this.IEnumerable_0)
			{
				ginterface2.CheckUseItemCounter(ginterface.MedItem.TemplateId, ginterface.Amount, this.Location, this.TriggerZones);
			}
		}

		// Token: 0x06008332 RID: 33586 RVA: 0x004852E8 File Offset: 0x004834E8
		public void method_114(GClass3552 flareEvent)
		{
			if (!this.IsYourPlayer)
			{
				return;
			}
			if (flareEvent.PlayerProfileID == this.ProfileId && flareEvent.ZoneEventType == GClass3552.EZoneEventType.FiredPlayerAddedInShotList)
			{
				foreach (GInterface518 ginterface in this.IEnumerable_0)
				{
					ginterface.CheckShootFlareCounter(flareEvent.ZoneID);
				}
			}
		}

		// Token: 0x06008333 RID: 33587 RVA: 0x00485360 File Offset: 0x00483560
		public void method_115(float diff)
		{
			Player.Class1327 @class = new Player.Class1327();
			@class.player_0 = this;
			@class.diff = diff;
			this.ExecuteSkill(new Action(@class.method_0));
		}

		// Token: 0x06008334 RID: 33588 RVA: 0x001CF3CE File Offset: 0x001CD5CE
		public virtual void ExecuteSkill(Action action)
		{
			action();
		}

		// Token: 0x06008335 RID: 33589 RVA: 0x001CF3D6 File Offset: 0x001CD5D6
		public virtual void ExecuteSkill(Action<float> action)
		{
			action(1f);
		}

		// Token: 0x06008336 RID: 33590 RVA: 0x00485394 File Offset: 0x00483594
		public Task ManageGameQuests()
		{
			Player.Struct330 @struct;
			@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
			@struct.player_0 = this;
			@struct.int_0 = -1;
			@struct.asyncTaskMethodBuilder_0.Start<Player.Struct330>(ref @struct);
			return @struct.asyncTaskMethodBuilder_0.Task;
		}

		// Token: 0x06008337 RID: 33591 RVA: 0x001CF3E3 File Offset: 0x001CD5E3
		public void InitializeRecodableItemHandlers()
		{
			this.recodableItemsHandler = new RecodableItemsHandler(this);
		}

		// Token: 0x06008338 RID: 33592 RVA: 0x001CF3F1 File Offset: 0x001CD5F1
		public virtual void StartInflictSelfDamageCoroutine()
		{
			if (this._selfDamage == null)
			{
				this._selfDamage = base.StartCoroutine(this.InflictSelfDamage());
			}
		}

		// Token: 0x06008339 RID: 33593 RVA: 0x001CF40D File Offset: 0x001CD60D
		public IEnumerator InflictSelfDamage()
		{
			Player.Class1362 @class = new Player.Class1362(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x0600833A RID: 33594 RVA: 0x004853D8 File Offset: 0x004835D8
		public void method_116(EPlayerState previousState, EPlayerState nextState)
		{
			this.Pedometer.CurrentState = nextState;
			switch (nextState)
			{
			case EPlayerState.ProneMove:
				this.MovementContext.CheckGroundedRayDistance = 0.08f;
				this.Pedometer.MakeMark(EPlayerState.ProneMove);
				break;
			case EPlayerState.Run:
				this.MovementContext.CheckGroundedRayDistance = 0.08f;
				this.Pedometer.MakeMark(EPlayerState.Run);
				break;
			case EPlayerState.Sprint:
				this.MovementContext.CheckGroundedRayDistance = 0.15f;
				this.Pedometer.MakeMark(EPlayerState.Sprint);
				if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftLegDamaged) || this.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightLegDamaged))
				{
					this.StartInflictSelfDamageCoroutine();
				}
				break;
			case EPlayerState.Jump:
			{
				this.MovementContext.CheckGroundedRayDistance = 0.03f;
				ActiveHealthController activeHealthController = this.ActiveHealthController;
				if (activeHealthController != null)
				{
					activeHealthController.DoWoundRelapse(1f, EBodyPart.Common);
				}
				break;
			}
			}
			switch (previousState)
			{
			case EPlayerState.ProneMove:
				if (this.MovementContext.IsGrounded)
				{
					this.ExecuteSkill(new Action(this.method_157));
					return;
				}
				break;
			case EPlayerState.Run:
				if (this.MovementContext.IsGrounded)
				{
					Player.Class1329 @class = new Player.Class1329();
					@class.player_0 = this;
					@class.distance = this.Pedometer.GetDistanceFromMark(EPlayerState.Run);
					this.ExecuteSkill(new Action(@class.method_0));
					return;
				}
				break;
			case EPlayerState.Sprint:
				if (this.MovementContext.IsGrounded)
				{
					Player.Class1328 class2 = new Player.Class1328();
					class2.player_0 = this;
					class2.distance = this.Pedometer.GetDistanceFromMark(EPlayerState.Sprint);
					this.ExecuteSkill(new Action(class2.method_0));
					ActiveHealthController activeHealthController2 = this.ActiveHealthController;
					if (activeHealthController2 == null)
					{
						return;
					}
					activeHealthController2.DoWoundRelapse(class2.distance / 10f, EBodyPart.Common);
					return;
				}
				break;
			case EPlayerState.Jump:
			{
				bool flag = false;
				if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftLegDamaged))
				{
					ActiveHealthController activeHealthController3 = this.ActiveHealthController;
					if (activeHealthController3 != null)
					{
						activeHealthController3.ApplyDamage(EBodyPart.LeftLeg, 3f, GClass3051.FallDamage);
					}
					flag = true;
				}
				if (this.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightLegDamaged))
				{
					ActiveHealthController activeHealthController4 = this.ActiveHealthController;
					if (activeHealthController4 != null)
					{
						activeHealthController4.ApplyDamage(EBodyPart.RightLeg, 3f, GClass3051.FallDamage);
					}
					flag = true;
				}
				if (flag && !this.MovementContext.PhysicalConditionIs(EPhysicalCondition.OnPainkillers) && !this.IsAI)
				{
					this.Say(EPhraseTrigger.OnBeingHurt, true, 0f, (ETagStatus)0, 100, false);
				}
				break;
			}
			default:
				return;
			}
		}

		// Token: 0x0600833B RID: 33595 RVA: 0x001CF41C File Offset: 0x001CD61C
		public virtual void SendHandsInteractionStateChanged(bool value, int animationId)
		{
			if (value)
			{
				this.MovementContext.SetBlindFire(0);
			}
		}

		// Token: 0x0600833C RID: 33596 RVA: 0x001CF42D File Offset: 0x001CD62D
		public virtual void SetCompassState(bool value)
		{
		}

		// Token: 0x0600833D RID: 33597 RVA: 0x001CF42F File Offset: 0x001CD62F
		public virtual void SetLauncherState(bool value)
		{
		}

		// Token: 0x0600833E RID: 33598 RVA: 0x001CF431 File Offset: 0x001CD631
		public virtual void SetAnimatorLayerWeight(int layer, int weight)
		{
		}

		// Token: 0x0600833F RID: 33599 RVA: 0x001CF433 File Offset: 0x001CD633
		public virtual void OnSkillLevelChanged(AbstractSkillClass skill)
		{
		}

		// Token: 0x06008340 RID: 33600 RVA: 0x001CF435 File Offset: 0x001CD635
		public virtual void OnSkillExperienceChanged(AbstractSkillClass skill)
		{
		}

		// Token: 0x06008341 RID: 33601 RVA: 0x001CF437 File Offset: 0x001CD637
		public virtual void OnWeaponMastered(MasterSkillClass masterSkill)
		{
		}

		// Token: 0x06008342 RID: 33602 RVA: 0x001CF439 File Offset: 0x001CD639
		public virtual void OnMasteringExperienceChanged(MasterSkillClass masterSkill)
		{
		}

		// Token: 0x06008343 RID: 33603 RVA: 0x001CF43B File Offset: 0x001CD63B
		public void SpecialPlaceVisited(string id, int experience)
		{
			Action<string, int> onSpecialPlaceVisited = this.OnSpecialPlaceVisited;
			if (onSpecialPlaceVisited == null)
			{
				return;
			}
			onSpecialPlaceVisited(id, experience);
		}

		// Token: 0x170013B6 RID: 5046
		// (get) Token: 0x06008344 RID: 33604 RVA: 0x001CF44F File Offset: 0x001CD64F
		// (set) Token: 0x06008345 RID: 33605 RVA: 0x001CF457 File Offset: 0x001CD657
		public bool IsYourPlayer { get; set; }

		// Token: 0x06008346 RID: 33606 RVA: 0x001CF460 File Offset: 0x001CD660
		public IEnumerator method_117()
		{
			Player.Class1367 @class = new Player.Class1367(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x06008347 RID: 33607 RVA: 0x00485618 File Offset: 0x00483818
		public void SwitchRenderer(bool @switch)
		{
			Renderer[] renderers = this._renderers;
			for (int i = 0; i < renderers.Length; i++)
			{
				renderers[i].enabled = @switch;
			}
		}

		// Token: 0x170013B7 RID: 5047
		// (get) Token: 0x06008348 RID: 33608 RVA: 0x001CF46F File Offset: 0x001CD66F
		[Obsolete("Use Player.Transform instead!", true)]
		public new Transform transform
		{
			get
			{
				return base.transform;
			}
		}

		// Token: 0x06008349 RID: 33609 RVA: 0x00485644 File Offset: 0x00483844
		public virtual void Teleport(Vector3 position, bool onServerToo = false)
		{
			this.MovementContext.TransformPosition = position;
			this.method_14();
			this._dampVelocity = 0f;
			this.MovementContext.ResetFlying();
			if (EnvironmentManager.Instance)
			{
				EnvironmentManager.Instance.UpdateEnvironmentForPlayer(this);
			}
		}

		// Token: 0x0600834A RID: 33610 RVA: 0x001CF477 File Offset: 0x001CD677
		public void IncreaseAwareness(float aware = 5f)
		{
			this.Awareness = Mathf.Max(this.Awareness, Time.time + aware);
		}

		// Token: 0x0600834B RID: 33611 RVA: 0x001CF491 File Offset: 0x001CD691
		public virtual void Sleep(bool value)
		{
		}

		// Token: 0x0600834C RID: 33612 RVA: 0x001CF493 File Offset: 0x001CD693
		public bool HasBodyPartCollider(Collider collider)
		{
			return this.PlayerBones.BodyPartCollidersHashSet.Contains(collider);
		}

		// Token: 0x0600834D RID: 33613 RVA: 0x001CF4A6 File Offset: 0x001CD6A6
		public virtual void OnVaulting()
		{
		}

		// Token: 0x0600834E RID: 33614 RVA: 0x001CF4A8 File Offset: 0x001CD6A8
		public virtual void OnAnimatedInteraction(EInteraction interaction)
		{
		}

		// Token: 0x0600834F RID: 33615 RVA: 0x001CF4AA File Offset: 0x001CD6AA
		public virtual void OnInventoryInteraction(bool inventory, bool isOperation = false)
		{
		}

		// Token: 0x06008350 RID: 33616 RVA: 0x001CF4AC File Offset: 0x001CD6AC
		public virtual void OnMounting(MountingPacketStruct.EMountingCommand command)
		{
		}

		// Token: 0x06008351 RID: 33617 RVA: 0x001CF4AE File Offset: 0x001CD6AE
		public virtual void ToggleLeftHand(Item item)
		{
			this._leftHandController.ToggleHand(item);
		}

		// Token: 0x06008352 RID: 33618 RVA: 0x001CF4BC File Offset: 0x001CD6BC
		public virtual void RemoveLeftHandItem(float speed = 1f)
		{
			this._leftHandController.RemoveItem(speed);
		}

		// Token: 0x06008353 RID: 33619 RVA: 0x00485690 File Offset: 0x00483890
		public virtual void Dispose()
		{
			if (EnvironmentManager.Instance != null)
			{
				EnvironmentManager.Instance.OnPlayerEnvironmentChanged -= this.SetEnvironment;
			}
			this.method_81();
			foreach (GInterface518 ginterface in this.IEnumerable_0)
			{
				if (ginterface != null)
				{
					ginterface.Dispose();
				}
			}
			this._questController = null;
			this._achievementsController = null;
			this._prestigeController = null;
			if (this.GameWorld != null)
			{
				this.GameWorld.UnregisterPlayer(this);
				if (this.GameWorld.SpeakerManager != null)
				{
					this.GameWorld.SpeakerManager.RemoveFromGroup(this);
				}
			}
			Action voipSourceBinding = this._voipSourceBinding;
			if (voipSourceBinding != null)
			{
				voipSourceBinding();
			}
			this._voipSourceBinding = null;
			if (this._playerBody != null && this.Corpse == null)
			{
				this._playerBody.Dispose();
				this._playerBody = null;
			}
			this._compassInstantiated = false;
			if (this._vaultingComponent != null)
			{
				this.UpdateEvent -= this._vaultingComponent.DoVaultingTick;
			}
			if (this._weaponMountingComponent != null)
			{
				this.HandsChangingEvent -= this._weaponMountingComponent.CancelFindingPoint;
				this._weaponMountingComponent.Dispose();
			}
			BasePhysicalClass physical = this.Physical;
			if (physical != null)
			{
				physical.Unsubscribe();
			}
			if (this.HandsController != null)
			{
				UnityEngine.Object handsController = this.HandsController;
				this.method_118();
				UnityEngine.Object.Destroy(handsController);
			}
			MovementContext movementContext = this.MovementContext;
			if (movementContext != null)
			{
				movementContext.Dispose();
			}
			if (this.ExfiltrationPoint != null)
			{
				this.ExfiltrationPoint.Entered.Remove(this);
			}
			if (this.MovementContext != null && this.MovementContext.Platform != null)
			{
				this.GetOff(this.MovementContext.Platform);
			}
			GDelegate71 onPlayerDeadOrUnspawn = this.OnPlayerDeadOrUnspawn;
			if (onPlayerDeadOrUnspawn != null)
			{
				onPlayerDeadOrUnspawn(this);
			}
			Action<IPlayer> onIPlayerDeadOrUnspawn = this.OnIPlayerDeadOrUnspawn;
			if (onIPlayerDeadOrUnspawn != null)
			{
				onIPlayerDeadOrUnspawn(this);
			}
			this.CompositeDisposable.Dispose();
		}

		// Token: 0x06008354 RID: 33620 RVA: 0x001CF4CA File Offset: 0x001CD6CA
		public void method_118()
		{
			if (this._handsController == null)
			{
				return;
			}
			this._handsController.Destroy();
			this._handsController = null;
		}

		// Token: 0x06008355 RID: 33621 RVA: 0x004858B4 File Offset: 0x00483AB4
		public void method_119()
		{
			foreach (Item item in this._inventoryController.Inventory.Equipment.ContainerSlots.Where(new Func<Slot, bool>(Player.Class1318.class1318_0.method_18)).SelectMany(new Func<Slot, IEnumerable<Item>>(Player.Class1318.class1318_0.method_19)).Where(new Func<Item, bool>(Player.Class1318.class1318_0.method_20)).ToList<Item>())
			{
				GStruct154<GClass3410> gstruct = InteractionsHandlerClass.RemoveWithoutRestrictions(item, this._inventoryController);
				if (gstruct.Failed)
				{
					UnityEngine.Debug.LogError(string.Format("Error during remove secret exit requirement items: \n{0}", gstruct.Error));
				}
			}
		}

		// Token: 0x06008356 RID: 33622 RVA: 0x004859AC File Offset: 0x00483BAC
		public void method_120()
		{
			Slot slot = this._inventoryController.Inventory.Equipment.GetSlot(EquipmentSlot.SecuredContainer);
			if (slot.ContainedItem != null)
			{
				foreach (Item item in slot.ContainedItem.GetAllItems().Where(new Func<Item, bool>(Player.Class1318.class1318_0.method_21)).ToList<Item>())
				{
					GStruct154<GClass3410> gstruct = InteractionsHandlerClass.RemoveWithoutRestrictions(item, this._inventoryController);
					if (gstruct.Failed)
					{
						UnityEngine.Debug.LogError(string.Format("Error during remove secret exit requirement items from container: \n{0}", gstruct.Error));
					}
				}
			}
		}

		// Token: 0x06008357 RID: 33623 RVA: 0x00485A74 File Offset: 0x00483C74
		public void Board(MovingPlatform platform)
		{
			if (this.MovementContext.Platform != null && this.MovementContext.Platform != platform)
			{
				this.GetOff(this.MovementContext.Platform);
			}
			if (!platform.Passengers.Contains(this))
			{
				platform.Passengers.Add(this);
			}
			this.MovementContext.Platform = platform;
		}

		// Token: 0x06008358 RID: 33624 RVA: 0x001CF4ED File Offset: 0x001CD6ED
		public void GetOff(MovingPlatform platform)
		{
			if (this.MovementContext.Platform != platform)
			{
				return;
			}
			platform.Passengers.Remove(this);
			this.MovementContext.Platform = null;
		}

		// Token: 0x06008359 RID: 33625 RVA: 0x001CF51C File Offset: 0x001CD71C
		public void HandleFlareSuccessEvent(Vector3 position, AmmoTemplate ammoTemplate)
		{
			Singleton<BotEventHandler>.Instance.SuccessFlare(this, position, ammoTemplate);
		}

		// Token: 0x0600835A RID: 33626 RVA: 0x001CF52B File Offset: 0x001CD72B
		public bool AddDiscoveredSecretExit(SecretExfiltrationPoint secretExfiltrationPoint)
		{
			bool flag = !this.FoundSecretExits.Contains(secretExfiltrationPoint);
			if (flag)
			{
				this.FoundSecretExits.Add(secretExfiltrationPoint);
			}
			return flag;
		}

		// Token: 0x170013B8 RID: 5048
		// (get) Token: 0x0600835B RID: 33627 RVA: 0x001CF54B File Offset: 0x001CD74B
		public string PlayerId
		{
			get
			{
				return this.ProfileId;
			}
		}

		// Token: 0x170013B9 RID: 5049
		// (get) Token: 0x0600835C RID: 33628 RVA: 0x001CF553 File Offset: 0x001CD753
		public Vector3 Position
		{
			get
			{
				return this.Transform.Original.position;
			}
		}

		// Token: 0x170013BA RID: 5050
		// (get) Token: 0x0600835D RID: 33629 RVA: 0x001CF565 File Offset: 0x001CD765
		public Quaternion Rotation
		{
			get
			{
				return this.Transform.Original.rotation;
			}
		}

		// Token: 0x170013BB RID: 5051
		// (get) Token: 0x0600835E RID: 33630 RVA: 0x001CF577 File Offset: 0x001CD777
		// (set) Token: 0x0600835F RID: 33631 RVA: 0x001CF57F File Offset: 0x001CD77F
		public IPlayerVoipController VoipController { get; set; }

		// Token: 0x170013BC RID: 5052
		// (get) Token: 0x06008360 RID: 33632 RVA: 0x001CF588 File Offset: 0x001CD788
		public NetworkPlayerType Type
		{
			get
			{
				if (!(this is ClientPlayer))
				{
					return NetworkPlayerType.Remote;
				}
				return NetworkPlayerType.Local;
			}
		}

		// Token: 0x170013BD RID: 5053
		// (get) Token: 0x06008361 RID: 33633 RVA: 0x001CF595 File Offset: 0x001CD795
		public bool IsTracking
		{
			get
			{
				return !this.Destroyed;
			}
		}

		// Token: 0x170013BE RID: 5054
		// (get) Token: 0x06008362 RID: 33634 RVA: 0x001CF5A0 File Offset: 0x001CD7A0
		// (set) Token: 0x06008363 RID: 33635 RVA: 0x001CF5A8 File Offset: 0x001CD7A8
		public DissonanceComms DissonanceComms { get; set; }

		// Token: 0x170013BF RID: 5055
		// (get) Token: 0x06008364 RID: 33636 RVA: 0x001CF5B1 File Offset: 0x001CD7B1
		// (set) Token: 0x06008365 RID: 33637 RVA: 0x001CF5B9 File Offset: 0x001CD7B9
		public DateTime HearingDateTime { get; set; }

		// Token: 0x170013C0 RID: 5056
		// (get) Token: 0x06008366 RID: 33638 RVA: 0x001CF5C2 File Offset: 0x001CD7C2
		// (set) Token: 0x06008367 RID: 33639 RVA: 0x001CF5CA File Offset: 0x001CD7CA
		public Player.EVoipState VoipState { get; set; }

		// Token: 0x06008368 RID: 33640 RVA: 0x001CF5D3 File Offset: 0x001CD7D3
		public virtual void InitVoip(Player.EVoipState voipState)
		{
			this.VoipState = voipState;
			if (voipState == Player.EVoipState.NotAvailable)
			{
				return;
			}
			this.DissonanceComms = DissonanceComms.Instance;
		}

		// Token: 0x06008369 RID: 33641 RVA: 0x00485AE0 File Offset: 0x00483CE0
		public void method_121()
		{
			Player.Class1330 @class = new Player.Class1330();
			@class.broadcastTrigger = base.gameObject.AddComponent<VoiceBroadcastTrigger>();
			@class.broadcastTrigger.ChannelType = CommTriggerTarget.Self;
			SoundSettingsControllerClass settings = Singleton<SharedGameSettingsClass>.Instance.Sound.Settings;
			this.CompositeDisposable.BindState<int>(settings.VoiceChatVolume, new Action<int>(@class.method_0));
		}

		// Token: 0x0600836A RID: 33642 RVA: 0x001CF5EB File Offset: 0x001CD7EB
		public void TrackPlayerPosition()
		{
			DissonanceComms dissonanceComms = this.DissonanceComms;
			if (dissonanceComms == null)
			{
				return;
			}
			dissonanceComms.TrackPlayerPosition(this);
		}

		// Token: 0x0600836B RID: 33643 RVA: 0x00485B40 File Offset: 0x00483D40
		public ValueTuple<bool, bool> IsHeard(in Vector3 voicePos, float sqrDistance)
		{
			if (this.DissonanceComms == null)
			{
				return new ValueTuple<bool, bool>(false, false);
			}
			bool flag = this.method_122(voicePos, sqrDistance);
			return new ValueTuple<bool, bool>(flag, flag && (this.VoipState == Player.EVoipState.Available || this.VoipState == Player.EVoipState.MicrophoneFail));
		}

		// Token: 0x0600836C RID: 33644 RVA: 0x00485B8C File Offset: 0x00483D8C
		public bool method_122(in Vector3 voicePos, float sqrDistance)
		{
			return (this.Position - voicePos).sqrMagnitude <= sqrDistance;
		}

		// Token: 0x170013C1 RID: 5057
		// (get) Token: 0x0600836D RID: 33645 RVA: 0x001CF5FE File Offset: 0x001CD7FE
		// (set) Token: 0x0600836E RID: 33646 RVA: 0x001CF606 File Offset: 0x001CD806
		public bool IgnoreCameraCollider { get; set; }

		// Token: 0x170013C2 RID: 5058
		// (get) Token: 0x0600836F RID: 33647 RVA: 0x001CF60F File Offset: 0x001CD80F
		// (set) Token: 0x06008370 RID: 33648 RVA: 0x001CF617 File Offset: 0x001CD817
		public BTRSide BtrInteractionSide { get; set; }

		// Token: 0x170013C3 RID: 5059
		// (get) Token: 0x06008371 RID: 33649 RVA: 0x001CF620 File Offset: 0x001CD820
		// (set) Token: 0x06008372 RID: 33650 RVA: 0x001CF628 File Offset: 0x001CD828
		public TripwireInteractionTrigger TripwireInteractionTrigger { get; set; }

		// Token: 0x170013C4 RID: 5060
		// (get) Token: 0x06008373 RID: 33651 RVA: 0x001CF631 File Offset: 0x001CD831
		// (set) Token: 0x06008374 RID: 33652 RVA: 0x001CF639 File Offset: 0x001CD839
		public EventObjectInteractive EventObjectInteractive { get; set; }

		// Token: 0x170013C5 RID: 5061
		// (get) Token: 0x06008375 RID: 33653 RVA: 0x001CF642 File Offset: 0x001CD842
		// (set) Token: 0x06008376 RID: 33654 RVA: 0x00485BB8 File Offset: 0x00483DB8
		public EPlayerBtrState BtrState
		{
			get
			{
				return this._btrState;
			}
			set
			{
				if (this._btrState == value)
				{
					return;
				}
				this.IgnoreCameraCollider = (value >= EPlayerBtrState.Approach);
				switch (value)
				{
				case EPlayerBtrState.Outside:
					this.BtrInteractionSide = null;
					this._customHandRotator = new GClass2093();
					break;
				case EPlayerBtrState.Approach:
					break;
				case EPlayerBtrState.GoIn:
					this._customHandRotator = new GClass2094(this, null);
					break;
				case EPlayerBtrState.Inside:
					this._customHandRotator = (this._customHandRotator.IsValid ? new GClass2095(this, new Quaternion?(this._customHandRotator.GetRotation()), null) : new GClass2095(this, null, null));
					break;
				case EPlayerBtrState.GoOut:
					this._customHandRotator = new GClass2095(this, null, null);
					break;
				default:
					throw new ArgumentOutOfRangeException();
				}
				this._btrState = value;
				Action<EPlayerBtrState> onBtrStateChanged = this.OnBtrStateChanged;
				if (onBtrStateChanged == null)
				{
					return;
				}
				onBtrStateChanged(this._btrState);
			}
		}

		// Token: 0x140001D0 RID: 464
		// (add) Token: 0x06008377 RID: 33655 RVA: 0x00485CB4 File Offset: 0x00483EB4
		// (remove) Token: 0x06008378 RID: 33656 RVA: 0x00485CEC File Offset: 0x00483EEC
		public event Action<EPlayerBtrState> OnBtrStateChanged;

		// Token: 0x06008379 RID: 33657 RVA: 0x00485D24 File Offset: 0x00483F24
		public virtual void ExternalInteraction()
		{
			RaycastHit raycastHit;
			GameObject interactive = GameWorld.FindInteractable(this.InteractionRay, out raycastHit);
			if (this._playerLookRaycastTransform == null || !this.HealthController.IsAlive)
			{
				return;
			}
			if (this.CurrentState.CanInteract && this.HandsController && this.HandsController.CanInteract())
			{
				if (BTRControllerClass.Instance != null && BTRControllerClass.Instance.BtrView != null && BTRControllerClass.Instance.BtrView.IsMyPlayerInRange)
				{
					if (this._btrState != EPlayerBtrState.Outside)
					{
						if (this._lastBtrStateInteractionCheck != this._btrState)
						{
							Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
							if (possibleInteractionsChanged != null)
							{
								possibleInteractionsChanged();
							}
							this._lastBtrStateInteractionCheck = this._btrState;
						}
						if (this._lastBtrStateCheck != this.BtrInteractionSide.BtrView.BtrState)
						{
							Action possibleInteractionsChanged2 = this.PossibleInteractionsChanged;
							if (possibleInteractionsChanged2 != null)
							{
								possibleInteractionsChanged2();
							}
							this._lastBtrStateCheck = this.BtrInteractionSide.BtrView.BtrState;
						}
						return;
					}
					this.method_123(interactive);
				}
				this.method_124(interactive);
				this.method_125(interactive);
				return;
			}
		}

		// Token: 0x0600837A RID: 33658 RVA: 0x00485E4C File Offset: 0x0048404C
		public void method_123(GameObject interactive)
		{
			if (interactive == null)
			{
				this.method_158();
				return;
			}
			BTRSide componentInParent = interactive.GetComponentInParent<BTRSide>();
			if (!(componentInParent == null) && componentInParent.DistanceCheck(this.Position))
			{
				if (!this._lastBtrCastResult)
				{
					this.BtrInteractionSide = componentInParent;
					Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
					if (possibleInteractionsChanged != null)
					{
						possibleInteractionsChanged();
					}
				}
				this._lastBtrCastResult = true;
				return;
			}
			this.method_158();
		}

		// Token: 0x0600837B RID: 33659 RVA: 0x00485EB8 File Offset: 0x004840B8
		public void method_124(GameObject interactive)
		{
			if (interactive == null)
			{
				this.method_159();
				return;
			}
			TripwireInteractionTrigger component = interactive.GetComponent<TripwireInteractionTrigger>();
			if (!(component == null) && component.DistanceCheck(this.Position))
			{
				if (!this._lastTripwireCastResult)
				{
					this.TripwireInteractionTrigger = component;
					Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
					if (possibleInteractionsChanged != null)
					{
						possibleInteractionsChanged();
					}
				}
				this._lastTripwireCastResult = true;
				return;
			}
			this.method_159();
		}

		// Token: 0x0600837C RID: 33660 RVA: 0x00485F24 File Offset: 0x00484124
		public void method_125(GameObject interactive)
		{
			if (interactive == null)
			{
				this.method_160();
				return;
			}
			EventObjectInteractive component = interactive.GetComponent<EventObjectInteractive>();
			if (!(component == null) && component.DistanceCheck(this.Position))
			{
				if (!this._lastEventObjectCastResult)
				{
					this.EventObjectInteractive = component;
					Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
					if (possibleInteractionsChanged != null)
					{
						possibleInteractionsChanged();
					}
				}
				this._lastEventObjectCastResult = true;
				return;
			}
			this.method_160();
		}

		// Token: 0x170013C6 RID: 5062
		// (get) Token: 0x0600837D RID: 33661 RVA: 0x001CF64A File Offset: 0x001CD84A
		public virtual bool CanBeSnapped
		{
			get
			{
				return true;
			}
		}

		// Token: 0x170013C7 RID: 5063
		// (get) Token: 0x0600837E RID: 33662 RVA: 0x001CF64D File Offset: 0x001CD84D
		// (set) Token: 0x0600837F RID: 33663 RVA: 0x001CF655 File Offset: 0x001CD855
		public Player.EProcessStatus ProcessStatus
		{
			get
			{
				return this._processStatus;
			}
			set
			{
				this._processStatus = value;
				this.InventoryController.UpdateLockedStatus();
			}
		}

		// Token: 0x170013C8 RID: 5064
		// (get) Token: 0x06008380 RID: 33664 RVA: 0x001CF669 File Offset: 0x001CD869
		// (set) Token: 0x06008381 RID: 33665 RVA: 0x001CF671 File Offset: 0x001CD871
		public Player.AbstractProcess AbstractProcess_0 { get; set; }

		// Token: 0x170013C9 RID: 5065
		// (get) Token: 0x06008382 RID: 33666 RVA: 0x001CF67A File Offset: 0x001CD87A
		// (set) Token: 0x06008383 RID: 33667 RVA: 0x001CF682 File Offset: 0x001CD882
		public Slot ActiveSlot { get; set; }

		// Token: 0x140001D1 RID: 465
		// (add) Token: 0x06008384 RID: 33668 RVA: 0x00485F90 File Offset: 0x00484190
		// (remove) Token: 0x06008385 RID: 33669 RVA: 0x00485FC8 File Offset: 0x004841C8
		public event Action HandsChangingEvent;

		// Token: 0x140001D2 RID: 466
		// (add) Token: 0x06008386 RID: 33670 RVA: 0x00486000 File Offset: 0x00484200
		// (remove) Token: 0x06008387 RID: 33671 RVA: 0x00486038 File Offset: 0x00484238
		public event Action<IHandsController> HandsChangedEvent;

		// Token: 0x06008388 RID: 33672 RVA: 0x001CF68B File Offset: 0x001CD88B
		public void method_126()
		{
			Action handsChangingEvent = this.HandsChangingEvent;
			if (handsChangingEvent == null)
			{
				return;
			}
			handsChangingEvent();
		}

		// Token: 0x170013CA RID: 5066
		// (get) Token: 0x06008389 RID: 33673 RVA: 0x001CF69D File Offset: 0x001CD89D
		public bool StateIsSuitableForHandInput
		{
			get
			{
				return Array.IndexOf<EPlayerState>(EFTHardSettings.Instance.UnsuitableStates, this.CurrentState.Name) < 0;
			}
		}

		// Token: 0x170013CB RID: 5067
		// (get) Token: 0x0600838A RID: 33674 RVA: 0x001CF6BC File Offset: 0x001CD8BC
		// (set) Token: 0x0600838B RID: 33675 RVA: 0x001CF6C4 File Offset: 0x001CD8C4
		public Item LastEquippedWeaponOrKnifeItem
		{
			get
			{
				return this._lastEquippedWeaponOrKnifeItem;
			}
			set
			{
				if (value is Weapon || value is KnifeItemClass)
				{
					this._lastEquippedWeaponOrKnifeItem = value;
				}
			}
		}

		// Token: 0x0600838C RID: 33676 RVA: 0x001CF6DD File Offset: 0x001CD8DD
		public void method_127(IHandsController controller)
		{
			Action<IHandsController> handsChangedEvent = this.HandsChangedEvent;
			if (handsChangedEvent == null)
			{
				return;
			}
			handsChangedEvent(controller);
		}

		// Token: 0x0600838D RID: 33677 RVA: 0x00486070 File Offset: 0x00484270
		public virtual Task SpawnController(Player.AbstractHandsController controller, Action callback = null)
		{
			Player.Class1331 @class = new Player.Class1331();
			@class.player_0 = this;
			@class.controller = controller;
			@class.callback = callback;
			@class.onControllerAppeared = new TaskCompletionSource();
			this.HandsController = @class.controller;
			@class.controller.Spawn(1f, new Action(@class.method_0));
			return @class.onControllerAppeared.Task;
		}

		// Token: 0x0600838E RID: 33678 RVA: 0x001CF6F0 File Offset: 0x001CD8F0
		public void FastForwardCurrentOperations()
		{
			if (this.HandsController == null)
			{
				return;
			}
			UnityEngine.Object handsController;
			do
			{
				handsController = this.HandsController;
				this.HandsController.FastForwardCurrentState();
			}
			while (!(handsController == this.HandsController));
		}

		// Token: 0x0600838F RID: 33679 RVA: 0x004860D8 File Offset: 0x004842D8
		public void DestroyController()
		{
			Item item = this.HandsController.Item;
			this.FastForwardCurrentOperations();
			this.HandsController.Destroy();
			foreach (GEventArgs10 activeEvent in this.InventoryController.SelectEvents<GEventArgs10>(item).ToArray<GEventArgs10>())
			{
				this.InventoryController.RemoveActiveEvent(activeEvent);
			}
			UnityEngine.Object.Destroy(this.HandsController);
			this.HandsController = null;
		}

		// Token: 0x06008390 RID: 33680 RVA: 0x001CF71F File Offset: 0x001CD91F
		public virtual void DropCurrentController(Action callback, bool fastDrop, Item nextControllerItem = null)
		{
			this.HandsController.Drop(1f, callback, fastDrop, nextControllerItem);
		}

		// Token: 0x06008391 RID: 33681 RVA: 0x00486144 File Offset: 0x00484344
		public void TrySaveLastItemInHands()
		{
			Item item = this.TryGetItemInHands<Item>();
			if (item != null)
			{
				this.LastEquippedWeaponOrKnifeItem = item;
			}
		}

		// Token: 0x06008392 RID: 33682 RVA: 0x001CF734 File Offset: 0x001CD934
		public void SetEmptyHands(Callback<GInterface198> callback)
		{
			callback = (Callback<GInterface198>)Delegate.Combine(callback, new Callback<GInterface198>(this.method_161));
			this.Proceed(true, callback, true);
		}

		// Token: 0x06008393 RID: 33683 RVA: 0x001CF75A File Offset: 0x001CD95A
		public void HideWeapon()
		{
			this.TrySaveLastItemInHands();
			this.SetEmptyHands(new Callback<GInterface198>(Player.Class1318.class1318_0.method_22));
			this.IsInBufferZone = true;
		}

		// Token: 0x06008394 RID: 33684 RVA: 0x001CF78E File Offset: 0x001CD98E
		public void RevealWeapon()
		{
			this.IsInBufferZone = false;
			this.TrySetLastEquippedWeapon(true, null);
		}

		// Token: 0x06008395 RID: 33685 RVA: 0x001CF79F File Offset: 0x001CD99F
		public void SetStationaryWeapon(Weapon weapon)
		{
			this.Proceed(weapon, new Callback<IFirearmHandsController>(Player.Class1318.class1318_0.method_23), false);
		}

		// Token: 0x06008396 RID: 33686 RVA: 0x001CF7C8 File Offset: 0x001CD9C8
		public void SetInHands(Weapon weapon, Callback<IFirearmHandsController> callback)
		{
			this.Proceed(weapon, callback, true);
		}

		// Token: 0x06008397 RID: 33687 RVA: 0x001CF7D3 File Offset: 0x001CD9D3
		public void SetInHands(ThrowWeapItemClass throwWeap, Callback<IHandsThrowController> callback)
		{
			this.Proceed(throwWeap, callback, true);
		}

		// Token: 0x06008398 RID: 33688 RVA: 0x001CF7DE File Offset: 0x001CD9DE
		public void SetInHands(MedsItemClass meds, GStruct382<EBodyPart> bodyParts, int animationVariant, Callback<GInterface203> callback)
		{
			this.method_128(true);
			this.Proceed(meds, bodyParts, callback, animationVariant, true);
		}

		// Token: 0x06008399 RID: 33689 RVA: 0x001CF7F3 File Offset: 0x001CD9F3
		public void SetInHands(MedsItemClass meds, EBodyPart bodyPart, int animationVariant, Callback<GInterface203> callback)
		{
			this.method_128(true);
			this.Proceed(meds, new GStruct382<EBodyPart>(bodyPart), callback, animationVariant, true);
		}

		// Token: 0x0600839A RID: 33690 RVA: 0x001CF80D File Offset: 0x001CDA0D
		public void SetInHands(FoodDrinkItemClass foodDrink, float amount, int animationVariant, Callback<GInterface203> callback)
		{
			this.method_128(true);
			this.Proceed(foodDrink, amount, callback, animationVariant, true);
		}

		// Token: 0x0600839B RID: 33691 RVA: 0x001CF822 File Offset: 0x001CDA22
		public void SetInHands(KnifeComponent knife, Callback<IKnifeController> callback)
		{
			this.Proceed(knife, callback, true);
		}

		// Token: 0x0600839C RID: 33692 RVA: 0x001CF82D File Offset: 0x001CDA2D
		public void SetInHandsUsableItem(Item item, Callback<GInterface202> callback)
		{
			if (item is PortableRangeFinderItemClass)
			{
				this.Proceed<PortableRangeFinderController>(item, callback, true);
			}
			if (item is RadioTransmitterItemClass)
			{
				this.Proceed<RadioTransmitterController>(item, callback, true);
			}
		}

		// Token: 0x0600839D RID: 33693 RVA: 0x001CF851 File Offset: 0x001CDA51
		public void SetInHandsForQuickUse(Item quickUseItem, Callback<IOnHandsUseCallback> callback)
		{
			this.Proceed(quickUseItem, callback, true);
		}

		// Token: 0x0600839E RID: 33694 RVA: 0x001CF85C File Offset: 0x001CDA5C
		public void SetInHandsForQuickUse(ThrowWeapItemClass throwWeap, Callback<GInterface206> callback)
		{
			this.Proceed(throwWeap, callback, true);
		}

		// Token: 0x0600839F RID: 33695 RVA: 0x001CF867 File Offset: 0x001CDA67
		public void SetInHandsForQuickUse(KnifeComponent knife, Callback<GInterface207> callback)
		{
			this.Proceed(knife, callback, true);
		}

		// Token: 0x060083A0 RID: 33696 RVA: 0x001CF872 File Offset: 0x001CDA72
		public void method_128(bool enable)
		{
			this.MovementContext.PlayerAnimator.SetItemUse(enable);
		}

		// Token: 0x060083A1 RID: 33697 RVA: 0x00486164 File Offset: 0x00484364
		public void TrySetLastEquippedWeapon(bool equipFirstAvaliableOnFail = true, Callback callback = null)
		{
			Player.Class1332 @class = new Player.Class1332();
			@class.callback = callback;
			if (this.method_129(this.LastEquippedWeaponOrKnifeItem))
			{
				this.TryProceed(this.LastEquippedWeaponOrKnifeItem, new Callback<IHandsController>(@class.method_0), true);
				return;
			}
			if (equipFirstAvaliableOnFail)
			{
				this.SetFirstAvailableItem(new Callback<IHandsController>(@class.method_1));
			}
		}

		// Token: 0x060083A2 RID: 33698 RVA: 0x004861BC File Offset: 0x004843BC
		public void SetFirstAvailableItem(Callback<IHandsController> completeCallback)
		{
			Player.Class1333 @class = new Player.Class1333();
			@class.player_0 = this;
			@class.completeCallback = completeCallback;
			Item item = this._slotPriority.Select(new Func<EquipmentSlot, Item>(@class.method_0)).FirstOrDefault(new Func<Item, bool>(@class.method_1));
			if (item != null)
			{
				this.SetInHands(item, @class.completeCallback);
				return;
			}
			this.SetEmptyHands(new Callback<GInterface198>(@class.method_2));
		}

		// Token: 0x060083A3 RID: 33699 RVA: 0x0048622C File Offset: 0x0048442C
		public bool method_129(Item itemToCheck)
		{
			return itemToCheck != null && this.InventoryController.IsAtReachablePlace(itemToCheck) && (itemToCheck.CurrentAddress == null || itemToCheck.CheckAction(null).Succeeded);
		}

		// Token: 0x060083A4 RID: 33700 RVA: 0x00486268 File Offset: 0x00484468
		public void SetInHands(Item item, Callback<IHandsController> callback)
		{
			Player.Class1334 @class = new Player.Class1334();
			@class.callback = callback;
			if (item.CurrentAddress != null && !item.CheckAction(null).Succeeded)
			{
				this.SetEmptyHands(new Callback<GInterface198>(@class.method_0));
				return;
			}
			this.TryProceed(item, @class.callback, true);
		}

		// Token: 0x060083A5 RID: 33701 RVA: 0x004862BC File Offset: 0x004844BC
		public void SetQuickSlotItem(EBoundItem quickSlot, Callback<IHandsController> callback)
		{
			Item boundItem = this.InventoryController.Inventory.FastAccess.GetBoundItem(quickSlot);
			if (boundItem == null || (this.HealthController.IsItemForHealing(boundItem) && !this.HealthController.CanApplyItem(boundItem, EBodyPart.Common)))
			{
				callback(null);
				return;
			}
			if (boundItem.CheckAction(null).Succeeded && !this.InventoryController.IsChangingWeapon && (!this.IsInBufferZone || this.CanManipulateWithHandsInBufferZone || (this.IsInBufferZone && this.HealthController.IsItemForHealing(boundItem))))
			{
				this.TryProceed(boundItem, callback, true);
				return;
			}
			callback(null);
		}

		// Token: 0x060083A6 RID: 33702 RVA: 0x00486368 File Offset: 0x00484568
		public void SetSlotItem(EquipmentSlot equipmentSlot, Callback<IHandsController> callback)
		{
			Item containedItem = this.InventoryController.Inventory.Equipment.GetSlot(equipmentSlot).ContainedItem;
			if (containedItem != null)
			{
				this.SetItemInHands(containedItem, callback);
			}
		}

		// Token: 0x060083A7 RID: 33703 RVA: 0x0048639C File Offset: 0x0048459C
		public void DropBackpack()
		{
			Item containedItem = this.InventoryController.Inventory.Equipment.GetSlot(EquipmentSlot.Backpack).ContainedItem;
			if (containedItem == null)
			{
				return;
			}
			if (this.MovementContext.IsInMountedState)
			{
				this.MovementContext.ExitMountedState();
			}
			Player.ItemHandsController itemHandsController = this.HandsController as Player.ItemHandsController;
			if (itemHandsController != null && itemHandsController.CurrentCompassState)
			{
				itemHandsController.SetCompassState(false);
				return;
			}
			if (this.MovementContext.StationaryWeapon != null)
			{
				return;
			}
			if (this.InventoryController.CanThrow(containedItem) && !this.HandsController.IsPlacingBeacon() && !this.HandsController.IsInInteractionStrictCheck() && this.CurrentStateName != EPlayerState.BreachDoor && !this.IsSprintEnabled && this.MovementContext.PlayerAnimator.AnimatedInteractions.CanInteract)
			{
				this.InventoryController.TryThrowItem(containedItem, null, false);
				return;
			}
		}

		// Token: 0x060083A8 RID: 33704 RVA: 0x0048647C File Offset: 0x0048467C
		public void SetItemInHands(Item item, Callback<IHandsController> callback)
		{
			if (item != null && item.CheckAction(null).Succeeded && !this.InventoryController.IsChangingWeapon && (!this.IsInBufferZone || this.CanManipulateWithHandsInBufferZone))
			{
				this.TryProceed(item, callback, true);
				return;
			}
			UnityEngine.Debug.LogError("error null take to hands");
			callback(null);
		}

		// Token: 0x060083A9 RID: 33705 RVA: 0x001CF885 File Offset: 0x001CDA85
		public bool method_130(EquipmentSlot slot)
		{
			return this.InventoryController.Inventory.Equipment.GetSlot(slot).ContainedItem != null;
		}

		// Token: 0x060083AA RID: 33706 RVA: 0x001CF8A5 File Offset: 0x001CDAA5
		public bool method_131(EBoundItem slot)
		{
			return this.InventoryController.Inventory.FastAccess.GetBoundItem(slot) != null;
		}

		// Token: 0x060083AB RID: 33707 RVA: 0x001CF8C0 File Offset: 0x001CDAC0
		public virtual void Interact(IItemOwner loot, Callback callback)
		{
			callback.Succeed();
		}

		// Token: 0x060083AC RID: 33708 RVA: 0x004864DC File Offset: 0x004846DC
		public virtual void Proceed(bool withNetwork, Callback<GInterface198> callback, bool scheduled = true)
		{
			Func<Player.EmptyHandsController> controllerFactory = new Func<Player.EmptyHandsController>(this.method_162);
			new Player.Process<Player.EmptyHandsController, GInterface198>(this, controllerFactory, null, false, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083AD RID: 33709 RVA: 0x0048650C File Offset: 0x0048470C
		public virtual void Proceed(Weapon weapon, Callback<IFirearmHandsController> callback, bool scheduled = true)
		{
			Player.Class1335 @class = new Player.Class1335();
			@class.player_0 = this;
			@class.weapon = weapon;
			Func<Player.FirearmController> controllerFactory;
			if (this.IsAI)
			{
				controllerFactory = new Func<AIFirearmController>(@class.method_0);
			}
			else
			{
				controllerFactory = new Func<Player.FirearmController>(@class.method_1);
			}
			bool fastHide = false;
			Player.FirearmController firearmController = this._handsController as Player.FirearmController;
			if (firearmController != null)
			{
				fastHide = firearmController.CheckForFastWeaponSwitch(@class.weapon);
			}
			new Player.Process<Player.FirearmController, IFirearmHandsController>(this, controllerFactory, @class.weapon, fastHide, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083AE RID: 33710 RVA: 0x00486588 File Offset: 0x00484788
		public virtual void Proceed(ThrowWeapItemClass throwWeap, Callback<IHandsThrowController> callback, bool scheduled = true)
		{
			Player.Class1336 @class = new Player.Class1336();
			@class.player_0 = this;
			@class.throwWeap = throwWeap;
			Func<Player.GrenadeHandsController> controllerFactory = new Func<Player.GrenadeHandsController>(@class.method_0);
			new Player.Process<Player.GrenadeHandsController, IHandsThrowController>(this, controllerFactory, @class.throwWeap, false, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083AF RID: 33711 RVA: 0x004865D0 File Offset: 0x004847D0
		public virtual void Proceed(MedsItemClass meds, GStruct382<EBodyPart> bodyParts, Callback<GInterface203> callback, int animationVariant, bool scheduled = true)
		{
			Player.Class1337 @class = new Player.Class1337();
			@class.player_0 = this;
			@class.meds = meds;
			@class.bodyParts = bodyParts;
			@class.animationVariant = animationVariant;
			Func<Player.MedsController> controllerFactory = new Func<Player.MedsController>(@class.method_0);
			new Player.Process<Player.MedsController, GInterface203>(this, controllerFactory, @class.meds, false, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B0 RID: 33712 RVA: 0x00486628 File Offset: 0x00484828
		public virtual void Proceed(FoodDrinkItemClass foodDrink, float amount, Callback<GInterface203> callback, int animationVariant, bool scheduled = true)
		{
			Player.Class1338 @class = new Player.Class1338();
			@class.player_0 = this;
			@class.foodDrink = foodDrink;
			@class.amount = amount;
			@class.animationVariant = animationVariant;
			@class.bodyParts = default(GStruct382<EBodyPart>);
			@class.bodyParts.Add(EBodyPart.Head);
			Func<Player.MedsController> controllerFactory = new Func<Player.MedsController>(@class.method_0);
			new Player.Process<Player.MedsController, GInterface203>(this, controllerFactory, @class.foodDrink, false, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B1 RID: 33713 RVA: 0x00486698 File Offset: 0x00484898
		public virtual void Proceed(KnifeComponent knife, Callback<IKnifeController> callback, bool scheduled = true)
		{
			Player.Class1339 @class = new Player.Class1339();
			@class.player_0 = this;
			@class.knife = knife;
			Func<Player.KnifeController> controllerFactory = new Func<Player.KnifeController>(@class.method_0);
			new Player.Process<Player.KnifeController, IKnifeController>(this, controllerFactory, @class.knife.Item, true, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B2 RID: 33714 RVA: 0x004866E4 File Offset: 0x004848E4
		public virtual void Proceed<T>(Item item, Callback<GInterface202> callback, bool scheduled = true) where T : Player.UsableItemController
		{
			Player.Class1340<T> @class = new Player.Class1340<T>();
			@class.player_0 = this;
			@class.item = item;
			Func<T> controllerFactory = new Func<T>(@class.method_0);
			new Player.Process<T, GInterface202>(this, controllerFactory, @class.item, true, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, true).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B3 RID: 33715 RVA: 0x0048672C File Offset: 0x0048492C
		public virtual void Proceed(Item item, Callback<IOnHandsUseCallback> callback, bool scheduled = true)
		{
			Player.Class1341 @class = new Player.Class1341();
			@class.player_0 = this;
			@class.item = item;
			Func<Player.QuickUseItemController> controllerFactory = new Func<Player.QuickUseItemController>(@class.method_0);
			new Player.Process<Player.QuickUseItemController, IOnHandsUseCallback>(this, controllerFactory, @class.item, true, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, false).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B4 RID: 33716 RVA: 0x00486774 File Offset: 0x00484974
		public virtual void Proceed(ThrowWeapItemClass throwWeap, Callback<GInterface206> callback, bool scheduled = true)
		{
			Player.Class1342 @class = new Player.Class1342();
			@class.player_0 = this;
			@class.throwWeap = throwWeap;
			Func<Player.QuickGrenadeThrowHandsController> controllerFactory = new Func<Player.QuickGrenadeThrowHandsController>(@class.method_0);
			new Player.Process<Player.QuickGrenadeThrowHandsController, GInterface206>(this, controllerFactory, @class.throwWeap, true, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, false).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B5 RID: 33717 RVA: 0x004867BC File Offset: 0x004849BC
		public virtual void Proceed(KnifeComponent knife, Callback<GInterface207> callback, bool scheduled = true)
		{
			Player.Class1343 @class = new Player.Class1343();
			@class.player_0 = this;
			@class.knife = knife;
			Func<Player.QuickKnifeKickController> controllerFactory = new Func<Player.QuickKnifeKickController>(@class.method_0);
			new Player.Process<Player.QuickKnifeKickController, GInterface207>(this, controllerFactory, @class.knife.Item, true, Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation.Succeed, false).method_0(null, callback, scheduled);
		}

		// Token: 0x060083B6 RID: 33718 RVA: 0x00486808 File Offset: 0x00484A08
		public void TryProceed(Item item, Callback<IHandsController> completeCallback, bool scheduled = true)
		{
			Player.Class1344 @class = new Player.Class1344();
			@class.completeCallback = completeCallback;
			@class.player_0 = this;
			this.StopBlindFire();
			if (item.LeftHandItem)
			{
				this.method_132(item);
				return;
			}
			if (this._leftHandController.InAction)
			{
				return;
			}
			this.RemoveLeftHandItem(2f);
			this.method_126();
			if (item == null)
			{
				@class.method_0();
				return;
			}
			if (!this.InventoryController.IsAtReachablePlace(item))
			{
				this.SetFirstAvailableItem(@class.completeCallback);
				return;
			}
			Player.MedsController medsController = this.HandsController as Player.MedsController;
			if (medsController != null && !this.IsAI)
			{
				medsController.SetOnUsedCallback(new Callback<IOnHandsUseCallback>(Player.Class1318.class1318_0.method_24));
			}
			Player.Class1345 class2 = new Player.Class1345();
			class2.class1344_0 = @class;
			class2.<weapon>5__2 = (item as Weapon);
			if (class2.<weapon>5__2 != null)
			{
				this.Proceed(class2.<weapon>5__2, new Callback<IFirearmHandsController>(class2.method_0), scheduled);
				return;
			}
			ThrowWeapItemClass throwWeapItemClass = item as ThrowWeapItemClass;
			if (throwWeapItemClass != null)
			{
				this.Proceed(throwWeapItemClass, new Callback<IHandsThrowController>(class2.class1344_0.method_1), scheduled);
				return;
			}
			MedsItemClass medsItemClass = item as MedsItemClass;
			if (medsItemClass != null)
			{
				this.Proceed(medsItemClass, this.method_133(item), new Callback<GInterface203>(class2.class1344_0.method_2), item.GetRandomAnimationVariant(), scheduled);
				return;
			}
			FoodDrinkItemClass foodDrinkItemClass = item as FoodDrinkItemClass;
			if (foodDrinkItemClass != null)
			{
				this.Proceed(foodDrinkItemClass, 1f, new Callback<GInterface203>(class2.class1344_0.method_3), item.GetRandomAnimationVariant(), scheduled);
				return;
			}
			KnifeComponent itemComponent = item.GetItemComponent<KnifeComponent>();
			if (itemComponent != null)
			{
				this.Proceed(itemComponent, new Callback<IKnifeController>(class2.class1344_0.method_4), scheduled);
				return;
			}
			if (item is PortableRangeFinderItemClass)
			{
				this.method_134(item as PortableRangeFinderItemClass, class2.class1344_0.completeCallback, scheduled);
				return;
			}
			if (item is RadioTransmitterItemClass)
			{
				this.method_135(item as RadioTransmitterItemClass, class2.class1344_0.completeCallback, scheduled);
				return;
			}
			if (item.UsePrefab != null)
			{
				this.Proceed(item, new Callback<IOnHandsUseCallback>(class2.class1344_0.method_5), scheduled);
				return;
			}
			class2.class1344_0.method_0();
		}

		// Token: 0x060083B7 RID: 33719 RVA: 0x00486A2C File Offset: 0x00484C2C
		public void method_132(Item item)
		{
			if (this.MovementContext.LeftStanceEnabled)
			{
				return;
			}
			if (this.MovementContext.IsSprintEnabled)
			{
				return;
			}
			if (this.MovementContext.PlayerAnimatorGetIsVaulting())
			{
				return;
			}
			if (this.MovementContext.IsStationaryWeaponInHands)
			{
				return;
			}
			if (this.MovementContext.IsInMountedState)
			{
				return;
			}
			if (this.HandsController.IsAiming)
			{
				return;
			}
			Player.FirearmController firearmController = this.HandsController as Player.FirearmController;
			if (firearmController != null)
			{
				if (firearmController.IsInReloadOperation())
				{
					return;
				}
				if (firearmController.IsInRemoveOperation())
				{
					return;
				}
				if (firearmController.CurrentHandsOperation is Player.FirearmController.GClass2038)
				{
					return;
				}
			}
			this.ToggleLeftHand(item);
		}

		// Token: 0x060083B8 RID: 33720 RVA: 0x001CF8C8 File Offset: 0x001CDAC8
		public GStruct382<EBodyPart> method_133(Item item)
		{
			if (Singleton<SharedGameSettingsClass>.Instance.Game.Settings.ContinuousHealMode != GClass1085.EContinuousHealMode.Disabled)
			{
				return this.HealthController.BodyPartsPriority(item, true);
			}
			return new GStruct382<EBodyPart>(EBodyPart.Common);
		}

		// Token: 0x060083B9 RID: 33721 RVA: 0x00486AC4 File Offset: 0x00484CC4
		public void method_134(PortableRangeFinderItemClass item, Callback<IHandsController> completeCallback, bool scheduled = true)
		{
			Player.Class1346 @class = new Player.Class1346();
			@class.completeCallback = completeCallback;
			if (this is ClientPlayer)
			{
				this.Proceed<ClientPortableRangeFinderController>(item, new Callback<GInterface202>(@class.method_0), scheduled);
				return;
			}
			this.Proceed<PortableRangeFinderController>(item, new Callback<GInterface202>(@class.method_1), scheduled);
		}

		// Token: 0x060083BA RID: 33722 RVA: 0x00486B10 File Offset: 0x00484D10
		public void method_135(RadioTransmitterItemClass item, Callback<IHandsController> completeCallback, bool scheduled = true)
		{
			Player.Class1347 @class = new Player.Class1347();
			@class.completeCallback = completeCallback;
			if (this is ClientPlayer)
			{
				this.Proceed<ClientRadioTransmitterController>(item, new Callback<GInterface202>(@class.method_0), scheduled);
				return;
			}
			this.Proceed<RadioTransmitterController>(item, new Callback<GInterface202>(@class.method_1), scheduled);
		}

		// Token: 0x060083BB RID: 33723 RVA: 0x001CF8F9 File Offset: 0x001CDAF9
		public static void smethod_1<T>(Result<T> result, Callback<IHandsController> callback) where T : IHandsController
		{
			if (callback != null)
			{
				callback(new Result<IHandsController>(result.Value, result.Error));
			}
		}

		// Token: 0x060083BC RID: 33724 RVA: 0x00486B5C File Offset: 0x00484D5C
		public void method_136(Item item)
		{
			if (item == null)
			{
				return;
			}
			EquipmentSlot[] array = new EquipmentSlot[]
			{
				EquipmentSlot.FirstPrimaryWeapon,
				EquipmentSlot.SecondPrimaryWeapon,
				EquipmentSlot.Holster,
				EquipmentSlot.Scabbard
			};
			InventoryEquipment equipment = this.InventoryController.Inventory.Equipment;
			foreach (EquipmentSlot slotName in array)
			{
				if (item == equipment.GetSlot(slotName).ContainedItem)
				{
					this.ActiveSlot = equipment.GetSlot(slotName);
					return;
				}
			}
		}

		// Token: 0x060083BD RID: 33725 RVA: 0x00486BC4 File Offset: 0x00484DC4
		public bool CanPerformAnimatedOperation(Item item, BaseInventoryOperationClass operation)
		{
			return !this.HealthController.IsAlive || this.HandsController.CanExecute(operation) || this.HandsController.Item != item || !(this.HandsController is Player.BaseGrenadeHandsController) || this.HandsController.CanRemove();
		}

		// Token: 0x060083BE RID: 33726 RVA: 0x00486C20 File Offset: 0x00484E20
		public void TryRemoveFromHands(Item item, GInterface438 abstractOperation, Callback callback)
		{
			Player.Class1348 @class = new Player.Class1348();
			@class.player_0 = this;
			@class.callback = callback;
			if (this.HandsController == null)
			{
				UnityEngine.Debug.LogFormat("Attempt to remove item '{0}' from hands, while HandsController == null", new object[]
				{
					item
				});
				@class.callback.Succeed();
				return;
			}
			if (!this.HealthController.IsAlive)
			{
				@class.callback.Succeed();
				return;
			}
			if (this.HandsController.Item == item)
			{
				if (this.HandsController is Player.BaseGrenadeHandsController && !this.HandsController.CanRemove())
				{
					@class.callback.Fail("Cannot remove grenade while throwing it");
					return;
				}
				this.SetControllerInsteadRemovedOne(item, @class.callback);
				return;
			}
			else
			{
				if (this.HandsController.CanExecute(abstractOperation))
				{
					this._removeFromHandsCallback = @class.callback;
					this.InventoryController.RaiseInOutProcessEvents(new GEventArgs17(this.HandsController.Item, CommandStatus.Begin, this.InventoryController));
					this.HandsController.Execute(abstractOperation, new Callback(@class.method_0));
					return;
				}
				@class.callback.Fail("hands controller can't perform this operation");
				return;
			}
		}

		// Token: 0x060083BF RID: 33727 RVA: 0x00486D34 File Offset: 0x00484F34
		public virtual void SetControllerInsteadRemovedOne(Item removingItem, Callback callback)
		{
			Player.Class1349 @class = new Player.Class1349();
			@class.player_0 = this;
			@class.callback = callback;
			this._removeFromHandsCallback = @class.callback;
			if (removingItem is RocketLauncherItemClass)
			{
				Item item = this._slotPriority.Select(new Func<EquipmentSlot, Item>(@class.method_0)).FirstOrDefault(new Func<Item, bool>(@class.method_1));
				if (item != null && item != removingItem)
				{
					Weapon weapon = item as Weapon;
					if (weapon != null)
					{
						this.Proceed(weapon, new Callback<IFirearmHandsController>(@class.method_2), true);
						return;
					}
				}
			}
			this.TrySetLastEquippedWeapon(true, new Callback(@class.method_3));
		}

		// Token: 0x060083C0 RID: 33728 RVA: 0x00486DCC File Offset: 0x00484FCC
		public void TrySetInHands(Item item, ItemAddress to, GInterface438 operation, Callback originalCallback)
		{
			Player.Class1350 @class = new Player.Class1350();
			@class.player_0 = this;
			@class.callback = originalCallback;
			if (!this.HealthController.IsAlive || (this.IsInBufferZone && !this.CanManipulateWithHandsInBufferZone))
			{
				@class.callback.Succeed();
				return;
			}
			if (!(operation is FoldOperationClass) && this.ActiveSlot == to.Container)
			{
				this._setInHandsCallback = @class.callback;
				this.TryProceed(item, new Callback<IHandsController>(@class.method_0), false);
				return;
			}
			if ((item.Parent != to || operation is FoldOperationClass) && this.HandsController.CanExecute(operation))
			{
				this._setInHandsCallback = @class.callback;
				this.InventoryController.RaiseInOutProcessEvents(new GEventArgs17(this.HandsController.Item, CommandStatus.Begin, this.InventoryController));
				this.HandsController.Execute(operation, new Callback(@class.method_1));
				return;
			}
			if (operation is FoldOperationClass && !this.HandsController.CanExecute(operation))
			{
				@class.callback.Fail("Can't perform operation");
				return;
			}
			@class.callback.Succeed();
		}

		// Token: 0x060083C1 RID: 33729 RVA: 0x001CF91C File Offset: 0x001CDB1C
		public IEnumerator FakeCallbackCoroutine()
		{
			Player.Class1358 @class = new Player.Class1358(0);
			@class.player_0 = this;
			return @class;
		}

		// Token: 0x060083C2 RID: 33730 RVA: 0x00486EEC File Offset: 0x004850EC
		public virtual void FaceshieldMarkOperation(FaceShieldComponent armor, bool hasServerOrigin)
		{
			if (Time.time > this._lastFaceshieldOperationTime + Time.fixedDeltaTime)
			{
				this._lastFaceshieldOperationTime = Time.time;
				this._faceshieldNumOperations = 0;
			}
			if (this._faceshieldNumOperations <= 3)
			{
				this.InventoryController.ExecuteFaceshieldMarkOperation(armor);
				this._faceshieldNumOperations++;
			}
		}

		// Token: 0x060083C3 RID: 33731 RVA: 0x001CF92B File Offset: 0x001CDB2B
		public Player.Class1311 method_137(Item item)
		{
			if (item != null)
			{
				Player.Class1311 @class = new Player.Class1311(this, item);
				@class.Execute();
				return @class;
			}
			UnityEngine.Debug.LogWarning("<color=red>Invalid BeginSetInHands operation args</color>");
			return null;
		}

		// Token: 0x060083C4 RID: 33732 RVA: 0x001CF949 File Offset: 0x001CDB49
		public Player.Class1312 method_138(Item item)
		{
			if (item != null)
			{
				Player.Class1312 @class = new Player.Class1312(this, item);
				@class.Execute();
				return @class;
			}
			UnityEngine.Debug.LogWarning("<color=red>Invalid BeginRemoveFromHands operation args</color>");
			return null;
		}

		// Token: 0x060083C5 RID: 33733 RVA: 0x00486F44 File Offset: 0x00485144
		public GStruct154<Player.GClass2060> method_139(ThrowWeapItemClass grenade, bool lowThrow, bool simulate)
		{
			if (!grenade.IsChildOf(this.InventoryController.Inventory.Equipment))
			{
				return new GClass1522("Can't find container for item: " + grenade.Id);
			}
			GStruct154<GClass3408> gstruct = InteractionsHandlerClass.Discard(this.HandsController.Item, this.InventoryController, simulate);
			if (gstruct.Failed)
			{
				return gstruct.Error;
			}
			if (!simulate)
			{
				this.Physical.OnThrow(lowThrow);
			}
			return new Player.GClass2060(gstruct.Value, grenade);
		}

		// Token: 0x060083C8 RID: 33736 RVA: 0x001CF991 File Offset: 0x001CDB91
		[CompilerGenerated]
		public IEnumerator method_140()
		{
			yield return new WaitForSeconds(0.8f);
			this.PlayTacticalSound();
			foreach (TacticalComboVisualController tacticalComboVisualController in this._helmetLightControllers)
			{
				tacticalComboVisualController.UpdateBeams(false);
			}
			IAIData aidata = this.AIData;
			if (aidata != null)
			{
				aidata.TacticalModeChange(this._helmetLightControllers.Any(new Func<TacticalComboVisualController, bool>(Player.Class1318.class1318_0.method_2)));
			}
			yield return new WaitForSeconds(0.6f);
			this.IsHeadLightsAnimationActive = false;
			yield break;
		}

		// Token: 0x060083C9 RID: 33737 RVA: 0x001CF9A0 File Offset: 0x001CDBA0
		[CompilerGenerated]
		public void method_141(int i)
		{
			this.ProceduralWeaponAnimation.Pose = i;
		}

		// Token: 0x060083CA RID: 33738 RVA: 0x001CF9AE File Offset: 0x001CDBAE
		[CompilerGenerated]
		public void method_142(bool enable)
		{
			if (this._voipAudioSource != null)
			{
				this._voipAudioSource.mute = !enable;
			}
		}

		// Token: 0x060083CB RID: 33739 RVA: 0x001CF9CD File Offset: 0x001CDBCD
		[CompilerGenerated]
		public void method_143()
		{
			this._interactionSource.Stop(0f);
			this._interactionSource.Release();
			this._interactionSource = null;
		}

		// Token: 0x060083CC RID: 33740 RVA: 0x001CF9F1 File Offset: 0x001CDBF1
		[CompilerGenerated]
		public bool method_144()
		{
			return this.MovementContext.AutoVaultingSettingEnabled;
		}

		// Token: 0x060083CD RID: 33741 RVA: 0x001CF9FE File Offset: 0x001CDBFE
		[CompilerGenerated]
		public bool method_145()
		{
			return this.Physical.CanVault;
		}

		// Token: 0x060083CE RID: 33742 RVA: 0x001CFA0B File Offset: 0x001CDC0B
		[CompilerGenerated]
		public bool method_146()
		{
			return this.Physical.CanClimb;
		}

		// Token: 0x060083CF RID: 33743 RVA: 0x001CFA18 File Offset: 0x001CDC18
		[CompilerGenerated]
		public void method_147()
		{
			this.Skills.LowHPDuration.Complete(1f);
		}

		// Token: 0x060083D0 RID: 33744 RVA: 0x001CFA2F File Offset: 0x001CDC2F
		[CompilerGenerated]
		public void method_148()
		{
			this.Skills.StimulatorNegativeBuff.Begin();
		}

		// Token: 0x060083D1 RID: 33745 RVA: 0x001CFA41 File Offset: 0x001CDC41
		[CompilerGenerated]
		public void method_149()
		{
			this.Skills.StimulatorNegativeBuff.Complete(1f);
		}

		// Token: 0x060083D2 RID: 33746 RVA: 0x001CFA58 File Offset: 0x001CDC58
		[CompilerGenerated]
		public void method_150()
		{
			this.Skills.LowHPDuration.Complete(1f);
		}

		// Token: 0x060083D3 RID: 33747 RVA: 0x004872F4 File Offset: 0x004854F4
		[CompilerGenerated]
		public void method_151()
		{
			this.Skills.OnlineAction.Complete((float)this.StatisticsManager.CurrentSessionLength.TotalHours);
		}

		// Token: 0x060083D4 RID: 33748 RVA: 0x001CFA6F File Offset: 0x001CDC6F
		[CompilerGenerated]
		public void method_152(GClass3552 invokedEvent)
		{
			this.method_114(invokedEvent);
		}

		// Token: 0x060083D5 RID: 33749 RVA: 0x001CFA78 File Offset: 0x001CDC78
		[CompilerGenerated]
		public void method_153()
		{
			this.Skills.Dehydration.Complete(1f);
		}

		// Token: 0x060083D6 RID: 33750 RVA: 0x001CFA8F File Offset: 0x001CDC8F
		[CompilerGenerated]
		public void method_154()
		{
			this.Skills.Exhaustion.Complete(1f);
		}

		// Token: 0x060083D7 RID: 33751 RVA: 0x001CFAA6 File Offset: 0x001CDCA6
		[CompilerGenerated]
		public void method_155()
		{
			this.Skills.MagazineCheckAction.Complete(1f);
		}

		// Token: 0x060083D8 RID: 33752 RVA: 0x001CFABD File Offset: 0x001CDCBD
		[CompilerGenerated]
		public void method_156()
		{
			this.Skills.UniqueLoot.Complete(1f);
		}

		// Token: 0x060083D9 RID: 33753 RVA: 0x001CFAD4 File Offset: 0x001CDCD4
		[CompilerGenerated]
		public void method_157()
		{
			this.Skills.ProneAction.Complete(this.Pedometer.GetDistanceFromMark(EPlayerState.ProneMove));
		}

		// Token: 0x060083DA RID: 33754 RVA: 0x001CFAF2 File Offset: 0x001CDCF2
		[CompilerGenerated]
		public void method_158()
		{
			if (this._lastBtrCastResult)
			{
				this.BtrInteractionSide = null;
				Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
				if (possibleInteractionsChanged != null)
				{
					possibleInteractionsChanged();
				}
			}
			this._lastBtrCastResult = false;
		}

		// Token: 0x060083DB RID: 33755 RVA: 0x001CFB1B File Offset: 0x001CDD1B
		[CompilerGenerated]
		public void method_159()
		{
			if (this._lastTripwireCastResult)
			{
				this.TripwireInteractionTrigger = null;
				Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
				if (possibleInteractionsChanged != null)
				{
					possibleInteractionsChanged();
				}
			}
			this._lastTripwireCastResult = false;
		}

		// Token: 0x060083DC RID: 33756 RVA: 0x001CFB44 File Offset: 0x001CDD44
		[CompilerGenerated]
		public void method_160()
		{
			if (this._lastEventObjectCastResult)
			{
				this.EventObjectInteractive = null;
				Action possibleInteractionsChanged = this.PossibleInteractionsChanged;
				if (possibleInteractionsChanged != null)
				{
					possibleInteractionsChanged();
				}
			}
			this._lastEventObjectCastResult = false;
		}

		// Token: 0x060083DD RID: 33757 RVA: 0x001CFB6D File Offset: 0x001CDD6D
		[CompilerGenerated]
		public void method_161(Result<GInterface198> result)
		{
			this.method_128(false);
		}

		// Token: 0x060083DE RID: 33758 RVA: 0x001CFB76 File Offset: 0x001CDD76
		[CompilerGenerated]
		public Player.EmptyHandsController method_162()
		{
			return Player.EmptyHandsController.smethod_6<Player.EmptyHandsController>(this);
		}

		// Token: 0x04006CD2 RID: 27858
		public ICharacterController _characterController;

		// Token: 0x04006CD3 RID: 27859
		protected TriggerColliderSearcher _triggerColliderSearcher;

		// Token: 0x04006CD4 RID: 27860
		private bool _doorKick;

		// Token: 0x04006CD5 RID: 27861
		private WorldInteractiveObject _currentInteractor;

		// Token: 0x04006CD7 RID: 27863
		private float _horizontal;

		// Token: 0x04006CD8 RID: 27864
		private float _vertical;

		// Token: 0x04006CD9 RID: 27865
		private bool _resetLook;

		// Token: 0x04006CDA RID: 27866
		private bool _mouseLookControl;

		// Token: 0x04006CDB RID: 27867
		private bool _isResettingLook;

		// Token: 0x04006CDC RID: 27868
		private bool _setResetedLookNextFrame;

		// Token: 0x04006CDD RID: 27869
		private bool _isLooking;

		// Token: 0x04006CDE RID: 27870
		public PedometerClass Pedometer;

		// Token: 0x04006CDF RID: 27871
		public Vector3 HeadRotation;

		// Token: 0x04006CE0 RID: 27872
		protected float _mouseSensitivityModifier;

		// Token: 0x04006CE1 RID: 27873
		protected readonly Dictionary<Player.EMouseSensitivityModifier, float> _mouseSensitivityModifiers = GClass866<Player.EMouseSensitivityModifier>.GetDictWith<float>();

		// Token: 0x04006CE2 RID: 27874
		private Vector2 _rotationPitchLimit = Player.PlayerMovementConstantsClass.STAND_POSE_ROTATION_PITCH_RANGE;

		// Token: 0x04006CE3 RID: 27875
		private Vector2 _targetRotationPitch = Player.PlayerMovementConstantsClass.STAND_POSE_ROTATION_PITCH_RANGE;

		// Token: 0x04006CE5 RID: 27877
		public float TrunkRotationLimit;

		// Token: 0x04006CE6 RID: 27878
		public float PoseMemo = 1f;

		// Token: 0x04006CE7 RID: 27879
		private float _speedMemo = 0.5f;

		// Token: 0x04006CE8 RID: 27880
		private bool _lastSlowLean;

		// Token: 0x04006CE9 RID: 27881
		public Player.LeanType CurrentLeanType;

		// Token: 0x04006CEA RID: 27882
		private float _lastMovement;

		// Token: 0x04006CEB RID: 27883
		private bool _cachedMouseLookControl;

		// Token: 0x04006CEC RID: 27884
		private bool _isVaultingPressed;

		// Token: 0x04006CED RID: 27885
		private float _vaultingTiming;

		// Token: 0x04006CEE RID: 27886
		protected float _prevHeight;

		// Token: 0x04006CEF RID: 27887
		public float HeightSmoothTime = 0.066f;

		// Token: 0x04006CF0 RID: 27888
		private float _dampVelocity;

		// Token: 0x04006CF1 RID: 27889
		private float _currentSmoothSpeed;

		// Token: 0x04006CF2 RID: 27890
		private float _previousY;

		// Token: 0x04006CF3 RID: 27891
		private const float ClampDeltaHeight = 0.2f;

		// Token: 0x04006CF4 RID: 27892
		public const int GRIP_CULL_DISTANCE = 40;

		// Token: 0x04006CF5 RID: 27893
		public const int IK_CULL_DISTANCE = 70;

		// Token: 0x04006CF6 RID: 27894
		public const int MAX_IK_CULL_DISTANCE = 300;

		// Token: 0x04006CF7 RID: 27895
		private const string COMPASS_RESOURCE_PATH = "assets/content/weapons/additional_hands/item_compass.bundle";

		// Token: 0x04006CF8 RID: 27896
		private const string PLANT_TRIPWIRE_TEMPLATE_PATH = "Prefabs/tripwire_planner";

		// Token: 0x04006CFA RID: 27898
		public GripPose LeftHandInteractionTarget;

		// Token: 0x04006CFB RID: 27899
		public GrounderFBBIK Grounder;

		// Token: 0x04006CFC RID: 27900
		public HitReaction HitReaction;

		// Token: 0x04006CFD RID: 27901
		public float RibcageScaleCurrent = 1f;

		// Token: 0x04006CFE RID: 27902
		public float RibcageScaleCurrentTarget = 1f;

		// Token: 0x04006CFF RID: 27903
		public Transform[] _elbowBends;

		// Token: 0x04006D00 RID: 27904
		public HandPoser[] HandPosers;

		// Token: 0x04006D01 RID: 27905
		public Vector2 UtilityLayerRange = new Vector2(0.5f, 0.2f);

		// Token: 0x04006D02 RID: 27906
		public float UtilityLayerLerpSpeed = 3f;

		// Token: 0x04006D03 RID: 27907
		public Player.ValueBlender LMarkerRawBlender = new Player.ValueBlender(0)
		{
			Speed = 4f,
			Target = 0f
		};

		// Token: 0x04006D04 RID: 27908
		public Player.ValueBlender LayerWeight = new Player.ValueBlender(0)
		{
			Speed = 4f
		};

		// Token: 0x04006D05 RID: 27909
		public readonly Player.BetterValueBlender ThirdIkWeight = new Player.BetterValueBlender
		{
			Speed = 3f
		};

		// Token: 0x04006D06 RID: 27910
		public bool GripAutoAdjust;

		// Token: 0x04006D07 RID: 27911
		public bool CustomAnimationsAreProcessing;

		// Token: 0x04006D08 RID: 27912
		protected FullBodyBipedIK _fbbik;

		// Token: 0x04006D09 RID: 27913
		protected PlayerBody _playerBody;

		// Token: 0x04006D0A RID: 27914
		protected float ThirdPersonWeaponRootAuthority;

		// Token: 0x04006D0B RID: 27915
		public const float HAND_ANIMATION_BLEND_THRESHOLD = 0.1f;

		// Token: 0x04006D0C RID: 27916
		private float _ribcageScaleCompensated = 1f;

		// Token: 0x04006D0D RID: 27917
		private float _shoulderVel;

		// Token: 0x04006D0E RID: 27918
		private float _fbbikCooldown = 0.6f;

		// Token: 0x04006D0F RID: 27919
		private float _turnOffFbbikAt;

		// Token: 0x04006D10 RID: 27920
		private float _firstPersonRightHand;

		// Token: 0x04006D11 RID: 27921
		private float _firstPersonLeftHand;

		// Token: 0x04006D12 RID: 27922
		private float _utilityLayerWeight;

		// Token: 0x04006D13 RID: 27923
		private float _smoothLW;

		// Token: 0x04006D14 RID: 27924
		private float _rawWeight;

		// Token: 0x04006D15 RID: 27925
		private float _rawDampVelocity;

		// Token: 0x04006D16 RID: 27926
		private float _interactionLayerWeight;

		// Token: 0x04006D17 RID: 27927
		private bool _stored;

		// Token: 0x04006D18 RID: 27928
		private bool _pointOfViewUndecided = true;

		// Token: 0x04006D19 RID: 27929
		private bool _hasAnimatorPropBones;

		// Token: 0x04006D1A RID: 27930
		private bool _hasProp;

		// Token: 0x04006D1B RID: 27931
		private bool _propActive;

		// Token: 0x04006D1C RID: 27932
		private bool _compassInstantiated;

		// Token: 0x04006D1D RID: 27933
		private bool _radioTransmitterInstantiated;

		// Token: 0x04006D1E RID: 27934
		private Vector3[] _ribcageChildPositions;

		// Token: 0x04006D1F RID: 27935
		private Vector3 _ikPosition;

		// Token: 0x04006D20 RID: 27936
		private Vector3 _lMarkerRawPosition;

		// Token: 0x04006D21 RID: 27937
		private Vector3 _lElbowRawPosition;

		// Token: 0x04006D22 RID: 27938
		private Vector3 _rElbowRawPosition;

		// Token: 0x04006D23 RID: 27939
		private Vector3 _propRawPosition;

		// Token: 0x04006D24 RID: 27940
		private Quaternion _lMarkerRawRotation;

		// Token: 0x04006D25 RID: 27941
		private Quaternion _propRawRotation;

		// Token: 0x04006D26 RID: 27942
		private Quaternion _ikRotation;

		// Token: 0x04006D27 RID: 27943
		private Quaternion[] _ribcageChildRotations;

		// Token: 0x04006D28 RID: 27944
		private readonly Transform[] _markers = new Transform[2];

		// Token: 0x04006D29 RID: 27945
		private readonly Transform[] _gripReferences = new Transform[2];

		// Token: 0x04006D2A RID: 27946
		private Transform[] _ikTargets = new Transform[2];

		// Token: 0x04006D2B RID: 27947
		private Transform _vestMarker;

		// Token: 0x04006D2C RID: 27948
		private Transform _shoulderEffector;

		// Token: 0x04006D2D RID: 27949
		private Transform _propBone;

		// Token: 0x04006D2E RID: 27950
		private TwistRelax[] _twistBones;

		// Token: 0x04006D2F RID: 27951
		private LimbIK[] _limbs;

		// Token: 0x04006D30 RID: 27952
		private GameObject _beaconDummy;

		// Token: 0x04006D31 RID: 27953
		private Action _createBeaconAction;

		// Token: 0x04006D32 RID: 27954
		private PreviewMaterialSetter _beaconMaterialSetter;

		// Token: 0x04006D33 RID: 27955
		private BeaconPlacer _beaconPlacer;

		// Token: 0x04006D34 RID: 27956
		private FirearmsEffects _thirdWeaponEffects;

		// Token: 0x04006D35 RID: 27957
		private FirearmsEffects _firstWeaponEffects;

		// Token: 0x04006D36 RID: 27958
		private CompassArrow _compassArrow;

		// Token: 0x04006D37 RID: 27959
		private RadioTransmitterView _radioTransmitterView;

		// Token: 0x04006D38 RID: 27960
		private Transform[] _animatorPropTransforms = new Transform[3];

		// Token: 0x04006D39 RID: 27961
		private Transform[] _propTransforms = new Transform[3];

		// Token: 0x04006D3A RID: 27962
		private readonly List<BodyRendererDataStruct> _preAllocatedRenderersList = new List<BodyRendererDataStruct>(10);

		// Token: 0x04006D3F RID: 27967
		public readonly Player.ValueBlender AuthorityBlender = new Player.ValueBlender(0)
		{
			Speed = 4f,
			Target = 0f
		};

		// Token: 0x04006D40 RID: 27968
		public readonly Player.ValueBlender GrounderBlender = new Player.ValueBlender(0)
		{
			Speed = 4f,
			Target = 0f
		};

		// Token: 0x04006D41 RID: 27969
		private float _ergonomicsPenalty;

		// Token: 0x04006D42 RID: 27970
		private float _shotTime;

		// Token: 0x04006D43 RID: 27971
		protected bool _isDeadAlready;

		// Token: 0x04006D44 RID: 27972
		private bool _isGrenadeOrKnife;

		// Token: 0x04006D45 RID: 27973
		private ObjectInHandsAnimator _handsAnimator;

		// Token: 0x04006D46 RID: 27974
		private GameObject _spawnedKey;

		// Token: 0x04006D47 RID: 27975
		private Action _cacheBonesDelegate;

		// Token: 0x04006D53 RID: 27987
		protected bool IsHeadLightsAnimationActive;

		// Token: 0x04006D54 RID: 27988
		private bool _isInteractionPlayeingLastFrame;

		// Token: 0x04006D55 RID: 27989
		private Quaternion _currentHandsRotation;

		// Token: 0x04006D56 RID: 27990
		private Player.GClass2004 _garbage;

		// Token: 0x04006D57 RID: 27991
		public BaseBallistic.ESurfaceSound CurrentSurface;

		// Token: 0x04006D58 RID: 27992
		private LayerMask _stepLayerMask;

		// Token: 0x04006D59 RID: 27993
		private const float TIME_BETWEEN_PRONE_SWEEPS = 0.5f;

		// Token: 0x04006D5A RID: 27994
		private const float MIN_ALLOWED_MOVEMENT_SPEED = 0f;

		// Token: 0x04006D5B RID: 27995
		private const float MAX_STEP_SOUND_SPEED_FACTOR = 1f;

		// Token: 0x04006D5C RID: 27996
		private const float SURFACE_CHECK_RAYCAST_OFFSET = 0.5f;

		// Token: 0x04006D5D RID: 27997
		private const float LANDING_VOLUME_MULT = 2.5f;

		// Token: 0x04006D5E RID: 27998
		private const float FP_GEAR_VOLUME = 0.85f;

		// Token: 0x04006D5F RID: 27999
		private const float LOCAL_AI_GEAR_VOLUME = 1f;

		// Token: 0x04006D60 RID: 28000
		private float CHECK_RANGE_BUFF = 1f;

		// Token: 0x04006D61 RID: 28001
		private float MIN_FALL_DAMAGE = 1f;

		// Token: 0x04006D62 RID: 28002
		private const float MIN_COMMON_DAMAGE = 4f;

		// Token: 0x04006D63 RID: 28003
		private const float FIRST_PERSON_REVERB_FACTOR = 3f;

		// Token: 0x04006D64 RID: 28004
		private const float DEFAULT_FP_ROLLOFF = 70f;

		// Token: 0x04006D66 RID: 28006
		public bool HeavyBreath;

		// Token: 0x04006D67 RID: 28007
		public bool Muffled;

		// Token: 0x04006D68 RID: 28008
		protected BetterSource NestedStepSoundSource;

		// Token: 0x04006D69 RID: 28009
		protected BetterSource _speechSource;

		// Token: 0x04006D6A RID: 28010
		protected bool OcclusionDirty;

		// Token: 0x04006D6B RID: 28011
		protected bool DistanceDirty;

		// Token: 0x04006D6C RID: 28012
		protected AudioClip FractureSound;

		// Token: 0x04006D6D RID: 28013
		public BaseSoundPlayer.SoundElement PropIn;

		// Token: 0x04006D6E RID: 28014
		public BaseSoundPlayer.SoundElement PropOut;

		// Token: 0x04006D6F RID: 28015
		protected bool PreviousFaceShield;

		// Token: 0x04006D70 RID: 28016
		protected bool PreviousNightVision;

		// Token: 0x04006D71 RID: 28017
		protected bool PreviousThermalVision;

		// Token: 0x04006D72 RID: 28018
		protected readonly Vector3 SpeechLocalPosition = new Vector3(0f, 1.2f, 0f);

		// Token: 0x04006D73 RID: 28019
		private readonly Vector3 _speechLocalPosition = new Vector3(0f, 0f, 0.3f);

		// Token: 0x04006D74 RID: 28020
		protected AudioClip FaceshieldOn;

		// Token: 0x04006D75 RID: 28021
		protected AudioClip FaceshieldOff;

		// Token: 0x04006D76 RID: 28022
		protected AudioClip NightVisionOn;

		// Token: 0x04006D77 RID: 28023
		protected AudioClip SwitchHeadlights;

		// Token: 0x04006D78 RID: 28024
		protected AudioClip NightVisionOff;

		// Token: 0x04006D79 RID: 28025
		protected AudioClip ThermalVisionOn;

		// Token: 0x04006D7A RID: 28026
		protected AudioClip ThermalVisionOff;

		// Token: 0x04006D7B RID: 28027
		private AudioClip _tinnitus;

		// Token: 0x04006D7C RID: 28028
		private Dictionary<BaseBallistic.ESurfaceSound, SurfaceSet> _soundBySurface;

		// Token: 0x04006D7D RID: 28029
		private SurfaceSet _currentSet;

		// Token: 0x04006D7E RID: 28030
		private SoundBank _gearSoundBank;

		// Token: 0x04006D7F RID: 28031
		private SoundBank _gearMediumSoundBank;

		// Token: 0x04006D80 RID: 28032
		private SoundBank _gearFastSoundBank;

		// Token: 0x04006D81 RID: 28033
		private SoundBank _backpackDropBank;

		// Token: 0x04006D82 RID: 28034
		private Sounds _playerSounds;

		// Token: 0x04006D83 RID: 28035
		private FirstPersonPlayerHearingSettings _hearingSettings;

		// Token: 0x04006D84 RID: 28036
		private Coroutine _idleCoroutine;

		// Token: 0x04006D85 RID: 28037
		private Coroutine _runCoroutine;

		// Token: 0x04006D86 RID: 28038
		private Coroutine _sprintCoroutine;

		// Token: 0x04006D87 RID: 28039
		private Coroutine _gearDelay;

		// Token: 0x04006D88 RID: 28040
		private Coroutine _outOfRangeSpeakingCoroutine;

		// Token: 0x04006D89 RID: 28041
		private Coroutine _currentSourceCoroutine;

		// Token: 0x04006D8A RID: 28042
		private bool _playedAtLeastOneStep;

		// Token: 0x04006D8B RID: 28043
		private float _nextJumpAfter;

		// Token: 0x04006D8C RID: 28044
		private BetterSource _searchSource;

		// Token: 0x04006D8D RID: 28045
		private float _searchCount;

		// Token: 0x04006D8E RID: 28046
		private AudioClip _lastClip;

		// Token: 0x04006D8F RID: 28047
		private readonly List<BetterPropagationVolume> _soundPropagationVolumes = new List<BetterPropagationVolume>();

		// Token: 0x04006D90 RID: 28048
		private readonly List<BetterPropagationVolume> _volumesBuffer = new List<BetterPropagationVolume>();

		// Token: 0x04006D91 RID: 28049
		private BetterPropagationVolume _mutuallyExclusive;

		// Token: 0x04006D92 RID: 28050
		private bool _exhaustionIsAudible;

		// Token: 0x04006D93 RID: 28051
		private Action _exhaustionAudibilityUnsub;

		// Token: 0x04006D94 RID: 28052
		private float _sprintSurfaceCheck = 60f;

		// Token: 0x04006D95 RID: 28053
		private float _runSurfaceCheck = 40f;

		// Token: 0x04006D96 RID: 28054
		private float _landSurfaceCheck = 40f;

		// Token: 0x04006D97 RID: 28055
		private float _proneSurfaceCheck = 30f;

		// Token: 0x04006D98 RID: 28056
		private float _sign;

		// Token: 0x04006D99 RID: 28057
		private float _lastStepTime;

		// Token: 0x04006D9A RID: 28058
		private float _lastTimeTurnSound;

		// Token: 0x04006D9B RID: 28059
		private float maxLengthTurnSound = 0.6f;

		// Token: 0x04006D9C RID: 28060
		private float _nextSurfaceCheck;

		// Token: 0x04006D9D RID: 28061
		private float _distance;

		// Token: 0x04006D9E RID: 28062
		private bool _enqueuedForRelease;

		// Token: 0x04006D9F RID: 28063
		private float _maxAllowedMovementSpeed;

		// Token: 0x04006DA0 RID: 28064
		private GClass2681 _vaultAudioController;

		// Token: 0x04006DA1 RID: 28065
		private GClass2681 _sprintVaultAudioController;

		// Token: 0x04006DA2 RID: 28066
		private GClass2681 _climbAudioController;

		// Token: 0x04006DA3 RID: 28067
		private AudioSource _voipAudioSource;

		// Token: 0x04006DA4 RID: 28068
		private GInterface95 _specificStepAudioController = new GClass1183();

		// Token: 0x04006DA5 RID: 28069
		private Action _voipSourceBinding;

		// Token: 0x04006DA6 RID: 28070
		private BetterSource _gearSource;

		// Token: 0x04006DA7 RID: 28071
		private GInterface268 _tripwireInteractionSoundController;

		// Token: 0x04006DA8 RID: 28072
		private GClass885 _sourcePrewarmer;

		// Token: 0x04006DA9 RID: 28073
		private IDropBackPackEvents _dropBackPackEvents;

		// Token: 0x04006DAA RID: 28074
		private GClass1180 _priorityCalculator;

		// Token: 0x04006DAB RID: 28075
		private readonly WaitForSeconds _gearWalkDelaySec = new WaitForSeconds(EFTHardSettings.Instance.GEAR_SOUND_DELAY);

		// Token: 0x04006DAC RID: 28076
		private int _animatorFootstepCurveHash;

		// Token: 0x04006DAD RID: 28077
		private readonly Dictionary<EAudioMovementState, float> _cachedMovementRolloff = new Dictionary<EAudioMovementState, float>();

		// Token: 0x04006DAE RID: 28078
		private GClass1096.GClass1104 _playerAudioSettings = new GClass1096.GClass1104();

		// Token: 0x04006DAF RID: 28079
		private BetterSource _interactionSource;

		// Token: 0x04006DB0 RID: 28080
		private bool _useSimpleUnderRoofCheck;

		// Token: 0x04006DB1 RID: 28081
		private readonly GClass1502 _damageThresholdAudioChecker = new GClass1502();

		// Token: 0x04006DB2 RID: 28082
		private Action _soundUnsubscribeOnDestroy;

		// Token: 0x04006DB3 RID: 28083
		public const Player.EAnimatorMask EnabledAnimatorsPlayerDefault = Player.EAnimatorMask.Thirdperson | Player.EAnimatorMask.Arms | Player.EAnimatorMask.Procedural | Player.EAnimatorMask.FBBIK | Player.EAnimatorMask.IK;

		// Token: 0x04006DB4 RID: 28084
		private const Player.EAnimatorMask FastAnimatorMask = Player.EAnimatorMask.Thirdperson | Player.EAnimatorMask.Arms | Player.EAnimatorMask.FBBIK | Player.EAnimatorMask.IK;

		// Token: 0x04006DB5 RID: 28085
		public const Player.EAnimatorMask EnabledAnimatorsSpiritDefault = Player.EAnimatorMask.Thirdperson | Player.EAnimatorMask.Arms;

		// Token: 0x04006DB6 RID: 28086
		private const int SPRINT_DAMAGE = 2;

		// Token: 0x04006DB7 RID: 28087
		private const int JUMP_DAMAGE = 3;

		// Token: 0x04006DB8 RID: 28088
		public const string LAYER_NAME_PLAYER = "Player";

		// Token: 0x04006DB9 RID: 28089
		public PlayerOverlapManager POM;

		// Token: 0x04006DBA RID: 28090
		public readonly List<string> TriggerZones = new List<string>();

		// Token: 0x04006DBB RID: 28091
		[NonSerialized]
		public BindableEvent OnExitTriggerVisited = new BindableEvent();

		// Token: 0x04006DBC RID: 28092
		public BindableStateClass<bool> InteractingWithExfiltrationPoint = new BindableStateClass<bool>();

		// Token: 0x04006DBE RID: 28094
		public EDamageType LastDamageType;

		// Token: 0x04006DBF RID: 28095
		public EBodyPart LastDamagedBodyPart;

		// Token: 0x04006DC0 RID: 28096
		public bool Destroyed;

		// Token: 0x04006DC1 RID: 28097
		public bool QuickdrawWeaponFast;

		// Token: 0x04006DC2 RID: 28098
		public bool FastSlotSelection;

		// Token: 0x04006DC3 RID: 28099
		public bool PreviousWeaponAimState;

		// Token: 0x04006DC4 RID: 28100
		public float QuickdrawTime;

		// Token: 0x04006DC6 RID: 28102
		public bool CanManipulateWithHandsInBufferZone;

		// Token: 0x04006DC7 RID: 28103
		public IAnimator[] _animators;

		// Token: 0x04006DC8 RID: 28104
		public IAnimator _underbarrelFastAnimator;

		// Token: 0x04006DC9 RID: 28105
		public PhraseSpeakerClass Speaker;

		// Token: 0x04006DCD RID: 28109
		public PlayerSpirit Spirit;

		// Token: 0x04006DCE RID: 28110
		[GAttribute10(typeof(Player.EAnimatorMask))]
		public Player.EAnimatorMask EnabledAnimators = Player.EAnimatorMask.Thirdperson | Player.EAnimatorMask.Arms | Player.EAnimatorMask.Procedural | Player.EAnimatorMask.FBBIK | Player.EAnimatorMask.IK;

		// Token: 0x04006DCF RID: 28111
		protected Player.GClass724 Logger;

		// Token: 0x04006DD0 RID: 28112
		protected Corpse Corpse;

		// Token: 0x04006DD1 RID: 28113
		protected IPlayer LastAggressor;

		// Token: 0x04006DD2 RID: 28114
		protected DamageInfoStruct LastDamageInfo;

		// Token: 0x04006DD3 RID: 28115
		protected EBodyPart LastBodyPart;

		// Token: 0x04006DD4 RID: 28116
		protected float _corpseAppliedForce;

		// Token: 0x04006DD5 RID: 28117
		protected Func<float> GetSensitivity;

		// Token: 0x04006DD6 RID: 28118
		protected Func<float> GetAimingSensitivity;

		// Token: 0x04006DD7 RID: 28119
		protected Action<Action> _openAction;

		// Token: 0x04006DD8 RID: 28120
		protected RecodableItemsHandler recodableItemsHandler;

		// Token: 0x04006DD9 RID: 28121
		private float _countdownToSprintDamage = 1f;

		// Token: 0x04006DDA RID: 28122
		private float _lastHitTime;

		// Token: 0x04006DDB RID: 28123
		private int _lastHitDebuffFrame;

		// Token: 0x04006DDC RID: 28124
		private float _accumulatedDebuffDamage;

		// Token: 0x04006DDD RID: 28125
		private int _negativeBuffsCount;

		// Token: 0x04006DDE RID: 28126
		private bool _sense;

		// Token: 0x04006DDF RID: 28127
		private bool _isInventoryOpened;

		// Token: 0x04006DE0 RID: 28128
		private bool _displaySense;

		// Token: 0x04006DE1 RID: 28129
		private IEffect Fatigue;

		// Token: 0x04006DE2 RID: 28130
		private Renderer[] _renderers = Array.Empty<Renderer>();

		// Token: 0x04006DE3 RID: 28131
		private Camera _camera;

		// Token: 0x04006DE4 RID: 28132
		private Coroutine _selfDamage;

		// Token: 0x04006DE5 RID: 28133
		private readonly BindableStateClass<Item> _itemInHands = new BindableStateClass<Item>();

		// Token: 0x04006DE6 RID: 28134
		protected readonly CompositeDisposableClass CompositeDisposable = new CompositeDisposableClass();

		// Token: 0x04006DE7 RID: 28135
		private GClass3727 _heavyVestsDeflectRandoms;

		// Token: 0x04006DE8 RID: 28136
		private Action _unsubscribeOnEndSession;

		// Token: 0x04006DE9 RID: 28137
		protected IEnumerable<TacticalComboVisualController> _helmetLightControllers = new List<TacticalComboVisualController>();

		// Token: 0x04006DEA RID: 28138
		private Animator _createdAnimator;

		// Token: 0x04006DEB RID: 28139
		private RuntimeAnimatorController _createdRuntimeAnimatorController;

		// Token: 0x04006DEC RID: 28140
		private IVaultingComponent _vaultingComponent;

		// Token: 0x04006DED RID: 28141
		private IVaultingComponentDebug _vaultingComponentDebug;

		// Token: 0x04006DEE RID: 28142
		private IVaultingParameters _vaultingParameters;

		// Token: 0x04006DEF RID: 28143
		private IVaultingGameplayRestrictions _vaultingGameplayRestrictions;

		// Token: 0x04006DF0 RID: 28144
		protected ILeftHandController _leftHandController;

		// Token: 0x04006DF1 RID: 28145
		private IWeaponMountingComponent _weaponMountingComponent;

		// Token: 0x04006E0A RID: 28170
		private float _currentBlindnessProtection;

		// Token: 0x04006E0E RID: 28174
		public Action<Item, AmmoItemClass> OnStatisticsShot;

		// Token: 0x04006E0F RID: 28175
		public BasePhysicalClass Physical;

		// Token: 0x04006E11 RID: 28177
		[SerializeField]
		private EUpdateQueue _updateQueue;

		// Token: 0x04006E12 RID: 28178
		[SerializeField]
		protected EUpdateQueue _armsUpdateQueue;

		// Token: 0x04006E15 RID: 28181
		[SerializeField]
		protected Player.EUpdateMode _armsUpdateMode;

		// Token: 0x04006E16 RID: 28182
		[SerializeField]
		protected Player.EUpdateMode _bodyUpdateMode;

		// Token: 0x04006E1B RID: 28187
		protected IHealthController _healthController;

		// Token: 0x04006E1C RID: 28188
		protected BodyPartCollider[] _hitColliders;

		// Token: 0x04006E1D RID: 28189
		protected ArmorPlateCollider[] _armorPlateColliders;

		// Token: 0x04006E1E RID: 28190
		protected Player.PlayerInventoryController _inventoryController;

		// Token: 0x04006E1F RID: 28191
		protected Player.AbstractHandsController _handsController;

		// Token: 0x04006E20 RID: 28192
		protected AbstractQuestControllerClass _questController;

		// Token: 0x04006E21 RID: 28193
		protected AbstractAchievementControllerClass _achievementsController;

		// Token: 0x04006E22 RID: 28194
		protected AbstractPrestigeControllerClass _prestigeController;

		// Token: 0x04006E23 RID: 28195
		protected GClass3617 _dialogController;

		// Token: 0x04006E25 RID: 28197
		public const string ARTA_MAN_PROFILE_ID = "66f3fad50ec64d74847d049d";

		// Token: 0x04006E26 RID: 28198
		public const string ARTA_MAN_NAME = "UI/Artillery/ArtaManName";

		// Token: 0x04006E27 RID: 28199
		private string _fullIdInfo;

		// Token: 0x04006E28 RID: 28200
		public Transform Tracking;

		// Token: 0x04006E29 RID: 28201
		private float _awareness;

		// Token: 0x04006E2A RID: 28202
		protected bool _armsupdated;

		// Token: 0x04006E2B RID: 28203
		protected float _armsTime;

		// Token: 0x04006E2C RID: 28204
		protected bool _bodyupdated;

		// Token: 0x04006E2D RID: 28205
		protected float _bodyTime;

		// Token: 0x04006E2E RID: 28206
		protected int _nFixedFrames;

		// Token: 0x04006E2F RID: 28207
		protected float _fixedTime;

		// Token: 0x04006E30 RID: 28208
		private static readonly Player.GDelegate66 _defaultDeltaTimeDelegate = new Player.GDelegate66(Player.Class1318.class1318_0.method_25);

		// Token: 0x04006E31 RID: 28209
		private Player.GDelegate66 _deltaTimeDelegate = Player._defaultDeltaTimeDelegate;

		// Token: 0x04006E32 RID: 28210
		private WaitForFixedUpdate _waitForFixedUpdate = new WaitForFixedUpdate();

		// Token: 0x04006E35 RID: 28213
		protected float LastDeltaTime;

		// Token: 0x04006E36 RID: 28214
		protected Transform _playerLookRaycastTransform;

		// Token: 0x04006E37 RID: 28215
		private EDoorState _lastInteractionState;

		// Token: 0x04006E3A RID: 28218
		private bool _nextCastHasForceEvent;

		// Token: 0x04006E3B RID: 28219
		private float _lastStateUpdateTime;

		// Token: 0x04006E3D RID: 28221
		private Coroutine _waitInventoryCoroutine;

		// Token: 0x04006E3E RID: 28222
		protected readonly List<ArmorComponent> _preAllocatedArmorComponents = new List<ArmorComponent>(20);

		// Token: 0x04006E3F RID: 28223
		protected EquipmentPenaltyComponent _preAllocatedBackpackPenaltyComponent;

		// Token: 0x04006E42 RID: 28226
		private bool _gameSessionEndWasCalled;

		// Token: 0x04006E43 RID: 28227
		protected Action ExfilUnsubscribe;

		// Token: 0x04006E44 RID: 28228
		protected List<Action> SessionEndUnsubscribe;

		// Token: 0x04006E45 RID: 28229
		protected bool AggressorFound;

		// Token: 0x04006E47 RID: 28231
		[SerializeField]
		public float MyHandsToBodyAngle;

		// Token: 0x04006E48 RID: 28232
		public byte MovementIteration;

		// Token: 0x04006E49 RID: 28233
		public List<SecretExfiltrationPoint> FoundSecretExits = new List<SecretExfiltrationPoint>();

		// Token: 0x04006E4C RID: 28236
		protected static readonly TimeSpan HearingDetectionTime = TimeSpan.FromSeconds(2.0);

		// Token: 0x04006E4F RID: 28239
		private GInterface211 _customHandRotator;

		// Token: 0x04006E55 RID: 28245
		private EPlayerBtrState _btrState;

		// Token: 0x04006E56 RID: 28246
		private EPlayerBtrState _lastBtrStateInteractionCheck;

		// Token: 0x04006E57 RID: 28247
		private EBtrState _lastBtrStateCheck;

		// Token: 0x04006E58 RID: 28248
		private bool _lastBtrCastResult;

		// Token: 0x04006E59 RID: 28249
		private bool _lastTripwireCastResult;

		// Token: 0x04006E5A RID: 28250
		private bool _lastEventObjectCastResult;

		// Token: 0x04006E5B RID: 28251
		private bool _isUsingLeftHand;

		// Token: 0x04006E5C RID: 28252
		private Player.EProcessStatus _processStatus;

		// Token: 0x04006E61 RID: 28257
		private Item _lastEquippedWeaponOrKnifeItem;

		// Token: 0x04006E62 RID: 28258
		private readonly EquipmentSlot[] _slotPriority = new EquipmentSlot[]
		{
			EquipmentSlot.FirstPrimaryWeapon,
			EquipmentSlot.SecondPrimaryWeapon,
			EquipmentSlot.Holster,
			EquipmentSlot.Scabbard
		};

		// Token: 0x04006E63 RID: 28259
		protected Callback _removeFromHandsCallback;

		// Token: 0x04006E64 RID: 28260
		private Callback _setInHandsCallback;

		// Token: 0x04006E65 RID: 28261
		private float _lastFaceshieldOperationTime;

		// Token: 0x04006E66 RID: 28262
		private int _faceshieldNumOperations;

		// Token: 0x04006E67 RID: 28263
		private const int MAX_FACESHIELD_OPERATIONS_PER_FRAME = 3;

		// Token: 0x0200297E RID: 10622
		public class GClass1537 : Error
		{
			// Token: 0x06012305 RID: 74501 RVA: 0x0023DE00 File Offset: 0x0023C000
			public GClass1537(Item item, Type componentType)
			{
				this.Item_0 = item;
				this.Type_0 = componentType;
			}

			// Token: 0x06012306 RID: 74502 RVA: 0x0023DE16 File Offset: 0x0023C016
			public override string ToString()
			{
				Item item_ = this.Item_0;
				return ((item_ != null) ? item_.ToString() : null) + " doesn't have components of type " + this.Type_0.Name;
			}

			// Token: 0x0400ED5C RID: 60764
			[NonSerialized]
			public Item Item_0;

			// Token: 0x0400ED5D RID: 60765
			[NonSerialized]
			public Type Type_0;
		}

		// Token: 0x0200297F RID: 10623
		public class GClass1538 : Error
		{
			// Token: 0x06012307 RID: 74503 RVA: 0x0023DE3F File Offset: 0x0023C03F
			public GClass1538(Item item, ItemAddress itemAddress)
			{
				this.Item_0 = item;
				this.ItemAddress_0 = itemAddress;
			}

			// Token: 0x06012308 RID: 74504 RVA: 0x0067F480 File Offset: 0x0067D680
			public override string ToString()
			{
				string[] array = new string[5];
				int num = 0;
				Item item_ = this.Item_0;
				array[num] = ((item_ != null) ? item_.ToString() : null);
				array[1] = " is not located at ";
				int num2 = 2;
				ItemAddress itemAddress_ = this.ItemAddress_0;
				array[num2] = ((itemAddress_ != null) ? itemAddress_.ToString() : null);
				array[3] = ". It's at ";
				int num3 = 4;
				ItemAddress parent = this.Item_0.Parent;
				array[num3] = ((parent != null) ? parent.ToString() : null);
				return string.Concat(array);
			}

			// Token: 0x0400ED5E RID: 60766
			[NonSerialized]
			public Item Item_0;

			// Token: 0x0400ED5F RID: 60767
			[NonSerialized]
			public ItemAddress ItemAddress_0;
		}

		// Token: 0x02002980 RID: 10624
		public class GClass1539 : Error
		{
			// Token: 0x06012309 RID: 74505 RVA: 0x0023DE55 File Offset: 0x0023C055
			public GClass1539(GClass3379 component, bool value)
			{
				this.Gclass3379_0 = component;
				this.Bool_0 = value;
			}

			// Token: 0x0601230A RID: 74506 RVA: 0x0067F4EC File Offset: 0x0067D6EC
			public override string ToString()
			{
				string[] array = new string[5];
				array[0] = this.Gclass3379_0.GetType().Name;
				array[1] = " of ";
				int num = 2;
				Item item = this.Gclass3379_0.Item;
				array[num] = ((item != null) ? item.ToString() : null);
				array[3] = " is already in state ";
				int num2 = 4;
				bool bool_ = this.Bool_0;
				array[num2] = bool_.ToString();
				return string.Concat(array);
			}

			// Token: 0x0400ED60 RID: 60768
			[NonSerialized]
			public GClass3379 Gclass3379_0;

			// Token: 0x0400ED61 RID: 60769
			[NonSerialized]
			public bool Bool_0;
		}

		// Token: 0x02002981 RID: 10625
		public abstract class PlayerInventoryController : InventoryController, GInterface416
		{
			// Token: 0x17002F4A RID: 12106
			// (get) Token: 0x0601230B RID: 74507 RVA: 0x0023DE6B File Offset: 0x0023C06B
			// (set) Token: 0x0601230C RID: 74508 RVA: 0x0023DE73 File Offset: 0x0023C073
			public Dictionary<MongoID, int> DiscardLimits { get; set; }

			// Token: 0x17002F4B RID: 12107
			// (get) Token: 0x0601230D RID: 74509 RVA: 0x0023DE7C File Offset: 0x0023C07C
			public virtual bool HasDiscardLimits
			{
				get
				{
					return this.Profile.Side != EPlayerSide.Savage;
				}
			}

			// Token: 0x17002F4C RID: 12108
			// (get) Token: 0x0601230E RID: 74510 RVA: 0x0023DE8F File Offset: 0x0023C08F
			public new Profile Profile { get; }

			// Token: 0x17002F4D RID: 12109
			// (get) Token: 0x0601230F RID: 74511 RVA: 0x0023DE97 File Offset: 0x0023C097
			public override Item ItemInHands
			{
				get
				{
					if (!(this.Player_0.HandsController != null))
					{
						return null;
					}
					return this.Player_0.HandsController.Item;
				}
			}

			// Token: 0x17002F4E RID: 12110
			// (get) Token: 0x06012310 RID: 74512
			public abstract IPlayerSearchController PlayerSearchController { get; }

			// Token: 0x17002F4F RID: 12111
			// (get) Token: 0x06012311 RID: 74513 RVA: 0x0023DEBE File Offset: 0x0023C0BE
			public override ISearchController SearchController
			{
				get
				{
					return this.PlayerSearchController;
				}
			}

			// Token: 0x17002F50 RID: 12112
			// (get) Token: 0x06012312 RID: 74514 RVA: 0x0023DEC6 File Offset: 0x0023C0C6
			// (set) Token: 0x06012313 RID: 74515 RVA: 0x0023DED6 File Offset: 0x0023C0D6
			public override bool Locked
			{
				get
				{
					return this.Player_0.ProcessStatus > Player.EProcessStatus.None;
				}
				set
				{
					this.Player_0.ProcessStatus = (value ? Player.EProcessStatus.Internal : Player.EProcessStatus.None);
					base.UpdateLockedStatus();
				}
			}

			// Token: 0x06012314 RID: 74516 RVA: 0x0067F554 File Offset: 0x0067D754
			public PlayerInventoryController(Player player, Profile profile, bool examined) : base(profile, examined)
			{
				this.Player_0 = player;
				this.Profile = profile;
				this.DiscardLimits = this.Profile.Inventory.DiscardLimits;
				base.RootItem.CurrentAddress = base.CreateItemAddress();
				if (base.QuestStashItem != null)
				{
					base.QuestStashItem.CurrentAddress = base.CreateItemAddress();
				}
				if (base.QuestRaidItem != null)
				{
					base.QuestRaidItem.CurrentAddress = base.CreateItemAddress();
				}
				if (base.Inventory.Stash != null)
				{
					base.Inventory.Stash.CurrentAddress = base.CreateItemAddress();
				}
			}

			// Token: 0x06012315 RID: 74517
			public abstract SearchContentOperation vmethod_2(SearchableItemItemClass item);

			// Token: 0x06012316 RID: 74518 RVA: 0x0023DEF0 File Offset: 0x0023C0F0
			public override Task<IResult> TryRunNetworkTransaction(GStruct153 operationResult, Callback callback = null)
			{
				if (this.Player_0.HealthController.IsAlive)
				{
					return base.TryRunNetworkTransaction(operationResult, callback);
				}
				TaskCompletionSource<IResult> taskCompletionSource = new TaskCompletionSource<IResult>();
				taskCompletionSource.Fail("Player is dead", 0);
				return taskCompletionSource.Task;
			}

			// Token: 0x06012317 RID: 74519 RVA: 0x0023DF23 File Offset: 0x0023C123
			public virtual bool HasDiscardLimit(Item item, out int limit)
			{
				if (this.HasDiscardLimits && item.LimitedDiscard)
				{
					limit = this.DiscardLimits[item.TemplateId];
					return true;
				}
				limit = 0;
				return false;
			}

			// Token: 0x06012318 RID: 74520 RVA: 0x0023DF4E File Offset: 0x0023C14E
			public virtual void ResetDiscardLimits()
			{
				if (this.HasDiscardLimits)
				{
					this.DiscardLimits = Singleton<ItemFactoryClass>.Instance.GetDiscardLimits();
				}
			}

			// Token: 0x06012319 RID: 74521 RVA: 0x0023DF68 File Offset: 0x0023C168
			public virtual IEnumerable<DestroyedItemsStruct> GetItemsOverDiscardLimit(Item item)
			{
				Player.PlayerInventoryController.Class1219 @class = new Player.PlayerInventoryController.Class1219(-2);
				@class.playerInventoryController_0 = this;
				@class.item_1 = item;
				return @class;
			}

			// Token: 0x0601231A RID: 74522 RVA: 0x0067F610 File Offset: 0x0067D810
			public bool method_28(Item item, out DestroyedItemsStruct overLimit)
			{
				overLimit = default(DestroyedItemsStruct);
				if (!item.LimitedDiscard)
				{
					return false;
				}
				MongoID templateId = item.TemplateId;
				int stackObjectsCount = item.StackObjectsCount;
				int num;
				if (!this.Dictionary_0.TryGetValue(templateId, out num))
				{
					this.Logger.LogError(string.Format("Personal discard limits missing for {0}", item), Array.Empty<object>());
					return false;
				}
				int num2 = num - stackObjectsCount;
				if (num2 >= 0)
				{
					this.Dictionary_0[templateId] = num2;
					return false;
				}
				this.Dictionary_0[templateId] = 0;
				this.List_3.Add(item);
				int num3 = Math.Min(-num2, stackObjectsCount);
				overLimit = new DestroyedItemsStruct(item, num3, stackObjectsCount - num3);
				return true;
			}

			// Token: 0x0601231B RID: 74523 RVA: 0x0067F6B8 File Offset: 0x0067D8B8
			public bool method_29(Item item, bool ignoreRestrictions)
			{
				if (!ignoreRestrictions)
				{
					ItemAddress currentAddress = item.CurrentAddress;
					Slot slot = ((currentAddress != null) ? currentAddress.Container : null) as Slot;
					if (slot != null && slot.ParentItem is InventoryEquipment)
					{
						UnlootableComponent unlootableComponent;
						CantRemoveFromSlotsDuringRaidComponent cantRemoveFromSlotsDuringRaidComponent;
						return (item.TryGetItemComponent<UnlootableComponent>(out unlootableComponent) && unlootableComponent.IsUnlootableFrom(slot)) || (item is GClass3248 && item.TryGetItemComponent<CantRemoveFromSlotsDuringRaidComponent>(out cantRemoveFromSlotsDuringRaidComponent) && !cantRemoveFromSlotsDuringRaidComponent.CanRemoveFromSlotDuringRaid(slot.ID));
					}
				}
				return false;
			}

			// Token: 0x0601231C RID: 74524 RVA: 0x0067F72C File Offset: 0x0067D92C
			public virtual void SubtractFromDiscardLimits(Item rootItem, IEnumerable<DestroyedItemsStruct> destroyedItems)
			{
				Player.PlayerInventoryController.Class1213 @class = new Player.PlayerInventoryController.Class1213();
				@class.playerInventoryController_0 = this;
				@class.destroyedItems = destroyedItems;
				if (!this.HasDiscardLimits)
				{
					return;
				}
				foreach (Item itemToSubtract in rootItem.GetAllItems(new Predicate<GClass3248>(@class.method_2)))
				{
					@class.method_0(itemToSubtract);
				}
			}

			// Token: 0x0601231D RID: 74525 RVA: 0x0023DF7F File Offset: 0x0023C17F
			public virtual void LogDiscardLimitsChange(ItemTemplate template, int delta)
			{
			}

			// Token: 0x0601231E RID: 74526 RVA: 0x0067F7A4 File Offset: 0x0067D9A4
			public virtual void AddDiscardLimits(Item rootItem, IEnumerable<DestroyedItemsStruct> destroyedItems)
			{
				Player.PlayerInventoryController.Class1214 @class = new Player.PlayerInventoryController.Class1214();
				@class.destroyedItems = destroyedItems;
				@class.playerInventoryController_0 = this;
				if (!this.HasDiscardLimits)
				{
					return;
				}
				foreach (Item itemToAdd in rootItem.GetAllItems(new Predicate<GClass3248>(@class.method_1)))
				{
					@class.method_0(itemToAdd);
				}
			}

			// Token: 0x0601231F RID: 74527 RVA: 0x0023DF81 File Offset: 0x0023C181
			public override GStruct156<Item> FindItemById(MongoID itemId, bool checkDistance = true, bool checkOwnership = true)
			{
				return this.Player_0.FindItemById(itemId, checkDistance, checkOwnership);
			}

			// Token: 0x06012320 RID: 74528 RVA: 0x0067F81C File Offset: 0x0067DA1C
			public override void OutProcess(TraderControllerClass executor, Item item, ItemAddress from, ItemAddress to, GInterface438 operation, Callback callback)
			{
				Error error;
				if (!executor.CheckTransferOwners(item, to, out error))
				{
					callback.Fail(error.ToString());
					return;
				}
				this.method_34(item, from, to, operation, callback);
			}

			// Token: 0x06012321 RID: 74529 RVA: 0x0067F854 File Offset: 0x0067DA54
			public override void InProcess(TraderControllerClass executor, Item item, ItemAddress to, bool succeed, GInterface438 operation, Callback callback)
			{
				if (!succeed)
				{
					callback.Succeed();
					return;
				}
				Error error;
				if (!executor.CheckTransferOwners(item, to, out error))
				{
					callback.Fail(error.ToString());
					return;
				}
				this.method_33(item, to, operation, callback);
				this.Player_0.StatisticsManager.OnGrabLoot(item);
			}

			// Token: 0x06012322 RID: 74530 RVA: 0x0023DF91 File Offset: 0x0023C191
			public void SetNextProcessLocked(bool status)
			{
				this.Bool_2 = status;
			}

			// Token: 0x06012323 RID: 74531 RVA: 0x0067F8A4 File Offset: 0x0067DAA4
			public override void InventoryCheckMagazine(MagazineItemClass magazine, bool notify)
			{
				Player.PlayerInventoryController.Class1215 @class = new Player.PlayerInventoryController.Class1215();
				@class.magazine = magazine;
				@class.playerInventoryController_0 = this;
				@class.notify = notify;
				this.StopProcesses();
				float num = 100f - this.Profile.Skills.MagDrillsInventoryCheckSpeed + @class.magazine.CheckTimeModifier;
				@class.speed = Singleton<BackendConfigSettingsClass>.Instance.BaseCheckTime * num / 100f;
				UnityEngine.Debug.Log("<color=cyan>Perform CHECK with speed (" + @class.speed.ToString() + ")</color>");
				@class.magazine.Parent.GetOwner().RaiseInventoryCheckMagazine(@class.magazine, @class.speed, true);
				this.Class1202_0 = new Player.PlayerInventoryController.Class1202(@class.magazine, @class.speed, new Callback(@class.method_0));
			}

			// Token: 0x06012324 RID: 74532 RVA: 0x0067F978 File Offset: 0x0067DB78
			public override Task<IResult> LoadMultiBarrelWeapon(Weapon weapon, AmmoItemClass ammo, int ammoCount)
			{
				Player.PlayerInventoryController.Struct312 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
				@struct.playerInventoryController_0 = this;
				@struct.weapon = weapon;
				@struct.ammo = ammo;
				@struct.ammoCount = ammoCount;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Struct312>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012325 RID: 74533 RVA: 0x0067F9D4 File Offset: 0x0067DBD4
			public override Task<IResult> LoadWeaponWithAmmo(Weapon weapon, AmmoItemClass ammo, int ammoCount)
			{
				Player.PlayerInventoryController.Struct313 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
				@struct.playerInventoryController_0 = this;
				@struct.weapon = weapon;
				@struct.ammo = ammo;
				@struct.ammoCount = ammoCount;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Struct313>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012326 RID: 74534 RVA: 0x0067FA30 File Offset: 0x0067DC30
			public override void StrictCheckMagazine(MagazineItemClass magazine, bool status, int skill = 0, bool notify = false, bool useOperation = true)
			{
				if (status)
				{
					if (magazine.Count <= 0 || magazine.Count >= magazine.MaxCount)
					{
						skill = 2;
					}
					if (notify && !this.Profile.CheckedMagazines.ContainsKey(magazine.Id))
					{
						this.NotifyMagazineChecked(magazine.ShortName);
					}
				}
				base.SetMagazineCheckedStatus(magazine, status, skill, useOperation, true);
			}

			// Token: 0x06012327 RID: 74535 RVA: 0x0067FA98 File Offset: 0x0067DC98
			public override Task<IResult> LoadMagazine(AmmoItemClass sourceAmmo, MagazineItemClass magazine, int loadCount, bool ignoreRestrictions)
			{
				Player.PlayerInventoryController.Struct311 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
				@struct.playerInventoryController_0 = this;
				@struct.sourceAmmo = sourceAmmo;
				@struct.magazine = magazine;
				@struct.loadCount = loadCount;
				@struct.ignoreRestrictions = ignoreRestrictions;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Struct311>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012328 RID: 74536 RVA: 0x0067FAFC File Offset: 0x0067DCFC
			public override Task<IResult> UnloadMagazine(MagazineItemClass magazine, bool equipmentBlocked)
			{
				Player.PlayerInventoryController.Struct314 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
				@struct.playerInventoryController_0 = this;
				@struct.magazine = magazine;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Struct314>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012329 RID: 74537 RVA: 0x0067FB48 File Offset: 0x0067DD48
			public Task<IResult> method_30()
			{
				Player.PlayerInventoryController.Struct315 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
				@struct.playerInventoryController_0 = this;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Struct315>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x0601232A RID: 74538 RVA: 0x0023DF9A File Offset: 0x0023C19A
			public override void StopProcesses()
			{
				Interface19 interface19_ = this.Interface19_0;
				if (interface19_ != null)
				{
					interface19_.Proceed(true);
				}
				Player.PlayerInventoryController.Class1202 class1202_ = this.Class1202_0;
				if (class1202_ == null)
				{
					return;
				}
				class1202_.Proceed();
			}

			// Token: 0x0601232B RID: 74539 RVA: 0x0023DFBE File Offset: 0x0023C1BE
			public void method_31(Item magazineOrAmmo)
			{
				Interface19 interface19_ = this.Interface19_0;
				if (interface19_ == null)
				{
					return;
				}
				interface19_.TryProceedForItem(magazineOrAmmo);
			}

			// Token: 0x0601232C RID: 74540 RVA: 0x0023DFD1 File Offset: 0x0023C1D1
			public void method_32(MagazineItemClass magazine)
			{
				Player.PlayerInventoryController.Class1202 class1202_ = this.Class1202_0;
				if (class1202_ == null)
				{
					return;
				}
				class1202_.TryProceedForItem(magazine);
			}

			// Token: 0x0601232D RID: 74541 RVA: 0x0067FB8C File Offset: 0x0067DD8C
			public override void ThrowItem(Item item, bool downDirection = false, Callback callback = null)
			{
				Weapon weapon = item as Weapon;
				if (weapon != null)
				{
					this.CheckChamber(weapon, false);
					MagazineItemClass currentMagazine = weapon.GetCurrentMagazine();
					if (currentMagazine != null)
					{
						this.StrictCheckMagazine(currentMagazine, false, 0, false, true);
						this.method_32(currentMagazine);
						this.method_31(currentMagazine);
					}
				}
				GClass3248 gclass = item as GClass3248;
				if (gclass != null)
				{
					foreach (Item item2 in gclass.GetAllItemsFromCollection())
					{
						MagazineItemClass magazineItemClass = item2 as MagazineItemClass;
						if (magazineItemClass == null)
						{
							AmmoItemClass ammoItemClass = item2 as AmmoItemClass;
							if (ammoItemClass != null)
							{
								this.method_31(ammoItemClass);
							}
						}
						else
						{
							this.method_32(magazineItemClass);
							this.method_31(magazineItemClass);
						}
					}
				}
				GStruct154<GClass3406> gstruct = InteractionsHandlerClass.Throw(item, this, true);
				if (gstruct.Failed)
				{
					if (callback != null)
					{
						callback(gstruct.ToResult());
					}
					return;
				}
				this.vmethod_1(new ThrowOperationClass(base.method_12(), this, gstruct.Value, gstruct.Value.ItemsToDestroy, this.Player_0, downDirection), callback);
			}

			// Token: 0x0601232E RID: 74542 RVA: 0x0023DFE4 File Offset: 0x0023C1E4
			public override ToggleOperationClass ToggleItem(GClass3430 toggleResult)
			{
				if (this.Player_0.HealthController.FindActiveEffect<GInterface376>(EBodyPart.Common) == null)
				{
					return new Class2500(base.method_12(), this, toggleResult, this.Player_0);
				}
				return base.ToggleItem(toggleResult);
			}

			// Token: 0x0601232F RID: 74543 RVA: 0x0067FCA0 File Offset: 0x0067DEA0
			public override void SetupItem(Item item, string zone, Vector3 position, Quaternion rotation, float setupTime, Callback callback = null)
			{
				GStruct154<GClass3408> gstruct = InteractionsHandlerClass.Discard(item, this, true);
				if (!gstruct.Failed)
				{
					this.vmethod_1(new GClass3498(base.method_12(), this, gstruct.Value, zone, position, rotation, this.Player_0, setupTime), callback);
					return;
				}
				if (callback != null)
				{
					callback(gstruct.ToResult());
					return;
				}
				this.Logger.LogError(gstruct.Error.ToString(), Array.Empty<object>());
			}

			// Token: 0x06012330 RID: 74544 RVA: 0x0067FD1C File Offset: 0x0067DF1C
			public override void PlantTripwire(ThrowWeapItemClass grenade, PlantingKitsItemClass plantingKit, Vector3 fromPosition, Vector3 toPosition, Callback callback = null)
			{
				GStruct154<GClass3407> gstruct = InteractionsHandlerClass.SimulatePlantTripwire(this, grenade, plantingKit);
				if (!gstruct.Failed)
				{
					this.vmethod_1(new GClass3492(base.method_12(), this, gstruct.Value, fromPosition, toPosition, this.Player_0), callback);
					return;
				}
				if (callback != null)
				{
					callback(gstruct.ToResult());
					return;
				}
				this.Logger.LogError(gstruct.Error.ToString(), Array.Empty<object>());
			}

			// Token: 0x06012331 RID: 74545 RVA: 0x0067FD94 File Offset: 0x0067DF94
			public override void CheckMagazineAmmoDepend(MagazineItemClass magazine, Action callback, bool useOperation, bool allowUncheck = false)
			{
				if (magazine.Count > 0 && magazine.Count < magazine.MaxCount)
				{
					if (allowUncheck && this.Player_0.Profile.CheckedMagazines.ContainsKey(magazine.Id))
					{
						this.StrictCheckMagazine(magazine, false, 0, false, useOperation);
					}
				}
				else if (!this.Player_0.Profile.CheckedMagazines.ContainsKey(magazine.Id))
				{
					this.StrictCheckMagazine(magazine, true, 2, false, useOperation);
				}
				callback();
			}

			// Token: 0x06012332 RID: 74546 RVA: 0x0023E017 File Offset: 0x0023C217
			public override GStruct155 CheckItemAction(Item item, ItemAddress location)
			{
				if (this.IsInventoryBlocked())
				{
					return new GClass1569();
				}
				return base.CheckItemAction(item, location);
			}

			// Token: 0x06012333 RID: 74547 RVA: 0x0067FE20 File Offset: 0x0067E020
			public void method_33(Item item, ItemAddress to, GInterface438 operation, Callback callback)
			{
				Player.PlayerInventoryController.Class1218 @class = new Player.PlayerInventoryController.Class1218();
				@class.callback = callback;
				this.Player_0.TrySetInHands(item, to, operation, new Callback(@class.method_0));
			}

			// Token: 0x06012334 RID: 74548 RVA: 0x0067FE58 File Offset: 0x0067E058
			public void method_34(Item item, ItemAddress from, ItemAddress to, GInterface438 abstractOperation, Callback callback)
			{
				Item item2 = this.method_35(item, from, to);
				if (item2 != null)
				{
					this.Player_0.TryRemoveFromHands(item2, abstractOperation, callback);
					return;
				}
				callback.Succeed();
			}

			// Token: 0x06012335 RID: 74549 RVA: 0x0023E034 File Offset: 0x0023C234
			public override bool vmethod_0(BaseInventoryOperationClass operation)
			{
				return this.Player_0.HandsController.CanExecute(operation);
			}

			// Token: 0x06012336 RID: 74550 RVA: 0x0067FE8C File Offset: 0x0067E08C
			public Item method_35(Item item, ItemAddress from, ItemAddress to)
			{
				List<Item> list = new List<Item>
				{
					item
				};
				GClass3248 gclass = item as GClass3248;
				if (gclass != null)
				{
					list.AddRange(gclass.Containers.SelectMany(new Func<EFT.InventoryLogic.IContainer, IEnumerable<Item>>(Player.PlayerInventoryController.Class1211.class1211_0.method_3)));
				}
				Item item2 = list.FirstOrDefault(new Func<Item, bool>(this.method_39));
				if (item2 == null)
				{
					Weapon weapon = this.ItemInHands as Weapon;
					if (weapon != null)
					{
						if (from.IsChildOf(weapon, false))
						{
							item2 = item;
						}
						if (to.IsChildOf(weapon, false))
						{
							item2 = item;
						}
					}
				}
				if (item2 != null)
				{
					return item2;
				}
				return (to != null || !this.Player_0.InventoryController.IsAnimatedSlot(from)) ? null : item;
			}

			// Token: 0x06012337 RID: 74551 RVA: 0x0067FF40 File Offset: 0x0067E140
			[CompilerGenerated]
			public static bool smethod_1(EFT.InventoryLogic.IContainer container)
			{
				Slot slot = container as Slot;
				return slot == null || !slot.IsSpecial;
			}

			// Token: 0x06012338 RID: 74552 RVA: 0x0023E047 File Offset: 0x0023C247
			[CompilerGenerated]
			[DebuggerHidden]
			public Task<IResult> method_36(Weapon weapon, AmmoItemClass ammo, int ammoCount)
			{
				return base.LoadMultiBarrelWeapon(weapon, ammo, ammoCount);
			}

			// Token: 0x06012339 RID: 74553 RVA: 0x0023E052 File Offset: 0x0023C252
			[CompilerGenerated]
			[DebuggerHidden]
			public Task<IResult> method_37(Weapon weapon, AmmoItemClass ammo, int ammoCount)
			{
				return base.LoadWeaponWithAmmo(weapon, ammo, ammoCount);
			}

			// Token: 0x0601233A RID: 74554 RVA: 0x0023E05D File Offset: 0x0023C25D
			[CompilerGenerated]
			public bool method_38()
			{
				return this.Interface19_0 == null;
			}

			// Token: 0x0601233B RID: 74555 RVA: 0x0023E068 File Offset: 0x0023C268
			[CompilerGenerated]
			public bool method_39(Item x)
			{
				return this.ItemInHands == x;
			}

			// Token: 0x0400ED62 RID: 60770
			[NonSerialized]
			public Player Player_0;

			// Token: 0x0400ED63 RID: 60771
			[NonSerialized]
			public Interface19 Interface19_0;

			// Token: 0x0400ED64 RID: 60772
			[NonSerialized]
			public Player.PlayerInventoryController.Class1202 Class1202_0;

			// Token: 0x0400ED65 RID: 60773
			[NonSerialized]
			public bool Bool_2 = true;

			// Token: 0x0400ED66 RID: 60774
			[NonSerialized]
			public Dictionary<MongoID, int> Dictionary_0 = new Dictionary<MongoID, int>();

			// Token: 0x0400ED67 RID: 60775
			[NonSerialized]
			public List<Item> List_3 = new List<Item>();

			// Token: 0x0400ED68 RID: 60776
			[CompilerGenerated]
			[NonSerialized]
			public Dictionary<MongoID, int> Dictionary_1;

			// Token: 0x0400ED69 RID: 60777
			[CompilerGenerated]
			[NonSerialized]
			public Profile Profile_0;

			// Token: 0x0200399D RID: 14749
			public class Class1202
			{
				// Token: 0x06015B01 RID: 88833 RVA: 0x00723B3C File Offset: 0x00721D3C
				public Class1202(MagazineItemClass magazine, float duration, Callback callback)
				{
					this.MagazineItemClass = magazine;
					this.Float_0 = duration;
					this.Callback_0 = callback;
					if (this.Coroutine_0 != null)
					{
						StaticManager.KillCoroutine(this.Coroutine_0);
					}
					this.Coroutine_0 = StaticManager.BeginCoroutine(this.method_0());
				}

				// Token: 0x06015B02 RID: 88834 RVA: 0x00723B88 File Offset: 0x00721D88
				public void Proceed()
				{
					if (this.Coroutine_0 != null)
					{
						if (this.Bool_0)
						{
							this.Callback_0.Succeed();
						}
						else
						{
							this.Callback_0.Fail("Cancelled");
						}
						StaticManager.KillCoroutine(this.Coroutine_0);
						this.Coroutine_0 = null;
					}
				}

				// Token: 0x06015B03 RID: 88835 RVA: 0x002641E2 File Offset: 0x002623E2
				public void TryProceedForItem(MagazineItemClass magazine)
				{
					if (this.MagazineItemClass == magazine)
					{
						this.Proceed();
					}
				}

				// Token: 0x06015B04 RID: 88836 RVA: 0x002641F3 File Offset: 0x002623F3
				public IEnumerator method_0()
				{
					Player.PlayerInventoryController.Class1202.Class1203 @class = new Player.PlayerInventoryController.Class1202.Class1203(0);
					@class.class1202_0 = this;
					return @class;
				}

				// Token: 0x04012826 RID: 75814
				[NonSerialized]
				public MagazineItemClass MagazineItemClass;

				// Token: 0x04012827 RID: 75815
				[NonSerialized]
				public float Float_0;

				// Token: 0x04012828 RID: 75816
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012829 RID: 75817
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x0401282A RID: 75818
				[NonSerialized]
				public Coroutine Coroutine_0;
			}

			// Token: 0x0200399E RID: 14750
			public class Class1204 : Interface19
			{
				// Token: 0x1700353A RID: 13626
				// (get) Token: 0x06015B05 RID: 88837 RVA: 0x00264202 File Offset: 0x00262402
				public bool Boolean_0
				{
					get
					{
						CancellationTokenSource cancellationTokenSource_ = this.CancellationTokenSource_0;
						return cancellationTokenSource_ == null || cancellationTokenSource_.IsCancellationRequested;
					}
				}

				// Token: 0x06015B06 RID: 88838 RVA: 0x00723BD4 File Offset: 0x00721DD4
				public Class1204(InventoryController inventoryController, MagazineItemClass magazine, AmmoItemClass sourceAmmo, int count, bool elite, float loadOneAmmoSpeed)
				{
					this.InventoryController_0 = inventoryController;
					this.MagazineItemClass = magazine;
					this.AmmoItemClass = sourceAmmo;
					this.Int_0 = count;
					this.Bool_0 = elite;
					this.Float_0 = loadOneAmmoSpeed;
					this.Float_1 = loadOneAmmoSpeed;
					this.IitemOwner_0 = this.MagazineItemClass.Parent.GetOwner();
					this.IitemOwner_1 = this.AmmoItemClass.Parent.GetOwner();
				}

				// Token: 0x06015B07 RID: 88839 RVA: 0x00723C48 File Offset: 0x00721E48
				public Task<IResult> Start()
				{
					Player.PlayerInventoryController.Class1204.Struct308 @struct;
					@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
					@struct.class1204_0 = this;
					@struct.int_0 = -1;
					@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Class1204.Struct308>(ref @struct);
					return @struct.asyncTaskMethodBuilder_0.Task;
				}

				// Token: 0x06015B08 RID: 88840 RVA: 0x00264215 File Offset: 0x00262415
				public void Proceed(bool success = true)
				{
					CancellationTokenSource cancellationTokenSource_ = this.CancellationTokenSource_0;
					if (cancellationTokenSource_ == null || cancellationTokenSource_.IsCancellationRequested)
					{
						return;
					}
					this.method_0();
					this.method_1(success ? CommandStatus.Succeed : CommandStatus.Failed);
					this.method_3(false);
				}

				// Token: 0x06015B09 RID: 88841 RVA: 0x00264246 File Offset: 0x00262446
				public void method_0()
				{
					if (this.CancellationTokenSource_0 == null)
					{
						return;
					}
					this.CancellationTokenSource_0.Cancel(false);
					this.CancellationTokenSource_0.Dispose();
					this.CancellationTokenSource_0 = null;
				}

				// Token: 0x06015B0A RID: 88842 RVA: 0x0026426F File Offset: 0x0026246F
				public void TryProceedForItem(Item item)
				{
					if (this.MagazineItemClass == item || this.AmmoItemClass == item)
					{
						this.Proceed(true);
					}
				}

				// Token: 0x06015B0B RID: 88843 RVA: 0x00723C8C File Offset: 0x00721E8C
				public void method_1(CommandStatus status)
				{
					GEventArgs7 args = new GEventArgs7(this.AmmoItemClass, this.MagazineItemClass, this.Int_0, this.Float_0, status, this.InventoryController_0);
					this.IitemOwner_0.RaiseLoadMagazineEvent(args);
					if (this.IitemOwner_0 != this.InventoryController_0)
					{
						this.InventoryController_0.RaiseLoadMagazineEvent(args);
					}
					if (this.IitemOwner_1 != this.IitemOwner_0)
					{
						this.IitemOwner_1.RaiseLoadMagazineEvent(args);
					}
				}

				// Token: 0x06015B0C RID: 88844 RVA: 0x00723D00 File Offset: 0x00721F00
				public Task<IResult> method_2()
				{
					Player.PlayerInventoryController.Class1204.Struct307 @struct;
					@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
					@struct.class1204_0 = this;
					@struct.int_0 = -1;
					@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Class1204.Struct307>(ref @struct);
					return @struct.asyncTaskMethodBuilder_0.Task;
				}

				// Token: 0x06015B0D RID: 88845 RVA: 0x0026428A File Offset: 0x0026248A
				public void method_3(bool refreshIcon = false)
				{
					if (this.AmmoItemClass.CurrentAddress != null)
					{
						this.AmmoItemClass.RaiseRefreshEvent(refreshIcon, true);
					}
					this.MagazineItemClass.RaiseRefreshEvent(refreshIcon, true);
				}

				// Token: 0x06015B0E RID: 88846 RVA: 0x002642B3 File Offset: 0x002624B3
				public void method_4()
				{
					if (!Singleton<GUISounds>.Instantiated)
					{
						return;
					}
					Singleton<GUISounds>.Instance.PlayUILoadSound();
				}

				// Token: 0x06015B0F RID: 88847 RVA: 0x002642C7 File Offset: 0x002624C7
				[CompilerGenerated]
				public Task method_5()
				{
					return Task.Delay(Mathf.CeilToInt(this.Float_1 * 1000f));
				}

				// Token: 0x0401282B RID: 75819
				[NonSerialized]
				public InventoryController InventoryController_0;

				// Token: 0x0401282C RID: 75820
				[NonSerialized]
				public MagazineItemClass MagazineItemClass;

				// Token: 0x0401282D RID: 75821
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x0401282E RID: 75822
				[NonSerialized]
				public int Int_0;

				// Token: 0x0401282F RID: 75823
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012830 RID: 75824
				[NonSerialized]
				public float Float_0;

				// Token: 0x04012831 RID: 75825
				[NonSerialized]
				public IItemOwner IitemOwner_0;

				// Token: 0x04012832 RID: 75826
				[NonSerialized]
				public IItemOwner IitemOwner_1;

				// Token: 0x04012833 RID: 75827
				[NonSerialized]
				public CancellationTokenSource CancellationTokenSource_0;

				// Token: 0x04012834 RID: 75828
				[NonSerialized]
				public float Float_1;

				// Token: 0x02003B00 RID: 15104
				[CompilerGenerated]
				public class Class1205
				{
					// Token: 0x06016249 RID: 90697 RVA: 0x0026A01E File Offset: 0x0026821E
					public void method_0()
					{
						this.cancellationHandlerSource.Succeed();
					}

					// Token: 0x04012D68 RID: 77160
					public TaskCompletionSource<IResult> cancellationHandlerSource;
				}

				// Token: 0x02003B01 RID: 15105
				[CompilerGenerated]
				public class Class1206
				{
					// Token: 0x0601624B RID: 90699 RVA: 0x0026A033 File Offset: 0x00268233
					public void method_0(IResult res)
					{
						this.executionSource.SetResult(res);
					}

					// Token: 0x04012D69 RID: 77161
					public TaskCompletionSource<IResult> executionSource;
				}
			}

			// Token: 0x0200399F RID: 14751
			public class Class1207 : Interface19
			{
				// Token: 0x1700353B RID: 13627
				// (get) Token: 0x06015B10 RID: 88848 RVA: 0x002642DF File Offset: 0x002624DF
				public bool Boolean_0
				{
					get
					{
						CancellationTokenSource cancellationTokenSource_ = this.CancellationTokenSource_0;
						return cancellationTokenSource_ == null || cancellationTokenSource_.IsCancellationRequested;
					}
				}

				// Token: 0x06015B11 RID: 88849 RVA: 0x00723D44 File Offset: 0x00721F44
				public Class1207(InventoryController inventoryController, MagazineItemClass magazine, float loadOneAmmoSpeed, bool elite)
				{
					this.InventoryController_0 = inventoryController;
					this.MagazineItemClass = magazine;
					this.Float_0 = loadOneAmmoSpeed;
					this.Bool_0 = elite;
					this.Float_1 = loadOneAmmoSpeed;
					this.Int_0 = this.MagazineItemClass.Cartridges.Items.Sum(new Func<Item, int>(Player.PlayerInventoryController.Class1207.Class1208.class1208_0.method_0));
					this.Int_1 = this.Int_0;
				}

				// Token: 0x06015B12 RID: 88850 RVA: 0x00723DC4 File Offset: 0x00721FC4
				public Task<IResult> Start()
				{
					Player.PlayerInventoryController.Class1207.Struct309 @struct;
					@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
					@struct.class1207_0 = this;
					@struct.int_0 = -1;
					@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Class1207.Struct309>(ref @struct);
					return @struct.asyncTaskMethodBuilder_0.Task;
				}

				// Token: 0x06015B13 RID: 88851 RVA: 0x002642F2 File Offset: 0x002624F2
				public void method_0()
				{
					if (this.CancellationTokenSource_0 == null)
					{
						return;
					}
					this.CancellationTokenSource_0.Cancel(false);
					this.CancellationTokenSource_0.Dispose();
					this.CancellationTokenSource_0 = null;
				}

				// Token: 0x06015B14 RID: 88852 RVA: 0x0026431B File Offset: 0x0026251B
				public void Proceed(bool success)
				{
					CancellationTokenSource cancellationTokenSource_ = this.CancellationTokenSource_0;
					if (cancellationTokenSource_ == null || cancellationTokenSource_.IsCancellationRequested)
					{
						return;
					}
					this.method_0();
					this.method_3(success ? CommandStatus.Succeed : CommandStatus.Failed);
				}

				// Token: 0x06015B15 RID: 88853 RVA: 0x00264345 File Offset: 0x00262545
				public void TryProceedForItem(Item item)
				{
					if (this.MagazineItemClass == item || this.Item_0 == item || this.Item_1 == item)
					{
						this.Proceed(true);
					}
				}

				// Token: 0x06015B16 RID: 88854 RVA: 0x00264369 File Offset: 0x00262569
				public void method_1()
				{
					if (!Singleton<GUISounds>.Instantiated)
					{
						return;
					}
					Singleton<GUISounds>.Instance.PlayUIUnloadSound();
				}

				// Token: 0x06015B17 RID: 88855 RVA: 0x00723E08 File Offset: 0x00722008
				public Task<IResult> method_2()
				{
					Player.PlayerInventoryController.Class1207.Struct310 @struct;
					@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<IResult>.Create();
					@struct.class1207_0 = this;
					@struct.int_0 = -1;
					@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerInventoryController.Class1207.Struct310>(ref @struct);
					return @struct.asyncTaskMethodBuilder_0.Task;
				}

				// Token: 0x06015B18 RID: 88856 RVA: 0x00723E4C File Offset: 0x0072204C
				public void method_3(CommandStatus status)
				{
					IItemOwner owner = this.MagazineItemClass.Parent.GetOwner();
					GEventArgs8 args = new GEventArgs8(this.Item_0, this.Item_1, this.MagazineItemClass, this.Int_0 - this.Int_1, this.Int_1, this.Float_0, status, this.InventoryController_0);
					owner.RaiseUnloadMagazineEvent(args);
					if (owner != this.InventoryController_0)
					{
						this.InventoryController_0.RaiseUnloadMagazineEvent(args);
					}
				}

				// Token: 0x06015B19 RID: 88857 RVA: 0x0026437D File Offset: 0x0026257D
				[CompilerGenerated]
				public Task method_4()
				{
					return Task.Delay(Mathf.CeilToInt(this.Float_1 * 1000f));
				}

				// Token: 0x04012835 RID: 75829
				[NonSerialized]
				public InventoryController InventoryController_0;

				// Token: 0x04012836 RID: 75830
				[NonSerialized]
				public MagazineItemClass MagazineItemClass;

				// Token: 0x04012837 RID: 75831
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012838 RID: 75832
				[NonSerialized]
				public float Float_0;

				// Token: 0x04012839 RID: 75833
				[NonSerialized]
				public int Int_0;

				// Token: 0x0401283A RID: 75834
				[NonSerialized]
				public float Float_1;

				// Token: 0x0401283B RID: 75835
				[NonSerialized]
				public int Int_1;

				// Token: 0x0401283C RID: 75836
				[NonSerialized]
				public CancellationTokenSource CancellationTokenSource_0;

				// Token: 0x0401283D RID: 75837
				[NonSerialized]
				public Item Item_0;

				// Token: 0x0401283E RID: 75838
				[NonSerialized]
				public Item Item_1;

				// Token: 0x02003B04 RID: 15108
				[CompilerGenerated]
				[Serializable]
				public class Class1208
				{
					// Token: 0x06016252 RID: 90706 RVA: 0x0026A071 File Offset: 0x00268271
					public int method_0(Item item)
					{
						return item.StackObjectsCount;
					}

					// Token: 0x04012D76 RID: 77174
					public static readonly Player.PlayerInventoryController.Class1207.Class1208 class1208_0 = new Player.PlayerInventoryController.Class1207.Class1208();

					// Token: 0x04012D77 RID: 77175
					public static Func<Item, int> func_0;
				}

				// Token: 0x02003B05 RID: 15109
				[CompilerGenerated]
				public class Class1209
				{
					// Token: 0x06016254 RID: 90708 RVA: 0x0026A081 File Offset: 0x00268281
					public void method_0()
					{
						this.cancellationHandlerSource.Succeed();
					}

					// Token: 0x04012D78 RID: 77176
					public TaskCompletionSource<IResult> cancellationHandlerSource;
				}

				// Token: 0x02003B06 RID: 15110
				[CompilerGenerated]
				public class Class1210
				{
					// Token: 0x06016256 RID: 90710 RVA: 0x0026A096 File Offset: 0x00268296
					public void method_0(IResult executeResult)
					{
						this.executionSource.SetResult(executeResult);
					}

					// Token: 0x04012D79 RID: 77177
					public TaskCompletionSource<IResult> executionSource;
				}
			}

			// Token: 0x020039A0 RID: 14752
			[CompilerGenerated]
			[Serializable]
			public class Class1211
			{
				// Token: 0x06015B1C RID: 88860 RVA: 0x002643A9 File Offset: 0x002625A9
				public bool method_0(GClass3393 g)
				{
					return g != null;
				}

				// Token: 0x06015B1D RID: 88861 RVA: 0x002643AF File Offset: 0x002625AF
				public int method_1(GClass3393 g)
				{
					return g.Grid.GridWidth * g.Grid.GridHeight;
				}

				// Token: 0x06015B1E RID: 88862 RVA: 0x002643C8 File Offset: 0x002625C8
				public bool method_2(GClass3393 x)
				{
					return x != null;
				}

				// Token: 0x06015B1F RID: 88863 RVA: 0x002643CE File Offset: 0x002625CE
				public IEnumerable<Item> method_3(EFT.InventoryLogic.IContainer x)
				{
					return x.Items;
				}

				// Token: 0x0401283F RID: 75839
				public static readonly Player.PlayerInventoryController.Class1211 class1211_0 = new Player.PlayerInventoryController.Class1211();

				// Token: 0x04012840 RID: 75840
				public static Func<GClass3393, bool> func_0;

				// Token: 0x04012841 RID: 75841
				public static Func<GClass3393, int> func_1;

				// Token: 0x04012842 RID: 75842
				public static Func<GClass3393, bool> func_2;

				// Token: 0x04012843 RID: 75843
				public static Func<EFT.InventoryLogic.IContainer, IEnumerable<Item>> func_3;
			}

			// Token: 0x020039A1 RID: 14753
			[CompilerGenerated]
			public class Class1212
			{
				// Token: 0x06015B21 RID: 88865 RVA: 0x002643DE File Offset: 0x002625DE
				public bool method_0(GClass3248 localItem)
				{
					return !this.playerInventoryController_0.List_3.Contains(localItem) && (!this.playerInventoryController_0.method_29(localItem, this.ignoreRestrictions) || localItem.NotShownInSlot);
				}

				// Token: 0x04012844 RID: 75844
				public Player.PlayerInventoryController playerInventoryController_0;

				// Token: 0x04012845 RID: 75845
				public bool ignoreRestrictions;
			}

			// Token: 0x020039A2 RID: 14754
			[CompilerGenerated]
			public class Class1213
			{
				// Token: 0x06015B23 RID: 88867 RVA: 0x00723EBC File Offset: 0x007220BC
				public void method_0(Item itemToSubtract)
				{
					if (!itemToSubtract.LimitedDiscard)
					{
						return;
					}
					MongoID templateId = itemToSubtract.TemplateId;
					int num = this.playerInventoryController_0.DiscardLimits[templateId];
					int num3;
					int num2 = this.method_1(itemToSubtract, out num3) ? num3 : itemToSubtract.StackObjectsCount;
					if (num2 == 0)
					{
						return;
					}
					Dictionary<MongoID, int> discardLimits = this.playerInventoryController_0.DiscardLimits;
					MongoID key = templateId;
					discardLimits[key] -= num2;
					this.playerInventoryController_0.LogDiscardLimitsChange(itemToSubtract.Template, -num2);
				}

				// Token: 0x06015B24 RID: 88868 RVA: 0x00723F38 File Offset: 0x00722138
				public bool method_1(Item localItem, out int preservedNumber)
				{
					foreach (DestroyedItemsStruct destroyedItemsStruct in this.destroyedItems)
					{
						Item item;
						int num;
						int num2;
						destroyedItemsStruct.Deconstruct(out item, out num, out num2);
						Item item2 = item;
						int num3 = num2;
						if (localItem == item2)
						{
							preservedNumber = num3;
							return true;
						}
					}
					preservedNumber = 0;
					return false;
				}

				// Token: 0x06015B25 RID: 88869 RVA: 0x00723FA8 File Offset: 0x007221A8
				public bool method_2(Item localItem)
				{
					foreach (DestroyedItemsStruct destroyedItemsStruct in this.destroyedItems)
					{
						Item item;
						int num;
						int num2;
						destroyedItemsStruct.Deconstruct(out item, out num, out num2);
						Item item2 = item;
						int num3 = num2;
						if (localItem == item2)
						{
							return num3 > 0;
						}
					}
					return true;
				}

				// Token: 0x04012846 RID: 75846
				public Player.PlayerInventoryController playerInventoryController_0;

				// Token: 0x04012847 RID: 75847
				public IEnumerable<DestroyedItemsStruct> destroyedItems;
			}

			// Token: 0x020039A3 RID: 14755
			[CompilerGenerated]
			public class Class1214
			{
				// Token: 0x06015B27 RID: 88871 RVA: 0x00724014 File Offset: 0x00722214
				public void method_0(Item itemToAdd)
				{
					if (!itemToAdd.LimitedDiscard)
					{
						return;
					}
					int num = itemToAdd.StackObjectsCount;
					foreach (DestroyedItemsStruct destroyedItemsStruct in this.destroyedItems)
					{
						Item item;
						int num2;
						int num3;
						destroyedItemsStruct.Deconstruct(out item, out num2, out num3);
						Item item2 = item;
						int num4 = num3;
						if (item2 == itemToAdd)
						{
							num = num4;
							break;
						}
					}
					if (num == 0)
					{
						return;
					}
					Dictionary<MongoID, int> discardLimits = this.playerInventoryController_0.DiscardLimits;
					MongoID templateId = itemToAdd.TemplateId;
					discardLimits[templateId] += num;
					this.playerInventoryController_0.LogDiscardLimitsChange(itemToAdd.Template, num);
				}

				// Token: 0x06015B28 RID: 88872 RVA: 0x007240C8 File Offset: 0x007222C8
				public bool method_1(Item localItem)
				{
					foreach (DestroyedItemsStruct destroyedItemsStruct in this.destroyedItems)
					{
						Item item;
						int num;
						int num2;
						destroyedItemsStruct.Deconstruct(out item, out num, out num2);
						Item item2 = item;
						int num3 = num2;
						if (localItem == item2)
						{
							return num3 > 0;
						}
					}
					return true;
				}

				// Token: 0x04012848 RID: 75848
				public IEnumerable<DestroyedItemsStruct> destroyedItems;

				// Token: 0x04012849 RID: 75849
				public Player.PlayerInventoryController playerInventoryController_0;
			}

			// Token: 0x020039A4 RID: 14756
			[CompilerGenerated]
			public class Class1215
			{
				// Token: 0x06015B2A RID: 88874 RVA: 0x00724134 File Offset: 0x00722334
				public void method_0(IResult result)
				{
					ItemAddress currentAddress = this.magazine.CurrentAddress;
					IItemOwner itemOwner = (currentAddress != null) ? currentAddress.GetOwnerOrNull() : null;
					if (itemOwner == null)
					{
						return;
					}
					if (result.Succeed)
					{
						this.playerInventoryController_0.StrictCheckMagazine(this.magazine, true, this.playerInventoryController_0.Profile.MagDrillsMastering, this.notify, true);
						if (Singleton<GUISounds>.Instantiated)
						{
							Singleton<GUISounds>.Instance.PlayItemSound(this.magazine.ItemSound, EInventorySoundType.drop, false);
						}
					}
					else
					{
						UnityEngine.Debug.Log("<color=red>Check magazine operation has been cancelled</color>");
					}
					itemOwner.RaiseInventoryCheckMagazine(this.magazine, this.speed, false);
				}

				// Token: 0x0401284A RID: 75850
				public MagazineItemClass magazine;

				// Token: 0x0401284B RID: 75851
				public Player.PlayerInventoryController playerInventoryController_0;

				// Token: 0x0401284C RID: 75852
				public bool notify;

				// Token: 0x0401284D RID: 75853
				public float speed;
			}

			// Token: 0x020039A5 RID: 14757
			[CompilerGenerated]
			public class Class1216
			{
				// Token: 0x06015B2C RID: 88876 RVA: 0x00264431 File Offset: 0x00262631
				public GClass3393 method_0(StashGridClass grid)
				{
					return grid.FindLocationForItem(this.containedAmmo);
				}

				// Token: 0x06015B2D RID: 88877 RVA: 0x0026443F File Offset: 0x0026263F
				public void method_1(IResult result)
				{
					this.taskSource.SetResult(result);
				}

				// Token: 0x0401284E RID: 75854
				public AmmoItemClass containedAmmo;

				// Token: 0x0401284F RID: 75855
				public TaskCompletionSource<IResult> taskSource;
			}

			// Token: 0x020039A6 RID: 14758
			[CompilerGenerated]
			public class Class1217
			{
				// Token: 0x06015B2F RID: 88879 RVA: 0x00264455 File Offset: 0x00262655
				public void method_0(IResult result)
				{
					this.taskSource.SetResult(result);
				}

				// Token: 0x06015B30 RID: 88880 RVA: 0x00264463 File Offset: 0x00262663
				public void method_1(IResult result)
				{
					this.taskSource.SetResult(result);
				}

				// Token: 0x04012850 RID: 75856
				public TaskCompletionSource<IResult> taskSource;
			}

			// Token: 0x020039A7 RID: 14759
			[CompilerGenerated]
			public class Class1218
			{
				// Token: 0x06015B32 RID: 88882 RVA: 0x00264479 File Offset: 0x00262679
				public void method_0(IResult result)
				{
					if (result.Failed)
					{
						UnityEngine.Debug.LogError(result.Error);
					}
					this.callback(result);
				}

				// Token: 0x04012851 RID: 75857
				public Callback callback;
			}
		}

		// Token: 0x02002982 RID: 10626
		public abstract class PlayerMovementConstantsClass
		{
			// Token: 0x0400ED6A RID: 60778
			public const float SPEED_MIN = 0f;

			// Token: 0x0400ED6B RID: 60779
			public const float SPEED_MAX = 0.7f;

			// Token: 0x0400ED6C RID: 60780
			public const float MAX_SPRINTING_SPEED = 2f;

			// Token: 0x0400ED6D RID: 60781
			public const float SPEED_MAX_DELTA = 0.3f;

			// Token: 0x0400ED6E RID: 60782
			public static readonly int FIRST_PERSON_ACTION = Animator.StringToHash("FirstAction");

			// Token: 0x0400ED6F RID: 60783
			public static readonly Vector2 STAND_POSE_ROTATION_PITCH_RANGE = new Vector2(-90f, 90f);

			// Token: 0x0400ED70 RID: 60784
			public static readonly Vector2 PRONE_POSE_ROTATION_PITCH_RANGE = new Vector2(-16f, 25f);

			// Token: 0x0400ED71 RID: 60785
			public static readonly Vector2 ROLL_POSE_ROTATION_PITCH_RANGE = new Vector2(-16f, 2f);

			// Token: 0x0400ED72 RID: 60786
			public static readonly Vector2 FULL_YAW_RANGE = new Vector2(-360f, 360f);

			// Token: 0x0400ED73 RID: 60787
			public const float POSE_RANGE_MIN = 0f;

			// Token: 0x0400ED74 RID: 60788
			public const float POSE_RANGE_MAX = 1f;

			// Token: 0x0400ED75 RID: 60789
			public const float POSE_THRESHOLD = 0.5f;

			// Token: 0x0400ED76 RID: 60790
			public const float TILT_RANGE_MIN = -5f;

			// Token: 0x0400ED77 RID: 60791
			public const float TILT_RANGE_MAX = 5f;

			// Token: 0x0400ED78 RID: 60792
			public const int STEP_RANGE_MIN = -1;

			// Token: 0x0400ED79 RID: 60793
			public const int STEP_RANGE_MAX = 1;

			// Token: 0x0400ED7A RID: 60794
			public const float LEAN_SPEED = 5f;

			// Token: 0x0400ED7B RID: 60795
			public const float SLOW_LEEN_SPEED = 0.1f;
		}

		// Token: 0x02002983 RID: 10627
		public enum EMouseSensitivityModifier
		{
			// Token: 0x0400ED7D RID: 60797
			Armor
		}

		// Token: 0x02002984 RID: 10628
		public enum LeanType
		{
			// Token: 0x0400ED7F RID: 60799
			NormalLean,
			// Token: 0x0400ED80 RID: 60800
			SlowLean
		}

		// Token: 0x02002985 RID: 10629
		public enum ESpeedLimit
		{
			// Token: 0x0400ED82 RID: 60802
			BarbedWire,
			// Token: 0x0400ED83 RID: 60803
			HealthCondition,
			// Token: 0x0400ED84 RID: 60804
			Aiming,
			// Token: 0x0400ED85 RID: 60805
			Weight,
			// Token: 0x0400ED86 RID: 60806
			SurfaceNormal,
			// Token: 0x0400ED87 RID: 60807
			Swamp,
			// Token: 0x0400ED88 RID: 60808
			Shot,
			// Token: 0x0400ED89 RID: 60809
			Armor,
			// Token: 0x0400ED8A RID: 60810
			Fall
		}

		// Token: 0x02002986 RID: 10630
		[Serializable]
		public class ValueBlender
		{
			// Token: 0x0601233D RID: 74557 RVA: 0x0023E073 File Offset: 0x0023C273
			public ValueBlender(int defaultValue = 0)
			{
				this.Target_1 = (float)defaultValue;
				this.StartValue = (float)defaultValue;
			}

			// Token: 0x17002F51 RID: 12113
			// (get) Token: 0x0601233E RID: 74558 RVA: 0x0023E096 File Offset: 0x0023C296
			// (set) Token: 0x0601233F RID: 74559 RVA: 0x0023E09E File Offset: 0x0023C29E
			public virtual float Target
			{
				get
				{
					return this.Target_1;
				}
				set
				{
					if (this.Target == value)
					{
						return;
					}
					this.StartValue = this.Value;
					this.StartTime = Time.time;
					this.Target_1 = value;
				}
			}

			// Token: 0x17002F52 RID: 12114
			// (get) Token: 0x06012340 RID: 74560 RVA: 0x0023E0C8 File Offset: 0x0023C2C8
			// (set) Token: 0x06012341 RID: 74561 RVA: 0x0023E0FB File Offset: 0x0023C2FB
			public virtual float Value
			{
				get
				{
					return Mathf.Clamp01(this.StartValue + (Time.time - this.StartTime) * this.Speed * Mathf.Sign(this.Target_1 - 0.5f));
				}
				set
				{
					this.StartTime = Time.time;
					this.StartValue = value;
				}
			}

			// Token: 0x0400ED8B RID: 60811
			[NonSerialized]
			public float Target_1;

			// Token: 0x0400ED8C RID: 60812
			[NonSerialized]
			public float StartTime;

			// Token: 0x0400ED8D RID: 60813
			[NonSerialized]
			public float StartValue;

			// Token: 0x0400ED8E RID: 60814
			public float Speed = 1f;
		}

		// Token: 0x02002987 RID: 10631
		[Serializable]
		public class BetterValueBlender : Player.ValueBlender
		{
			// Token: 0x17002F53 RID: 12115
			// (get) Token: 0x06012342 RID: 74562 RVA: 0x0067FFD0 File Offset: 0x0067E1D0
			// (set) Token: 0x06012343 RID: 74563 RVA: 0x0023E10F File Offset: 0x0023C30F
			public override float Value
			{
				get
				{
					float num = Mathf.Max(0f, Time.time - this.StartTime);
					if (this.StartValue <= this.Target)
					{
						return Mathf.Clamp(this.StartValue + num * this.Speed * Mathf.Sign(this.Target - this.StartValue), this.StartValue, this.Target);
					}
					return Mathf.Clamp(this.StartValue + num * this.Speed * Mathf.Sign(this.Target - this.StartValue), this.Target, this.StartValue);
				}
				set
				{
					this.StartValue = value;
					this.Target_1 = value;
					this.StartTime = Time.time;
				}
			}

			// Token: 0x06012344 RID: 74564 RVA: 0x0023E12A File Offset: 0x0023C32A
			public void ChangeValue(float value, float delay)
			{
				this.StartTime = Time.time + delay;
				this.StartValue = value;
			}

			// Token: 0x06012345 RID: 74565 RVA: 0x0023E140 File Offset: 0x0023C340
			public BetterValueBlender() : base(0)
			{
			}
		}

		// Token: 0x02002988 RID: 10632
		[Serializable]
		public class ValueBlenderDelay : Player.ValueBlender
		{
			// Token: 0x17002F54 RID: 12116
			// (get) Token: 0x06012346 RID: 74566 RVA: 0x0023E149 File Offset: 0x0023C349
			// (set) Token: 0x06012347 RID: 74567 RVA: 0x0023E151 File Offset: 0x0023C351
			public override float Target
			{
				get
				{
					return this.Target_1;
				}
				set
				{
					if (this.Target == value)
					{
						return;
					}
					this.StartValue = this.Value;
					this.StartTime = Time.time + this.Delay;
					this.Target_1 = value;
				}
			}

			// Token: 0x06012348 RID: 74568 RVA: 0x0023E182 File Offset: 0x0023C382
			public ValueBlenderDelay() : base(0)
			{
			}

			// Token: 0x0400ED8F RID: 60815
			public float Delay;
		}

		// Token: 0x02002989 RID: 10633
		// (Invoke) Token: 0x0601234A RID: 74570
		public delegate void GDelegate65(float damage, EBodyPart part, EDamageType type, float absorbed, MaterialType special);

		// Token: 0x0200298A RID: 10634
		public class GClass2004
		{
			// Token: 0x0601234D RID: 74573 RVA: 0x0023E18B File Offset: 0x0023C38B
			public void RemovePhysics()
			{
				if (this.Transportee)
				{
					UnityEngine.Object.Destroy(this.Transportee);
				}
			}

			// Token: 0x0601234E RID: 74574 RVA: 0x0068006C File Offset: 0x0067E26C
			public void RestoreShift()
			{
				foreach (object obj in this.Transform)
				{
					((Transform)obj).localPosition += this.Shift;
				}
			}

			// Token: 0x0601234F RID: 74575 RVA: 0x0023E1A5 File Offset: 0x0023C3A5
			public void Destroy()
			{
				this.RemovePhysics();
				this.RestoreShift();
				this.Transform = null;
				this.Transportee = null;
			}

			// Token: 0x0400ED90 RID: 60816
			public Vector3 Shift;

			// Token: 0x0400ED91 RID: 60817
			public Transform Transform;

			// Token: 0x0400ED92 RID: 60818
			public CommonTransportee Transportee;
		}

		// Token: 0x0200298B RID: 10635
		public class EmptyHandsController : Player.ItemHandsController, GInterface198, IHandsController, GInterface197
		{
			// Token: 0x17002F55 RID: 12117
			// (get) Token: 0x06012351 RID: 74577 RVA: 0x0023E1C9 File Offset: 0x0023C3C9
			public Player.EmptyHandsController.Class1258 Class1258_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.EmptyHandsController.Class1258;
				}
			}

			// Token: 0x17002F56 RID: 12118
			// (get) Token: 0x06012352 RID: 74578 RVA: 0x0023E1D6 File Offset: 0x0023C3D6
			public virtual bool Boolean_0
			{
				get
				{
					return true;
				}
			}

			// Token: 0x17002F57 RID: 12119
			// (get) Token: 0x06012353 RID: 74579 RVA: 0x0023E1D9 File Offset: 0x0023C3D9
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x17002F58 RID: 12120
			// (get) Token: 0x06012354 RID: 74580 RVA: 0x0023E1E1 File Offset: 0x0023C3E1
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x17002F59 RID: 12121
			// (get) Token: 0x06012355 RID: 74581 RVA: 0x0023E20E File Offset: 0x0023C40E
			public new GClass3365 Item
			{
				get
				{
					return base.Item as GClass3365;
				}
			}

			// Token: 0x06012356 RID: 74582 RVA: 0x0023E21B File Offset: 0x0023C41B
			public override float GetAnimatorFloatParam(int hash)
			{
				return this.firearmsAnimator_0.GetAnimatorParameter(hash);
			}

			// Token: 0x06012357 RID: 74583 RVA: 0x0023E229 File Offset: 0x0023C429
			public override bool SupportPickup()
			{
				return true;
			}

			// Token: 0x06012358 RID: 74584 RVA: 0x0023E22C File Offset: 0x0023C42C
			public override void Pickup(bool p)
			{
				this.firearmsAnimator_0.SetPickup(p);
			}

			// Token: 0x06012359 RID: 74585 RVA: 0x0023E23A File Offset: 0x0023C43A
			public override void Interact(bool isInteracting, int actionIndex)
			{
				this._player.SendHandsInteractionStateChanged(isInteracting, actionIndex);
				this.firearmsAnimator_0.SetInteract(isInteracting, actionIndex);
			}

			// Token: 0x0601235A RID: 74586 RVA: 0x0023E256 File Offset: 0x0023C456
			public override void SetInventoryOpened(bool opened)
			{
				if (opened)
				{
					this.SetCompassState(false);
				}
				this.Class1258_0.SetInventoryOpened(opened);
				MovementState currentManagedState = this._player.CurrentManagedState;
				if (currentManagedState == null)
				{
					return;
				}
				currentManagedState.OnInventory(opened);
			}

			// Token: 0x0601235B RID: 74587 RVA: 0x0023E284 File Offset: 0x0023C484
			public override void Loot(bool p)
			{
				this.firearmsAnimator_0.SetLooting(p);
			}

			// Token: 0x0601235C RID: 74588 RVA: 0x0023E292 File Offset: 0x0023C492
			public override bool IsInInteraction()
			{
				return this.firearmsAnimator_0.IsInInteraction;
			}

			// Token: 0x0601235D RID: 74589 RVA: 0x006800D4 File Offset: 0x0067E2D4
			public override bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction() || this.firearmsAnimator_0.GetLayerWeight(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX) >= float.Epsilon || this.firearmsAnimator_0.Animator.IsInTransition(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX);
			}

			// Token: 0x0601235E RID: 74590 RVA: 0x0023E29F File Offset: 0x0023C49F
			public override void Destroy()
			{
				base.SetPropVisibility(false);
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this.firearmsAnimator_0 = null;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x0601235F RID: 74591 RVA: 0x0023E2D6 File Offset: 0x0023C4D6
			public override bool CanExecute(GInterface438 operation)
			{
				return this.Class1258_0.CanExecute(operation);
			}

			// Token: 0x06012360 RID: 74592 RVA: 0x0023E2E4 File Offset: 0x0023C4E4
			public override void Execute(GInterface438 operation, Callback callback)
			{
				this.Class1258_0.Execute(operation, callback);
			}

			// Token: 0x06012361 RID: 74593 RVA: 0x0023E2F3 File Offset: 0x0023C4F3
			public virtual void ExamineWeapon()
			{
				this.Class1258_0.ExamineWeapon();
			}

			// Token: 0x06012362 RID: 74594 RVA: 0x0023E300 File Offset: 0x0023C500
			public override void SetCompassState(bool active)
			{
				if (this.CanChangeCompassState(active))
				{
					this.Class1258_0.SetEmptyHandsCompassState(active);
				}
			}

			// Token: 0x06012363 RID: 74595 RVA: 0x0023E317 File Offset: 0x0023C517
			public override bool CanRemove()
			{
				return true;
			}

			// Token: 0x06012364 RID: 74596 RVA: 0x0023E31A File Offset: 0x0023C51A
			public override void ShowGesture(EInteraction gesture)
			{
				if (gesture != EInteraction.None)
				{
					this.firearmsAnimator_0.Gesture(gesture);
				}
			}

			// Token: 0x06012365 RID: 74597 RVA: 0x00680124 File Offset: 0x0067E324
			public static T smethod_6<T>(Player player) where T : Player.EmptyHandsController
			{
				GClass3365 item = new GClass3365(MongoID.Generate(true), new GClass3247());
				T t = Player.ItemHandsController.smethod_0<T>(player, item);
				Player.EmptyHandsController.smethod_8<T>(t, player);
				return t;
			}

			// Token: 0x06012366 RID: 74598 RVA: 0x00680158 File Offset: 0x0067E358
			public static Task<T> smethod_7<T>(Player player) where T : Player.EmptyHandsController
			{
				Player.EmptyHandsController.Struct316<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.EmptyHandsController.Struct316<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012367 RID: 74599 RVA: 0x0068019C File Offset: 0x0067E39C
			public static void smethod_8<T>(T controller, Player player) where T : Player.EmptyHandsController
			{
				Player.EmptyHandsController.Class1220<T> @class = new Player.EmptyHandsController.Class1220<T>();
				@class.controller = controller;
				WeaponPrefab componentInChildren = @class.controller._controllerObject.GetComponentInChildren<WeaponPrefab>();
				@class.controller.gclass2086_0 = componentInChildren.ObjectInHands;
				@class.controller._controllerObject.transform.SetParent(player.PlayerBones.WeaponRoot.Original.parent);
				player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				player.ProceduralWeaponAnimation.InitTransforms(@class.controller.HandsHierarchy, null);
				@class.controller.gclass2086_0.AfterGetFromPoolInit(@class.controller._player.ProceduralWeaponAnimation, null, player.IsYourPlayer);
				@class.controller.firearmsAnimator_0 = componentInChildren.FirearmsAnimator;
				@class.controller.firearmsAnimator_0.AddEventsConsumer(@class.controller);
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_0));
				@class.controller._player.HandsAnimator = @class.controller.firearmsAnimator_0;
			}

			// Token: 0x06012368 RID: 74600 RVA: 0x0023E32B File Offset: 0x0023C52B
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_2();
			}

			// Token: 0x06012369 RID: 74601 RVA: 0x0023E333 File Offset: 0x0023C533
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_1();
			}

			// Token: 0x0601236A RID: 74602 RVA: 0x0023E33B File Offset: 0x0023C53B
			public override void IEventsConsumerOnThirdAction(int intParam)
			{
				base.TranslateAnimatorParameter(intParam);
			}

			// Token: 0x0601236B RID: 74603 RVA: 0x0023E344 File Offset: 0x0023C544
			public override void IEventsOnBackpackDrop()
			{
				this.method_3();
			}

			// Token: 0x0601236C RID: 74604 RVA: 0x0023E34C File Offset: 0x0023C54C
			public override void IEventsConsumerOnOnUseProp(bool boolParam)
			{
				base.SetPropVisibility(boolParam);
			}

			// Token: 0x0601236D RID: 74605 RVA: 0x0023E355 File Offset: 0x0023C555
			public override bool IsInventoryOpen()
			{
				return this._objectInHandsAnimator.IsInInventory;
			}

			// Token: 0x0601236E RID: 74606 RVA: 0x0023E362 File Offset: 0x0023C562
			public override void FastForwardCurrentState()
			{
				this.Class1258_0.FastForward();
			}

			// Token: 0x0601236F RID: 74607 RVA: 0x0023E36F File Offset: 0x0023C56F
			public void method_1()
			{
				this.Class1258_0.HideWeaponComplete();
			}

			// Token: 0x06012370 RID: 74608 RVA: 0x0023E37C File Offset: 0x0023C57C
			public void method_2()
			{
				this.Class1258_0.WeaponAppeared();
			}

			// Token: 0x06012371 RID: 74609 RVA: 0x0023E389 File Offset: 0x0023C589
			public void method_3()
			{
				this.Class1258_0.OnBackpackDrop();
			}

			// Token: 0x06012372 RID: 74610 RVA: 0x006802E8 File Offset: 0x0067E4E8
			public override void Spawn(float animationSpeed, Action callback)
			{
				Player.EmptyHandsController.Class1221 @class = new Player.EmptyHandsController.Class1221();
				@class.emptyHandsController_0 = this;
				@class.callback = callback;
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				Action callback2 = new Action(@class.method_0);
				base.InitiateOperation<Player.EmptyHandsController.Class1263>().Start(callback2);
			}

			// Token: 0x06012373 RID: 74611 RVA: 0x0023E396 File Offset: 0x0023C596
			public override void ManualUpdate(float deltaTime)
			{
				base.ManualUpdate(deltaTime);
				FirearmsAnimator firearmsAnimator = this.firearmsAnimator_0;
				if (firearmsAnimator == null)
				{
					return;
				}
				firearmsAnimator.SetAimAngle(this._player.Pitch);
			}

			// Token: 0x06012374 RID: 74612 RVA: 0x0068032C File Offset: 0x0067E52C
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.EmptyHandsController.Class1222 @class = new Player.EmptyHandsController.Class1222();
				@class.callback = callback;
				if (base.Destroyed)
				{
					this.Class1258_0.HideWeapon(@class.callback);
					return;
				}
				base.Destroyed = true;
				Action onHidden = new Action(@class.method_0);
				this.Class1258_0.HideWeapon(onHidden);
			}

			// Token: 0x06012375 RID: 74613 RVA: 0x0023E3BA File Offset: 0x0023C5BA
			public IEnumerator method_4(Action callback)
			{
				Player.EmptyHandsController.Class1223 @class = new Player.EmptyHandsController.Class1223(0);
				@class.emptyHandsController_0 = this;
				@class.callback = callback;
				return @class;
			}

			// Token: 0x06012376 RID: 74614 RVA: 0x00680380 File Offset: 0x0067E580
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.EmptyHandsController.Class1263),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_5)
					},
					{
						typeof(Player.EmptyHandsController.Class1261),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_6)
					},
					{
						typeof(Player.EmptyHandsController.Class1262),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_7)
					},
					{
						typeof(Player.EmptyHandsController.Class1259),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_8)
					}
				};
			}

			// Token: 0x06012378 RID: 74616 RVA: 0x0023E3D8 File Offset: 0x0023C5D8
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_5()
			{
				return new Player.EmptyHandsController.Class1263(this);
			}

			// Token: 0x06012379 RID: 74617 RVA: 0x0023E3E0 File Offset: 0x0023C5E0
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_6()
			{
				return new Player.EmptyHandsController.Class1261(this);
			}

			// Token: 0x0601237A RID: 74618 RVA: 0x0023E3E8 File Offset: 0x0023C5E8
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_7()
			{
				return new Player.EmptyHandsController.Class1262(this);
			}

			// Token: 0x0601237B RID: 74619 RVA: 0x0023E3F0 File Offset: 0x0023C5F0
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_8()
			{
				return new Player.EmptyHandsController.Class1259(this);
			}

			// Token: 0x0400ED93 RID: 60819
			private GClass2086 gclass2086_0;

			// Token: 0x0400ED94 RID: 60820
			private FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400ED95 RID: 60821
			private bool bool_0;

			// Token: 0x020039AE RID: 14766
			public class Class1259 : Player.EmptyHandsController.Class1258
			{
				// Token: 0x06015B46 RID: 88902 RVA: 0x0026453A File Offset: 0x0026273A
				public Class1259(Player.EmptyHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015B47 RID: 88903 RVA: 0x00724E10 File Offset: 0x00723010
				public virtual void Start(Item item, Callback callback)
				{
					this.Callback_0 = callback;
					base.Start();
					this.EmptyHandsController_0.SetInventoryOpened(false);
					this.EmptyHandsController_0._player.SendHandsInteractionStateChanged(true, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
				}

				// Token: 0x06015B48 RID: 88904 RVA: 0x00264543 File Offset: 0x00262743
				public override void Reset()
				{
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015B49 RID: 88905 RVA: 0x00724E60 File Offset: 0x00723060
				public override void OnBackpackDrop()
				{
					this.State = Player.EOperationState.Finished;
					this.EmptyHandsController_0._player.SendHandsInteractionStateChanged(false, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
					this.EmptyHandsController_0.firearmsAnimator_0.SetInventory(this.EmptyHandsController_0.bool_0);
					WeaponAnimationSpeedControllerClass.ResetTriggerHandReady(this.EmptyHandsController_0.firearmsAnimator_0.Animator);
					this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1261>().Start();
					this.Callback_0.Succeed();
				}

				// Token: 0x06015B4A RID: 88906 RVA: 0x00264552 File Offset: 0x00262752
				public override void SetInventoryOpened(bool opened)
				{
					this.EmptyHandsController_0.bool_0 = opened;
				}

				// Token: 0x0401287B RID: 75899
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x020039AF RID: 14767
			public abstract class Class1258 : Player.BaseAnimationOperationClass
			{
				// Token: 0x06015B4B RID: 88907 RVA: 0x00264560 File Offset: 0x00262760
				public Class1258(Player.EmptyHandsController controller) : base(controller)
				{
					this.EmptyHandsController_0 = controller;
					this.Player_0 = this.EmptyHandsController_0._player;
				}

				// Token: 0x06015B4C RID: 88908 RVA: 0x00264581 File Offset: 0x00262781
				public new void Start()
				{
					base.Start();
				}

				// Token: 0x06015B4D RID: 88909 RVA: 0x00264589 File Offset: 0x00262789
				public virtual void HideWeaponComplete()
				{
					base.method_0();
				}

				// Token: 0x06015B4E RID: 88910 RVA: 0x00264591 File Offset: 0x00262791
				public virtual void WeaponAppeared()
				{
					base.method_0();
				}

				// Token: 0x06015B4F RID: 88911 RVA: 0x00264599 File Offset: 0x00262799
				public virtual void OnBackpackDrop()
				{
					base.method_0();
				}

				// Token: 0x06015B50 RID: 88912 RVA: 0x002645A1 File Offset: 0x002627A1
				public virtual void HideWeapon(Action onHidden)
				{
					base.method_0();
				}

				// Token: 0x06015B51 RID: 88913 RVA: 0x002645A9 File Offset: 0x002627A9
				public virtual void ExamineWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015B52 RID: 88914 RVA: 0x002645B1 File Offset: 0x002627B1
				public virtual void SetEmptyHandsCompassState(bool active)
				{
					base.method_0();
				}

				// Token: 0x06015B53 RID: 88915 RVA: 0x002645B9 File Offset: 0x002627B9
				public virtual void FastForward()
				{
				}

				// Token: 0x06015B54 RID: 88916 RVA: 0x002645BB File Offset: 0x002627BB
				public virtual void SetInventoryOpened(bool opened)
				{
					this.EmptyHandsController_0.bool_0 = opened;
					this.EmptyHandsController_0.firearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015B55 RID: 88917 RVA: 0x00724EE8 File Offset: 0x007230E8
				public virtual bool CanExecute(GInterface438 operation)
				{
					GInterface443 ginterface = operation as GInterface443;
					return ginterface == null || !this.EmptyHandsController_0._player.InventoryController.IsAnimatedSlot(ginterface.From1);
				}

				// Token: 0x06015B56 RID: 88918 RVA: 0x00724F24 File Offset: 0x00723124
				public virtual void Execute(GInterface438 operation, Callback callback)
				{
					base.method_0();
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.EmptyHandsController_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						if (callback != null)
						{
							callback.Fail(string.Format("Detach is not supported in current operation: {0}", base.GetType()));
						}
						return;
					}
					callback.Succeed();
				}

				// Token: 0x0401287C RID: 75900
				[NonSerialized]
				public Player Player_0;

				// Token: 0x0401287D RID: 75901
				[NonSerialized]
				public Player.EmptyHandsController EmptyHandsController_0;
			}

			// Token: 0x020039B0 RID: 14768
			public class Class1261 : Player.EmptyHandsController.Class1258
			{
				// Token: 0x06015B57 RID: 88919 RVA: 0x002645DA File Offset: 0x002627DA
				public Class1261(Player.EmptyHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015B58 RID: 88920 RVA: 0x002645E3 File Offset: 0x002627E3
				public new void Start()
				{
					base.Start();
					this.Float_1 = 0f;
				}

				// Token: 0x06015B59 RID: 88921 RVA: 0x002645F6 File Offset: 0x002627F6
				public override void Reset()
				{
					this.Float_1 = 0f;
					base.Reset();
				}

				// Token: 0x06015B5A RID: 88922 RVA: 0x00264609 File Offset: 0x00262809
				public override void HideWeapon(Action onHidden)
				{
					this.State = Player.EOperationState.Finished;
					this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1262>().Start(onHidden);
				}

				// Token: 0x06015B5B RID: 88923 RVA: 0x00264623 File Offset: 0x00262823
				public override void OnEnd()
				{
					this.EmptyHandsController_0.SetCompassState(false);
				}

				// Token: 0x06015B5C RID: 88924 RVA: 0x00264631 File Offset: 0x00262831
				public override bool CanExecute(GInterface438 operation)
				{
					return true;
				}

				// Token: 0x06015B5D RID: 88925 RVA: 0x00724F88 File Offset: 0x00723188
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface != null && this.EmptyHandsController_0._player.InventoryController.IsAnimatedSlot(ginterface.From1) && !ginterface.From1.Equals(ginterface.To1))
					{
						this.State = Player.EOperationState.Finished;
						this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1259>().Start(ginterface.Item1, callback);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015B5E RID: 88926 RVA: 0x00264634 File Offset: 0x00262834
				public override void Update(float deltaTime)
				{
					this.Float_1 += deltaTime;
					if (this.Float_1 > 300f)
					{
						this.EmptyHandsController_0.firearmsAnimator_0.Idle();
						this.Float_1 = 0f;
					}
				}

				// Token: 0x06015B5F RID: 88927 RVA: 0x0026466C File Offset: 0x0026286C
				public override void ExamineWeapon()
				{
					this.EmptyHandsController_0.firearmsAnimator_0.LookTrigger();
				}

				// Token: 0x06015B60 RID: 88928 RVA: 0x0026467E File Offset: 0x0026287E
				public override void SetEmptyHandsCompassState(bool active)
				{
					this.EmptyHandsController_0.CompassState.Value = active;
				}

				// Token: 0x0401287E RID: 75902
				[NonSerialized]
				public const float Float_0 = 300f;

				// Token: 0x0401287F RID: 75903
				[NonSerialized]
				public float Float_1;
			}

			// Token: 0x020039B1 RID: 14769
			public class Class1262 : Player.EmptyHandsController.Class1258
			{
				// Token: 0x06015B61 RID: 88929 RVA: 0x00264691 File Offset: 0x00262891
				public Class1262(Player.EmptyHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015B62 RID: 88930 RVA: 0x0026469A File Offset: 0x0026289A
				public void Start(Action onHidden)
				{
					this.Action_0 = onHidden;
					base.Start();
					this.EmptyHandsController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.HideWeaponComplete();
				}

				// Token: 0x06015B63 RID: 88931 RVA: 0x002646CE File Offset: 0x002628CE
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015B64 RID: 88932 RVA: 0x002646DD File Offset: 0x002628DD
				public override bool CanExecute(GInterface438 operation)
				{
					return true;
				}

				// Token: 0x06015B65 RID: 88933 RVA: 0x00724FF4 File Offset: 0x007231F4
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface != null && this.EmptyHandsController_0._player.InventoryController.IsAnimatedSlot(ginterface.From1) && !ginterface.From1.Equals(ginterface.To1))
					{
						this.State = Player.EOperationState.Finished;
						this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1259>().Start(ginterface.Item1, callback);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015B66 RID: 88934 RVA: 0x002646E0 File Offset: 0x002628E0
				public override void HideWeaponComplete()
				{
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015B67 RID: 88935 RVA: 0x002646F4 File Offset: 0x002628F4
				public override void HideWeapon(Action onHidden)
				{
					this.Action_0 = (Action)Delegate.Combine(this.Action_0, onHidden);
				}

				// Token: 0x06015B68 RID: 88936 RVA: 0x0026470D File Offset: 0x0026290D
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.HideWeaponComplete();
					}
				}

				// Token: 0x04012880 RID: 75904
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x020039B2 RID: 14770
			public class Class1260 : Player.EmptyHandsController.Class1259
			{
				// Token: 0x06015B69 RID: 88937 RVA: 0x0026471E File Offset: 0x0026291E
				public Class1260(Player.EmptyHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015B6A RID: 88938 RVA: 0x00264727 File Offset: 0x00262927
				public override void Start(Item item, Callback callback)
				{
					this.Float_1 = 0f;
					this.Bool_0 = false;
					base.Start(item, callback);
				}

				// Token: 0x06015B6B RID: 88939 RVA: 0x00264743 File Offset: 0x00262943
				public override void FastForward()
				{
					if (!this.Bool_0)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
				}

				// Token: 0x06015B6C RID: 88940 RVA: 0x0026475A File Offset: 0x0026295A
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (!this.Bool_0 && this.Float_1 > 0.01f)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x04012881 RID: 75905
				[NonSerialized]
				public const float Float_0 = 0.01f;

				// Token: 0x04012882 RID: 75906
				[NonSerialized]
				public float Float_1;

				// Token: 0x04012883 RID: 75907
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x020039B3 RID: 14771
			public class Class1263 : Player.EmptyHandsController.Class1258
			{
				// Token: 0x06015B6D RID: 88941 RVA: 0x00264793 File Offset: 0x00262993
				public Class1263(Player.EmptyHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015B6E RID: 88942 RVA: 0x00725060 File Offset: 0x00723260
				public void Start(Action callback)
				{
					this.Action_1 = callback;
					this.Bool_0 = false;
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, 1f);
					this.EmptyHandsController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					base.Start();
					this.EmptyHandsController_0.firearmsAnimator_0.SetActiveParam(true, true);
				}

				// Token: 0x06015B6F RID: 88943 RVA: 0x0026479C File Offset: 0x0026299C
				public override void Reset()
				{
					base.Reset();
					this.Action_1 = null;
					this.Action_0 = null;
					this.Bool_0 = false;
				}

				// Token: 0x06015B70 RID: 88944 RVA: 0x007250CC File Offset: 0x007232CC
				public override void WeaponAppeared()
				{
					this.EmptyHandsController_0.SetupProp();
					this.State = Player.EOperationState.Finished;
					this.EmptyHandsController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					if (!this.Bool_0)
					{
						this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1261>().Start();
					}
					else
					{
						this.EmptyHandsController_0.InitiateOperation<Player.EmptyHandsController.Class1262>().Start(this.Action_0);
					}
					Action action_ = this.Action_1;
					this.Action_1 = null;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x06015B71 RID: 88945 RVA: 0x002647B9 File Offset: 0x002629B9
				public override void HideWeapon(Action onHidden)
				{
					this.Action_0 = onHidden;
					this.Bool_0 = true;
					this.WeaponAppeared();
				}

				// Token: 0x06015B72 RID: 88946 RVA: 0x002647CF File Offset: 0x002629CF
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.WeaponAppeared();
					}
				}

				// Token: 0x06015B73 RID: 88947 RVA: 0x002647E0 File Offset: 0x002629E0
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x04012884 RID: 75908
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012885 RID: 75909
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012886 RID: 75910
				[NonSerialized]
				public Action Action_1;
			}

			// Token: 0x020039B4 RID: 14772
			[CompilerGenerated]
			public class Class1220<T> where T : Player.EmptyHandsController
			{
				// Token: 0x06015B75 RID: 88949 RVA: 0x002647FF File Offset: 0x002629FF
				public void method_0()
				{
					this.controller.firearmsAnimator_0.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x04012887 RID: 75911
				public T controller;
			}

			// Token: 0x020039B5 RID: 14773
			[CompilerGenerated]
			public class Class1221
			{
				// Token: 0x06015B77 RID: 88951 RVA: 0x00264829 File Offset: 0x00262A29
				public void method_0()
				{
					this.emptyHandsController_0._player.StartCoroutine(this.emptyHandsController_0.method_4(this.callback));
				}

				// Token: 0x04012888 RID: 75912
				public Player.EmptyHandsController emptyHandsController_0;

				// Token: 0x04012889 RID: 75913
				public Action callback;
			}

			// Token: 0x020039B6 RID: 14774
			[CompilerGenerated]
			public class Class1222
			{
				// Token: 0x06015B79 RID: 88953 RVA: 0x00264855 File Offset: 0x00262A55
				public void method_0()
				{
					this.callback();
				}

				// Token: 0x0401288A RID: 75914
				public Action callback;
			}
		}

		// Token: 0x0200298C RID: 10636
		public class FirearmController : Player.ItemHandsController, IFirearmHandsController, GInterface199, IHandsController, GInterface197, GInterface200
		{
			// Token: 0x14000482 RID: 1154
			// (add) Token: 0x0601237C RID: 74620 RVA: 0x00680404 File Offset: 0x0067E604
			// (remove) Token: 0x0601237D RID: 74621 RVA: 0x0068043C File Offset: 0x0067E63C
			public event Action OnShot
			{
				[CompilerGenerated]
				add
				{
					Action action = this.action_0;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Combine(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_0, value2, action2);
					}
					while (action != action2);
				}
				[CompilerGenerated]
				remove
				{
					Action action = this.action_0;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Remove(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_0, value2, action2);
					}
					while (action != action2);
				}
			}

			// Token: 0x14000483 RID: 1155
			// (add) Token: 0x0601237E RID: 74622 RVA: 0x00680474 File Offset: 0x0067E674
			// (remove) Token: 0x0601237F RID: 74623 RVA: 0x006804AC File Offset: 0x0067E6AC
			public event Action<Player.FirearmController> OnReadyToOperate
			{
				[CompilerGenerated]
				add
				{
					Action<Player.FirearmController> action = this.action_1;
					Action<Player.FirearmController> action2;
					do
					{
						action2 = action;
						Action<Player.FirearmController> value2 = (Action<Player.FirearmController>)Delegate.Combine(action2, value);
						action = Interlocked.CompareExchange<Action<Player.FirearmController>>(ref this.action_1, value2, action2);
					}
					while (action != action2);
				}
				[CompilerGenerated]
				remove
				{
					Action<Player.FirearmController> action = this.action_1;
					Action<Player.FirearmController> action2;
					do
					{
						action2 = action;
						Action<Player.FirearmController> value2 = (Action<Player.FirearmController>)Delegate.Remove(action2, value);
						action = Interlocked.CompareExchange<Action<Player.FirearmController>>(ref this.action_1, value2, action2);
					}
					while (action != action2);
				}
			}

			// Token: 0x14000484 RID: 1156
			// (add) Token: 0x06012380 RID: 74624 RVA: 0x006804E4 File Offset: 0x0067E6E4
			// (remove) Token: 0x06012381 RID: 74625 RVA: 0x0068051C File Offset: 0x0067E71C
			public event Action BreakLoop
			{
				[CompilerGenerated]
				add
				{
					Action action = this.action_2;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Combine(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_2, value2, action2);
					}
					while (action != action2);
				}
				[CompilerGenerated]
				remove
				{
					Action action = this.action_2;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Remove(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_2, value2, action2);
					}
					while (action != action2);
				}
			}

			// Token: 0x17002F5A RID: 12122
			// (get) Token: 0x06012382 RID: 74626 RVA: 0x0023E3F8 File Offset: 0x0023C5F8
			public new Weapon Item
			{
				get
				{
					return base.Item as Weapon;
				}
			}

			// Token: 0x17002F5B RID: 12123
			// (get) Token: 0x06012383 RID: 74627 RVA: 0x0023E405 File Offset: 0x0023C605
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x17002F5C RID: 12124
			// (get) Token: 0x06012384 RID: 74628 RVA: 0x0023E40D File Offset: 0x0023C60D
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x17002F5D RID: 12125
			// (get) Token: 0x06012385 RID: 74629 RVA: 0x0023E43A File Offset: 0x0023C63A
			public SkillManager.GClass2250 BuffInfo
			{
				get
				{
					return this.gclass2250_0;
				}
			}

			// Token: 0x17002F5E RID: 12126
			// (get) Token: 0x06012386 RID: 74630 RVA: 0x0023E442 File Offset: 0x0023C642
			public bool IsOverlap
			{
				get
				{
					return this.float_2 > 0f;
				}
			}

			// Token: 0x17002F5F RID: 12127
			// (get) Token: 0x06012387 RID: 74631 RVA: 0x0023E451 File Offset: 0x0023C651
			public float OverlapValue
			{
				get
				{
					return this.float_2;
				}
			}

			// Token: 0x17002F60 RID: 12128
			// (get) Token: 0x06012388 RID: 74632 RVA: 0x0023E459 File Offset: 0x0023C659
			// (set) Token: 0x06012389 RID: 74633 RVA: 0x0023E461 File Offset: 0x0023C661
			public bool IsSilenced { get; set; }

			// Token: 0x17002F61 RID: 12129
			// (get) Token: 0x0601238A RID: 74634 RVA: 0x0023E46A File Offset: 0x0023C66A
			public int CurrentMasteringLevel
			{
				get
				{
					MasterSkillClass mastering = this._player.Skills.GetMastering(this.Item.TemplateId);
					if (mastering == null)
					{
						return 0;
					}
					return mastering.Level;
				}
			}

			// Token: 0x17002F62 RID: 12130
			// (get) Token: 0x0601238B RID: 74635 RVA: 0x0023E497 File Offset: 0x0023C697
			public float TotalErgonomics
			{
				get
				{
					return this.gclass849_1.Value;
				}
			}

			// Token: 0x17002F63 RID: 12131
			// (get) Token: 0x0601238C RID: 74636 RVA: 0x0023E4A4 File Offset: 0x0023C6A4
			public float ErgonomicWeight
			{
				get
				{
					return this.gclass849_0.Value;
				}
			}

			// Token: 0x17002F64 RID: 12132
			// (get) Token: 0x0601238D RID: 74637 RVA: 0x0023E4B1 File Offset: 0x0023C6B1
			public BifacialTransform CurrentFireport
			{
				get
				{
					if (!this.Item.IsMultiBarrel)
					{
						return this.Fireport;
					}
					return this.MultiBarrelsFireports[this.CurrentChamberIndex];
				}
			}

			// Token: 0x17002F65 RID: 12133
			// (get) Token: 0x0601238E RID: 74638 RVA: 0x0023E4D4 File Offset: 0x0023C6D4
			public override float AimingSensitivity
			{
				get
				{
					if (!this.IsAiming)
					{
						return this._player.GetAimingSensitivity();
					}
					return this._aimingSens;
				}
			}

			// Token: 0x17002F66 RID: 12134
			// (get) Token: 0x0601238F RID: 74639 RVA: 0x0023E4F5 File Offset: 0x0023C6F5
			public virtual Vector3 WeaponDirection
			{
				get
				{
					return this.CurrentFireport.Original.TransformDirection(this._player.LocalShotDirection);
				}
			}

			// Token: 0x17002F67 RID: 12135
			// (get) Token: 0x06012390 RID: 74640 RVA: 0x0023E512 File Offset: 0x0023C712
			public Weapon Weapon
			{
				get
				{
					return this.Item;
				}
			}

			// Token: 0x17002F68 RID: 12136
			// (get) Token: 0x06012391 RID: 74641 RVA: 0x0023E51A File Offset: 0x0023C71A
			public Vector3 FireportPosition
			{
				get
				{
					return this.CurrentFireport.position;
				}
			}

			// Token: 0x17002F69 RID: 12137
			// (get) Token: 0x06012392 RID: 74642 RVA: 0x0023E527 File Offset: 0x0023C727
			public bool MouseLookControl
			{
				get
				{
					return this._player.MouseLookControl;
				}
			}

			// Token: 0x17002F6A RID: 12138
			// (get) Token: 0x06012393 RID: 74643 RVA: 0x0023E534 File Offset: 0x0023C734
			public WeaponSoundPlayer WeaponSoundPlayer
			{
				get
				{
					return this.weaponSoundPlayer_0;
				}
			}

			// Token: 0x17002F6B RID: 12139
			// (get) Token: 0x06012394 RID: 74644 RVA: 0x0023E53C File Offset: 0x0023C73C
			// (set) Token: 0x06012395 RID: 74645 RVA: 0x0023E544 File Offset: 0x0023C744
			public bool IsBirstOf2Start { get; set; }

			// Token: 0x17002F6C RID: 12140
			// (get) Token: 0x06012396 RID: 74646 RVA: 0x0023E54D File Offset: 0x0023C74D
			public bool HasBipod
			{
				get
				{
					return this.Bipod != null;
				}
			}

			// Token: 0x17002F6D RID: 12141
			// (get) Token: 0x06012397 RID: 74647 RVA: 0x0023E558 File Offset: 0x0023C758
			public bool IsStationaryWeapon
			{
				get
				{
					return this._player.MovementContext.StationaryWeapon != null;
				}
			}

			// Token: 0x17002F6E RID: 12142
			// (get) Token: 0x06012398 RID: 74648 RVA: 0x0023E570 File Offset: 0x0023C770
			public Player.FirearmController.GClass2013 CurrentOperation
			{
				get
				{
					return base.CurrentHandsOperation as Player.FirearmController.GClass2013;
				}
			}

			// Token: 0x17002F6F RID: 12143
			// (get) Token: 0x06012399 RID: 74649 RVA: 0x0023E57D File Offset: 0x0023C77D
			// (set) Token: 0x0601239A RID: 74650 RVA: 0x0023E585 File Offset: 0x0023C785
			public virtual bool IsTriggerPressed
			{
				get
				{
					return this.bool_4;
				}
				set
				{
					if (!value)
					{
						Action action = this.action_2;
						if (action != null)
						{
							action();
						}
					}
					this.bool_4 = value;
				}
			}

			// Token: 0x17002F70 RID: 12144
			// (get) Token: 0x0601239B RID: 74651 RVA: 0x0023E5A2 File Offset: 0x0023C7A2
			// (set) Token: 0x0601239C RID: 74652 RVA: 0x00680554 File Offset: 0x0067E754
			public override bool IsAiming
			{
				get
				{
					return this._isAiming;
				}
				set
				{
					if (!value)
					{
						this._player.Physical.HoldBreath(false);
					}
					if (this._isAiming == value)
					{
						this.method_64();
						return;
					}
					this._isAiming = value;
					this._player.Skills.FastAimTimer.Target = (value ? 0f : 2f);
					this._player.MovementContext.SetAimingSlowdown(this.IsAiming, 0.33f + this.gclass2250_0.AimMovementSpeed);
					this._player.Physical.Aim((!this._isAiming || !(this._player.MovementContext.StationaryWeapon == null)) ? 0f : this.ErgonomicWeight);
					if (this.bool_7)
					{
						this.method_64();
					}
					else
					{
						this.method_63(this._isAiming);
					}
					this.weaponManagerClass.SetAiming(this._isAiming);
					this.UpdateSensitivity();
					this.AimingChanged(value);
				}
			}

			// Token: 0x17002F71 RID: 12145
			// (get) Token: 0x0601239D RID: 74653 RVA: 0x0023E5AA File Offset: 0x0023C7AA
			// (set) Token: 0x0601239E RID: 74654 RVA: 0x0023E5B2 File Offset: 0x0023C7B2
			public bool Malfunction
			{
				get
				{
					return this.bool_3;
				}
				set
				{
					if (value)
					{
						Action action = this.action_2;
						if (action != null)
						{
							action();
						}
					}
					this.bool_3 = value;
				}
			}

			// Token: 0x17002F72 RID: 12146
			// (get) Token: 0x0601239F RID: 74655 RVA: 0x0023E5CF File Offset: 0x0023C7CF
			// (set) Token: 0x060123A0 RID: 74656 RVA: 0x0023E5D7 File Offset: 0x0023C7D7
			public bool InventoryOpened
			{
				get
				{
					return this.bool_2;
				}
				set
				{
					this.bool_2 = value;
					if (this.bool_2)
					{
						this.SetCompassState(false);
						this.BlindFire(0);
					}
				}
			}

			// Token: 0x17002F73 RID: 12147
			// (get) Token: 0x060123A1 RID: 74657 RVA: 0x0023E5F6 File Offset: 0x0023C7F6
			// (set) Token: 0x060123A2 RID: 74658 RVA: 0x0023E5FE File Offset: 0x0023C7FE
			public bool Blindfire
			{
				get
				{
					return this._blindfire;
				}
				set
				{
					this._blindfire = value;
					if (this._blindfire)
					{
						this.SetCompassState(false);
					}
				}
			}

			// Token: 0x17002F74 RID: 12148
			// (get) Token: 0x060123A3 RID: 74659 RVA: 0x0023E616 File Offset: 0x0023C816
			// (set) Token: 0x060123A4 RID: 74660 RVA: 0x0023E61E File Offset: 0x0023C81E
			public bool BipodState
			{
				get
				{
					return this.bool_8;
				}
				set
				{
					this.bool_8 = value;
				}
			}

			// Token: 0x060123A5 RID: 74661 RVA: 0x0023E627 File Offset: 0x0023C827
			public static T smethod_6<T>(Player player, Weapon weapon) where T : Player.FirearmController
			{
				T t = Player.ItemHandsController.smethod_0<T>(player, weapon);
				Player.FirearmController.smethod_8<T>(t, player, weapon, false).HandleExceptions();
				return t;
			}

			// Token: 0x060123A6 RID: 74662 RVA: 0x00680650 File Offset: 0x0067E850
			public static Task<T> smethod_7<T>(Player player, Weapon weapon) where T : Player.FirearmController
			{
				Player.FirearmController.Struct317<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.weapon = weapon;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.FirearmController.Struct317<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060123A7 RID: 74663 RVA: 0x0068069C File Offset: 0x0067E89C
			public static Task smethod_8<T>(T controller, Player player, Weapon weapon, bool async = true) where T : Player.FirearmController
			{
				Player.FirearmController.Struct318<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.controller = controller;
				@struct.player = player;
				@struct.weapon = weapon;
				@struct.async = async;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.FirearmController.Struct318<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060123A8 RID: 74664 RVA: 0x0023E63E File Offset: 0x0023C83E
			public void ValidateCurrentScopeIndex()
			{
				if (this.Item.AimIndex.Value >= this._player.ProceduralWeaponAnimation.ScopeAimTransforms.Count)
				{
					this.ChangeAimingMode();
				}
			}

			// Token: 0x060123A9 RID: 74665 RVA: 0x0023E66D File Offset: 0x0023C86D
			public void method_1(float sensitivity)
			{
				this.AimingSmoothSensitivity = sensitivity;
				this.UpdateSensitivity();
			}

			// Token: 0x060123AA RID: 74666 RVA: 0x0023E67C File Offset: 0x0023C87C
			public void method_2(ESmoothScopeState scopeState)
			{
				this._player.RaiseSmoothSightChangeEvent(this._player.ProceduralWeaponAnimation.CurrentAimingMod, scopeState);
			}

			// Token: 0x060123AB RID: 74667 RVA: 0x0023E69A File Offset: 0x0023C89A
			public void method_3(AbstractSkillClass obj)
			{
				if (obj.Id == ESkillId.BotReload || obj is MasterSkillClass || ((SkillClass)obj).Class == ESkillClass.Combat)
				{
					this.SyncWithCharacterSkills();
				}
			}

			// Token: 0x060123AC RID: 74668 RVA: 0x0023E6C2 File Offset: 0x0023C8C2
			public void method_4(EPhysicalCondition condition, EPhysicalCondition full)
			{
				if (condition == EPhysicalCondition.LeftArmDamaged || condition == EPhysicalCondition.RightArmDamaged)
				{
					this.SetAnimatorAndProceduralValues();
					this.RecalculateErgonomic();
					this._player.ProceduralWeaponAnimation.UpdateWeaponVariables();
				}
			}

			// Token: 0x060123AD RID: 74669 RVA: 0x0023E6EA File Offset: 0x0023C8EA
			public void OnCurrentWeaponBeingMastered(MasterSkillClass m)
			{
				if (m.MasteringGroup.Templates.Contains(this.Item.StringTemplateId))
				{
					this.SyncWithCharacterSkills();
				}
			}

			// Token: 0x060123AE RID: 74670 RVA: 0x006806F8 File Offset: 0x0067E8F8
			public float GetWeaponDrawSpeedMultiplier(Weapon weapon, bool useFastDropAnimationSpeed)
			{
				BackendConfigSettingsClass instance = Singleton<BackendConfigSettingsClass>.Instance;
				float num;
				float num2;
				if (weapon.WeapClass.Equals("pistol"))
				{
					num = instance.WeaponFastDrawGlobalSettings.WeaponPistolFastSwitchMaxSpeedMult;
					num2 = instance.WeaponFastDrawGlobalSettings.WeaponPistolFastSwitchMinSpeedMult;
				}
				else
				{
					num = instance.WeaponFastDrawGlobalSettings.WeaponFastSwitchMaxSpeedMult;
					num2 = instance.WeaponFastDrawGlobalSettings.WeaponFastSwitchMinSpeedMult;
				}
				WeaponSkillClass weaponSkillClass;
				this._player.Skills.WeaponSkills.TryGetValue(this.Item.GetType(), out weaponSkillClass);
				int num3 = (weaponSkillClass != null) ? weaponSkillClass.Level : 0;
				float num4 = num2 + (float)(num3 / 50) * (num - num2);
				if (useFastDropAnimationSpeed)
				{
					num4 /= 1.5f;
				}
				return num4;
			}

			// Token: 0x060123AF RID: 74671 RVA: 0x0023E70F File Offset: 0x0023C90F
			public float GetWeaponReloadAnimationSpeed()
			{
				if (this.gclass2250_0 == null)
				{
					return 1f;
				}
				return this.gclass2250_0.ReloadSpeed;
			}

			// Token: 0x060123B0 RID: 74672 RVA: 0x006807AC File Offset: 0x0067E9AC
			public bool CheckForFastWeaponSwitch(Item nextControllerItem)
			{
				return nextControllerItem is Weapon && nextControllerItem.Parent.Container == this._player.Equipment.GetSlot(EquipmentSlot.Holster) && this._player.FastSlotSelection && !this._player.MovementContext.IsInPronePose;
			}

			// Token: 0x060123B1 RID: 74673 RVA: 0x00680808 File Offset: 0x0067EA08
			public void SetAnimatorAndProceduralValues()
			{
				float num = GClass1891.PastTime - this._player.QuickdrawTime;
				if (this._player.Inventory.Equipment.GetSlot(EquipmentSlot.Holster).Equals(this.Item.Parent.Container) && this._player.QuickdrawWeaponFast && num < 1f)
				{
					float fastWeaponSwitchStaminaLack = this._player.Physical.FastWeaponSwitchStaminaLack;
					WeaponSkillClass weaponSkillClass;
					this._player.Skills.WeaponSkills.TryGetValue(this.Item.GetType(), out weaponSkillClass);
					this._player.Physical.OnWeaponSwitchFast((weaponSkillClass != null) ? weaponSkillClass.Level : 0);
					float lackOfStamina = fastWeaponSwitchStaminaLack + this._player.Physical.FastWeaponSwitchStaminaLack;
					float fullStaminaCost = Singleton<BackendConfigSettingsClass>.Instance.Stamina.WeaponFastSwitchConsumption * 2f;
					if (this._player.Physical.HandsStamina.Current <= 0f)
					{
						this._player.ProceduralWeaponAnimation.StartHandShake(lackOfStamina, fullStaminaCost);
					}
					this.firearmsAnimator_0.SetSpeedParameters(1f, this.GetWeaponDrawSpeedMultiplier(this.Item, false));
					this._player.QuickdrawWeaponFast = false;
					return;
				}
				this._player.QuickdrawWeaponFast = false;
				if (this._player.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftArmDamaged) || this._player.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightArmDamaged))
				{
					this.firearmsAnimator_0.SetSpeedParameters(1f, 1f);
					this._player.MovementContext.PlayerAnimator.method_0(1f, 1f);
					return;
				}
				this.firearmsAnimator_0.SetSpeedParameters(this.gclass2250_0.ReloadSpeed, this.gclass2250_0.SwapSpeed);
				this._player.MovementContext.PlayerAnimator.method_0(this.gclass2250_0.ReloadSpeed, this.gclass2250_0.SwapSpeed);
			}

			// Token: 0x060123B2 RID: 74674 RVA: 0x006809FC File Offset: 0x0067EBFC
			public void SyncWithCharacterSkills()
			{
				this.firearmsAnimator_0.SetWeaponLevel((float)this.CurrentMasteringLevel);
				SkillManager.GClass2250 weaponInfo = this._player.Skills.GetWeaponInfo(this.Item);
				this.gclass2250_0.AimMovementSpeed = weaponInfo.AimMovementSpeed;
				this.gclass2250_0.SwapSpeed = weaponInfo.SwapSpeed;
				this.gclass2250_0.DeltaErgonomics = weaponInfo.DeltaErgonomics;
				this.gclass2250_0.FixSpeed = weaponInfo.FixSpeed;
				this.gclass2250_0.RecoilSupression = weaponInfo.RecoilSupression;
				this.gclass2250_0.ReloadSpeed = weaponInfo.ReloadSpeed;
				this.gclass2250_0.Maxed = weaponInfo.Maxed;
				this.gclass2250_0.DoubleActionRecoilReduce = weaponInfo.DoubleActionRecoilReduce;
				this.SetAnimatorAndProceduralValues();
			}

			// Token: 0x060123B3 RID: 74675 RVA: 0x0023E72A File Offset: 0x0023C92A
			public void method_5()
			{
				this.weaponSoundPlayer_0 = this._controllerObject.GetComponent<WeaponSoundPlayer>();
				this.weaponSoundPlayer_0.Init(this, this.CurrentFireport, this._player);
				this.weaponSoundPlayer_0.IsSilenced = this.IsSilenced;
			}

			// Token: 0x060123B4 RID: 74676 RVA: 0x00680AC0 File Offset: 0x0067ECC0
			public void InitModsAudioControllers(Player.FirearmController firearmController)
			{
				foreach (GClass768.GClass769 gclass in this.CCV.ContainerBones.Values)
				{
					this.SetupModAudioController(gclass.ItemView, firearmController);
				}
			}

			// Token: 0x060123B5 RID: 74677 RVA: 0x00680B24 File Offset: 0x0067ED24
			public void SetupModAudioController(Transform modObjectTransform, Player.FirearmController firearmController)
			{
				Player.FirearmController.Class1240 @class = new Player.FirearmController.Class1240();
				@class.firearmController = firearmController;
				@class.firearmController_0 = this;
				if (modObjectTransform != null && modObjectTransform.TryGetComponent<GInterface73>(out @class.modAudioController))
				{
					@class.modAudioController.Clear();
					this._player.OnHandsControllerChanged += @class.method_0;
					@class.modAudioController.Init(this._player.ProfileId, this.firearmsAnimator_0);
				}
			}

			// Token: 0x060123B6 RID: 74678 RVA: 0x00680B9C File Offset: 0x0067ED9C
			public void ClearModAudioController(Slot slot)
			{
				GClass768.GClass769 viewForSlot = this.CCV.GetViewForSlot(slot);
				GInterface73 ginterface;
				if (viewForSlot != null && viewForSlot.ItemView != null && viewForSlot.ItemView.TryGetComponent<GInterface73>(out ginterface))
				{
					ginterface.Clear();
				}
			}

			// Token: 0x060123B7 RID: 74679 RVA: 0x00680BDC File Offset: 0x0067EDDC
			public void UpdateSensitivity()
			{
				if (!this._isAiming)
				{
					return;
				}
				float num = this.Item.Template.AimSensitivity;
				SightComponent currentAimingMod = this._player.ProceduralWeaponAnimation.CurrentAimingMod;
				if (currentAimingMod != null)
				{
					if (currentAimingMod.AdjustableOpticData.IsAdjustableOptic && this._player.ProceduralWeaponAnimation.CurrentScope.IsOptic)
					{
						num = this.AimingSmoothSensitivity;
					}
					else
					{
						num = currentAimingMod.GetCurrentSensitivity;
					}
				}
				this._aimingSens = num * this._player.GetAimingSensitivity();
			}

			// Token: 0x060123B8 RID: 74680 RVA: 0x00680C64 File Offset: 0x0067EE64
			public void method_6()
			{
				LauncherItemClass underbarrelWeapon = this.Item.GetUnderbarrelWeapon();
				if (underbarrelWeapon != null)
				{
					this.UnderbarrelWeapon = underbarrelWeapon;
					this.underbarrelManagerClass = new Player.FirearmController.UnderbarrelManagerClass();
					this.underbarrelManagerClass.Init(this._player, this, this.UnderbarrelWeapon);
					return;
				}
				this.UnderbarrelWeapon = null;
				this.underbarrelManagerClass = null;
			}

			// Token: 0x060123B9 RID: 74681 RVA: 0x0023E766 File Offset: 0x0023C966
			public void method_7(LauncherItemClass underbarrelWeapon, GameObject _weaponPrefab)
			{
				if (underbarrelWeapon != null)
				{
					this.UnderbarrelWeapon = underbarrelWeapon;
					this.underbarrelManagerClass = new Player.FirearmController.UnderbarrelManagerClass();
					this.underbarrelManagerClass.Init(this._player, this, this.UnderbarrelWeapon, _weaponPrefab);
					return;
				}
				this.UnderbarrelWeapon = null;
				this.underbarrelManagerClass = null;
			}

			// Token: 0x060123BA RID: 74682 RVA: 0x0023E7A5 File Offset: 0x0023C9A5
			public void method_8()
			{
				base.ClearPreWarmOperationsDict();
				this.UnderbarrelWeapon = null;
				Player.FirearmController.UnderbarrelManagerClass underbarrelManagerClass = this.underbarrelManagerClass;
				if (underbarrelManagerClass != null)
				{
					underbarrelManagerClass.Clear();
				}
				this.underbarrelManagerClass = null;
			}

			// Token: 0x060123BB RID: 74683 RVA: 0x0023E7CC File Offset: 0x0023C9CC
			public void method_9()
			{
				Player.FirearmController.UnderbarrelManagerClass underbarrelManagerClass = this.underbarrelManagerClass;
				if (underbarrelManagerClass == null)
				{
					return;
				}
				underbarrelManagerClass.InitWeaponSoundPlayer();
			}

			// Token: 0x060123BC RID: 74684 RVA: 0x00680CBC File Offset: 0x0067EEBC
			public void method_10()
			{
				this.float_2 = 0f;
				this.WeaponLn = 0f;
				if (this._player.MovementContext.StationaryWeapon != null && this._player.MovementContext.StationaryWeapon.Item == this.Item)
				{
					return;
				}
				if (!(base.WeaponRoot == null) && !(this.CurrentFireport.Original == null))
				{
					this.WeaponLn = Vector3.Distance(this.GunBaseTransform.position, this.CurrentFireport.Original.position);
					foreach (GameObject gameObject in this.weaponManagerClass.MuzzleTransforms())
					{
						this.WeaponLn = Mathf.Max(this.WeaponLn, Vector3.Distance(this.GunBaseTransform.position, gameObject.transform.position));
					}
					if (this.CurrentFireport.Original.lossyScale.y < 1f)
					{
						this.WeaponLn /= this.CurrentFireport.Original.lossyScale.y;
					}
					this.int_0 = LayerMask.NameToLayer("Player");
					return;
				}
				UnityEngine.Debug.LogError("No muzzle or Weapon_root. Overlapping disabled");
			}

			// Token: 0x060123BD RID: 74685 RVA: 0x00680E08 File Offset: 0x0067F008
			public float method_11(Vector3 origin, float ln, ref bool overlapsWithPlayer, Vector3? weaponUp = null)
			{
				Vector3 a = weaponUp ?? base.WeaponRoot.up;
				Vector3 end = origin - a * ln;
				RaycastHit raycastHit;
				if (EFTPhysicsClass.Linecast(origin, end, out raycastHit, EFTHardSettings.Instance.WEAPON_OCCLUSION_LAYERS, false, Player.FirearmController.raycastHit_0, this.func_2))
				{
					overlapsWithPlayer = (raycastHit.collider.gameObject.layer == this.int_0);
					return ln - raycastHit.distance;
				}
				Vector3 lhs = origin - this._player.Position;
				Vector3 up = Vector3.up;
				float d = Vector3.Dot(lhs, up);
				if (EFTPhysicsClass.Linecast(this._player.Position + d * up, origin, out raycastHit, EFTHardSettings.Instance.WEAPON_OCCLUSION_LAYERS, false, Player.FirearmController.raycastHit_0, this.func_2))
				{
					overlapsWithPlayer = (raycastHit.collider.gameObject.layer == this.int_0);
					return ln;
				}
				return 0f;
			}

			// Token: 0x060123BE RID: 74686 RVA: 0x00680F08 File Offset: 0x0067F108
			public float method_12()
			{
				if (this._player.MovementContext.PhysicalConditionContainsAny(EPhysicalCondition.LeftArmDamaged | EPhysicalCondition.RightArmDamaged))
				{
					return 0f;
				}
				float num = this.gclass2250_0.DeltaErgonomics;
				if (this._player.MovementContext.IsInMountedState)
				{
					num += ((this._player.MovementContext.PlayerMountingPointData.MountPointData.MountSideDirection != EMountSideDirection.Forward || !this.BipodState) ? this.gclass2250_0.MountingBonusErgo : this.gclass2250_0.BipodBonusErgo);
				}
				return Mathf.Max(0f, this.Item.ErgonomicsTotal * (1f + num + this._player.ErgonomicsPenalty));
			}

			// Token: 0x060123BF RID: 74687 RVA: 0x0023E7DE File Offset: 0x0023C9DE
			public float method_13()
			{
				return this.Item.TotalWeight * (1f - Mathf.Sqrt(this.TotalErgonomics) / 25f);
			}

			// Token: 0x060123C0 RID: 74688 RVA: 0x0023E803 File Offset: 0x0023CA03
			public void ReloadMagNotFound()
			{
				Action<EPhraseTrigger, int> phraseSituation = this._player.PhraseSituation;
				if (phraseSituation == null)
				{
					return;
				}
				phraseSituation(EPhraseTrigger.NeedAmmo, 5);
			}

			// Token: 0x060123C1 RID: 74689 RVA: 0x0023E81D File Offset: 0x0023CA1D
			public void method_14()
			{
				this.IsSilenced = this.Item.GetItemComponentsInChildren(true).Any<SilencerComponent>();
			}

			// Token: 0x060123C2 RID: 74690 RVA: 0x00680FB8 File Offset: 0x0067F1B8
			public void UpdateHipInaccuracy()
			{
				bool flag;
				if (this.AimingDevices.Length != 0)
				{
					flag = this.AimingDevices.Any(new Func<TacticalComboItemClass, bool>(Player.FirearmController.Class1237.class1237_0.method_0));
				}
				else
				{
					flag = false;
				}
				this.HipInaccuracy = (flag ? (0.3f - this.gclass849_1.Value / 400f) : (1f - Mathf.Clamp01(this.gclass849_1.Value / 250f - 0.15f)));
				this._player.ProceduralWeaponAnimation.Breath.HipPenalty = this.HipInaccuracy;
			}

			// Token: 0x060123C3 RID: 74691 RVA: 0x0023E836 File Offset: 0x0023CA36
			public void SetUnderbarrelWeapon()
			{
				this.method_6();
			}

			// Token: 0x060123C4 RID: 74692 RVA: 0x0068105C File Offset: 0x0067F25C
			public void WeaponModified()
			{
				this.method_10();
				this.float_3 = this.Item.GetTotalCenterOfImpact(false);
				this.method_14();
				this.RecalculateErgonomic();
				this.SetMaxUniqueAnimationModId();
				this.Bipod = this.Item.AllSlots.Where(new Func<Slot, bool>(Player.FirearmController.Class1237.class1237_0.method_1)).Select(new Func<Slot, BipodItemClass>(Player.FirearmController.Class1237.class1237_0.method_2)).FirstOrDefault<BipodItemClass>();
				this.BipodState = (this.BipodState && this.HasBipod);
				this.weaponPrefab_0.InitHotObjects(this.Item);
				this._controllerObject.GetComponent<WeaponSoundPlayer>().IsSilenced = this.IsSilenced;
				this._player.ProceduralWeaponAnimation.UpdateWeaponVariables();
				this.AimingDevices = this.Item.AllSlots.Where(new Func<Slot, bool>(Player.FirearmController.Class1237.class1237_0.method_3)).Select(new Func<Slot, TacticalComboItemClass>(Player.FirearmController.Class1237.class1237_0.method_4)).ToArray<TacticalComboItemClass>();
				this.UpdateHipInaccuracy();
				this._player.ProceduralWeaponAnimation.IsBipodUsed = this.BipodState;
				this.float_4 = this.Item.TotalShotgunDispersion;
			}

			// Token: 0x060123C5 RID: 74693 RVA: 0x006811CC File Offset: 0x0067F3CC
			public void RecalculateErgonomic()
			{
				this.gclass849_1.SetDirty();
				this.gclass849_0.SetDirty();
				this._player.Physical.Aim((!this._isAiming || !(this._player.MovementContext.StationaryWeapon == null)) ? 0f : this.ErgonomicWeight);
			}

			// Token: 0x060123C6 RID: 74694 RVA: 0x0068122C File Offset: 0x0067F42C
			public void SetMaxUniqueAnimationModId()
			{
				Mod[] array = this.Item.AllSlots.Where(new Func<Slot, bool>(Player.FirearmController.Class1237.class1237_0.method_5)).Select(new Func<Slot, Mod>(Player.FirearmController.Class1237.class1237_0.method_6)).ToArray<Mod>();
				if (array.Length == 0)
				{
					this.bool_7 = false;
					return;
				}
				int num = array.Max(new Func<Mod, int>(Player.FirearmController.Class1237.class1237_0.method_7));
				this.bool_7 = (num > 0);
				this.FirearmsAnimator.SetUniqueAnimationModId(num);
			}

			// Token: 0x060123C7 RID: 74695 RVA: 0x0023E83E File Offset: 0x0023CA3E
			public override float GetAnimatorFloatParam(int hash)
			{
				return this.firearmsAnimator_0.GetAnimatorParameter(hash);
			}

			// Token: 0x060123C8 RID: 74696 RVA: 0x006812DC File Offset: 0x0067F4DC
			public bool method_15(RaycastHit overlapHit)
			{
				GameObject gameObject = overlapHit.collider.gameObject;
				return gameObject.layer == this.int_0 && gameObject == this._player.gameObject;
			}

			// Token: 0x17002F75 RID: 12149
			// (get) Token: 0x060123C9 RID: 74697 RVA: 0x0023E84C File Offset: 0x0023CA4C
			public bool DisableLeftStanceByOverlap
			{
				get
				{
					return this.bool_11;
				}
			}

			// Token: 0x060123CA RID: 74698 RVA: 0x00681318 File Offset: 0x0067F518
			public virtual void WeaponOverlapping()
			{
				if (this.WeaponLn <= 0f)
				{
					return;
				}
				try
				{
					float num = 1f;
					if (this._player.IsVisible && !(this.CurrentOperation is Player.FirearmController.GClass2053))
					{
						if (this.bool_12 && !this._player._isInventoryOpened)
						{
							this.float_7 = -1f;
						}
						this.bool_12 = this._player._isInventoryOpened;
						if (this.float_7 <= 1f)
						{
							this.float_7 += Time.deltaTime / this.float_6;
						}
						float weaponOverlapDistanceCulling = Singleton<GClass1706>.Instance.WeaponOverlapDistanceCulling;
						if (weaponOverlapDistanceCulling <= 0f || this._player.IsVisibleByCullingObject(weaponOverlapDistanceCulling))
						{
							Vector3 vector = this._player.ProceduralWeaponAnimation.HandsContainer.HandsPosition.Get();
							if (this._player.ProceduralWeaponAnimation.BlindfireBlender.Value != 0f)
							{
								Vector3 vector2 = (this._player.ProceduralWeaponAnimation.BlindFireEndPosition + this._player.ProceduralWeaponAnimation.PositionZeroSum) * 1.9f;
								vector2 = this._player.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.parent.TransformPoint(vector2);
								num = this.method_11(vector2, this.WeaponLn, ref this._player.ProceduralWeaponAnimation.TurnAway.OverlapsWithPlayer, null);
							}
							if (num >= 0.02f)
							{
								if (this._player.MovementContext.LeftStanceEnabled)
								{
									vector = this._player.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.TransformPoint(vector);
								}
								else
								{
									vector = this._player.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.parent.TransformPoint(vector);
								}
								num = this.method_11(vector, this.WeaponLn, ref this._player.ProceduralWeaponAnimation.TurnAway.OverlapsWithPlayer, null);
								if (num > 0f && this._player.MovementContext.LeftStanceController.LeftStance && !this._player.MovementContext.IsInPronePose && !this._player._isInventoryOpened && this.float_7 > 1f && this._player.method_25(PlayerAnimator.LEFT_STANCE_CURVE) >= 1f)
								{
									this._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
									this.bool_11 = true;
									this.float_7 = 0f;
								}
								if (!this._player.MovementContext.LeftStanceController.LastAnimValue && this._player.MovementContext.LeftStanceController.LeftStance && num <= 0f && this.bool_11 && !this._player.MovementContext.IsInPronePose && !this._player._isInventoryOpened && this.float_7 > 1f && this._player.method_25(PlayerAnimator.LEFT_STANCE_CURVE) <= 0f)
								{
									vector += -base.WeaponRoot.right * 0.2f;
									if (this.method_11(vector, this.WeaponLn + 0.2f, ref this._player.ProceduralWeaponAnimation.TurnAway.OverlapsWithPlayer, null) <= 0f)
									{
										this._player.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromHandsAction();
										this.bool_11 = false;
										this.float_7 = 0f;
									}
								}
							}
							this.SetWeaponOverlapValue(num);
							this.WeaponOverlapView();
						}
					}
				}
				finally
				{
				}
			}

			// Token: 0x060123CB RID: 74699 RVA: 0x006816EC File Offset: 0x0067F8EC
			public void method_16(bool value)
			{
				if (this.IsAiming && value)
				{
					this.method_30();
				}
				if (this.IsBipodsOperation)
				{
					this.CurrentOperation.FastForward();
				}
				if (this.FirearmsAnimator != null)
				{
					this.FirearmsAnimator.SetSprint(value);
				}
				if (value)
				{
					this.SetTriggerPressed(false);
				}
			}

			// Token: 0x060123CC RID: 74700 RVA: 0x0023E854 File Offset: 0x0023CA54
			public void method_17(EPlayerState previousstate, EPlayerState nextstate)
			{
				if (!EFTHardSettings.Instance.CanAimInState(nextstate))
				{
					this.method_30();
				}
			}

			// Token: 0x060123CD RID: 74701 RVA: 0x0023E869 File Offset: 0x0023CA69
			public bool AudioDelegate()
			{
				return this.IsTriggerPressed && !this.Malfunction;
			}

			// Token: 0x060123CE RID: 74702 RVA: 0x0023E87E File Offset: 0x0023CA7E
			public virtual void InitBallisticCalculator()
			{
				this.BallisticsCalculator = Singleton<GInterface169>.Instance.CreateBallisticCalculator(0);
			}

			// Token: 0x060123CF RID: 74703 RVA: 0x0023E891 File Offset: 0x0023CA91
			public virtual void SetWeaponOverlapValue(float overlap)
			{
				this.float_2 = overlap;
			}

			// Token: 0x060123D0 RID: 74704 RVA: 0x0068173C File Offset: 0x0067F93C
			public void WeaponOverlapView()
			{
				if (this._player.MovementContext.IsInMountedState && this._player.MovementContext.PlayerMountingPointData.TransitionMounting)
				{
					this.float_2 = 0f;
				}
				Vector3 vector = this._player.ProceduralWeaponAnimation.HandsContainer.HandsPosition.Get();
				if (this.float_2 < 0.02f)
				{
					this._player.ProceduralWeaponAnimation.TurnAway.OverlapDepth = this.float_2;
					this._player.ProceduralWeaponAnimation.OverlappingAllowsBlindfire = true;
				}
				else
				{
					this._player.ProceduralWeaponAnimation.OverlappingAllowsBlindfire = false;
					this._player.ProceduralWeaponAnimation.TurnAway.OriginZShift = vector.y;
					this._player.ProceduralWeaponAnimation.TurnAway.OverlapDepth = this.float_2;
				}
				if (this.float_2 > EFTHardSettings.Instance.STOP_AIMING_AT && this.IsAiming)
				{
					this.ToggleAim();
					this.AimingInterruptedByOverlap = true;
					return;
				}
				if (this.float_2 < EFTHardSettings.Instance.STOP_AIMING_AT && this._player.ProceduralWeaponAnimation.TurnAway.OverlapValue < 0.2f && this.AimingInterruptedByOverlap && !this.IsAiming)
				{
					this.ToggleAim();
					this.AimingInterruptedByOverlap = false;
				}
			}

			// Token: 0x060123D1 RID: 74705 RVA: 0x00681890 File Offset: 0x0067FA90
			public void method_18()
			{
				if (this.Item.WeapFireType.Length > 1)
				{
					this.firearmsAnimator_0.SetFireMode(this.Item.SelectedFireMode, true);
				}
				if (this.Item.HasChambers)
				{
					this.firearmsAnimator_0.SetAmmoInChamber((float)this.Item.ChamberAmmoCount);
				}
				MagazineItemClass currentMagazine = this.Item.GetCurrentMagazine();
				this.firearmsAnimator_0.SetMagInWeapon(currentMagazine != null);
				this.firearmsAnimator_0.SetAmmoOnMag((currentMagazine != null) ? currentMagazine.Count : 0);
				this.firearmsAnimator_0.SetMagTypeCurrent((currentMagazine != null) ? currentMagazine.magAnimationIndex : -1);
				this.firearmsAnimator_0.Fold(this.Item.Folded);
				if (this.UnderbarrelWeapon != null)
				{
					this.firearmsAnimator_0.SetLauncher(false);
				}
			}

			// Token: 0x060123D2 RID: 74706 RVA: 0x0023E89A File Offset: 0x0023CA9A
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_32();
			}

			// Token: 0x060123D3 RID: 74707 RVA: 0x0023E8A2 File Offset: 0x0023CAA2
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_31();
			}

			// Token: 0x060123D4 RID: 74708 RVA: 0x0023E8AA File Offset: 0x0023CAAA
			public override void IEventsConsumerOnThirdAction(int intParam)
			{
				base.TranslateAnimatorParameter(intParam);
			}

			// Token: 0x060123D5 RID: 74709 RVA: 0x0023E8B3 File Offset: 0x0023CAB3
			public override void IEventsConsumerOnAddAmmoInChamber()
			{
				this.method_34();
			}

			// Token: 0x060123D6 RID: 74710 RVA: 0x0023E8BB File Offset: 0x0023CABB
			public override void IEventsConsumerOnRemoveShell()
			{
				this.method_35();
			}

			// Token: 0x060123D7 RID: 74711 RVA: 0x0023E8C3 File Offset: 0x0023CAC3
			public override void IEventsConsumerOnShellEject()
			{
				this.method_36();
			}

			// Token: 0x060123D8 RID: 74712 RVA: 0x0023E8CB File Offset: 0x0023CACB
			public override void IEventsConsumerOnAddAmmoInMag()
			{
				this.method_38();
			}

			// Token: 0x060123D9 RID: 74713 RVA: 0x0023E8D3 File Offset: 0x0023CAD3
			public override void IEventsConsumerOnDelAmmoFromMag()
			{
				this.method_37();
			}

			// Token: 0x060123DA RID: 74714 RVA: 0x0023E8DB File Offset: 0x0023CADB
			public override void IEventsConsumerOnShowAmmo(bool boolParam)
			{
				this.method_39(boolParam);
			}

			// Token: 0x060123DB RID: 74715 RVA: 0x0023E8E4 File Offset: 0x0023CAE4
			public override void IEventsConsumerOnDelAmmoChamber()
			{
				this.method_33();
			}

			// Token: 0x060123DC RID: 74716 RVA: 0x0023E8EC File Offset: 0x0023CAEC
			public override void IEventsConsumerOnMagIn()
			{
				this.method_50();
			}

			// Token: 0x060123DD RID: 74717 RVA: 0x0023E8F4 File Offset: 0x0023CAF4
			public override void IEventsConsumerOnMagOut()
			{
				this.method_47();
			}

			// Token: 0x060123DE RID: 74718 RVA: 0x0023E8FC File Offset: 0x0023CAFC
			public override void IEventsConsumerOnMagShow()
			{
				this.method_49();
			}

			// Token: 0x060123DF RID: 74719 RVA: 0x0023E904 File Offset: 0x0023CB04
			public override void IEventsConsumerOnMagHide()
			{
				this.method_48();
			}

			// Token: 0x060123E0 RID: 74720 RVA: 0x0023E90C File Offset: 0x0023CB0C
			public override void IEventsConsumerOnOffBoltCatch()
			{
				this.method_40(false);
			}

			// Token: 0x060123E1 RID: 74721 RVA: 0x0023E915 File Offset: 0x0023CB15
			public override void IEventsConsumerOnOnBoltCatch()
			{
				this.method_40(true);
			}

			// Token: 0x060123E2 RID: 74722 RVA: 0x0023E91E File Offset: 0x0023CB1E
			public override void IEventsConsumerOnMalfunctionOff()
			{
				this.method_41();
			}

			// Token: 0x060123E3 RID: 74723 RVA: 0x0023E926 File Offset: 0x0023CB26
			public override void IEventsConsumerOnFiringBullet()
			{
				this.method_42();
			}

			// Token: 0x060123E4 RID: 74724 RVA: 0x0023E92E File Offset: 0x0023CB2E
			public override void IEventsConsumerOnFireEnd()
			{
				this.method_43();
			}

			// Token: 0x060123E5 RID: 74725 RVA: 0x0023E936 File Offset: 0x0023CB36
			public override void IEventsConsumerOnIdleStart()
			{
				this.method_45();
			}

			// Token: 0x060123E6 RID: 74726 RVA: 0x0023E93E File Offset: 0x0023CB3E
			public override void IEventsConsumerOnUseSecondMagForReload()
			{
				this.method_24();
			}

			// Token: 0x060123E7 RID: 74727 RVA: 0x0023E946 File Offset: 0x0023CB46
			public override void IEventsConsumerOnReplaceSecondMag()
			{
				this.method_25();
			}

			// Token: 0x060123E8 RID: 74728 RVA: 0x0023E94E File Offset: 0x0023CB4E
			public override void IEventsConsumerOnPutMagToRig()
			{
				this.method_26();
			}

			// Token: 0x060123E9 RID: 74729 RVA: 0x0023E956 File Offset: 0x0023CB56
			public override void IEventsConsumerOnModChanged()
			{
				this.method_46();
			}

			// Token: 0x060123EA RID: 74730 RVA: 0x0023E95E File Offset: 0x0023CB5E
			public override void IEventsConsumerOnLauncherAppeared()
			{
				this.method_23();
			}

			// Token: 0x060123EB RID: 74731 RVA: 0x0023E966 File Offset: 0x0023CB66
			public override void IEventsConsumerOnLauncherDisappeared()
			{
				this.method_22();
			}

			// Token: 0x060123EC RID: 74732 RVA: 0x0023E96E File Offset: 0x0023CB6E
			public override void IEventsConsumerOnArm()
			{
				this.method_51(true);
			}

			// Token: 0x060123ED RID: 74733 RVA: 0x0023E977 File Offset: 0x0023CB77
			public override void IEventsConsumerOnDisarm()
			{
				this.method_51(false);
			}

			// Token: 0x060123EE RID: 74734 RVA: 0x0023E980 File Offset: 0x0023CB80
			public override void IEventsConsumerOnFoldOn()
			{
				this.method_19(true);
			}

			// Token: 0x060123EF RID: 74735 RVA: 0x0023E989 File Offset: 0x0023CB89
			public override void IEventsConsumerOnFoldOff()
			{
				this.method_19(false);
			}

			// Token: 0x060123F0 RID: 74736 RVA: 0x0023E992 File Offset: 0x0023CB92
			public override void IEventsOnBackpackDrop()
			{
				this.method_44();
			}

			// Token: 0x060123F1 RID: 74737 RVA: 0x0023E99A File Offset: 0x0023CB9A
			public override void IEventsConsumerOnStartUtilityOperation()
			{
				Player.FirearmController.GClass2013 currentOperation = this.CurrentOperation;
				if (currentOperation == null)
				{
					return;
				}
				currentOperation.OnUtilityOperationStartEvent();
			}

			// Token: 0x060123F2 RID: 74738 RVA: 0x0023E9AC File Offset: 0x0023CBAC
			public override void IEventsConsumerOnOnUseProp(bool boolParam)
			{
				base.SetPropVisibility(boolParam);
			}

			// Token: 0x060123F3 RID: 74739 RVA: 0x0023E9B5 File Offset: 0x0023CBB5
			public override void IEventsOnBipodToggle()
			{
				this.method_52();
			}

			// Token: 0x060123F4 RID: 74740 RVA: 0x0023E9BD File Offset: 0x0023CBBD
			public void method_19(bool b)
			{
				this.SetCompassState(false);
				Player.FirearmController.GClass2013 currentOperation = this.CurrentOperation;
				if (currentOperation == null)
				{
					return;
				}
				currentOperation.OnFold(b);
			}

			// Token: 0x060123F5 RID: 74741 RVA: 0x0068195C File Offset: 0x0067FB5C
			public override bool CanExecute(GInterface438 operation)
			{
				return this.method_20(operation) || ((this.CurrentOperation is Player.FirearmController.GClass2037 || this.CurrentOperation is Player.FirearmController.GClass2040) && !(this.CurrentOperation is Player.FirearmController.GClass2038) && !(this.CurrentOperation is Player.FirearmController.GClass2041));
			}

			// Token: 0x060123F6 RID: 74742 RVA: 0x006819B0 File Offset: 0x0067FBB0
			public bool method_20(GInterface438 operation)
			{
				GInterface443 ginterface = operation as GInterface443;
				return ginterface == null || (!this.method_21(operation) && !this._player.InventoryController.IsAnimatedSlot(ginterface.From1));
			}

			// Token: 0x060123F7 RID: 74743 RVA: 0x0023E9D7 File Offset: 0x0023CBD7
			public override void Execute(GInterface438 operation, Callback callback)
			{
				this.CurrentOperation.Execute(operation, callback);
			}

			// Token: 0x060123F8 RID: 74744 RVA: 0x006819F0 File Offset: 0x0067FBF0
			public bool method_21(GInterface438 operation)
			{
				GInterface443 ginterface = operation as GInterface443;
				if (ginterface == null)
				{
					return false;
				}
				if (ginterface.Item1 == this.Item)
				{
					return true;
				}
				if (ginterface.Item1.IsChildOf(this.Item))
				{
					return true;
				}
				if ((ginterface.From1 != null && ginterface.From1.IsChildOf(this.Item, false)) || (ginterface.From1 == null && ginterface.Item1 == this.Item) || (ginterface.To1 != null && ginterface.To1.IsChildOf(this.Item, false)) || (ginterface.To1 == null && ginterface.Item1 == this.Item))
				{
					return true;
				}
				GInterface444 ginterface2 = operation as GInterface444;
				return ginterface2 != null && ((ginterface2.Item2 != null && ginterface2.Item2.IsChildOf(this.Item)) || (ginterface2.From2 != null && ginterface2.From2.IsChildOf(this.Item, false)) || (ginterface2.To2 != null && ginterface2.To2.IsChildOf(this.Item, false)));
			}

			// Token: 0x060123F9 RID: 74745 RVA: 0x0023E9E6 File Offset: 0x0023CBE6
			public void method_22()
			{
				this.CurrentOperation.LauncherDisappeared();
			}

			// Token: 0x060123FA RID: 74746 RVA: 0x0023E9F3 File Offset: 0x0023CBF3
			public void method_23()
			{
				this.CurrentOperation.LauncherAppeared();
			}

			// Token: 0x060123FB RID: 74747 RVA: 0x0023EA00 File Offset: 0x0023CC00
			public void method_24()
			{
				this.CurrentOperation.UseSecondMagForReload();
			}

			// Token: 0x060123FC RID: 74748 RVA: 0x0023EA0D File Offset: 0x0023CC0D
			public void method_25()
			{
				this.CurrentOperation.ReplaceSecondMag();
			}

			// Token: 0x060123FD RID: 74749 RVA: 0x0023EA1A File Offset: 0x0023CC1A
			public void method_26()
			{
				this.CurrentOperation.PutMagToRig();
			}

			// Token: 0x060123FE RID: 74750 RVA: 0x0023EA27 File Offset: 0x0023CC27
			public void method_27()
			{
				this.CurrentOperation.OnJumpOrFall();
			}

			// Token: 0x060123FF RID: 74751 RVA: 0x0023EA34 File Offset: 0x0023CC34
			public void method_28()
			{
				this.CurrentOperation.OnSprintFinished();
			}

			// Token: 0x06012400 RID: 74752 RVA: 0x0023EA41 File Offset: 0x0023CC41
			public void method_29()
			{
				this.CurrentOperation.OnSprintStart();
			}

			// Token: 0x06012401 RID: 74753 RVA: 0x0023EA4E File Offset: 0x0023CC4E
			public void method_30()
			{
				this.CurrentOperation.OnAimingDisabled();
			}

			// Token: 0x06012402 RID: 74754 RVA: 0x0023EA5B File Offset: 0x0023CC5B
			public void method_31()
			{
				this.CurrentOperation.HideWeaponComplete();
			}

			// Token: 0x06012403 RID: 74755 RVA: 0x0023EA68 File Offset: 0x0023CC68
			public void method_32()
			{
				this.CurrentOperation.WeaponAppeared();
			}

			// Token: 0x06012404 RID: 74756 RVA: 0x0023EA75 File Offset: 0x0023CC75
			public void method_33()
			{
				this.CurrentOperation.RemoveAmmoFromChamber();
			}

			// Token: 0x06012405 RID: 74757 RVA: 0x0023EA82 File Offset: 0x0023CC82
			public void method_34()
			{
				this.CurrentOperation.OnAddAmmoInChamber();
			}

			// Token: 0x06012406 RID: 74758 RVA: 0x0023EA8F File Offset: 0x0023CC8F
			public void method_35()
			{
				this.CurrentOperation.OnRemoveShellEvent();
			}

			// Token: 0x06012407 RID: 74759 RVA: 0x0023EA9C File Offset: 0x0023CC9C
			public void method_36()
			{
				this.CurrentOperation.OnShellEjectEvent();
			}

			// Token: 0x06012408 RID: 74760 RVA: 0x0023EAA9 File Offset: 0x0023CCA9
			public void method_37()
			{
				UnityEngine.Debug.LogError("Weapon has DelAmmoFromMag event");
			}

			// Token: 0x06012409 RID: 74761 RVA: 0x0023EAB5 File Offset: 0x0023CCB5
			public void method_38()
			{
				this.CurrentOperation.AddAmmoToMag();
			}

			// Token: 0x0601240A RID: 74762 RVA: 0x0023EAC2 File Offset: 0x0023CCC2
			public void method_39(bool b)
			{
				this.CurrentOperation.OnShowAmmo(b);
			}

			// Token: 0x0601240B RID: 74763 RVA: 0x0023EAD0 File Offset: 0x0023CCD0
			public void method_40(bool isCatched)
			{
				this.CurrentOperation.OnOnOffBoltCatchEvent(isCatched);
			}

			// Token: 0x0601240C RID: 74764 RVA: 0x0023EADE File Offset: 0x0023CCDE
			public void method_41()
			{
				this.CurrentOperation.OnMalfunctionOffEvent();
			}

			// Token: 0x0601240D RID: 74765 RVA: 0x0023EAEB File Offset: 0x0023CCEB
			public void method_42()
			{
				this.CurrentOperation.OnFireEvent();
			}

			// Token: 0x0601240E RID: 74766 RVA: 0x0023EAF8 File Offset: 0x0023CCF8
			public void method_43()
			{
				this.CurrentOperation.OnFireEndEvent();
			}

			// Token: 0x0601240F RID: 74767 RVA: 0x0023EB05 File Offset: 0x0023CD05
			public void method_44()
			{
				this.CurrentOperation.OnBackpackDropEvent();
			}

			// Token: 0x06012410 RID: 74768 RVA: 0x0023EB12 File Offset: 0x0023CD12
			public void method_45()
			{
				this.CurrentOperation.OnIdleStartEvent();
			}

			// Token: 0x06012411 RID: 74769 RVA: 0x0023EB1F File Offset: 0x0023CD1F
			public void method_46()
			{
				this.CurrentOperation.OnModChanged();
			}

			// Token: 0x06012412 RID: 74770 RVA: 0x0023EB2C File Offset: 0x0023CD2C
			public void method_47()
			{
				this.CurrentOperation.OnMagPulledOutFromWeapon();
			}

			// Token: 0x06012413 RID: 74771 RVA: 0x0023EB39 File Offset: 0x0023CD39
			public void method_48()
			{
				this.CurrentOperation.OnMagPuttedToRig();
			}

			// Token: 0x06012414 RID: 74772 RVA: 0x0023EB46 File Offset: 0x0023CD46
			public void method_49()
			{
				this.CurrentOperation.OnMagAppeared();
			}

			// Token: 0x06012415 RID: 74773 RVA: 0x0023EB53 File Offset: 0x0023CD53
			public void method_50()
			{
				this.CurrentOperation.OnMagInsertedToWeapon();
			}

			// Token: 0x06012416 RID: 74774 RVA: 0x0023EB60 File Offset: 0x0023CD60
			public void method_51(bool armed)
			{
				this.firearmsAnimator_0.SetHammerArmed(armed);
				this.Item.Armed = armed;
			}

			// Token: 0x06012417 RID: 74775 RVA: 0x0023EB7A File Offset: 0x0023CD7A
			public void method_52()
			{
				this.CurrentOperation.OnBipodToggleEvent();
			}

			// Token: 0x06012418 RID: 74776 RVA: 0x00681AFC File Offset: 0x0067FCFC
			public override void Spawn(float animationSpeed, Action callback)
			{
				Player.FirearmController.Class1241 @class = new Player.FirearmController.Class1241();
				@class.callback = callback;
				@class.firearmController_0 = this;
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				base.InitiateOperation<Player.FirearmController.GClass2055>().Start(new Action(@class.method_0));
			}

			// Token: 0x06012419 RID: 74777 RVA: 0x00681B40 File Offset: 0x0067FD40
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.FirearmController.Class1242 @class = new Player.FirearmController.Class1242();
				@class.callback = callback;
				if (base.Destroyed)
				{
					this.CurrentOperation.HideWeapon(@class.callback, fastDrop, nextControllerItem);
					return;
				}
				base.Destroyed = true;
				this._player.MovementContext.OnStateChanged -= this.method_17;
				this._player.Physical.OnSprintStateChangedEvent -= this.method_16;
				this.RemoveBallisticCalculator();
				@class.inventoryOperation = this._player.method_138(this.Item);
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				Action onHidden = new Action(@class.method_0);
				this.CurrentOperation.HideWeapon(onHidden, fastDrop, nextControllerItem);
			}

			// Token: 0x0601241A RID: 74778 RVA: 0x0023EB87 File Offset: 0x0023CD87
			public virtual void RemoveBallisticCalculator()
			{
				Singleton<GInterface169>.Instance.RemoveBallisticCalculator(this.Item);
			}

			// Token: 0x0601241B RID: 74779 RVA: 0x00681BFC File Offset: 0x0067FDFC
			public override void Destroy()
			{
				Action action = this.action_2;
				if (action != null)
				{
					action();
				}
				this.action_2 = null;
				this.weaponPrefab_0 = null;
				GClass768 ccv = this.CCV;
				if (ccv != null)
				{
					ccv.Dispose();
				}
				this.CCV = null;
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				this.weaponManagerClass.OnSmoothSensetivityChange -= this.method_1;
				this.weaponManagerClass.OnSmoothScopeStateChanged -= this.method_2;
				Player.FirearmController.UnderbarrelManagerClass underbarrelManagerClass = this.underbarrelManagerClass;
				if (underbarrelManagerClass != null)
				{
					underbarrelManagerClass.Clear();
				}
				if (this.firearmsAnimator_0 != null)
				{
					this.firearmsAnimator_0.SetBoltCatch(false);
				}
				base.Destroy();
				this.firearmsAnimator_0 = null;
				this.BallisticsCalculator = null;
				this.weaponManagerClass.ValidateScopeSmoothZoomUpdate(false);
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x0601241C RID: 74780 RVA: 0x0023EB99 File Offset: 0x0023CD99
			public override bool SupportPickup()
			{
				return true;
			}

			// Token: 0x0601241D RID: 74781 RVA: 0x0023EB9C File Offset: 0x0023CD9C
			public override void Pickup(bool p)
			{
				this.CurrentOperation.Pickup(p);
			}

			// Token: 0x0601241E RID: 74782 RVA: 0x0023EBAA File Offset: 0x0023CDAA
			public override void Interact(bool isInteracting, int actionIndex)
			{
				this.CurrentOperation.Interact(isInteracting, actionIndex);
			}

			// Token: 0x0601241F RID: 74783 RVA: 0x0023EBB9 File Offset: 0x0023CDB9
			public override bool CanInteract()
			{
				return this.CurrentOperation is Player.FirearmController.GClass2037 || this.CurrentOperation is Player.FirearmController.GClass2040 || this.CurrentOperation is Player.FirearmController.GClass2028;
			}

			// Token: 0x06012420 RID: 74784 RVA: 0x0023EBE5 File Offset: 0x0023CDE5
			public override bool InCanNotBeInterruptedOperation()
			{
				return this.CurrentOperation.CanNotBeInterrupted();
			}

			// Token: 0x06012421 RID: 74785 RVA: 0x0023EBF2 File Offset: 0x0023CDF2
			public override void Loot(bool p)
			{
				this.CurrentOperation.Loot(p);
			}

			// Token: 0x06012422 RID: 74786 RVA: 0x0023EC00 File Offset: 0x0023CE00
			public override bool IsInInteraction()
			{
				return this.firearmsAnimator_0.IsInInteraction;
			}

			// Token: 0x06012423 RID: 74787 RVA: 0x00681CD4 File Offset: 0x0067FED4
			public override bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction() || this.firearmsAnimator_0.GetLayerWeight(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX) >= float.Epsilon || this.firearmsAnimator_0.Animator.IsInTransition(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX);
			}

			// Token: 0x06012424 RID: 74788 RVA: 0x0023EC0D File Offset: 0x0023CE0D
			public virtual void UnderbarrelSightingRangeDown()
			{
				this.CurrentOperation.UnderbarrelSightingRangeDown();
			}

			// Token: 0x06012425 RID: 74789 RVA: 0x0023EC1A File Offset: 0x0023CE1A
			public virtual void UnderbarrelSightingRangeUp()
			{
				this.CurrentOperation.UnderbarrelSightingRangeUp();
			}

			// Token: 0x06012426 RID: 74790 RVA: 0x0023EC27 File Offset: 0x0023CE27
			public virtual bool IsInLauncherMode()
			{
				return this.CurrentOperation is Player.FirearmController.GClass2040 || this.CurrentOperation is Player.FirearmController.GClass2034 || this.CurrentOperation is Player.FirearmController.GClass2042;
			}

			// Token: 0x06012427 RID: 74791 RVA: 0x0023EC53 File Offset: 0x0023CE53
			public virtual bool ToggleLauncher(Action callback = null)
			{
				return this.CurrentOperation.ToggleLauncher(callback);
			}

			// Token: 0x06012428 RID: 74792 RVA: 0x0023EC61 File Offset: 0x0023CE61
			public virtual void ChangeLeftStance()
			{
				if (this.Blindfire)
				{
					return;
				}
				if (this._player.MovementContext.IsInMountedState)
				{
					return;
				}
				this._player.RemoveLeftHandItem(1f);
				this.CurrentOperation.ToggleLeftStance();
			}

			// Token: 0x06012429 RID: 74793 RVA: 0x00681D24 File Offset: 0x0067FF24
			public virtual bool ToggleBipod()
			{
				return this.HasBipod && !this._player.MovementContext.PlayerAnimator.AnimatedInteractions.IsScheduleDenied && !this._player.MovementContext.IsInMountedState && !this.IsOverlap && !this._player.IsSprintEnabled && this._player.MovementContext.PlayerAnimator.AnimatedInteractions.CanInteract && this._player.HandsController.FirearmsAnimator.IsIdling() && this.CurrentOperation.ToggleBipod();
			}

			// Token: 0x0601242A RID: 74794 RVA: 0x0023EC9A File Offset: 0x0023CE9A
			public virtual void SetTriggerPressed(bool pressed)
			{
				this.CurrentOperation.SetTriggerPressed(pressed && this.method_53());
			}

			// Token: 0x0601242B RID: 74795 RVA: 0x00681DC8 File Offset: 0x0067FFC8
			public bool method_53()
			{
				bool flag = this._player.MovementContext.PlayerAnimatorGetIsVaulting();
				BackendConfigSettingsClass.VaultingGlobalSettings vaultingSettings = Singleton<BackendConfigSettingsClass>.Instance.VaultingSettings;
				IVaultingParameters vaultingParameters = this._player.VaultingParameters;
				EVaultingStrategy evaultingStrategy = flag ? (this._player.MovementContext.PlayerAnimator.GetDoVault() ? EVaultingStrategy.Vault : EVaultingStrategy.Climb) : EVaultingStrategy.None;
				return (evaultingStrategy != EVaultingStrategy.Vault || !flag || vaultingParameters.VaultingHeight <= vaultingSettings.MovesSettings.VaultSettings.MaxWithoutHandHeight) && (evaultingStrategy != EVaultingStrategy.Climb || !flag || vaultingParameters.VaultingHeight <= vaultingSettings.MovesSettings.ClimbSettings.MaxWithoutHandHeight);
			}

			// Token: 0x0601242C RID: 74796 RVA: 0x0023ECB3 File Offset: 0x0023CEB3
			public virtual bool CanPressTrigger()
			{
				return true;
			}

			// Token: 0x0601242D RID: 74797 RVA: 0x0023ECB6 File Offset: 0x0023CEB6
			public virtual void ToggleAim()
			{
				if (this.Blindfire)
				{
					return;
				}
				this._player.RemoveLeftHandItem(1f);
				this.SetCompassState(false);
				this.SetAim(!this.IsAiming);
			}

			// Token: 0x0601242E RID: 74798 RVA: 0x0023ECE7 File Offset: 0x0023CEE7
			public virtual void SetAim(int scopeIndex)
			{
				this.Item.AimIndex.Value = Mathf.Max(0, scopeIndex);
				this.SetAim(scopeIndex >= 0);
			}

			// Token: 0x0601242F RID: 74799 RVA: 0x00681E64 File Offset: 0x00680064
			public virtual void SetAim(bool value)
			{
				if (this.Blindfire)
				{
					return;
				}
				if (this._player.UsedSimplifiedSkeleton)
				{
					this._player.MovementContext.PlayerAnimator.SetAiming(value);
				}
				if (this._player.MovementContext.IsInMountedState && Mathf.Abs(this.weaponManagerClass.ProceduralWeaponAnimation.CurrentScope.Rotation) >= EFTHardSettings.Instance.SCOPE_ROTATION_THRESHOLD)
				{
					value = false;
				}
				if (this.Item.IsOneOff)
				{
					value = false;
				}
				this.AimingInterruptedByOverlap = false;
				bool isAiming = this.IsAiming;
				this.CurrentOperation.SetAiming(value);
				this._player.ProceduralWeaponAnimation.CheckShouldMoveWeaponCloser();
				this._player.Boolean_0 &= !value;
				if (isAiming == this.IsAiming)
				{
					return;
				}
				this._player.ProceduralWeaponAnimation.Shootingg.CurrentRecoilEffect.WeaponRecoilEffect.SetAiming(value);
				this._player.method_60(0.2f, false);
				if (value)
				{
					this.method_60();
				}
			}

			// Token: 0x06012430 RID: 74800 RVA: 0x00681F70 File Offset: 0x00680170
			public override void SetInventoryOpened(bool opened)
			{
				if (opened)
				{
					this._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromOpenInventory();
				}
				else
				{
					this._player.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromCloseInventory();
				}
				this.CurrentOperation.SetInventoryOpened(opened);
				MovementState currentManagedState = this._player.CurrentManagedState;
				if (currentManagedState != null)
				{
					currentManagedState.OnInventory(opened);
				}
				this._player.InventoryOpenRaiseAction(opened);
			}

			// Token: 0x06012431 RID: 74801 RVA: 0x0023ED0D File Offset: 0x0023CF0D
			public override bool IsInventoryOpen()
			{
				return this.InventoryOpened;
			}

			// Token: 0x06012432 RID: 74802 RVA: 0x00681FDC File Offset: 0x006801DC
			public virtual void ChangeAimingMode()
			{
				if (this.Blindfire)
				{
					return;
				}
				if (this._player._leftHandController.InAction)
				{
					return;
				}
				this._player.RemoveLeftHandItem(3f);
				int num = this.Item.AimIndex.Value + 1;
				if (num >= this.weaponManagerClass.ProceduralWeaponAnimation.ScopeAimTransforms.Count)
				{
					num = 0;
				}
				if (this._player.MovementContext.IsInMountedState)
				{
					while (num != this.Item.AimIndex.Value && Mathf.Abs(this.weaponManagerClass.ProceduralWeaponAnimation.ScopeAimTransforms[num].Rotation) >= EFTHardSettings.Instance.SCOPE_ROTATION_THRESHOLD)
					{
						num++;
						if (num >= this.weaponManagerClass.ProceduralWeaponAnimation.ScopeAimTransforms.Count)
						{
							num = 0;
						}
					}
					if (num == this.Item.AimIndex.Value || Mathf.Abs(this.weaponManagerClass.ProceduralWeaponAnimation.ScopeAimTransforms[num].Rotation) >= EFTHardSettings.Instance.SCOPE_ROTATION_THRESHOLD)
					{
						return;
					}
				}
				this.Item.AimIndex.Value = num;
				this.UpdateSensitivity();
				this._player.RaiseSightChangedEvent(this._player.ProceduralWeaponAnimation.CurrentAimingMod);
			}

			// Token: 0x06012433 RID: 74803 RVA: 0x0068212C File Offset: 0x0068032C
			public virtual void ChangeAimingMode(int modeIndex)
			{
				if (this.Blindfire)
				{
					return;
				}
				this.Item.AimIndex.Value = modeIndex;
				this.UpdateSensitivity();
				this._player.RaiseSightChangedEvent(this._player.ProceduralWeaponAnimation.CurrentAimingMod);
			}

			// Token: 0x06012434 RID: 74804 RVA: 0x0023ED15 File Offset: 0x0023CF15
			public virtual bool ChangeFireMode(Weapon.EFireMode fireMode)
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				this._player.RemoveLeftHandItem(3f);
				return this.CurrentOperation.ChangeFireMode(fireMode);
			}

			// Token: 0x06012435 RID: 74805 RVA: 0x00682178 File Offset: 0x00680378
			public virtual bool CheckFireMode()
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				this._player.RemoveLeftHandItem(3f);
				if (this._player.MovementContext.IsInMountedState)
				{
					this._player.MovementContext.StartExitingMountedState();
				}
				return this.CurrentOperation.CheckFireMode();
			}

			// Token: 0x06012436 RID: 74806 RVA: 0x006821E0 File Offset: 0x006803E0
			public virtual bool ExamineWeapon()
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				this._player.RemoveLeftHandItem(3f);
				if ((!(this.CurrentOperation is Player.FirearmController.GClass2037) && !(this.CurrentOperation is Player.FirearmController.GClass2040)) || this._player.InventoryController.HasAnyHandsAction())
				{
					return false;
				}
				if (!this.CurrentOperation.ExamineWeapon())
				{
					return false;
				}
				if (this._player.MovementContext.IsInMountedState)
				{
					this._player.MovementContext.StartExitingMountedState();
				}
				if ((this.Item.MalfState.State == Weapon.EMalfunctionState.Jam || this.Item.MalfState.State == Weapon.EMalfunctionState.Feed) && !this.Item.MalfState.IsKnownMalfunction(this._player.ProfileId))
				{
					this.firearmsAnimator_0.MisfireSlideUnknown(false);
					this._player.InventoryController.ExamineMalfunction(this.Item, false);
				}
				return true;
			}

			// Token: 0x06012437 RID: 74807 RVA: 0x0023ED51 File Offset: 0x0023CF51
			public virtual void RollCylinder(bool rollToZeroCamora)
			{
				if (this.Blindfire)
				{
					return;
				}
				if (this._player._leftHandController.InAction)
				{
					return;
				}
				this._player.RemoveLeftHandItem(3f);
				this.CurrentOperation.RollCylinder(null, rollToZeroCamora);
			}

			// Token: 0x06012438 RID: 74808 RVA: 0x006822E4 File Offset: 0x006804E4
			public virtual bool CheckAmmo()
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				this._player.RemoveLeftHandItem(3f);
				this._player.MovementContext.PlayerAnimator.AnimatedInteractions.ForceStopInteractions();
				if (this._player.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying)
				{
					return false;
				}
				if (this._player.MovementContext.IsInMountedState)
				{
					this._player.MovementContext.StartExitingMountedState();
				}
				return this.CurrentOperation.CheckAmmo();
			}

			// Token: 0x06012439 RID: 74809 RVA: 0x00682384 File Offset: 0x00680584
			public virtual bool CheckChamber()
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				if (this.Item is RocketLauncherItemClass)
				{
					return false;
				}
				this._player.RemoveLeftHandItem(3f);
				if (this._player.MovementContext.IsInMountedState)
				{
					this._player.MovementContext.StartExitingMountedState();
				}
				return this.CurrentOperation.CheckChamber();
			}

			// Token: 0x0601243A RID: 74810 RVA: 0x006823FC File Offset: 0x006805FC
			public virtual void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback callback)
			{
				using (GClass4062.BeginSampleWithToken("FirearmController:1076.ReloadMag", "ReloadMag"))
				{
					if (!this.Blindfire)
					{
						this._player.RemoveLeftHandItem(3f);
						this._player.MovementContext.PlayerAnimator.AnimatedInteractions.ForceStopInteractions();
						if (!this._player.MovementContext.PlayerAnimator.AnimatedInteractions.IsInteractionPlaying)
						{
							if (this.CanStartReload())
							{
								this.CurrentOperation.ReloadMag(magazine, itemAddress, callback, null);
							}
							else if (callback != null)
							{
								callback.Fail("Cant StartReload");
							}
						}
					}
				}
			}

			// Token: 0x0601243B RID: 74811 RVA: 0x006824B8 File Offset: 0x006806B8
			public virtual void QuickReloadMag(MagazineItemClass magazine, Callback callback)
			{
				using (GClass4062.BeginSampleWithToken("FirearmController:1090.QuickReloadMag", "QuickReloadMag"))
				{
					if (!this.Blindfire)
					{
						this._player.RemoveLeftHandItem(3f);
						if (this.CanStartReload())
						{
							this.CurrentOperation.QuickReloadMag(magazine, callback, null);
						}
						else if (callback != null)
						{
							callback.Fail("Cant StartReload");
						}
					}
				}
			}

			// Token: 0x0601243C RID: 74812 RVA: 0x0023ED8C File Offset: 0x0023CF8C
			public virtual void ReloadGrenadeLauncher(AmmoPackReloadingClass foundItem, Callback callback)
			{
				if (this.Blindfire)
				{
					return;
				}
				this._player.RemoveLeftHandItem(3f);
				if (this.CanStartReload())
				{
					this.CurrentOperation.ReloadGrenadeLauncher(foundItem, callback);
					return;
				}
				if (callback != null)
				{
					callback.Fail("Cant StartReload");
				}
			}

			// Token: 0x0601243D RID: 74813 RVA: 0x00682538 File Offset: 0x00680738
			public virtual void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback callback, bool quickReload = false)
			{
				if (this.Blindfire)
				{
					return;
				}
				this._player.RemoveLeftHandItem(3f);
				if (this.Item.GetCurrentMagazine() == null)
				{
					return;
				}
				if (this.CanStartReload())
				{
					this.CurrentOperation.ReloadCylinderMagazine(ammoPack, callback, null, quickReload);
					return;
				}
				if (callback != null)
				{
					callback.Fail("Cant StartReload");
				}
			}

			// Token: 0x0601243E RID: 74814 RVA: 0x00682594 File Offset: 0x00680794
			public virtual void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback callback)
			{
				if (this.Item.GetCurrentMagazine() == null)
				{
					return;
				}
				if (this.Blindfire)
				{
					return;
				}
				this._player.RemoveLeftHandItem(3f);
				if (!this.CanStartReload())
				{
					if (callback != null)
					{
						callback.Fail("Cant StartReload");
					}
					return;
				}
				if (this.Item is RevolverItemClass)
				{
					this.CurrentOperation.ReloadCylinderMagazine(ammoPack, callback, null, false);
					return;
				}
				this.CurrentOperation.ReloadWithAmmo(ammoPack, callback, null);
			}

			// Token: 0x0601243F RID: 74815 RVA: 0x0023EDCB File Offset: 0x0023CFCB
			public virtual void ReloadBarrels(AmmoPackReloadingClass ammoPack, ItemAddress placeToPutContainedAmmoMagazine, Callback callback)
			{
				if (this.Blindfire)
				{
					return;
				}
				if (this.CanStartReload() && ammoPack.AmmoCount > 0)
				{
					this.CurrentOperation.ReloadBarrels(ammoPack, placeToPutContainedAmmoMagazine, callback, null);
					return;
				}
				if (callback != null)
				{
					callback.Fail("Cant StartReload");
				}
			}

			// Token: 0x06012440 RID: 74816 RVA: 0x0068260C File Offset: 0x0068080C
			public virtual bool CanStartReload()
			{
				if (this.Blindfire)
				{
					return false;
				}
				if (this._player._leftHandController.InAction)
				{
					return false;
				}
				MagazineItemClass currentMagazine = this.Item.GetCurrentMagazine();
				if (currentMagazine != null && !this._player.InventoryController.Examined(currentMagazine))
				{
					NotificationManagerClass.DisplaySingletonWarningNotification("Attached magazine is not examined.".Localized(null), ENotificationDurationType.Default);
					return false;
				}
				bool flag = (this.Item.MustBoltBeOpennedForExternalReload || this.Item.MustBoltBeOpennedForInternalReload) && this.Item.MalfState.IsAnyMalfExceptMisfire;
				if (this.Item.MalfState.State == Weapon.EMalfunctionState.Feed || flag)
				{
					this._player.HandsController.FirearmsAnimator.MisfireSlideUnknown(false);
					this._player.InventoryController.ExamineMalfunction(this.Item, false);
					return false;
				}
				return this.CurrentOperation.CanStartReload();
			}

			// Token: 0x06012441 RID: 74817 RVA: 0x0023EE05 File Offset: 0x0023D005
			public virtual bool ShouldForceQuickReload()
			{
				IHealthController healthController = this._player.HealthController;
				return ((healthController != null) ? healthController.FindActiveEffect<GInterface360>(EBodyPart.Head) : null) != null;
			}

			// Token: 0x06012442 RID: 74818 RVA: 0x006826EC File Offset: 0x006808EC
			public override void ManualUpdate(float deltaTime)
			{
				base.ManualUpdate(deltaTime);
				FirearmsAnimator firearmsAnimator = this.firearmsAnimator_0;
				if (firearmsAnimator != null)
				{
					firearmsAnimator.SetAimAngle(this._player.Pitch);
				}
				if (this._player.MovementContext.FreefallTime > 0.5f)
				{
					this.SetAim(false);
				}
				this.bool_5 = true;
			}

			// Token: 0x06012443 RID: 74819 RVA: 0x00682744 File Offset: 0x00680944
			public Dictionary<string, LightComponent> GetCurrentLightStatus()
			{
				return this.Item.AllSlots.Select(new Func<Slot, Item>(Player.FirearmController.Class1237.class1237_0.method_8)).GetComponents<LightComponent>().ToDictionary(new Func<LightComponent, string>(Player.FirearmController.Class1237.class1237_0.method_9), new Func<LightComponent, LightComponent>(Player.FirearmController.Class1237.class1237_0.method_10));
			}

			// Token: 0x06012444 RID: 74820 RVA: 0x006827C8 File Offset: 0x006809C8
			public Dictionary<string, SightComponent> GetCurrentScopesStatus()
			{
				return this.Item.AllSlots.Select(new Func<Slot, Item>(Player.FirearmController.Class1237.class1237_0.method_11)).GetComponents<SightComponent>().ToDictionary(new Func<SightComponent, string>(Player.FirearmController.Class1237.class1237_0.method_12), new Func<SightComponent, SightComponent>(Player.FirearmController.Class1237.class1237_0.method_13));
			}

			// Token: 0x06012445 RID: 74821 RVA: 0x0068284C File Offset: 0x00680A4C
			public virtual bool SetLightsState(FirearmLightStateStruct[] lightsStates, bool force = false, bool animated = true)
			{
				if (!force && !this.CurrentOperation.CanChangeLightState(lightsStates))
				{
					return false;
				}
				Dictionary<string, LightComponent> currentLightStatus = this.GetCurrentLightStatus();
				foreach (FirearmLightStateStruct firearmLightStateStruct in lightsStates)
				{
					if (currentLightStatus.ContainsKey(firearmLightStateStruct.Id))
					{
						LightComponent lightComponent = currentLightStatus[firearmLightStateStruct.Id];
						lightComponent.IsActive = firearmLightStateStruct.IsActive;
						lightComponent.SelectedMode = firearmLightStateStruct.LightMode;
						if (lightComponent.IsActive && this._player.AIData != null)
						{
							this._player.AIData.TacticalModeChange(true);
						}
					}
					else
					{
						UnityEngine.Debug.LogErrorFormat("Item {0} doesn't exist in current weapon", new object[]
						{
							firearmLightStateStruct.Id
						});
					}
				}
				IAIData aidata = this._player.AIData;
				if (aidata != null)
				{
					aidata.TacticalModeChange(currentLightStatus.Any(new Func<KeyValuePair<string, LightComponent>, bool>(Player.FirearmController.Class1237.class1237_0.method_14)));
				}
				this.CurrentOperation.SetLightsState(lightsStates, force, animated);
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer)
				{
					this._player.Spirit.RecheckSwitch();
				}
				this.UpdateHipInaccuracy();
				return true;
			}

			// Token: 0x06012446 RID: 74822 RVA: 0x0023EE22 File Offset: 0x0023D022
			public override bool CanRemove()
			{
				return this.CurrentOperation.CanRemove();
			}

			// Token: 0x06012447 RID: 74823 RVA: 0x0068296C File Offset: 0x00680B6C
			public virtual void SetScopeMode(FirearmScopeStateStruct[] scopeStates)
			{
				if (!this.CurrentOperation.CanChangeScopeStates(scopeStates))
				{
					return;
				}
				Dictionary<string, SightComponent> currentScopesStatus = this.GetCurrentScopesStatus();
				foreach (FirearmScopeStateStruct firearmScopeStateStruct in scopeStates)
				{
					if (currentScopesStatus.ContainsKey(firearmScopeStateStruct.Id))
					{
						SightComponent sightComponent = currentScopesStatus[firearmScopeStateStruct.Id];
						sightComponent.SetScopeMode(firearmScopeStateStruct.ScopeIndexInsideSight, firearmScopeStateStruct.ScopeMode);
						sightComponent.SetSelectedOpticCalibrationPoint(firearmScopeStateStruct.ScopeIndexInsideSight, firearmScopeStateStruct.ScopeCalibrationIndex);
					}
					else
					{
						UnityEngine.Debug.LogError("Item " + firearmScopeStateStruct.Id + " doesn't exist in current weapon");
					}
				}
				this._player.RaiseSightChangedEvent(this._player.ProceduralWeaponAnimation.CurrentAimingMod);
				this.UpdateSensitivity();
				this.CurrentOperation.SetScopeMode(scopeStates);
			}

			// Token: 0x06012448 RID: 74824 RVA: 0x0023EE2F File Offset: 0x0023D02F
			public override bool IsHandsProcessing()
			{
				return this.firearmsAnimator_0.IsHandsProcessing();
			}

			// Token: 0x06012449 RID: 74825 RVA: 0x0023EE3C File Offset: 0x0023D03C
			public override void ShowGesture(EInteraction gesture)
			{
				this.CurrentOperation.ShowGesture(gesture);
				if (Singleton<BotEventHandler>.Instantiated)
				{
					Singleton<BotEventHandler>.Instance.ShowGesture(this._player, gesture);
				}
			}

			// Token: 0x0601244A RID: 74826 RVA: 0x0023EE62 File Offset: 0x0023D062
			public override void BlindFire(int b)
			{
				this.CurrentOperation.BlindFire(b);
			}

			// Token: 0x17002F76 RID: 12150
			// (get) Token: 0x0601244B RID: 74827 RVA: 0x00682A2C File Offset: 0x00680C2C
			public bool CanSetBlindFire
			{
				get
				{
					return !(this.Weapon is RocketLauncherItemClass) && !(this.CurrentOperation is Player.FirearmController.GClass2038) && (this.CurrentOperation is Player.FirearmController.GClass2037 || this.CurrentOperation is Player.FirearmController.GClass2040) && !this.InventoryOpened;
				}
			}

			// Token: 0x17002F77 RID: 12151
			// (get) Token: 0x0601244C RID: 74828 RVA: 0x0023EE70 File Offset: 0x0023D070
			public bool IsBipodsOperation
			{
				get
				{
					return this.CurrentOperation is Player.FirearmController.Class1270;
				}
			}

			// Token: 0x0601244D RID: 74829 RVA: 0x0023EE80 File Offset: 0x0023D080
			public float method_54(Weapon weapon)
			{
				return weapon.GetBarrelDeviation();
			}

			// Token: 0x0601244E RID: 74830 RVA: 0x0023EE88 File Offset: 0x0023D088
			public List<LightComponent> GetAllLightMods()
			{
				return this.Item.AllSlots.Select(new Func<Slot, Item>(Player.FirearmController.Class1237.class1237_0.method_15)).GetComponents<LightComponent>().ToList<LightComponent>();
			}

			// Token: 0x0601244F RID: 74831 RVA: 0x00682A78 File Offset: 0x00680C78
			public void method_55(AmmoItemClass flareItem)
			{
				Transform transform = TransformHelperClass.FindTransformRecursiveContains(base.WeaponRoot.transform, "fireport", false);
				this.InitiateFlare(flareItem, transform.position, -transform.up);
			}

			// Token: 0x06012450 RID: 74832 RVA: 0x00682AB4 File Offset: 0x00680CB4
			public void method_56(AmmoItemClass rocketItem)
			{
				Transform transform = TransformHelperClass.FindTransformRecursiveContains(base.WeaponRoot.transform, "fireport", false);
				Transform smokeport = TransformHelperClass.FindTransformRecursiveContains(base.WeaponRoot.transform, "smokeport", false);
				this.InitiateRocket(rocketItem, transform.position, -transform.up, smokeport);
			}

			// Token: 0x06012451 RID: 74833 RVA: 0x0023EEC3 File Offset: 0x0023D0C3
			public void InitiateFlare(AmmoItemClass flareItem, Vector3 shotPosition, Vector3 forward)
			{
				this.CreateFlareShot(flareItem, shotPosition, forward);
				this.method_59(this.weaponSoundPlayer_0, flareItem, shotPosition, forward, false);
				this.weaponManagerClass.PlayShotEffects(this._player.IsVisible, this._player.SqrCameraDistance);
			}

			// Token: 0x06012452 RID: 74834 RVA: 0x0023EEFF File Offset: 0x0023D0FF
			public void InitiateRocket(AmmoItemClass rocketItem, Vector3 shotPosition, Vector3 forward, Transform smokeport)
			{
				this.CreateRocketShot(rocketItem, shotPosition, forward, smokeport);
				this.method_59(this.weaponSoundPlayer_0, rocketItem, shotPosition, forward, false);
				this.weaponManagerClass.PlayShotEffects(this._player.IsVisible, this._player.SqrCameraDistance);
			}

			// Token: 0x06012453 RID: 74835 RVA: 0x00682B08 File Offset: 0x00680D08
			public virtual void AdjustShotVectors(ref Vector3 position, ref Vector3 direction)
			{
				position -= direction * this.WeaponLn / 5f;
				if (this._player.ProceduralWeaponAnimation.ShotNeedsFovAdjustments && this._player.RibcageScaleCurrent < 1f)
				{
					Transform self = this.HandsHierarchy.Self;
					Vector3 position2 = self.InverseTransformPoint(position);
					Vector3 direction2 = self.InverseTransformDirection(direction);
					position2.z *= this._player.RibcageScaleCurrent;
					direction2.z *= this._player.RibcageScaleCurrent;
					position = self.TransformPoint(position2);
					direction = self.TransformDirection(direction2).normalized;
				}
			}

			// Token: 0x06012454 RID: 74836 RVA: 0x00682BDC File Offset: 0x00680DDC
			public void method_57(LauncherItemClass launcher, AmmoItemClass ammo)
			{
				Vector3 vector = this.func_0() ? this._player.LookDirection : this.underbarrelManagerClass.Fireport.Original.TransformDirection(this._player.LocalShotDirection);
				Vector3 vector2 = this.func_0() ? this._player.AIData.BotOwner.LookSensor.ShootStartPos : this.underbarrelManagerClass.Fireport.position;
				float ammoFactor = ammo.AmmoFactor;
				float num = 1f;
				this.AdjustShotVectors(ref vector2, ref vector);
				ammo.buckshotDispersion = launcher.TotalShotgunDispersion;
				float barrelDeviation = launcher.GetBarrelDeviation();
				Vector3 shotDirection = vector * 100f + launcher.CenterOfImpact * ammoFactor * num * barrelDeviation * UnityEngine.Random.insideUnitSphere;
				this.InitiateShot(launcher, ammo, vector2, shotDirection.normalized, vector2, 0, 0f);
				float num2 = 1f;
				this.float_5 = num2 + (float)ammo.ammoRec / 100f;
				this.method_59(this.underbarrelManagerClass.WeaponSoundPlayer, ammo, vector2, shotDirection, false);
				if (ammo.AmmoTemplate.IsLightAndSoundShot)
				{
					this.method_62(vector2, vector);
					this.LightAndSoundShot(vector2, vector, ammo.AmmoTemplate);
				}
			}

			// Token: 0x06012455 RID: 74837 RVA: 0x00682D20 File Offset: 0x00680F20
			public void method_58(Weapon weapon, AmmoItemClass ammo, int chamberIndex, bool multiShot = false)
			{
				Transform original = this.CurrentFireport.Original;
				Vector3 position = this.CurrentFireport.position;
				Vector3 vector = this.func_0() ? this._player.LookDirection : this.WeaponDirection;
				Vector3 shotPosition = this.func_0() ? this._player.AIData.BotOwner.LookSensor.ShootStartPos : position;
				float ammoFactor = ammo.AmmoFactor;
				float num = 1f;
				BackendConfigSettingsClass instance = Singleton<BackendConfigSettingsClass>.Instance;
				this.AdjustShotVectors(ref shotPosition, ref vector);
				ammo.buckshotDispersion = this.float_4;
				this.CurrentChamberIndex = chamberIndex;
				weapon.OnShot(ammo.DurabilityBurnModificator, ammo.HeatFactor, this._player.Skills.WeaponDurabilityLosOnShotReduce.Value, instance.Overheat, GClass1891.PastTime);
				float overheatProblemsStart = instance.Overheat.OverheatProblemsStart;
				if (weapon.MalfState.LastShotOverheat >= overheatProblemsStart)
				{
					num = Mathf.Lerp(1f, instance.Overheat.MaxCOIIncreaseMult, (weapon.MalfState.LastShotOverheat - overheatProblemsStart) / (instance.Overheat.MaxOverheat - overheatProblemsStart));
				}
				int num2;
				if (multiShot)
				{
					if ((num2 = ((chamberIndex > 0) ? 1 : 0)) != 0)
					{
						float x = UnityEngine.Random.Range(this.weaponPrefab_0.DupletAccuracyPenaltyX.x, this.weaponPrefab_0.DupletAccuracyPenaltyX.y);
						float y = UnityEngine.Random.Range(this.weaponPrefab_0.DupletAccuracyPenaltyY.x, this.weaponPrefab_0.DupletAccuracyPenaltyY.y);
						Vector3 vector2 = new Vector3(x, y);
						float angle = vector2.y * -1f;
						vector = Quaternion.AngleAxis(vector2.x, original.forward) * vector;
						vector = Quaternion.AngleAxis(angle, original.right) * vector;
					}
				}
				else
				{
					num2 = 0;
				}
				float num3 = weapon.CylinderHammerClosed ? (weapon.DoubleActionAccuracyPenalty * (1f - this.gclass2250_0.DoubleActionRecoilReduce) * weapon.StockDoubleActionAccuracyPenaltyMult) : 0f;
				float num4 = this.method_54(weapon);
				double num5 = weapon.GetItemComponent<BuffComponent>().WeaponSpread;
				if (num5.ApproxEquals(0.0))
				{
					num5 = 1.0;
				}
				Vector3 shotDirection = this.func_1() ? vector : (vector * 100f + (this.float_3 + num3) * ammoFactor * num * num4 * (float)num5 * UnityEngine.Random.insideUnitSphere);
				this.InitiateShot(weapon, ammo, shotPosition, shotDirection.normalized, position, chamberIndex, weapon.MalfState.LastShotOverheat);
				float num6 = (num2 != 0) ? 1.5f : 1f;
				this.float_5 = num6 + (float)ammo.ammoRec / 100f;
				this.method_59(this.weaponSoundPlayer_0, ammo, shotPosition, shotDirection, multiShot);
				if (ammo.AmmoTemplate.IsLightAndSoundShot)
				{
					this.method_62(position, vector);
					this.LightAndSoundShot(position, vector, ammo.AmmoTemplate);
				}
				if (this._player.IsAI)
				{
					IAIData aidata = this._player.AIData;
					if (aidata == null)
					{
						return;
					}
					BotOwner botOwner = aidata.BotOwner;
					if (botOwner == null)
					{
						return;
					}
					BotMemoryClass memory = botOwner.Memory;
					if (memory == null)
					{
						return;
					}
					EnemyInfo goalEnemy = memory.GoalEnemy;
					if (goalEnemy == null)
					{
						return;
					}
					goalEnemy.SetLastShootTime();
				}
			}

			// Token: 0x06012456 RID: 74838 RVA: 0x0068304C File Offset: 0x0068124C
			public void method_59(WeaponSoundPlayer weaponSoundPlayer, AmmoItemClass ammo, Vector3 shotPosition, Vector3 shotDirection, bool multiShot)
			{
				if (this.Item.FireMode.FireMode == Weapon.EFireMode.burst && this.Item.FireMode.BurstShotsCount == 2 && !this.IsBirstOf2Start && this.Item.ChamberAmmoCount > 0)
				{
					return;
				}
				float pitchMult = this.method_61();
				weaponSoundPlayer.FireBullet(ammo, shotPosition, shotDirection.normalized, pitchMult, this.Malfunction, multiShot, this.IsBirstOf2Start);
			}

			// Token: 0x06012457 RID: 74839 RVA: 0x006830BC File Offset: 0x006812BC
			public void method_60()
			{
				float volume = this.CalculateAimingSoundVolume();
				this.weaponSoundPlayer_0.PlayAimingSound(volume);
			}

			// Token: 0x06012458 RID: 74840 RVA: 0x006830DC File Offset: 0x006812DC
			public float CalculateAimingSoundVolume()
			{
				float num = this.TotalErgonomics / 100f - 1f;
				float num2 = Mathf.Clamp(num * num, 0.1f, 0.2f) * (1f - this._player.Skills.DrawSound);
				float num3 = 1f - this._player.Skills.BotSoundCoef;
				return num2 * this._player.MovementContext.CovertEquipmentNoise * num3;
			}

			// Token: 0x06012459 RID: 74841 RVA: 0x00683158 File Offset: 0x00681358
			public float method_61()
			{
				float overheatFirerateMult = this.Item.MalfState.OverheatFirerateMult;
				float result;
				if (this.Item.FireMode.FireMode == Weapon.EFireMode.fullauto && overheatFirerateMult > 0f)
				{
					float num = 60f / (float)this.Item.FireRate;
					result = 60f / ((float)this.Item.FireRate * overheatFirerateMult) / num;
				}
				else
				{
					result = 1f + UnityEngine.Random.Range(-0.03f, 0.03f);
				}
				return result;
			}

			// Token: 0x0601245A RID: 74842 RVA: 0x0023EF3D File Offset: 0x0023D13D
			public virtual void DryShot(int chamberIndex = 0, bool underbarrelShot = false)
			{
				this.SetCompassState(false);
			}

			// Token: 0x0601245B RID: 74843 RVA: 0x0023EF46 File Offset: 0x0023D146
			public virtual void ShotMisfired(AmmoItemClass ammo, Weapon.EMalfunctionState malfunctionState, float overheat)
			{
			}

			// Token: 0x0601245C RID: 74844 RVA: 0x0023EF48 File Offset: 0x0023D148
			public virtual void RegisterShot(Item weapon, EftBulletClass shot)
			{
			}

			// Token: 0x0601245D RID: 74845 RVA: 0x006831DC File Offset: 0x006813DC
			public virtual void InitiateShot(IWeapon weapon, AmmoItemClass ammo, Vector3 shotPosition, Vector3 shotDirection, Vector3 fireportPosition, int chamberIndex, float overheat)
			{
				this._player.OnMakingShot(weapon, this._player.PlayerBones.WeaponRoot.position - shotPosition);
				if (ammo.InitialSpeed > 0f)
				{
					if (ammo.ProjectileCount == 1)
					{
						EftBulletClass shot = this.BallisticsCalculator.Shoot(ammo, shotPosition, shotDirection, this._player.ProfileId, weapon.Item, weapon.SpeedFactor, 0);
						this.RegisterShot(weapon.Item, shot);
					}
					else
					{
						Player.FirearmController.list_0.Clear();
						this.BallisticsCalculator.ShotMultiProjectileShot(ammo, shotPosition, shotDirection, weapon.SpeedFactor, Player.FirearmController.list_0, this._player.ProfileId, weapon.Item);
						foreach (EftBulletClass shot2 in Player.FirearmController.list_0)
						{
							this.RegisterShot(weapon.Item, shot2);
						}
						Player.FirearmController.list_0.Clear();
					}
				}
				Action action = this.action_0;
				if (action != null)
				{
					action();
				}
				this.bool_6 = true;
				if (!this._player.IsAI)
				{
					Action<Item, AmmoItemClass> onStatisticsShot = this._player.OnStatisticsShot;
					if (onStatisticsShot != null)
					{
						onStatisticsShot(weapon.Item, ammo);
					}
				}
				if (weapon.IsUnderbarrelWeapon)
				{
					this.underbarrelManagerClass.FirearmsEffects.StartFireEffects(this._player.IsVisible, this._player.SqrCameraDistance);
					return;
				}
				this.weaponManagerClass.PlayShotEffects(this._player.IsVisible, this._player.SqrCameraDistance);
			}

			// Token: 0x0601245E RID: 74846 RVA: 0x0023EF4A File Offset: 0x0023D14A
			public virtual void SendStartOneShotFire()
			{
			}

			// Token: 0x0601245F RID: 74847 RVA: 0x00683380 File Offset: 0x00681580
			public virtual void CreateFlareShot(AmmoItemClass flareItem, Vector3 shotPosition, Vector3 forward)
			{
				AmmoPoolObject ammoPoolObject = UnityEngine.Object.Instantiate<AmmoPoolObject>(Singleton<IEasyAssets>.Instance.GetAsset(flareItem.Template.Prefab));
				ammoPoolObject.transform.position = shotPosition;
				ammoPoolObject.transform.forward = forward;
				ammoPoolObject.gameObject.SetActive(true);
				FlareCartridge flareCartridge = ammoPoolObject.GetComponent<FlareCartridge>();
				if (flareCartridge == null)
				{
					flareCartridge = ammoPoolObject.gameObject.AddComponent<FlareCartridge>();
				}
				FlareCartridgeSettings flareCartridgeSettings = ammoPoolObject.GetComponent<FlareCartridgeSettings>();
				if (flareCartridgeSettings == null)
				{
					flareCartridgeSettings = ammoPoolObject.gameObject.AddComponent<FlareCartridgeSettings>();
				}
				flareCartridge.Init(flareCartridgeSettings, this._player, flareItem, this.Item);
				flareCartridge.Launch();
				Singleton<GInterface169>.Instance.RegisterGrenade(flareCartridge);
				this.bool_6 = true;
			}

			// Token: 0x14000485 RID: 1157
			// (add) Token: 0x06012460 RID: 74848 RVA: 0x00683430 File Offset: 0x00681630
			// (remove) Token: 0x06012461 RID: 74849 RVA: 0x00683468 File Offset: 0x00681668
			public event Action<RocketProjectile> OnRocketLaunchedEvent
			{
				[CompilerGenerated]
				add
				{
					Action<RocketProjectile> action = this.action_3;
					Action<RocketProjectile> action2;
					do
					{
						action2 = action;
						Action<RocketProjectile> value2 = (Action<RocketProjectile>)Delegate.Combine(action2, value);
						action = Interlocked.CompareExchange<Action<RocketProjectile>>(ref this.action_3, value2, action2);
					}
					while (action != action2);
				}
				[CompilerGenerated]
				remove
				{
					Action<RocketProjectile> action = this.action_3;
					Action<RocketProjectile> action2;
					do
					{
						action2 = action;
						Action<RocketProjectile> value2 = (Action<RocketProjectile>)Delegate.Remove(action2, value);
						action = Interlocked.CompareExchange<Action<RocketProjectile>>(ref this.action_3, value2, action2);
					}
					while (action != action2);
				}
			}

			// Token: 0x06012462 RID: 74850 RVA: 0x006834A0 File Offset: 0x006816A0
			public virtual void CreateRocketShot(AmmoItemClass rocketItem, Vector3 shotPosition, Vector3 forward, Transform smokeport = null)
			{
				AmmoPoolObject ammoPoolObject = Singleton<PoolManagerClass>.Instance.CreateFromPool<AmmoPoolObject>(rocketItem.Template.Prefab);
				ammoPoolObject.transform.position = shotPosition;
				ammoPoolObject.transform.forward = forward;
				ammoPoolObject.gameObject.SetActive(true);
				RocketProjectile rocketProjectile = ammoPoolObject.GetComponent<RocketProjectile>();
				if (rocketProjectile == null)
				{
					rocketProjectile = ammoPoolObject.gameObject.AddComponent<RocketProjectile>();
				}
				RocketSettings rocketSettings = ammoPoolObject.GetComponent<RocketSettings>();
				if (rocketSettings == null)
				{
					rocketSettings = ammoPoolObject.gameObject.AddComponent<RocketSettings>();
				}
				rocketProjectile.Initialize(rocketSettings, this._player, rocketItem, this.Item, smokeport);
				rocketProjectile.Launch();
				Action<RocketProjectile> action = this.action_3;
				if (action != null)
				{
					action(rocketProjectile);
				}
				this.bool_6 = true;
			}

			// Token: 0x06012463 RID: 74851 RVA: 0x0023EF4C File Offset: 0x0023D14C
			public override void OnAimReady()
			{
				base.OnAimReady();
				if (this.Weapon is RocketLauncherItemClass)
				{
					this.FirearmsAnimator.SetAimingFloat(1f);
				}
			}

			// Token: 0x06012464 RID: 74852 RVA: 0x0023EF71 File Offset: 0x0023D171
			public override void OnIdleReady()
			{
				base.OnIdleReady();
				if (this.Weapon is RocketLauncherItemClass)
				{
					this.FirearmsAnimator.SetAimingFloat(0f);
				}
			}

			// Token: 0x06012465 RID: 74853 RVA: 0x0023EF96 File Offset: 0x0023D196
			public override void OnDropWeapon()
			{
				this.CurrentOperation.OnDropWeapon();
			}

			// Token: 0x06012466 RID: 74854 RVA: 0x00683554 File Offset: 0x00681754
			public override void ManualLateUpdate(float deltaTime)
			{
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this._player.Spirit.IsActive)
				{
					return;
				}
				if (this.bool_5)
				{
					this.WeaponOverlapping();
					this.bool_5 = false;
				}
				if (!this.bool_6)
				{
					return;
				}
				this.bool_6 = false;
				this._player.ProceduralWeaponAnimation.Shoot(this.float_5);
			}

			// Token: 0x06012467 RID: 74855 RVA: 0x0023EFA3 File Offset: 0x0023D1A3
			public override void OnPlayerDead()
			{
				GClass4062.ReleaseBeginSample("FirearmController.OnPlayerDead", "OnPlayerDead");
				Action action = this.action_2;
				if (action != null)
				{
					action();
				}
				this.CurrentOperation.FastForward();
				this.RemoveBallisticCalculator();
				base.OnPlayerDead();
			}

			// Token: 0x06012468 RID: 74856 RVA: 0x0023EFDC File Offset: 0x0023D1DC
			public override void FastForwardCurrentState()
			{
				this.CurrentOperation.FastForward();
				base.FastForwardCurrentState();
			}

			// Token: 0x06012469 RID: 74857 RVA: 0x0023EFEF File Offset: 0x0023D1EF
			public bool IsInSpawnOperation()
			{
				return this.CurrentOperation == null || this.CurrentOperation is Player.FirearmController.GClass2055;
			}

			// Token: 0x0601246A RID: 74858 RVA: 0x006835BC File Offset: 0x006817BC
			public bool IsInReloadOperation()
			{
				return this.CurrentOperation is Player.FirearmController.GClass2015 || this.CurrentOperation is Player.FirearmController.GClass2039 || this.CurrentOperation is Player.FirearmController.GClass2045 || this.CurrentOperation is Player.FirearmController.GClass2050 || this.CurrentOperation is Player.FirearmController.GClass2044;
			}

			// Token: 0x0601246B RID: 74859 RVA: 0x0023F009 File Offset: 0x0023D209
			public bool IsInRemoveOperation()
			{
				return this.CurrentOperation == null || this.CurrentOperation is Player.FirearmController.GClass2053;
			}

			// Token: 0x0601246C RID: 74860 RVA: 0x0023F023 File Offset: 0x0023D223
			public virtual void OpticCalibrationSwitchUp(FirearmScopeStateStruct[] scopeStates)
			{
				this.weaponManagerClass.OpticCalibrationSwitchUp();
			}

			// Token: 0x0601246D RID: 74861 RVA: 0x0023F030 File Offset: 0x0023D230
			public virtual void OpticCalibrationSwitchDown(FirearmScopeStateStruct[] scopeStates)
			{
				this.weaponManagerClass.OpticCalibrationSwitchDown();
			}

			// Token: 0x0601246E RID: 74862 RVA: 0x00683610 File Offset: 0x00681810
			public bool HasScopeAimBone(SightComponent sightComp)
			{
				List<ProceduralWeaponAnimation.SightNBone> scopeAimTransforms = this._player.ProceduralWeaponAnimation.ScopeAimTransforms;
				for (int i = 0; i < scopeAimTransforms.Count; i++)
				{
					if (scopeAimTransforms[i].Mod != null && scopeAimTransforms[i].Mod.Equals(sightComp))
					{
						return true;
					}
				}
				return false;
			}

			// Token: 0x0601246F RID: 74863 RVA: 0x0023F03D File Offset: 0x0023D23D
			public override void SetCompassState(bool active)
			{
				if (this.CanChangeCompassState(active))
				{
					this.CurrentOperation.SetFirearmCompassState(active);
				}
			}

			// Token: 0x06012470 RID: 74864 RVA: 0x0023F054 File Offset: 0x0023D254
			public void method_62(Vector3 point, Vector3 direction)
			{
				Singleton<Effects>.Instance.EmitGrenade("Flashbang", point, direction, 1f);
			}

			// Token: 0x06012471 RID: 74865 RVA: 0x00683664 File Offset: 0x00681864
			public void method_63(bool isAiming)
			{
				this._player.MovementContext.PlayerAnimator.SetAiming(isAiming);
				if (!(this.Weapon is RocketLauncherItemClass))
				{
					this.FirearmsAnimator.SetAiming(isAiming);
				}
				this.FirearmsAnimator.SetAimingIn(isAiming);
				this.FirearmsAnimator.SetAimingOut(!isAiming);
				this.FirearmsAnimator.SetPrevAimingFloat(!isAiming);
				this.bool_0 = true;
			}

			// Token: 0x06012472 RID: 74866 RVA: 0x0023F06C File Offset: 0x0023D26C
			public void method_64()
			{
				this.FirearmsAnimator.SetAimingIn(false);
				this.FirearmsAnimator.SetAimingOut(false);
				this.FirearmsAnimator.SetPrevAimingFloat(false);
				this.bool_0 = false;
			}

			// Token: 0x06012473 RID: 74867 RVA: 0x006836D4 File Offset: 0x006818D4
			public virtual void LightAndSoundShot(Vector3 point, Vector3 direction, AmmoTemplate ammoTemplate)
			{
				ActiveHealthController activeHealthController = this._player.ActiveHealthController;
				if (activeHealthController != null)
				{
					activeHealthController.DoContusion(ammoTemplate.LightAndSoundShotSelfContusionTime, ammoTemplate.LightAndSoundShotSelfContusionStrength);
				}
				Vector3 blindness = ammoTemplate.Blindness;
				float y = blindness.y;
				Collider[] array = Physics.OverlapSphere(point, y, LayerMaskClass.PlayerMask);
				List<IPlayerOwner> list = null;
				Dictionary<IPlayerOwner, GStruct230> dictionary = null;
				float num = Mathf.Cos(ammoTemplate.LightAndSoundShotAngle * 0.5f * 0.017453292f);
				foreach (Collider col in array)
				{
					IPlayerOwner alivePlayerBridgeByCollider = Singleton<GameWorld>.Instance.GetAlivePlayerBridgeByCollider(col);
					if (alivePlayerBridgeByCollider != null && !(alivePlayerBridgeByCollider.iPlayer.ProfileId == this._player.ProfileId))
					{
						if (list == null)
						{
							list = new List<IPlayerOwner>();
							dictionary = new Dictionary<IPlayerOwner, GStruct230>();
						}
						Vector3 vector = alivePlayerBridgeByCollider.iPlayer.PlayerBones.Head.position - point;
						Vector3 normalized = vector.normalized;
						float magnitude = vector.magnitude;
						bool flag = Vector3.Dot(direction, normalized) >= num;
						list.Add(alivePlayerBridgeByCollider);
						dictionary.Add(alivePlayerBridgeByCollider, new GStruct230
						{
							Distance = magnitude,
							DirectionToEmitter = -normalized,
							TryToApplyStun = flag,
							TryToApplyBurnEyes = flag,
							TryToApplyContusion = true
						});
					}
				}
				if (list != null)
				{
					GClass2080.ApplyLightAndSoundHealthEffects(list, dictionary, point, blindness, ammoTemplate.Contusion);
				}
			}

			// Token: 0x06012474 RID: 74868 RVA: 0x00683844 File Offset: 0x00681A44
			public bool method_65()
			{
				Slot slot = this._player.Equipment.GetSlot(EquipmentSlot.Holster);
				if (this.Weapon.Parent.Container != slot && this.Weapon.GetCurrentMagazineCount() == 0 && this.Weapon.ChamberAmmoCount == 0)
				{
					Weapon weapon = slot.ContainedItem as Weapon;
					if (weapon != null && weapon.MalfState.State == Weapon.EMalfunctionState.None)
					{
						return weapon.ChamberAmmoCount != 0;
					}
				}
				return false;
			}

			// Token: 0x06012475 RID: 74869 RVA: 0x006838B8 File Offset: 0x00681AB8
			public float GetTotalMalfunctionChance(AmmoItemClass ammoToFire, float overheat, out double durabilityMalfChance, out float magMalfChance, out float ammoMalfChance, out float overheatMalfChance, out float weaponDurability)
			{
				durabilityMalfChance = 0.0;
				magMalfChance = 0f;
				ammoMalfChance = 0f;
				overheatMalfChance = 0f;
				weaponDurability = 0f;
				if (!this.Item.AllowMalfunction)
				{
					return 0f;
				}
				BackendConfigSettingsClass instance = Singleton<BackendConfigSettingsClass>.Instance;
				BackendConfigSettingsClass.GClass1738 malfunction = instance.Malfunction;
				BackendConfigSettingsClass.GClass1739 overheat2 = instance.Overheat;
				BackendConfigSettingsClass.GClass1788 troubleShooting = instance.SkillsSettings.TroubleShooting;
				float ammoMalfChanceMult = malfunction.AmmoMalfChanceMult;
				float magazineMalfChanceMult = malfunction.MagazineMalfChanceMult;
				MagazineItemClass currentMagazine = this.Item.GetCurrentMagazine();
				magMalfChance = ((currentMagazine == null) ? 0f : (currentMagazine.MalfunctionChance * magazineMalfChanceMult));
				ammoMalfChance = ((ammoToFire != null) ? ((ammoToFire.MalfMisfireChance + ammoToFire.MalfFeedChance) * ammoMalfChanceMult) : 0f);
				float num = this.Item.Repairable.Durability / (float)this.Item.Repairable.TemplateDurability * 100f;
				weaponDurability = Mathf.Floor(num);
				if (overheat >= overheat2.OverheatProblemsStart)
				{
					overheatMalfChance = Mathf.Lerp(overheat2.MinMalfChance, overheat2.MaxMalfChance, (overheat - overheat2.OverheatProblemsStart) / (overheat2.MaxOverheat - overheat2.OverheatProblemsStart));
				}
				overheatMalfChance *= (float)this.Item.Buff.MalfunctionProtections;
				if (weaponDurability > 59f)
				{
					durabilityMalfChance = (Math.Pow((double)(this.Item.BaseMalfunctionChance + 1f), 3.0 + (double)(100f - weaponDurability) / (20.0 - 10.0 / Math.Pow((double)this.Item.FireRate / 10.0, 0.322))) - 1.0) / 1000.0;
				}
				else
				{
					durabilityMalfChance = (Math.Pow((double)(this.Item.BaseMalfunctionChance + 1f), Math.Log10(Math.Pow((double)(101f - weaponDurability), (50.0 - Math.Pow((double)weaponDurability, 1.286) / 4.8) / (Math.Pow((double)this.Item.FireRate, 0.17) / 2.9815 + 2.1)))) - 1.0) / 1000.0;
				}
				durabilityMalfChance *= (double)((float)this.Item.Buff.MalfunctionProtections);
				if (this.Item.MalfState.HasMalfReduceChance(this._player.ProfileId, Weapon.EMalfunctionSource.Durability))
				{
					durabilityMalfChance *= (double)troubleShooting.EliteDurabilityChanceReduceMult;
				}
				if (this.Item.MalfState.HasMalfReduceChance(this._player.ProfileId, Weapon.EMalfunctionSource.Magazine))
				{
					magMalfChance *= troubleShooting.EliteMagChanceReduceMult;
				}
				if (this.Item.MalfState.HasMalfReduceChance(this._player.ProfileId, Weapon.EMalfunctionSource.Ammo))
				{
					ammoMalfChance *= troubleShooting.EliteAmmoChanceReduceMult;
				}
				if (num >= malfunction.DurRangeToIgnoreMalfs.x && num <= malfunction.DurRangeToIgnoreMalfs.y)
				{
					durabilityMalfChance = 0.0;
					ammoMalfChance = 0f;
					magMalfChance = 0f;
				}
				durabilityMalfChance = (double)Mathf.Clamp01((float)durabilityMalfChance);
				return Mathf.Clamp01((float)Math.Round(durabilityMalfChance + (double)((ammoMalfChance + magMalfChance + overheatMalfChance) / 1000f), 5));
			}

			// Token: 0x06012476 RID: 74870 RVA: 0x0023F099 File Offset: 0x0023D299
			public float GetNextMalfunctionRandom()
			{
				return this.malfunctionRandom_0.GetNextRandom();
			}

			// Token: 0x06012477 RID: 74871 RVA: 0x00683C0C File Offset: 0x00681E0C
			public void GetMalfunctionSources(List<GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>> result, double durabilityMalfChance, float magMalfChance, float ammoMalfChance, float overheatMalfChance, bool hasAmmoInMag, bool isMagazineInserted)
			{
				result.Clear();
				result.Add(new GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>((float)durabilityMalfChance, Weapon.EMalfunctionSource.Durability));
				if (ammoMalfChance > 0f)
				{
					result.Add(new GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>(ammoMalfChance / 1000f, Weapon.EMalfunctionSource.Ammo));
				}
				if (magMalfChance > 0f && hasAmmoInMag && isMagazineInserted)
				{
					result.Add(new GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>(magMalfChance / 1000f, Weapon.EMalfunctionSource.Magazine));
				}
				if (overheatMalfChance > 0f)
				{
					result.Add(new GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>(overheatMalfChance / 1000f, Weapon.EMalfunctionSource.Overheat));
				}
			}

			// Token: 0x06012478 RID: 74872 RVA: 0x00683C8C File Offset: 0x00681E8C
			public void GetSpecificMalfunctionVariants(List<GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>> result, AmmoItemClass ammo, Weapon.EMalfunctionSource malfunctionSource, float weaponDurability, bool hasAmmoInMag, bool isMagazineInserted, bool shouldCheckJam)
			{
				result.Clear();
				BackendConfigSettingsClass.GClass1738 malfunction = Singleton<BackendConfigSettingsClass>.Instance.Malfunction;
				switch (malfunctionSource)
				{
				case Weapon.EMalfunctionSource.Durability:
					if (hasAmmoInMag && isMagazineInserted && this.Item.AllowFeed)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.DurFeedWt, Weapon.EMalfunctionState.Feed));
					}
					if (this.Item.AllowMisfire)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.DurMisfireWt, Weapon.EMalfunctionState.Misfire));
					}
					if (shouldCheckJam && this.Item.AllowJam)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.DurJamWt, Weapon.EMalfunctionState.Jam));
					}
					if (hasAmmoInMag && this.Item.AllowSlide)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.DurSoftSlideWt, Weapon.EMalfunctionState.SoftSlide));
					}
					if (weaponDurability <= 5f && hasAmmoInMag && this.Item.AllowSlide)
					{
						float first = Mathf.Lerp(malfunction.DurHardSlideMinWt, malfunction.DurHardSlideMaxWt, 1f - weaponDurability / 5f);
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(first, Weapon.EMalfunctionState.HardSlide));
						return;
					}
					break;
				case Weapon.EMalfunctionSource.Ammo:
					if (this.Item.AllowMisfire)
					{
						float first2 = malfunction.AmmoMisfireWt / (ammo.MalfMisfireChance + ammo.MalfFeedChance);
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(first2, Weapon.EMalfunctionState.Misfire));
					}
					if (hasAmmoInMag && isMagazineInserted && this.Item.AllowFeed)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.AmmoFeedWt, Weapon.EMalfunctionState.Feed));
					}
					if (shouldCheckJam && this.Item.AllowJam)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.AmmoJamWt, Weapon.EMalfunctionState.Jam));
						return;
					}
					break;
				case Weapon.EMalfunctionSource.Magazine:
					if (hasAmmoInMag && isMagazineInserted && this.Item.AllowFeed)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(1f, Weapon.EMalfunctionState.Feed));
					}
					break;
				case Weapon.EMalfunctionSource.Ammo | Weapon.EMalfunctionSource.Magazine:
					break;
				case Weapon.EMalfunctionSource.Overheat:
					if (hasAmmoInMag && isMagazineInserted && this.Item.AllowFeed)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.OverheatFeedWt, Weapon.EMalfunctionState.Feed));
					}
					if (shouldCheckJam && this.Item.AllowJam)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.OverheatJamWt, Weapon.EMalfunctionState.Jam));
					}
					if (hasAmmoInMag && this.Item.AllowSlide)
					{
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(malfunction.OverheatSoftSlideWt, Weapon.EMalfunctionState.SoftSlide));
					}
					if (weaponDurability <= 5f && hasAmmoInMag && this.Item.AllowSlide)
					{
						float first3 = Mathf.Lerp(malfunction.OverheatHardSlideMinWt, malfunction.OverheatHardSlideMaxWt, 1f - weaponDurability / 5f);
						result.Add(new GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>(first3, Weapon.EMalfunctionState.HardSlide));
						return;
					}
					break;
				default:
					return;
				}
			}

			// Token: 0x06012479 RID: 74873 RVA: 0x00683F0C File Offset: 0x0068210C
			public Weapon.EMalfunctionState GetMalfunctionState(AmmoItemClass ammoToFire, bool hasAmmoInMag, bool doesWeaponHaveBoltCatch, bool isMagazineInserted, float overheat, float fixSlideOverheat, out Weapon.EMalfunctionSource malfunctionSource)
			{
				malfunctionSource = Weapon.EMalfunctionSource.Durability;
				if (!this.Item.AllowMalfunction)
				{
					return Weapon.EMalfunctionState.None;
				}
				if (this.Item.MalfState.SlideOnOverheatReached && overheat > fixSlideOverheat && this.Item.AllowSlide && hasAmmoInMag)
				{
					malfunctionSource = Weapon.EMalfunctionSource.Overheat;
					return Weapon.EMalfunctionState.SoftSlide;
				}
				double durabilityMalfChance;
				float magMalfChance;
				float ammoMalfChance;
				float overheatMalfChance;
				float weaponDurability;
				float totalMalfunctionChance = this.GetTotalMalfunctionChance(ammoToFire, overheat, out durabilityMalfChance, out magMalfChance, out ammoMalfChance, out overheatMalfChance, out weaponDurability);
				float randomFloat = this.malfunctionRandom_0.GetRandomFloat();
				if (randomFloat > totalMalfunctionChance)
				{
					return Weapon.EMalfunctionState.None;
				}
				List<GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>> list = this.list_1;
				this.GetMalfunctionSources(list, durabilityMalfChance, magMalfChance, ammoMalfChance, overheatMalfChance, hasAmmoInMag, isMagazineInserted);
				malfunctionSource = GClass820<Weapon.EMalfunctionSource>.GenerateDrop(list, randomFloat);
				bool shouldCheckJam = hasAmmoInMag || !doesWeaponHaveBoltCatch || !isMagazineInserted;
				List<GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>> list2 = this.list_2;
				this.GetSpecificMalfunctionVariants(list2, ammoToFire, malfunctionSource, weaponDurability, hasAmmoInMag, isMagazineInserted, shouldCheckJam);
				if (list2.Count == 0)
				{
					return Weapon.EMalfunctionState.None;
				}
				return GClass820<Weapon.EMalfunctionState>.GenerateDrop(list2);
			}

			// Token: 0x0601247A RID: 74874 RVA: 0x00683FEC File Offset: 0x006821EC
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.FirearmController.GClass2055),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_66)
					},
					{
						typeof(Player.FirearmController.GClass2053),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_67)
					},
					{
						typeof(Player.FirearmController.GClass2037),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_68)
					},
					{
						typeof(Player.FirearmController.GClass2016),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_69)
					},
					{
						typeof(Player.FirearmController.AmmoPackReloadOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_70)
					},
					{
						typeof(Player.FirearmController.CylinderReloadOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_71)
					},
					{
						typeof(Player.FirearmController.SingleBarrelReloadOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_72)
					},
					{
						typeof(Player.FirearmController.MutliBarrelReloadOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_73)
					},
					{
						typeof(Player.FirearmController.GClass2050),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_74)
					},
					{
						typeof(Player.FirearmController.GClass2039),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_75)
					},
					{
						typeof(Player.FirearmController.GClass2045),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_76)
					},
					{
						typeof(Player.FirearmController.GClass2044),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_77)
					},
					{
						typeof(Player.FirearmController.GClass2023),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_78)
					},
					{
						typeof(Player.FirearmController.GClass2052),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_79)
					},
					{
						typeof(Player.FirearmController.GClass2026),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_80)
					},
					{
						typeof(Player.FirearmController.Class1264),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_81)
					},
					{
						typeof(Player.FirearmController.GClass2014),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_82)
					},
					{
						typeof(Player.FirearmController.GenericFireOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_83)
					},
					{
						typeof(Player.FirearmController.GClass2029),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_84)
					},
					{
						typeof(Player.FirearmController.GClass2049),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_85)
					},
					{
						typeof(Player.FirearmController.FixMalfunctionOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_86)
					},
					{
						typeof(Player.FirearmController.RechamberOperationClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_87)
					},
					{
						typeof(Player.FirearmController.GClass2054),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_88)
					},
					{
						typeof(Player.FirearmController.GClass2056),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_89)
					},
					{
						typeof(Player.FirearmController.GClass2040),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_90)
					},
					{
						typeof(Player.FirearmController.GClass2034),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_91)
					},
					{
						typeof(Player.FirearmController.GClass2042),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_92)
					},
					{
						typeof(Player.FirearmController.GClass2024),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_93)
					},
					{
						typeof(Player.FirearmController.GClass2043),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_94)
					},
					{
						typeof(Player.FirearmController.GClass2038),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_95)
					},
					{
						typeof(Player.FirearmController.GClass2041),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_96)
					},
					{
						typeof(Player.FirearmController.Class1269),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_97)
					},
					{
						typeof(Player.FirearmController.GClass2047),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_98)
					},
					{
						typeof(Player.FirearmController.Class1270),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_99)
					}
				};
			}

			// Token: 0x0601247D RID: 74877 RVA: 0x0023F0CB File Offset: 0x0023D2CB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_66()
			{
				return new Player.FirearmController.GClass2055(this);
			}

			// Token: 0x0601247E RID: 74878 RVA: 0x0023F0D3 File Offset: 0x0023D2D3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_67()
			{
				return new Player.FirearmController.GClass2053(this);
			}

			// Token: 0x0601247F RID: 74879 RVA: 0x0023F0DB File Offset: 0x0023D2DB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_68()
			{
				return new Player.FirearmController.GClass2037(this);
			}

			// Token: 0x06012480 RID: 74880 RVA: 0x0023F0E3 File Offset: 0x0023D2E3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_69()
			{
				return new Player.FirearmController.GClass2016(this);
			}

			// Token: 0x06012481 RID: 74881 RVA: 0x0023F0EB File Offset: 0x0023D2EB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_70()
			{
				if (this.Item.MustBoltBeOpennedForInternalReload)
				{
					return new Player.FirearmController.AmmoPackReloadInternalBoltOpenOperationClass(this);
				}
				return new Player.FirearmController.AmmoPackReloadInternalOneChamberOperationClass(this);
			}

			// Token: 0x06012482 RID: 74882 RVA: 0x0023F107 File Offset: 0x0023D307
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_71()
			{
				return new Player.FirearmController.CylinderReloadOperationClass(this);
			}

			// Token: 0x06012483 RID: 74883 RVA: 0x0023F10F File Offset: 0x0023D30F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_72()
			{
				return new Player.FirearmController.SingleBarrelReloadOperationClass(this);
			}

			// Token: 0x06012484 RID: 74884 RVA: 0x0023F117 File Offset: 0x0023D317
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_73()
			{
				return new Player.FirearmController.MutliBarrelReloadOperationClass(this);
			}

			// Token: 0x06012485 RID: 74885 RVA: 0x0023F11F File Offset: 0x0023D31F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_74()
			{
				return new Player.FirearmController.GClass2050(this);
			}

			// Token: 0x06012486 RID: 74886 RVA: 0x0023F127 File Offset: 0x0023D327
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_75()
			{
				return new Player.FirearmController.GClass2039(this);
			}

			// Token: 0x06012487 RID: 74887 RVA: 0x0023F12F File Offset: 0x0023D32F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_76()
			{
				return new Player.FirearmController.GClass2045(this);
			}

			// Token: 0x06012488 RID: 74888 RVA: 0x0023F137 File Offset: 0x0023D337
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_77()
			{
				return new Player.FirearmController.GClass2044(this);
			}

			// Token: 0x06012489 RID: 74889 RVA: 0x0023F13F File Offset: 0x0023D33F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_78()
			{
				return new Player.FirearmController.GClass2023(this);
			}

			// Token: 0x0601248A RID: 74890 RVA: 0x0023F147 File Offset: 0x0023D347
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_79()
			{
				return new Player.FirearmController.GClass2052(this);
			}

			// Token: 0x0601248B RID: 74891 RVA: 0x0023F14F File Offset: 0x0023D34F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_80()
			{
				return new Player.FirearmController.GClass2026(this);
			}

			// Token: 0x0601248C RID: 74892 RVA: 0x0023F157 File Offset: 0x0023D357
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_81()
			{
				return new Player.FirearmController.Class1264(this);
			}

			// Token: 0x0601248D RID: 74893 RVA: 0x0023F15F File Offset: 0x0023D35F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_82()
			{
				return new Player.FirearmController.GClass2014(this);
			}

			// Token: 0x0601248E RID: 74894 RVA: 0x00684410 File Offset: 0x00682610
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_83()
			{
				if (this.Item is RocketLauncherItemClass)
				{
					return new Player.FirearmController.GClass2036(this);
				}
				if (this.Item.IsFlareGun)
				{
					return new Player.FirearmController.FlareGunFireOperationClass(this);
				}
				if (this.Item.IsOneOff)
				{
					return new Player.FirearmController.IsOneOffFireOperationClass(this);
				}
				if (this.Item.ReloadMode == Weapon.EReloadMode.OnlyBarrel)
				{
					return new Player.FirearmController.FireOnlyBarrelFireOperation(this);
				}
				if (this.Item is RevolverItemClass)
				{
					return new Player.FirearmController.RevolverFireOperationClass(this);
				}
				if (!this.Item.BoltAction)
				{
					return new Player.FirearmController.GenericFireOperationClass(this);
				}
				return new Player.FirearmController.DefaultWeaponOperationClass(this);
			}

			// Token: 0x0601248F RID: 74895 RVA: 0x0023F167 File Offset: 0x0023D367
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_84()
			{
				return new Player.FirearmController.GClass2029(this);
			}

			// Token: 0x06012490 RID: 74896 RVA: 0x0023F16F File Offset: 0x0023D36F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_85()
			{
				return new Player.FirearmController.GClass2049(this);
			}

			// Token: 0x06012491 RID: 74897 RVA: 0x0023F177 File Offset: 0x0023D377
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_86()
			{
				return new Player.FirearmController.FixMalfunctionOperationClass(this);
			}

			// Token: 0x06012492 RID: 74898 RVA: 0x0023F17F File Offset: 0x0023D37F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_87()
			{
				return new Player.FirearmController.RechamberOperationClass(this);
			}

			// Token: 0x06012493 RID: 74899 RVA: 0x0023F187 File Offset: 0x0023D387
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_88()
			{
				return new Player.FirearmController.GClass2054(this);
			}

			// Token: 0x06012494 RID: 74900 RVA: 0x0023F18F File Offset: 0x0023D38F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_89()
			{
				return new Player.FirearmController.GClass2056(this);
			}

			// Token: 0x06012495 RID: 74901 RVA: 0x0023F197 File Offset: 0x0023D397
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_90()
			{
				return new Player.FirearmController.GClass2040(this);
			}

			// Token: 0x06012496 RID: 74902 RVA: 0x0023F19F File Offset: 0x0023D39F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_91()
			{
				return new Player.FirearmController.GClass2034(this);
			}

			// Token: 0x06012497 RID: 74903 RVA: 0x0023F1A7 File Offset: 0x0023D3A7
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_92()
			{
				return new Player.FirearmController.GClass2042(this);
			}

			// Token: 0x06012498 RID: 74904 RVA: 0x0023F1AF File Offset: 0x0023D3AF
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_93()
			{
				if (!this.Item.IsMultiBarrel)
				{
					return new Player.FirearmController.GClass2024(this);
				}
				return new Player.FirearmController.GClass2025(this);
			}

			// Token: 0x06012499 RID: 74905 RVA: 0x0023F1CB File Offset: 0x0023D3CB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_94()
			{
				return new Player.FirearmController.GClass2043(this);
			}

			// Token: 0x0601249A RID: 74906 RVA: 0x0023F1D3 File Offset: 0x0023D3D3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_95()
			{
				return new Player.FirearmController.GClass2038(this);
			}

			// Token: 0x0601249B RID: 74907 RVA: 0x0023F1DB File Offset: 0x0023D3DB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_96()
			{
				return new Player.FirearmController.GClass2041(this);
			}

			// Token: 0x0601249C RID: 74908 RVA: 0x0023F1E3 File Offset: 0x0023D3E3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_97()
			{
				return new Player.FirearmController.Class1269(this);
			}

			// Token: 0x0601249D RID: 74909 RVA: 0x0023F1EB File Offset: 0x0023D3EB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_98()
			{
				return new Player.FirearmController.GClass2047(this);
			}

			// Token: 0x0601249E RID: 74910 RVA: 0x0023F1F3 File Offset: 0x0023D3F3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_99()
			{
				return new Player.FirearmController.Class1270(this);
			}

			// Token: 0x0400ED96 RID: 60822
			public const int CALCULATOR_SEED = 0;

			// Token: 0x0400ED97 RID: 60823
			private const string string_0 = "Cant StartReload";

			// Token: 0x0400ED98 RID: 60824
			private const float float_0 = 1.5f;

			// Token: 0x0400ED99 RID: 60825
			public const float OFFSET_FOR_OVERLAP_RAY_ON_LEFT_SHOULDER = 0.2f;

			// Token: 0x0400ED9A RID: 60826
			public const float ADDITIONAL_LEFTSTANCE_OVERLAP_RAY_LENGTH = 0.2f;

			// Token: 0x0400ED9B RID: 60827
			private const float float_1 = 0.5f;

			// Token: 0x0400ED9C RID: 60828
			[CompilerGenerated]
			private Action action_0;

			// Token: 0x0400ED9D RID: 60829
			[CompilerGenerated]
			private Action<Player.FirearmController> action_1;

			// Token: 0x0400ED9E RID: 60830
			[CompilerGenerated]
			private Action action_2;

			// Token: 0x0400ED9F RID: 60831
			protected static readonly List<AmmoItemClass> _preallocatedAmmoList = new List<AmmoItemClass>(10);

			// Token: 0x0400EDA0 RID: 60832
			private static readonly List<EftBulletClass> list_0 = new List<EftBulletClass>(10);

			// Token: 0x0400EDA1 RID: 60833
			private static readonly RaycastHit[] raycastHit_0 = new RaycastHit[8];

			// Token: 0x0400EDA2 RID: 60834
			public GClass768 CCV;

			// Token: 0x0400EDA3 RID: 60835
			public Transform GunBaseTransform;

			// Token: 0x0400EDA4 RID: 60836
			public BifacialTransform Fireport;

			// Token: 0x0400EDA5 RID: 60837
			public BifacialTransform[] MultiBarrelsFireports;

			// Token: 0x0400EDA6 RID: 60838
			public bool _blindfire;

			// Token: 0x0400EDA7 RID: 60839
			public int CurrentChamberIndex;

			// Token: 0x0400EDA8 RID: 60840
			public float HipInaccuracy;

			// Token: 0x0400EDA9 RID: 60841
			public TacticalComboItemClass[] AimingDevices;

			// Token: 0x0400EDAA RID: 60842
			public int AmmoInChamberOnSpawn;

			// Token: 0x0400EDAB RID: 60843
			public bool autoFireOn;

			// Token: 0x0400EDAC RID: 60844
			public BipodItemClass Bipod;

			// Token: 0x0400EDAD RID: 60845
			internal Func<bool> func_0;

			// Token: 0x0400EDAE RID: 60846
			internal Func<bool> func_1;

			// Token: 0x0400EDAF RID: 60847
			internal WeaponManagerClass weaponManagerClass;

			// Token: 0x0400EDB0 RID: 60848
			internal FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400EDB1 RID: 60849
			protected float WeaponLn;

			// Token: 0x0400EDB2 RID: 60850
			protected bool AimingInterruptedByOverlap;

			// Token: 0x0400EDB3 RID: 60851
			protected bool _isAiming;

			// Token: 0x0400EDB4 RID: 60852
			private bool bool_0;

			// Token: 0x0400EDB5 RID: 60853
			private bool bool_1;

			// Token: 0x0400EDB6 RID: 60854
			protected float _aimingSens = -1f;

			// Token: 0x0400EDB7 RID: 60855
			protected ISharedBallisticsCalculator BallisticsCalculator;

			// Token: 0x0400EDB8 RID: 60856
			private WeaponPrefab weaponPrefab_0;

			// Token: 0x0400EDB9 RID: 60857
			private MalfunctionRandom malfunctionRandom_0;

			// Token: 0x0400EDBA RID: 60858
			private bool bool_2;

			// Token: 0x0400EDBB RID: 60859
			private bool bool_3;

			// Token: 0x0400EDBC RID: 60860
			private float float_2;

			// Token: 0x0400EDBD RID: 60861
			private float float_3 = 0.001f;

			// Token: 0x0400EDBE RID: 60862
			private float float_4;

			// Token: 0x0400EDBF RID: 60863
			private SkillManager.GClass2250 gclass2250_0;

			// Token: 0x0400EDC0 RID: 60864
			private bool bool_4;

			// Token: 0x0400EDC1 RID: 60865
			private bool bool_5;

			// Token: 0x0400EDC2 RID: 60866
			private bool bool_6;

			// Token: 0x0400EDC3 RID: 60867
			private int int_0;

			// Token: 0x0400EDC4 RID: 60868
			private GClass849<float> gclass849_0;

			// Token: 0x0400EDC5 RID: 60869
			private GClass849<float> gclass849_1;

			// Token: 0x0400EDC6 RID: 60870
			private Func<RaycastHit, bool> func_2;

			// Token: 0x0400EDC7 RID: 60871
			private OneOffWeaponSettings oneOffWeaponSettings_0;

			// Token: 0x0400EDC8 RID: 60872
			private bool bool_7;

			// Token: 0x0400EDC9 RID: 60873
			private bool bool_8;

			// Token: 0x0400EDCA RID: 60874
			private float float_5 = 1f;

			// Token: 0x0400EDCB RID: 60875
			private WeaponSoundPlayer weaponSoundPlayer_0;

			// Token: 0x0400EDCC RID: 60876
			private int int_1;

			// Token: 0x0400EDCD RID: 60877
			private Player.FirearmController.UnderbarrelManagerClass underbarrelManagerClass;

			// Token: 0x0400EDCE RID: 60878
			public LauncherItemClass UnderbarrelWeapon;

			// Token: 0x0400EDCF RID: 60879
			[CompilerGenerated]
			private bool bool_9;

			// Token: 0x0400EDD0 RID: 60880
			[CompilerGenerated]
			private bool bool_10;

			// Token: 0x0400EDD1 RID: 60881
			private bool bool_11;

			// Token: 0x0400EDD2 RID: 60882
			private bool bool_12;

			// Token: 0x0400EDD3 RID: 60883
			private float float_6 = 1f;

			// Token: 0x0400EDD4 RID: 60884
			private float float_7;

			// Token: 0x0400EDD5 RID: 60885
			[CompilerGenerated]
			private Action<RocketProjectile> action_3;

			// Token: 0x0400EDD6 RID: 60886
			private List<GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>> list_1 = new List<GClass820<Weapon.EMalfunctionSource>.GStruct49<float, Weapon.EMalfunctionSource>>(4);

			// Token: 0x0400EDD7 RID: 60887
			private List<GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>> list_2 = new List<GClass820<Weapon.EMalfunctionState>.GStruct49<float, Weapon.EMalfunctionState>>(5);

			// Token: 0x020039B9 RID: 14777
			public class GClass2014 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015B82 RID: 88962 RVA: 0x00264898 File Offset: 0x00262A98
				public GClass2014(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015B83 RID: 88963 RVA: 0x00725284 File Offset: 0x00723484
				public virtual void Start(AmmoItemClass item, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					this.AmmoItemClass = item;
					this.Callback_0 = callback;
					this.Int_0 = camoraIndex;
					this.ItemAddress_0 = itemAddress;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.Discharge(true);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015B84 RID: 88964 RVA: 0x002648A8 File Offset: 0x00262AA8
				public override void Reset()
				{
					base.Reset();
					this.AmmoItemClass = null;
					this.Callback_0 = null;
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.Int_0 = -1;
					this.ItemAddress_0 = null;
				}

				// Token: 0x06015B85 RID: 88965 RVA: 0x002648DA File Offset: 0x00262ADA
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnMagAppeared();
					this.OnMagPuttedToRig();
				}

				// Token: 0x06015B86 RID: 88966 RVA: 0x002648F2 File Offset: 0x00262AF2
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmController_0.underbarrelManagerClass.DestroyPatronInWeapon();
				}

				// Token: 0x06015B87 RID: 88967 RVA: 0x00725304 File Offset: 0x00723504
				public override void OnMagAppeared()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.FirearmsAnimator_0.Discharge(false);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.FirearmController_0.UnderbarrelWeapon.ShellsInLauncherCount);
					this.FirearmsAnimator_0.SetCanReload(false);
				}

				// Token: 0x06015B88 RID: 88968 RVA: 0x00264905 File Offset: 0x00262B05
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					this.method_5();
				}

				// Token: 0x06015B89 RID: 88969 RVA: 0x00725354 File Offset: 0x00723554
				public void method_5()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>().Start(null);
					this.Callback_0.Succeed();
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.FirearmController_0.UnderbarrelWeapon.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.FirearmController_0.UnderbarrelWeapon.ShellsInLauncherCount);
				}

				// Token: 0x06015B8A RID: 88970 RVA: 0x0026491D File Offset: 0x00262B1D
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x04012893 RID: 75923
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x04012894 RID: 75924
				[NonSerialized]
				public ItemAddress ItemAddress_0;

				// Token: 0x04012895 RID: 75925
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012896 RID: 75926
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012897 RID: 75927
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012898 RID: 75928
				[NonSerialized]
				public int Int_0 = -1;
			}

			// Token: 0x020039BA RID: 14778
			public class Class1264 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015B8B RID: 88971 RVA: 0x00264937 File Offset: 0x00262B37
				public Class1264(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015B8C RID: 88972 RVA: 0x007253CC File Offset: 0x007235CC
				public void Start(Item item, Slot slot, Callback callback)
				{
					this.Item_0 = item;
					this.Slot_0 = slot;
					this.Callback_0 = callback;
					base.Start();
					this.FirearmsAnimator_0.SetupMod(true);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmController_0.SetAim(false);
				}

				// Token: 0x06015B8D RID: 88973 RVA: 0x00264940 File Offset: 0x00262B40
				public override void Reset()
				{
					this.Item_0 = null;
					this.Slot_0 = null;
					this.Callback_0 = null;
					this.Bool_0 = false;
					base.Reset();
				}

				// Token: 0x06015B8E RID: 88974 RVA: 0x00264964 File Offset: 0x00262B64
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnModChanged();
				}

				// Token: 0x06015B8F RID: 88975 RVA: 0x00264976 File Offset: 0x00262B76
				public override void SetAiming(bool isAiming)
				{
					if (!isAiming)
					{
						this.FirearmController_0.IsAiming = false;
					}
				}

				// Token: 0x06015B90 RID: 88976 RVA: 0x0072542C File Offset: 0x0072362C
				public override void OnModChanged()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.FirearmsAnimator_0.SetupMod(false);
					GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateItem(this.Item_0, true);
					this.WeaponManagerClass.SetupMod(this.Slot_0, gameObject);
					this.FirearmsAnimator_0.Fold(this.Weapon_0.Folded);
					this.State = Player.EOperationState.Finished;
					this.Callback_0.Succeed();
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, (float)this.Weapon_0.CalculateCellSize().X);
					this.Player_0.UpdateFirstPersonGrip(GripPose.EGripType.Common, this.FirearmController_0.HandsHierarchy);
					this.FirearmController_0.SetupModAudioController(gameObject.transform, this.FirearmController_0);
					Mod mod = this.Item_0 as Mod;
					if (mod != null && mod.HasLightComponent)
					{
						this.Player_0.SendWeaponLightPacket();
					}
					this.FirearmController_0.WeaponModified();
					this.method_5(gameObject);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015B91 RID: 88977 RVA: 0x0072553C File Offset: 0x0072373C
				public void method_5(GameObject createdItem)
				{
					LauncherItemClass launcherItemClass = this.Item_0 as LauncherItemClass;
					if (launcherItemClass != null)
					{
						this.FirearmController_0.method_7(launcherItemClass, createdItem);
					}
				}

				// Token: 0x06015B92 RID: 88978 RVA: 0x00264987 File Offset: 0x00262B87
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015B93 RID: 88979 RVA: 0x002649A1 File Offset: 0x00262BA1
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x04012899 RID: 75929
				[NonSerialized]
				public Item Item_0;

				// Token: 0x0401289A RID: 75930
				[NonSerialized]
				public Slot Slot_0;

				// Token: 0x0401289B RID: 75931
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x0401289C RID: 75932
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x020039BB RID: 14779
			public class GClass2029 : Player.FirearmController.GClass2028
			{
				// Token: 0x17003540 RID: 13632
				// (get) Token: 0x06015B94 RID: 88980 RVA: 0x002649A4 File Offset: 0x00262BA4
				public float ShotsTime
				{
					get
					{
						return this.Float_5;
					}
				}

				// Token: 0x06015B95 RID: 88981 RVA: 0x00725568 File Offset: 0x00723768
				public GClass2029(Player.FirearmController controller) : base(controller)
				{
					this.Float_5 = 60f / (float)controller.Item.FireRate;
					FireModeComponent itemComponent = this.Weapon_0.GetItemComponent<FireModeComponent>();
					this.Int_2 = ((itemComponent != null) ? itemComponent.BurstShotsCount : 3);
				}

				// Token: 0x06015B96 RID: 88982 RVA: 0x007255B4 File Offset: 0x007237B4
				public new virtual void Start()
				{
					base.Start();
					this.Float_7 = 0.0001f;
					this.Int_1 = 0;
					this.Float_6 = 0f;
					this.Bool_1 = false;
					this.FirearmController_0.autoFireOn = true;
					this.FirearmController_0.bool_3 = false;
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullFireStateName, 1, 0.2f);
					this.InternalOnFireEvent();
				}

				// Token: 0x06015B97 RID: 88983 RVA: 0x002649AC File Offset: 0x00262BAC
				public override void Reset()
				{
					base.Reset();
					this.Float_8 = -1f;
				}

				// Token: 0x06015B98 RID: 88984 RVA: 0x002649BF File Offset: 0x00262BBF
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
				}

				// Token: 0x06015B99 RID: 88985 RVA: 0x002649CD File Offset: 0x00262BCD
				public override void OnFireEvent()
				{
					this.Bool_1 = true;
				}

				// Token: 0x06015B9A RID: 88986 RVA: 0x00725640 File Offset: 0x00723840
				public override void Update(float deltaTime)
				{
					if (!this.Bool_1 && !this.Player_0.IsAI)
					{
						return;
					}
					try
					{
						base.Update(deltaTime);
						float num = this.Float_7 % this.Float_5 / this.Float_5;
						float num2 = num + deltaTime / this.Float_5;
						if (num2 <= 1f)
						{
							this.method_10(num, num2);
						}
						else
						{
							this.method_10(num, 1f);
							float num3 = num2 - 1f;
							while (num3 > 0f)
							{
								if (num3 <= 1f)
								{
									this.method_10(0f, num3);
									num3 -= 1f;
								}
								else
								{
									double num4 = Math.Floor((double)num3);
									int num5 = 0;
									while ((double)num5 < num4)
									{
										this.method_10(0f, 1f);
										num3 -= 1f;
										num5++;
									}
								}
							}
						}
						Weapon item = this.FirearmController_0.Item;
						float overheatFirerateMult = item.MalfState.OverheatFirerateMult;
						this.Float_7 += deltaTime;
						if (overheatFirerateMult > 0f)
						{
							if (Mathf.Abs(overheatFirerateMult - this.Float_6) > Mathf.Epsilon)
							{
								this.Float_7 = this.Float_5 * (num2 % 1f);
								this.Float_5 = 60f / ((float)item.FireRate * item.MalfState.OverheatFirerateMult);
							}
							this.Float_6 = overheatFirerateMult;
						}
					}
					catch (Exception exception)
					{
						UnityEngine.Debug.LogException(exception);
						this.InternalOnFireEndEvent();
					}
				}

				// Token: 0x06015B9B RID: 88987 RVA: 0x007257BC File Offset: 0x007239BC
				public void method_10(float normalizedStartFrameTime, float normalizedEndFrameTime)
				{
					if (this.State != Player.EOperationState.Executing)
					{
						return;
					}
					if (normalizedStartFrameTime <= 0f && 0f < normalizedEndFrameTime)
					{
						this.InternalOnFireEvent();
					}
					if (this.State != Player.EOperationState.Executing)
					{
						return;
					}
					if (normalizedStartFrameTime <= 0.25f && 0.25f < normalizedEndFrameTime)
					{
						this.InternalOnShellEjectEvent();
					}
					if (normalizedStartFrameTime <= 0.75f && 0.75f < normalizedEndFrameTime && this.Weapon_0.IsBoltCatch && this.Weapon_0.ChamberAmmoCount == 0 && this.Weapon_0.GetCurrentMagazine() != null && this.Weapon_0.GetCurrentMagazineCount() == 0 && !this.Weapon_0.ManualBoltCatch)
					{
						this.FirearmsAnimator_0.SetBoltCatch(true);
					}
					if (normalizedStartFrameTime <= 0.75f && 0.75f < normalizedEndFrameTime)
					{
						this.InternalRemoveAmmoFromChamber();
						this.InternalOnAddAmmoInChamber();
					}
					if (normalizedStartFrameTime <= 0.99f && 0.99f < normalizedEndFrameTime)
					{
						this.InternalOnFireEndEvent();
					}
					this.Float_8 = normalizedEndFrameTime;
				}

				// Token: 0x06015B9C RID: 88988 RVA: 0x007258A0 File Offset: 0x00723AA0
				public virtual void InternalOnFireEvent()
				{
					Weapon.EMalfunctionState emalfunctionState;
					Weapon.EMalfunctionSource malfSource;
					this.SingleShotData_0 = base.method_5(out emalfunctionState, out malfSource);
					this.ShowIncompatibleNotification();
					this.Weapon_0.MalfState.State = emalfunctionState;
					if (emalfunctionState != Weapon.EMalfunctionState.None)
					{
						this.Weapon_0.MalfState.LastMalfunctionTime = GClass1891.PastTime;
						if (this.Player_0.Skills.TroubleFixingDurElite.Value)
						{
							this.Weapon_0.MalfState.AddMalfReduceChance(this.Player_0.ProfileId, malfSource);
						}
						this.FirearmsAnimator_0.MisfireSlideUnknown(false);
						if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
						{
							this.Player_0.InventoryController.ExamineMalfunction(this.Weapon_0, true);
						}
					}
					if (emalfunctionState == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmController_0.bool_3 = true;
						this.method_13();
					}
					else
					{
						if (emalfunctionState == Weapon.EMalfunctionState.None)
						{
							this.FirearmController_0.bool_3 = false;
							this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						}
						else
						{
							this.FirearmController_0.bool_3 = true;
						}
						FireModeComponent fireMode = this.FirearmController_0.Item.FireMode;
						this.FirearmController_0.IsBirstOf2Start = (fireMode.FireMode == Weapon.EFireMode.burst && this.Int_1 == 0 && fireMode.BurstShotsCount == 2);
						this.MakeShot(this.SingleShotData_0.AmmoToFire, 0, false);
						this.Int_1++;
						this.FirearmController_0.IsBirstOf2Start = false;
						if (this.Weapon_0.HasChambers)
						{
							if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Feed)
							{
								this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.SingleShotData_0.FedAmmo, 0);
								this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(false, 0);
							}
							else
							{
								this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.SingleShotData_0.AmmoToFire.IsUsed, 0);
							}
						}
						if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Jam || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.SoftSlide || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.HardSlide || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Feed)
						{
							this.Player_0.InventoryController.ExamineMalfunction(this.Weapon_0, true);
							this.method_13();
						}
						if (this.FirearmController_0.method_65())
						{
							this.Player_0.InventoryController.ProcessFastWeaponSwitchAvailability();
						}
					}
					this.FirearmController_0._player.MouseLook(false);
				}

				// Token: 0x06015B9D RID: 88989 RVA: 0x00725B14 File Offset: 0x00723D14
				public void InternalOnShellEjectEvent()
				{
					if (!this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoToFire != null)
					{
						this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.SingleShotData_0.AmmoToFire, 0);
						this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.SingleShotData_0.AmmoToFire.IsUsed, 0);
					}
					base.method_8();
				}

				// Token: 0x06015B9E RID: 88990 RVA: 0x002649D6 File Offset: 0x00262BD6
				public override void OnShellEjectEvent()
				{
				}

				// Token: 0x06015B9F RID: 88991 RVA: 0x002649D8 File Offset: 0x00262BD8
				public override void OnAddAmmoInChamber()
				{
				}

				// Token: 0x06015BA0 RID: 88992 RVA: 0x002649DA File Offset: 0x00262BDA
				public override void RemoveAmmoFromChamber()
				{
				}

				// Token: 0x06015BA1 RID: 88993 RVA: 0x002649DC File Offset: 0x00262BDC
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
				}

				// Token: 0x06015BA2 RID: 88994 RVA: 0x00725B80 File Offset: 0x00723D80
				public void InternalRemoveAmmoFromChamber()
				{
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber(0f);
					}
					if (this.SingleShotData_0.AmmoWillBeLoadedToChamber == null || this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.None)
					{
						this.FirearmController_0.bool_3 = true;
					}
				}

				// Token: 0x06015BA3 RID: 88995 RVA: 0x00725BD8 File Offset: 0x00723DD8
				public void InternalOnAddAmmoInChamber()
				{
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.SingleShotData_0.AmmoCountInChamberAfterShot);
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.SingleShotData_0.AmmoCountInMagAfterShot);
					if (this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoWillBeLoadedToChamber != null)
					{
						this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.SingleShotData_0.AmmoWillBeLoadedToChamber, 0);
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015BA4 RID: 88996 RVA: 0x00725C6C File Offset: 0x00723E6C
				public virtual void InternalOnFireEndEvent()
				{
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.SingleShotData_0.AmmoCountInChamberAfterShot);
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.SingleShotData_0.AmmoCountInMagAfterShot);
					if (this.Weapon_0.SelectedFireMode == Weapon.EFireMode.burst)
					{
						if (this.Int_1 < this.Int_2 && this.SingleShotData_0.AmmoCountInChamberAfterShot > 0)
						{
							this.FirearmController_0.IsTriggerPressed = true;
							return;
						}
						this.FirearmController_0.IsTriggerPressed = false;
					}
					if (this.Action_0 != null)
					{
						this.FirearmController_0.IsTriggerPressed = false;
						this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						this.SetAiming(false);
						this.method_12();
						return;
					}
					if (this.FirearmController_0.IsTriggerPressed && !this.Bool_0)
					{
						if ((this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoCountInChamberAfterShot == 0) || (!this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoCountInMagAfterShot == 0))
						{
							if (this.Weapon_0.IsBoltCatch)
							{
								this.method_11();
								return;
							}
							this.method_11();
							this.FirearmController_0.SetTriggerPressed(true);
						}
						return;
					}
					this.method_11();
				}

				// Token: 0x06015BA5 RID: 88997 RVA: 0x002649DE File Offset: 0x00262BDE
				public override void FastForward()
				{
					this.method_11();
				}

				// Token: 0x06015BA6 RID: 88998 RVA: 0x00725DA4 File Offset: 0x00723FA4
				public void method_11()
				{
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetInventory(this.Bool_0);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.1f);
					this.FirearmController_0.EmitEvents();
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.autoFireOn = false;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015BA7 RID: 88999 RVA: 0x00725E38 File Offset: 0x00724038
				public void method_12()
				{
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.1f);
					this.FirearmController_0.EmitEvents();
					this.SetAiming(false);
					this.FirearmController_0.autoFireOn = false;
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015BA8 RID: 89000 RVA: 0x002649E6 File Offset: 0x00262BE6
				public override void SetAiming(bool isAiming)
				{
					if (this.Weapon_0.HasMagazineWithBelt())
					{
						return;
					}
					this.FirearmController_0.IsAiming = isAiming;
				}

				// Token: 0x06015BA9 RID: 89001 RVA: 0x00725EB4 File Offset: 0x007240B4
				public void method_13()
				{
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.FirearmController_0.autoFireOn = false;
					this.State = Player.EOperationState.Finished;
					switch (this.Weapon_0.MalfState.State)
					{
					case Weapon.EMalfunctionState.Misfire:
						this.FirearmsAnimator_0.Animator.Play("MISFIRE", 1, 0f);
						break;
					case Weapon.EMalfunctionState.Jam:
						this.FirearmsAnimator_0.Animator.Play("JAM", 1, 0f);
						break;
					case Weapon.EMalfunctionState.HardSlide:
						this.FirearmsAnimator_0.Animator.Play("HARD_SLIDE", 1, 0f);
						break;
					case Weapon.EMalfunctionState.SoftSlide:
						this.FirearmsAnimator_0.Animator.Play("SOFT_SLIDE", 1, 0f);
						break;
					case Weapon.EMalfunctionState.Feed:
						this.FirearmsAnimator_0.Animator.Play("FEED", 1, 0f);
						break;
					}
					this.FirearmController_0.EmitEvents();
					this.Weapon_0.MalfState.AmmoToFire = this.SingleShotData_0.AmmoToFire;
					this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber = this.SingleShotData_0.AmmoWillBeLoadedToChamber;
					this.Weapon_0.MalfState.MalfunctionedAmmo = (this.SingleShotData_0.FedAmmo ?? this.SingleShotData_0.AmmoToFire);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2049>().Start();
				}

				// Token: 0x0401289D RID: 75933
				[NonSerialized]
				public const float Float_0 = 0f;

				// Token: 0x0401289E RID: 75934
				[NonSerialized]
				public const float Float_1 = 0.25f;

				// Token: 0x0401289F RID: 75935
				[NonSerialized]
				public const float Float_2 = 0.75f;

				// Token: 0x040128A0 RID: 75936
				[NonSerialized]
				public const float Float_3 = 0.75f;

				// Token: 0x040128A1 RID: 75937
				[NonSerialized]
				public const float Float_4 = 0.99f;

				// Token: 0x040128A2 RID: 75938
				[NonSerialized]
				public const int Int_0 = 3;

				// Token: 0x040128A3 RID: 75939
				[NonSerialized]
				public int Int_1;

				// Token: 0x040128A4 RID: 75940
				[NonSerialized]
				public float Float_5;

				// Token: 0x040128A5 RID: 75941
				[NonSerialized]
				public float Float_6;

				// Token: 0x040128A6 RID: 75942
				[NonSerialized]
				public float Float_7;

				// Token: 0x040128A7 RID: 75943
				[NonSerialized]
				public Player.FirearmController.GClass2028.SingleShotData SingleShotData_0;

				// Token: 0x040128A8 RID: 75944
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128A9 RID: 75945
				[NonSerialized]
				public int Int_2;

				// Token: 0x040128AA RID: 75946
				[NonSerialized]
				public float Float_8;
			}

			// Token: 0x020039BC RID: 14780
			public abstract class GClass2015 : Player.FirearmController.GClass2013
			{
				// Token: 0x17003541 RID: 13633
				// (get) Token: 0x06015BAA RID: 89002 RVA: 0x00264A02 File Offset: 0x00262C02
				// (set) Token: 0x06015BAB RID: 89003 RVA: 0x00264A0A File Offset: 0x00262C0A
				public Slot Slot_0 { get; set; }

				// Token: 0x06015BAC RID: 89004 RVA: 0x00264A13 File Offset: 0x00262C13
				public GClass2015(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BAD RID: 89005 RVA: 0x00726048 File Offset: 0x00724248
				public void method_5(bool isAiming)
				{
					if (this.FirearmController_0.CurrentMasteringLevel < 2)
					{
						return;
					}
					this.Player_0.ProceduralWeaponAnimation.TacticalReload = isAiming;
					if (isAiming && !EFTHardSettings.Instance.CanAimInState(this.Player_0.CurrentState.Name))
					{
						return;
					}
					if (this.FirearmController_0.float_2 > EFTHardSettings.Instance.STOP_AIMING_AT && isAiming)
					{
						this.FirearmController_0.AimingInterruptedByOverlap = false;
						return;
					}
					this.FirearmController_0.IsAiming = isAiming;
				}

				// Token: 0x06015BAE RID: 89006 RVA: 0x007260CC File Offset: 0x007242CC
				public void Start([CanBeNull] Callback callback)
				{
					this.Callback_0 = callback;
					this.Slot_0 = (this.Weapon_0.HasChambers ? this.Weapon_0.Chambers[0] : null);
					this.Player_0.ProceduralWeaponAnimation.TacticalReload = true;
					this.Player_0.ExecuteSkill(new Action(this.method_8));
					this.FirearmsAnimator_0.SetInventory(false);
					this.FirearmController_0.SetCompassState(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.Player_0.RemoveLeftHandItem(2.5f);
					base.Start();
				}

				// Token: 0x17003542 RID: 13634
				// (get) Token: 0x06015BAF RID: 89007 RVA: 0x00264A1C File Offset: 0x00262C1C
				// (set) Token: 0x06015BB0 RID: 89008 RVA: 0x00264A24 File Offset: 0x00262C24
				public override Player.EOperationState State
				{
					get
					{
						return base.State;
					}
					set
					{
						base.State = value;
						if (value != Player.EOperationState.Finished)
						{
							if (value == Player.EOperationState.Executing)
							{
								MovementState currentManagedState = this.Player_0.CurrentManagedState;
								if (currentManagedState == null)
								{
									return;
								}
								currentManagedState.OnReload(true);
							}
							return;
						}
						MovementState currentManagedState2 = this.Player_0.CurrentManagedState;
						if (currentManagedState2 == null)
						{
							return;
						}
						currentManagedState2.OnReload(false);
					}
				}

				// Token: 0x06015BB1 RID: 89009 RVA: 0x00264A62 File Offset: 0x00262C62
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Bool_0 = fastDrop;
					this.Action_0 = onHidden;
				}

				// Token: 0x06015BB2 RID: 89010 RVA: 0x00264A72 File Offset: 0x00262C72
				public override void Reset()
				{
					this.Action_0 = null;
					this.Bool_0 = false;
					this.Callback_0 = null;
					this.Slot_0 = null;
					base.Reset();
				}

				// Token: 0x06015BB3 RID: 89011 RVA: 0x00264A96 File Offset: 0x00262C96
				public void method_6()
				{
					Callback callback_ = this.Callback_0;
					if (callback_ == null)
					{
						return;
					}
					callback_.Succeed();
				}

				// Token: 0x06015BB4 RID: 89012 RVA: 0x00264AA8 File Offset: 0x00262CA8
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
				}

				// Token: 0x06015BB5 RID: 89013 RVA: 0x00264AB6 File Offset: 0x00262CB6
				public void method_7()
				{
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.InventoryOpened);
				}

				// Token: 0x06015BB6 RID: 89014 RVA: 0x00264ACE File Offset: 0x00262CCE
				[CompilerGenerated]
				public void method_8()
				{
					this.Player_0.Skills.WeaponReloadAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x040128AB RID: 75947
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128AC RID: 75948
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040128AD RID: 75949
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128AE RID: 75950
				[CompilerGenerated]
				[NonSerialized]
				public Slot Slot_0_1;
			}

			// Token: 0x020039BD RID: 14781
			public class DefaultWeaponOperationClass : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015BB7 RID: 89015 RVA: 0x00264AF0 File Offset: 0x00262CF0
				public DefaultWeaponOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BB8 RID: 89016 RVA: 0x00726184 File Offset: 0x00724384
				public override void Start()
				{
					base.Start();
					this.FirearmsAnimator_0.SetBoltActionReload(!this.FirearmController_0.IsTriggerPressed);
					this.Player_0.ProceduralWeaponAnimation.TacticalReload = (this.Player_0.ProceduralWeaponAnimation.IsMountedState && !this.Player_0.ProceduralWeaponAnimation.IsVerticalMounting && this.Player_0.ProceduralWeaponAnimation.IsBipodUsed);
				}

				// Token: 0x06015BB9 RID: 89017 RVA: 0x00264AF9 File Offset: 0x00262CF9
				public override void SetTriggerPressed(bool pressed)
				{
					base.SetTriggerPressed(pressed);
					this.FirearmsAnimator_0.SetBoltActionReload(!this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015BBA RID: 89018 RVA: 0x00264B1B File Offset: 0x00262D1B
				public override void SetInventoryOpened(bool opened)
				{
					base.SetInventoryOpened(opened);
					this.FirearmsAnimator_0.SetBoltActionReload(true);
				}

				// Token: 0x06015BBB RID: 89019 RVA: 0x00264B30 File Offset: 0x00262D30
				public override void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback finishCallback, Callback startCallback)
				{
					base.ReloadMag(magazine, itemAddress, finishCallback, startCallback);
					this.FirearmsAnimator_0.SetBoltActionReload(true);
				}

				// Token: 0x06015BBC RID: 89020 RVA: 0x00264B49 File Offset: 0x00262D49
				public override void QuickReloadMag(MagazineItemClass magazine, Callback finishCallback, Callback startCallback)
				{
					base.QuickReloadMag(magazine, finishCallback, startCallback);
					this.FirearmsAnimator_0.SetBoltActionReload(true);
				}

				// Token: 0x06015BBD RID: 89021 RVA: 0x00264B60 File Offset: 0x00262D60
				public override void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback)
				{
					base.ReloadWithAmmo(ammoPack, finishCallback, startCallback);
					this.FirearmsAnimator_0.SetBoltActionReload(true);
				}

				// Token: 0x06015BBE RID: 89022 RVA: 0x00264B77 File Offset: 0x00262D77
				public override void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback, bool quickReload = false)
				{
					base.ReloadCylinderMagazine(ammoPack, finishCallback, startCallback, quickReload);
					this.FirearmsAnimator_0.SetBoltActionReload(true);
				}

				// Token: 0x06015BBF RID: 89023 RVA: 0x00264B90 File Offset: 0x00262D90
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					base.HideWeapon(onHidden, fastDrop, null);
				}

				// Token: 0x06015BC0 RID: 89024 RVA: 0x00264BA9 File Offset: 0x00262DA9
				public override void OnAimingDisabled()
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					base.OnAimingDisabled();
				}
			}

			// Token: 0x020039BE RID: 14782
			public class GClass2023 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015BC1 RID: 89025 RVA: 0x00264BBF File Offset: 0x00262DBF
				public GClass2023(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BC2 RID: 89026 RVA: 0x007261F8 File Offset: 0x007243F8
				public virtual void Start(AmmoItemClass item, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					this.AmmoItemClass = item;
					this.Callback_0 = callback;
					this.Int_0 = camoraIndex;
					this.CylinderMagazineItemClass = (this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass);
					this.ItemAddress_0 = itemAddress;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.Discharge(true);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetCamoraIndexForUnloadAmmo(camoraIndex);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015BC3 RID: 89027 RVA: 0x00264BCF File Offset: 0x00262DCF
				public override void Reset()
				{
					base.Reset();
					this.AmmoItemClass = null;
					this.Callback_0 = null;
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.Int_0 = -1;
					this.CylinderMagazineItemClass = null;
					this.ItemAddress_0 = null;
				}

				// Token: 0x06015BC4 RID: 89028 RVA: 0x00264C08 File Offset: 0x00262E08
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnMagAppeared();
					this.OnMagPuttedToRig();
				}

				// Token: 0x06015BC5 RID: 89029 RVA: 0x0072629C File Offset: 0x0072449C
				public override void OnMagAppeared()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.FirearmsAnimator_0.Discharge(false);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInChamberCount);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.WeaponManagerClass.DestroyPatronInWeapon(this.Int_0);
					this.FirearmsAnimator_0.SetCanReload(false);
					if (this.ItemAddress_0 == null)
					{
						return;
					}
					this.method_5();
				}

				// Token: 0x06015BC6 RID: 89030 RVA: 0x00264C20 File Offset: 0x00262E20
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					if (this.ItemAddress_0 != null)
					{
						return;
					}
					this.method_5();
				}

				// Token: 0x06015BC7 RID: 89031 RVA: 0x00726320 File Offset: 0x00724520
				public void method_5()
				{
					this.CylinderMagazineItemClass.ResetCamoraIndex();
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.State = Player.EOperationState.Finished;
					this.method_6();
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
				}

				// Token: 0x06015BC8 RID: 89032 RVA: 0x00264C41 File Offset: 0x00262E41
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015BC9 RID: 89033 RVA: 0x00264C5B File Offset: 0x00262E5B
				public void method_6()
				{
					this.FirearmsAnimator_0.LoadOneTrigger(this.ItemAddress_0 != null);
				}

				// Token: 0x040128AF RID: 75951
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x040128B0 RID: 75952
				[NonSerialized]
				public CylinderMagazineItemClass CylinderMagazineItemClass;

				// Token: 0x040128B1 RID: 75953
				[NonSerialized]
				public ItemAddress ItemAddress_0;

				// Token: 0x040128B2 RID: 75954
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128B3 RID: 75955
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128B4 RID: 75956
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128B5 RID: 75957
				[NonSerialized]
				public int Int_0 = -1;
			}

			// Token: 0x020039BF RID: 14783
			public class GClass2025 : Player.FirearmController.GClass2024
			{
				// Token: 0x06015BCA RID: 89034 RVA: 0x00264C71 File Offset: 0x00262E71
				public GClass2025(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BCB RID: 89035 RVA: 0x00726378 File Offset: 0x00724578
				public override void RemoveAmmoFromChamber()
				{
					this.Callback_0.Succeed();
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.FirearmsAnimator_0.SetCanReload(false);
					if (this.Bool_0)
					{
						this.WeaponManagerClass.RemoveShellInWeapon(0);
						return;
					}
					this.WeaponManagerClass.DestroyPatronInWeapon(this.Int_0);
				}

				// Token: 0x06015BCC RID: 89036 RVA: 0x007263F0 File Offset: 0x007245F0
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.Discharge(false);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					if (base.Boolean_0)
					{
						this.RemoveAmmoFromChamber();
					}
				}
			}

			// Token: 0x020039C0 RID: 14784
			public class GClass2024 : Player.FirearmController.GClass2013
			{
				// Token: 0x17003543 RID: 13635
				// (get) Token: 0x06015BCD RID: 89037 RVA: 0x00264C7A File Offset: 0x00262E7A
				public bool Boolean_0
				{
					get
					{
						return this.ItemAddress_0 != null;
					}
				}

				// Token: 0x06015BCE RID: 89038 RVA: 0x00264C85 File Offset: 0x00262E85
				public GClass2024(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BCF RID: 89039 RVA: 0x00726440 File Offset: 0x00724640
				public virtual void Start(AmmoItemClass ammo, int chamberIndex, ItemAddress destinationAddress, Callback callback)
				{
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					this.Callback_0 = callback;
					this.Bool_0 = ammo.IsUsed;
					this.Int_0 = chamberIndex;
					this.ItemAddress_0 = destinationAddress;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.Discharge(true);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetChamberIndexForLoadUnloadAmmo((float)this.Int_0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.method_5();
					base.method_3();
				}

				// Token: 0x06015BD0 RID: 89040 RVA: 0x00264C95 File Offset: 0x00262E95
				public override void Reset()
				{
					base.Reset();
					this.ItemAddress_0 = null;
					this.Callback_0 = null;
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.Int_0 = -1;
				}

				// Token: 0x06015BD1 RID: 89041 RVA: 0x00264CC0 File Offset: 0x00262EC0
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnMagPuttedToRig();
				}

				// Token: 0x06015BD2 RID: 89042 RVA: 0x007264FC File Offset: 0x007246FC
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.Discharge(false);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.FirearmsAnimator_0.SetCanReload(false);
					if (this.Bool_0)
					{
						this.WeaponManagerClass.RemoveShellInWeapon(0);
						return;
					}
					this.WeaponManagerClass.DestroyPatronInWeapon(this.Int_0);
				}

				// Token: 0x06015BD3 RID: 89043 RVA: 0x00264CD2 File Offset: 0x00262ED2
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015BD4 RID: 89044 RVA: 0x00264CEC File Offset: 0x00262EEC
				public void method_5()
				{
					this.FirearmsAnimator_0.LoadOneTrigger(this.Boolean_0);
				}

				// Token: 0x040128B6 RID: 75958
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128B7 RID: 75959
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128B8 RID: 75960
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128B9 RID: 75961
				[NonSerialized]
				public int Int_0 = -1;

				// Token: 0x040128BA RID: 75962
				[NonSerialized]
				public ItemAddress ItemAddress_0;
			}

			// Token: 0x020039C1 RID: 14785
			public class GClass2026 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015BD5 RID: 89045 RVA: 0x00264CFF File Offset: 0x00262EFF
				public GClass2026(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BD6 RID: 89046 RVA: 0x007265A8 File Offset: 0x007247A8
				public virtual void Start(Item item, Callback callback)
				{
					this.Callback_0 = callback;
					base.Start();
					this.FirearmController_0.SetCompassState(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetInventory(false);
					this.FirearmController_0.SetAim(false);
					this.FirearmController_0._player.SendHandsInteractionStateChanged(true, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
				}

				// Token: 0x06015BD7 RID: 89047 RVA: 0x00264D08 File Offset: 0x00262F08
				public override void Reset()
				{
					this.Callback_0 = null;
					this.Bool_0 = false;
					base.Reset();
				}

				// Token: 0x06015BD8 RID: 89048 RVA: 0x00264D1E File Offset: 0x00262F1E
				public override void SetAiming(bool isAiming)
				{
					if (!isAiming)
					{
						this.FirearmController_0.IsAiming = false;
					}
				}

				// Token: 0x06015BD9 RID: 89049 RVA: 0x00264D2F File Offset: 0x00262F2F
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnBackpackDropEvent();
				}

				// Token: 0x06015BDA RID: 89050 RVA: 0x0072662C File Offset: 0x0072482C
				public override void OnBackpackDropEvent()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0._player.SendHandsInteractionStateChanged(false, 300);
					WeaponAnimationSpeedControllerClass.ResetTriggerHandReady(this.FirearmController_0.firearmsAnimator_0.Animator);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.bool_2);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
				}

				// Token: 0x06015BDB RID: 89051 RVA: 0x00264D41 File Offset: 0x00262F41
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.bool_2 = opened;
				}

				// Token: 0x06015BDC RID: 89052 RVA: 0x00264D4F File Offset: 0x00262F4F
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x040128BB RID: 75963
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128BC RID: 75964
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x020039C2 RID: 14786
			public class GClass2047 : Player.FirearmController.GClass2046
			{
				// Token: 0x06015BDD RID: 89053 RVA: 0x00264D52 File Offset: 0x00262F52
				public GClass2047(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015BDE RID: 89054 RVA: 0x007266B0 File Offset: 0x007248B0
				public new void Start()
				{
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					base.Start();
				}

				// Token: 0x06015BDF RID: 89055 RVA: 0x00264D5B File Offset: 0x00262F5B
				public override void Reset()
				{
					this.Bool_0 = false;
					base.Reset();
				}

				// Token: 0x06015BE0 RID: 89056 RVA: 0x00264D6A File Offset: 0x00262F6A
				public override void OnMalfunctionOffEvent()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.Player_0.InventoryController.ExamineMalfunctionType(this.Weapon_0);
					base.method_5();
				}

				// Token: 0x06015BE1 RID: 89057 RVA: 0x00264D98 File Offset: 0x00262F98
				public override void FastForward()
				{
					this.OnMalfunctionOffEvent();
				}

				// Token: 0x040128BD RID: 75965
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x020039C3 RID: 14787
			public abstract class GClass2013 : Player.BaseAnimationOperationClass
			{
				// Token: 0x06015BE2 RID: 89058 RVA: 0x00726708 File Offset: 0x00724908
				public GClass2013(Player.FirearmController controller) : base(controller)
				{
					this.FirearmController_0 = controller;
					this.Player_0 = this.FirearmController_0._player;
					this.FirearmsAnimator_0 = this.FirearmController_0.firearmsAnimator_0;
					this.WeaponManagerClass = this.FirearmController_0.weaponManagerClass;
					this.Weapon_0 = this.FirearmController_0.Item;
				}

				// Token: 0x06015BE3 RID: 89059 RVA: 0x00264DA0 File Offset: 0x00262FA0
				public virtual bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return lightsStates != null && lightsStates.Length != 0;
				}

				// Token: 0x06015BE4 RID: 89060 RVA: 0x00264DAC File Offset: 0x00262FAC
				public void SetLightsState(FirearmLightStateStruct[] lightsStates, bool force = false, bool animated = true)
				{
					if (!force && !this.CanChangeLightState(lightsStates))
					{
						return;
					}
					if (animated)
					{
						this.FirearmsAnimator_0.ModToggleTrigger();
					}
					this.WeaponManagerClass.UpdateBeams();
				}

				// Token: 0x06015BE5 RID: 89061 RVA: 0x00264DD4 File Offset: 0x00262FD4
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x06015BE6 RID: 89062 RVA: 0x00726768 File Offset: 0x00724968
				public void method_2()
				{
					this.Player_0.ExecuteSkill(new Action(this.method_4));
					this.Player_0.InventoryController.CallUnknownMalfunctionStartRepair(this.Weapon_0);
					this.Player_0.InventoryController.CallMalfunctionRepaired(this.Weapon_0);
					this.Weapon_0.MalfState.Repair();
					this.FirearmsAnimator_0.MalfunctionRepair(false);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.FirearmsAnimator_0.MisfireSlideUnknown(false);
					this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					this.Weapon_0.MalfState.AmmoToFire = null;
					this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber = null;
					this.Weapon_0.MalfState.MalfunctionedAmmo = null;
				}

				// Token: 0x06015BE7 RID: 89063 RVA: 0x00726848 File Offset: 0x00724A48
				public void method_3()
				{
					int num = 0;
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						if (this.Weapon_0.ShellsInChambers[i] != null)
						{
							num++;
							this.FirearmsAnimator_0.SetChamberIndexWithShell((float)i);
						}
					}
					if (num == this.Weapon_0.ShellsInChambers.Length)
					{
						this.FirearmsAnimator_0.SetChamberIndexWithShell((float)num);
					}
					if (num == 0)
					{
						this.FirearmsAnimator_0.SetChamberIndexWithShell(-1f);
					}
				}

				// Token: 0x06015BE8 RID: 89064 RVA: 0x00264DEB File Offset: 0x00262FEB
				public void SetScopeMode(FirearmScopeStateStruct[] scopeStates)
				{
					if (this.CanChangeScopeStates(scopeStates))
					{
						this.FirearmsAnimator_0.ModToggleTrigger();
						this.WeaponManagerClass.UpdateScopesMode();
					}
				}

				// Token: 0x06015BE9 RID: 89065 RVA: 0x00264E0C File Offset: 0x0026300C
				public virtual bool CanRemove()
				{
					return false;
				}

				// Token: 0x06015BEA RID: 89066 RVA: 0x00264E0F File Offset: 0x0026300F
				public virtual void ShowGesture(EInteraction gesture)
				{
					base.method_0();
				}

				// Token: 0x06015BEB RID: 89067 RVA: 0x00264E17 File Offset: 0x00263017
				public virtual void BlindFire(int b)
				{
					this.BlindFire_Internal(0);
				}

				// Token: 0x06015BEC RID: 89068 RVA: 0x00264E20 File Offset: 0x00263020
				public virtual void OnFold(bool b)
				{
					base.method_0();
				}

				// Token: 0x06015BED RID: 89069 RVA: 0x00264E28 File Offset: 0x00263028
				public void BlindFire_Internal(int b)
				{
					this.FirearmController_0.Blindfire = (b != 0);
					if (b != 0 && this.FirearmController_0.IsAiming)
					{
						this.FirearmController_0.IsAiming = false;
					}
					this.Player_0.ProceduralWeaponAnimation.StartBlindFire(b);
				}

				// Token: 0x06015BEE RID: 89070 RVA: 0x00264E66 File Offset: 0x00263066
				public virtual void FastForward()
				{
				}

				// Token: 0x06015BEF RID: 89071 RVA: 0x00264E68 File Offset: 0x00263068
				public virtual bool CanChangeScopeStates(FirearmScopeStateStruct[] scopeStates)
				{
					return scopeStates != null && scopeStates.Length != 0;
				}

				// Token: 0x06015BF0 RID: 89072 RVA: 0x00264E74 File Offset: 0x00263074
				public virtual void SetFirearmCompassState(bool active)
				{
					base.method_0();
				}

				// Token: 0x06015BF1 RID: 89073 RVA: 0x00264E7C File Offset: 0x0026307C
				public virtual void OnMagPulledOutFromWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015BF2 RID: 89074 RVA: 0x00264E84 File Offset: 0x00263084
				public virtual void OnMagPuttedToRig()
				{
					base.method_0();
				}

				// Token: 0x06015BF3 RID: 89075 RVA: 0x00264E8C File Offset: 0x0026308C
				public virtual void OnMagAppeared()
				{
					base.method_0();
				}

				// Token: 0x06015BF4 RID: 89076 RVA: 0x00264E94 File Offset: 0x00263094
				public virtual void OnMagInsertedToWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015BF5 RID: 89077 RVA: 0x00264E9C File Offset: 0x0026309C
				public virtual void OnModChanged()
				{
					base.method_0();
				}

				// Token: 0x06015BF6 RID: 89078 RVA: 0x00264EA4 File Offset: 0x002630A4
				public virtual void OnAddAmmoInChamber()
				{
					base.method_0();
				}

				// Token: 0x06015BF7 RID: 89079 RVA: 0x00264EAC File Offset: 0x002630AC
				public virtual void RemoveAmmoFromChamber()
				{
					base.method_0();
				}

				// Token: 0x06015BF8 RID: 89080 RVA: 0x00264EB4 File Offset: 0x002630B4
				public virtual void OnOnOffBoltCatchEvent(bool isCaught)
				{
					base.method_0();
				}

				// Token: 0x06015BF9 RID: 89081 RVA: 0x00264EBC File Offset: 0x002630BC
				public virtual void OnBackpackDropEvent()
				{
					base.method_0();
				}

				// Token: 0x06015BFA RID: 89082 RVA: 0x00264EC4 File Offset: 0x002630C4
				public virtual void OnFireEvent()
				{
					base.method_0();
				}

				// Token: 0x06015BFB RID: 89083 RVA: 0x00264ECC File Offset: 0x002630CC
				public virtual void OnFireEndEvent()
				{
					base.method_0();
				}

				// Token: 0x06015BFC RID: 89084 RVA: 0x00264ED4 File Offset: 0x002630D4
				public virtual void OnIdleStartEvent()
				{
					base.method_0();
				}

				// Token: 0x06015BFD RID: 89085 RVA: 0x00264EDC File Offset: 0x002630DC
				public virtual void OnUtilityOperationStartEvent()
				{
					base.method_0();
				}

				// Token: 0x06015BFE RID: 89086 RVA: 0x00264EE4 File Offset: 0x002630E4
				public virtual void SetTriggerPressed(bool pressed)
				{
					base.method_0();
				}

				// Token: 0x06015BFF RID: 89087 RVA: 0x00264EEC File Offset: 0x002630EC
				public virtual void ShowIncompatibleNotification()
				{
				}

				// Token: 0x06015C00 RID: 89088 RVA: 0x00264EEE File Offset: 0x002630EE
				public virtual void SetInventoryOpened(bool opened)
				{
					base.method_0();
				}

				// Token: 0x06015C01 RID: 89089 RVA: 0x00264EF6 File Offset: 0x002630F6
				public virtual void SetAiming(bool isAiming)
				{
					base.method_0();
				}

				// Token: 0x06015C02 RID: 89090 RVA: 0x00264EFE File Offset: 0x002630FE
				public virtual bool ChangeFireMode(Weapon.EFireMode fireMode)
				{
					base.method_0();
					return true;
				}

				// Token: 0x06015C03 RID: 89091 RVA: 0x00264F07 File Offset: 0x00263107
				public virtual bool CheckFireMode()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015C04 RID: 89092 RVA: 0x00264F10 File Offset: 0x00263110
				public virtual void OnSprintFinished()
				{
					base.method_0();
				}

				// Token: 0x06015C05 RID: 89093 RVA: 0x00264F18 File Offset: 0x00263118
				public virtual void OnSprintStart()
				{
					base.method_0();
				}

				// Token: 0x06015C06 RID: 89094 RVA: 0x00264F20 File Offset: 0x00263120
				public virtual void OnDropWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015C07 RID: 89095 RVA: 0x00264F28 File Offset: 0x00263128
				public virtual void OnJumpOrFall()
				{
					base.method_0();
				}

				// Token: 0x06015C08 RID: 89096 RVA: 0x00264F30 File Offset: 0x00263130
				public virtual void OnAimingDisabled()
				{
					base.method_0();
				}

				// Token: 0x06015C09 RID: 89097 RVA: 0x00264F38 File Offset: 0x00263138
				public virtual bool ExamineWeapon()
				{
					base.method_0();
					return true;
				}

				// Token: 0x06015C0A RID: 89098 RVA: 0x00264F41 File Offset: 0x00263141
				public virtual void RollCylinder(Callback callback, bool rollToZeroCamora)
				{
					base.method_0();
				}

				// Token: 0x06015C0B RID: 89099 RVA: 0x00264F49 File Offset: 0x00263149
				public virtual void Execute(GInterface438 operation, Callback callback)
				{
					base.method_0();
					if (this.FirearmController_0.method_20(operation))
					{
						if (callback != null)
						{
							callback.Succeed();
							return;
						}
					}
					else if (callback != null)
					{
						callback.Fail(string.Format("Attach is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C0C RID: 89100 RVA: 0x00264F82 File Offset: 0x00263182
				public virtual void ReloadMag(MagazineItemClass magazine, [CanBeNull] ItemAddress itemAddress, [CanBeNull] Callback finishCallback, [CanBeNull] Callback startCallback)
				{
					base.method_0();
					if (finishCallback != null)
					{
						finishCallback.Fail(string.Format("Reload is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C0D RID: 89101 RVA: 0x00264FA3 File Offset: 0x002631A3
				public virtual void QuickReloadMag(MagazineItemClass magazine, [CanBeNull] Callback finishCallback, [CanBeNull] Callback startCallback)
				{
					base.method_0();
					if (finishCallback != null)
					{
						finishCallback.Fail(string.Format("Quick reload is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C0E RID: 89102 RVA: 0x00264FC4 File Offset: 0x002631C4
				public virtual void ReloadGrenadeLauncher(AmmoPackReloadingClass ammoPack, [CanBeNull] Callback callback)
				{
					base.method_0();
					if (callback != null)
					{
						callback.Fail(string.Format("Reload with ammo is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C0F RID: 89103 RVA: 0x00264FE5 File Offset: 0x002631E5
				public virtual void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, [CanBeNull] Callback finishCallback, [CanBeNull] Callback startCallback)
				{
					base.method_0();
					if (finishCallback != null)
					{
						finishCallback.Fail(string.Format("Reload with ammo is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C10 RID: 89104 RVA: 0x00265006 File Offset: 0x00263206
				public virtual void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, [CanBeNull] Callback finishCallback, [CanBeNull] Callback startCallback, bool quickReload = false)
				{
					base.method_0();
					if (finishCallback != null)
					{
						finishCallback.Fail(string.Format("Reload revolver drum is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C11 RID: 89105 RVA: 0x00265027 File Offset: 0x00263227
				public virtual void ReloadBarrels(AmmoPackReloadingClass ammoPack, ItemAddress placeToPutContainedAmmoMagazine, [CanBeNull] Callback finishCallback, [CanBeNull] Callback startCallback)
				{
					base.method_0();
					if (finishCallback != null)
					{
						finishCallback.Fail(string.Format("Reload with ammo is not supported in current operation: {0}", base.GetType()));
					}
				}

				// Token: 0x06015C12 RID: 89106 RVA: 0x00265048 File Offset: 0x00263248
				public virtual bool CanStartReload()
				{
					return false;
				}

				// Token: 0x06015C13 RID: 89107 RVA: 0x0026504B File Offset: 0x0026324B
				public virtual void OnRemoveShellEvent()
				{
					base.method_0();
				}

				// Token: 0x06015C14 RID: 89108 RVA: 0x00265053 File Offset: 0x00263253
				public virtual void OnShellEjectEvent()
				{
					base.method_0();
				}

				// Token: 0x06015C15 RID: 89109 RVA: 0x0026505B File Offset: 0x0026325B
				public override void Update(float deltaTime)
				{
				}

				// Token: 0x06015C16 RID: 89110 RVA: 0x0026505D File Offset: 0x0026325D
				public virtual void AddAmmoToMag()
				{
					base.method_0();
				}

				// Token: 0x06015C17 RID: 89111 RVA: 0x00265065 File Offset: 0x00263265
				public virtual void OnShowAmmo(bool value)
				{
					base.method_0();
				}

				// Token: 0x06015C18 RID: 89112 RVA: 0x0026506D File Offset: 0x0026326D
				public virtual void WeaponAppeared()
				{
					base.method_0();
				}

				// Token: 0x06015C19 RID: 89113 RVA: 0x00265075 File Offset: 0x00263275
				public virtual void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					base.method_0();
				}

				// Token: 0x06015C1A RID: 89114 RVA: 0x0026507D File Offset: 0x0026327D
				public virtual void HideWeaponComplete()
				{
					base.method_0();
				}

				// Token: 0x06015C1B RID: 89115 RVA: 0x00265085 File Offset: 0x00263285
				public virtual bool CheckAmmo()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015C1C RID: 89116 RVA: 0x0026508E File Offset: 0x0026328E
				public virtual bool CheckChamber()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015C1D RID: 89117 RVA: 0x00265097 File Offset: 0x00263297
				public virtual void OnMalfunctionOffEvent()
				{
					base.method_0();
				}

				// Token: 0x06015C1E RID: 89118 RVA: 0x0026509F File Offset: 0x0026329F
				public virtual void Pickup(bool p)
				{
					if (this.FirearmsAnimator_0.IsIdling())
					{
						this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
						this.FirearmsAnimator_0.SetPickup(p);
					}
				}

				// Token: 0x06015C1F RID: 89119 RVA: 0x002650CF File Offset: 0x002632CF
				public virtual void Interact(bool isInteracting, int actionIndex)
				{
					if (this.FirearmsAnimator_0.IsIdling())
					{
						this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
						this.Player_0.SendHandsInteractionStateChanged(isInteracting, actionIndex);
						this.FirearmsAnimator_0.SetInteract(isInteracting, actionIndex);
					}
				}

				// Token: 0x06015C20 RID: 89120 RVA: 0x0026510D File Offset: 0x0026330D
				public virtual void Loot(bool p)
				{
					if (this.FirearmsAnimator_0.IsIdling())
					{
						this.FirearmsAnimator_0.SetLooting(p);
					}
				}

				// Token: 0x06015C21 RID: 89121 RVA: 0x00265128 File Offset: 0x00263328
				public virtual void UnderbarrelSightingRangeUp()
				{
					base.method_0();
				}

				// Token: 0x06015C22 RID: 89122 RVA: 0x00265130 File Offset: 0x00263330
				public virtual void ForceSetUnderbarrelRangeIndex(int rangeIndex)
				{
					base.method_0();
				}

				// Token: 0x06015C23 RID: 89123 RVA: 0x00265138 File Offset: 0x00263338
				public virtual void UnderbarrelSightingRangeDown()
				{
					base.method_0();
				}

				// Token: 0x06015C24 RID: 89124 RVA: 0x00265140 File Offset: 0x00263340
				public virtual void UseSecondMagForReload()
				{
					base.method_0();
				}

				// Token: 0x06015C25 RID: 89125 RVA: 0x00265148 File Offset: 0x00263348
				public virtual void ReplaceSecondMag()
				{
					base.method_0();
				}

				// Token: 0x06015C26 RID: 89126 RVA: 0x00265150 File Offset: 0x00263350
				public virtual void PutMagToRig()
				{
					base.method_0();
				}

				// Token: 0x06015C27 RID: 89127 RVA: 0x00265158 File Offset: 0x00263358
				public virtual bool ToggleLauncher(Action callback = null)
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015C28 RID: 89128 RVA: 0x00265161 File Offset: 0x00263361
				public virtual void ToggleLeftStance()
				{
					base.method_0();
				}

				// Token: 0x06015C29 RID: 89129 RVA: 0x00265169 File Offset: 0x00263369
				public virtual bool CanNotBeInterrupted()
				{
					return false;
				}

				// Token: 0x06015C2A RID: 89130 RVA: 0x0026516C File Offset: 0x0026336C
				public virtual void LauncherAppeared()
				{
					base.method_0();
				}

				// Token: 0x06015C2B RID: 89131 RVA: 0x00265174 File Offset: 0x00263374
				public virtual void LauncherDisappeared()
				{
					base.method_0();
				}

				// Token: 0x06015C2C RID: 89132 RVA: 0x0026517C File Offset: 0x0026337C
				public virtual void LauncherInventoryUnchamberFromMainWeapon(AmmoItemClass ammo, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					base.method_0();
				}

				// Token: 0x06015C2D RID: 89133 RVA: 0x00265184 File Offset: 0x00263384
				public virtual void LoadLauncherFromMainWeapon(AmmoItemClass ammo, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					base.method_0();
				}

				// Token: 0x06015C2E RID: 89134 RVA: 0x0026518C File Offset: 0x0026338C
				public virtual void DropBackpackOperationInvoke(Item item, Callback callback)
				{
					base.method_0();
				}

				// Token: 0x06015C2F RID: 89135 RVA: 0x00265194 File Offset: 0x00263394
				public virtual void SprintStateChanged(bool value)
				{
					base.method_0();
				}

				// Token: 0x06015C30 RID: 89136 RVA: 0x0026519C File Offset: 0x0026339C
				public virtual void OnBipodToggleEvent()
				{
					base.method_0();
				}

				// Token: 0x06015C31 RID: 89137 RVA: 0x002651A4 File Offset: 0x002633A4
				public virtual bool ToggleBipod()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015C32 RID: 89138 RVA: 0x002651AD File Offset: 0x002633AD
				[CompilerGenerated]
				public void method_4()
				{
					this.Player_0.Skills.WeaponFixAction.Complete(1f);
				}

				// Token: 0x040128BE RID: 75966
				[NonSerialized]
				public Player.FirearmController FirearmController_0;

				// Token: 0x040128BF RID: 75967
				[NonSerialized]
				public Player Player_0;

				// Token: 0x040128C0 RID: 75968
				[NonSerialized]
				public FirearmsAnimator FirearmsAnimator_0;

				// Token: 0x040128C1 RID: 75969
				[NonSerialized]
				public WeaponManagerClass WeaponManagerClass;

				// Token: 0x040128C2 RID: 75970
				[NonSerialized]
				public Weapon Weapon_0;
			}

			// Token: 0x020039C4 RID: 14788
			public class RevolverFireOperationClass : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015C33 RID: 89139 RVA: 0x002651C9 File Offset: 0x002633C9
				public RevolverFireOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C34 RID: 89140 RVA: 0x007268C4 File Offset: 0x00724AC4
				public override void Start()
				{
					this.CylinderMagazineItemClass = (this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass);
					this.Int_0 = this.CylinderMagazineItemClass.GetCamoraFireOrLoadStartIndex(!this.Weapon_0.CylinderHammerClosed);
					this.FirearmsAnimator_0.SetCamoraFireIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					if (this.CylinderMagazineItemClass.GetFirstAmmo(!this.Weapon_0.CylinderHammerClosed) == null)
					{
						this.State = Player.EOperationState.Executing;
						this.method_14();
						return;
					}
					base.Start();
				}

				// Token: 0x06015C35 RID: 89141 RVA: 0x0072694C File Offset: 0x00724B4C
				public void method_14()
				{
					this.Bool_5 = true;
					this.FirearmsAnimator_0.SetCamoraFireIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					if ((this.Weapon_0.CylinderHammerClosed && this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.doubleaction) || (!this.Weapon_0.CylinderHammerClosed && this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.single))
					{
						this.CylinderMagazineItemClass.DryFireIncrementCamoraIndex();
					}
					this.FirearmsAnimator_0.SetDoubleAction(Convert.ToSingle(this.Weapon_0.CylinderHammerClosed));
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.Weapon_0.CylinderHammerClosed = (this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.doubleaction);
					this.FirearmsAnimator_0.SetFire(true);
					this.Bool_1 = true;
					this.FirearmController_0.DryShot(this.Int_0, false);
				}

				// Token: 0x06015C36 RID: 89142 RVA: 0x002651D9 File Offset: 0x002633D9
				public override void Reset()
				{
					base.Reset();
					this.Bool_5 = false;
					this.Int_0 = -1;
					this.CylinderMagazineItemClass = null;
					this.SingleShotData_0 = default(Player.FirearmController.GClass2028.SingleShotData);
					this.Bool_1 = false;
				}

				// Token: 0x06015C37 RID: 89143 RVA: 0x00726A38 File Offset: 0x00724C38
				public override void OnFireEvent()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					this.MakeShot(this.SingleShotData_0.AmmoToFire, this.Int_0, false);
					this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.SingleShotData_0.AmmoToFire.IsUsed, this.Int_0);
				}

				// Token: 0x06015C38 RID: 89144 RVA: 0x00726A94 File Offset: 0x00724C94
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.Weapon_0.CylinderHammerClosed = (this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.doubleaction);
					this.FirearmsAnimator_0.SetDoubleAction(Convert.ToSingle(this.Weapon_0.CylinderHammerClosed));
				}

				// Token: 0x06015C39 RID: 89145 RVA: 0x00265209 File Offset: 0x00263409
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
				}

				// Token: 0x06015C3A RID: 89146 RVA: 0x0026521E File Offset: 0x0026341E
				public override void SetInventoryOpened(bool opened)
				{
					base.SetInventoryOpened(opened);
					this.FirearmController_0.InventoryOpened = opened;
				}

				// Token: 0x06015C3B RID: 89147 RVA: 0x00265233 File Offset: 0x00263433
				public override void OnFireEndEvent()
				{
					if (this.Bool_5)
					{
						this.FirearmsAnimator_0.SetDoubleAction(Convert.ToSingle(this.Weapon_0.CylinderHammerClosed));
					}
				}

				// Token: 0x06015C3C RID: 89148 RVA: 0x00726AF0 File Offset: 0x00724CF0
				public override void OnIdleStartEvent()
				{
					if (!this.Bool_1)
					{
						return;
					}
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					if (this.Action_0 != null)
					{
						this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						this.SetAiming(false);
						this.method_17();
						return;
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.method_15();
				}

				// Token: 0x06015C3D RID: 89149 RVA: 0x00265258 File Offset: 0x00263458
				public override void OnShellEjectEvent()
				{
				}

				// Token: 0x06015C3E RID: 89150 RVA: 0x0026525A File Offset: 0x0026345A
				public override void FastForward()
				{
					this.OnFireEvent();
					this.method_15();
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.2f);
				}

				// Token: 0x06015C3F RID: 89151 RVA: 0x00726B70 File Offset: 0x00724D70
				public override void PrepareShot()
				{
					AmmoItemClass firstAmmo = this.CylinderMagazineItemClass.GetFirstAmmo(!this.Weapon_0.CylinderHammerClosed);
					this.SingleShotData_0 = default(Player.FirearmController.GClass2028.SingleShotData);
					GStruct154<GInterface424> gstruct = this.CylinderMagazineItemClass.RemoveAmmoInCamora(firstAmmo, this.FirearmController_0._player.InventoryController);
					if (gstruct.Failed)
					{
						UnityEngine.Debug.LogError(gstruct.Error);
						return;
					}
					this.Player_0.InventoryController.CheckChamber(this.Weapon_0, false);
					if (firstAmmo == null)
					{
						UnityEngine.Debug.LogError("Fire operation can't start in case of no ammo");
						return;
					}
					this.SingleShotData_0.AmmoToFire = firstAmmo;
					this.SingleShotData_0.AmmoToFire.IsUsed = true;
					this.Weapon_0.ShellsInChambers[this.Int_0] = (AmmoTemplate)this.SingleShotData_0.AmmoToFire.Template;
					if (this.Weapon_0.CylinderHammerClosed || this.Weapon_0.FireMode.FireMode != Weapon.EFireMode.doubleaction)
					{
						this.CylinderMagazineItemClass.IncrementCamoraIndex(false);
					}
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.ShowIncompatibleNotification();
					this.FirearmController_0._player.MouseLook(false);
				}

				// Token: 0x06015C40 RID: 89152 RVA: 0x00726CB0 File Offset: 0x00724EB0
				public void method_15()
				{
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.FirearmsAnimator_0.SetInventory(this.Bool_0);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015C41 RID: 89153 RVA: 0x00726D14 File Offset: 0x00724F14
				public void method_16()
				{
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.State = Player.EOperationState.Finished;
					this.Weapon_0.MalfState.AmmoToFire = this.SingleShotData_0.AmmoToFire;
					this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber = this.SingleShotData_0.AmmoWillBeLoadedToChamber;
					this.Weapon_0.MalfState.MalfunctionedAmmo = (this.SingleShotData_0.FedAmmo ?? this.SingleShotData_0.AmmoToFire);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2049>().Start();
				}

				// Token: 0x06015C42 RID: 89154 RVA: 0x00726DCC File Offset: 0x00724FCC
				public void method_17()
				{
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.SetAiming(false);
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x040128C3 RID: 75971
				[NonSerialized]
				public CylinderMagazineItemClass CylinderMagazineItemClass;

				// Token: 0x040128C4 RID: 75972
				[NonSerialized]
				public int Int_0 = -1;

				// Token: 0x040128C5 RID: 75973
				[NonSerialized]
				public bool Bool_5;
			}

			// Token: 0x020039C5 RID: 14789
			public class FireOnlyBarrelFireOperation : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015C43 RID: 89155 RVA: 0x00265289 File Offset: 0x00263489
				public FireOnlyBarrelFireOperation(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C44 RID: 89156 RVA: 0x00726E20 File Offset: 0x00725020
				public override void PrepareShot()
				{
					if (this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.single)
					{
						Slot firstLoadedChamberSlot = this.Weapon_0.FirstLoadedChamberSlot;
						int chamberIndex = Array.IndexOf<Slot>(this.Weapon_0.Chambers, firstLoadedChamberSlot);
						this.method_15(chamberIndex);
					}
					else
					{
						this.method_14();
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015C45 RID: 89157 RVA: 0x00726E84 File Offset: 0x00725084
				public void method_14()
				{
					for (int i = 0; i < this.Weapon_0.Chambers.Length; i++)
					{
						this.method_15(i);
					}
				}

				// Token: 0x06015C46 RID: 89158 RVA: 0x00726EB0 File Offset: 0x007250B0
				public void method_15(int chamberIndex)
				{
					Player.FirearmController.GClass2028.SingleShotData item = new Player.FirearmController.GClass2028.SingleShotData
					{
						AmmoCountInChamberBeforeShot = this.Weapon_0.ChamberAmmoCount
					};
					Slot slot = this.Weapon_0.Chambers[chamberIndex];
					AmmoItemClass ammoItemClass = slot.ContainedItem as AmmoItemClass;
					if (ammoItemClass != null && !ammoItemClass.IsUsed)
					{
						ammoItemClass.IsUsed = true;
						bool succeeded = slot.RemoveItem(false).Succeeded;
						this.List_0.Add(chamberIndex);
						item.AmmoToFire = ammoItemClass;
						this.List_1.Add(item);
						return;
					}
				}

				// Token: 0x06015C47 RID: 89159 RVA: 0x002652A8 File Offset: 0x002634A8
				public override void Reset()
				{
					base.Reset();
					this.List_0.Clear();
					this.List_1.Clear();
				}

				// Token: 0x06015C48 RID: 89160 RVA: 0x002652C6 File Offset: 0x002634C6
				public override void RemoveAmmoFromChamber()
				{
					base.method_0();
				}

				// Token: 0x06015C49 RID: 89161 RVA: 0x002652CE File Offset: 0x002634CE
				public override void OnAddAmmoInChamber()
				{
					base.method_0();
				}

				// Token: 0x06015C4A RID: 89162 RVA: 0x00726F38 File Offset: 0x00725138
				public override void OnFireEvent()
				{
					this.Bool_1 = true;
					this.MakeMultiBarrelShot(this.List_1, this.List_0);
					for (int i = 0; i < this.List_1.Count; i++)
					{
						this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.List_1[i].AmmoToFire.IsUsed, this.List_0[i]);
						this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						this.SetTriggerPressed(false);
						this.Weapon_0.ShellsInChambers[this.List_0[i]] = (AmmoTemplate)this.List_1[i].AmmoToFire.Template;
					}
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
				}

				// Token: 0x040128C6 RID: 75974
				[NonSerialized]
				public List<int> List_0 = new List<int>();

				// Token: 0x040128C7 RID: 75975
				[NonSerialized]
				public List<Player.FirearmController.GClass2028.SingleShotData> List_1 = new List<Player.FirearmController.GClass2028.SingleShotData>();
			}

			// Token: 0x020039C6 RID: 14790
			public class GenericFireOperationClass : Player.FirearmController.GClass2028
			{
				// Token: 0x06015C4B RID: 89163 RVA: 0x002652D6 File Offset: 0x002634D6
				public GenericFireOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C4C RID: 89164 RVA: 0x0072702C File Offset: 0x0072522C
				public new virtual void Start()
				{
					this.FirearmsAnimator_0.SetBoltActionReload(true);
					base.Start();
					this.PrepareShot();
					this.Float_0 = 60f / (float)this.Weapon_0.SingleFireRate;
					this.Bool_4 = this.Weapon_0.CanQueueSecondShot;
					this.StartFireAnimation();
				}

				// Token: 0x06015C4D RID: 89165 RVA: 0x00727080 File Offset: 0x00725280
				public virtual void StartFireAnimation()
				{
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None)
					{
						if (this.Weapon_0 is RevolverItemClass && this.Weapon_0.CylinderHammerClosed)
						{
							this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullDoubleActionFireStateName, 1, 0.2f);
							return;
						}
						if (this.Weapon_0.FireMode.FireMode == Weapon.EFireMode.semiauto)
						{
							this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullSemiFireStateName, 1, 0.2f);
							return;
						}
						this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullFireStateName, 1, 0.2f);
					}
				}

				// Token: 0x06015C4E RID: 89166 RVA: 0x002652E6 File Offset: 0x002634E6
				public override void Reset()
				{
					base.Reset();
					this.SingleShotData_0 = default(Player.FirearmController.GClass2028.SingleShotData);
					this.Bool_1 = false;
					this.Float_0 = 0f;
					this.Bool_2 = false;
					this.Bool_3 = false;
				}

				// Token: 0x06015C4F RID: 89167 RVA: 0x00727134 File Offset: 0x00725334
				public override void OnFireEvent()
				{
					this.Bool_1 = true;
					this.MakeShot(this.SingleShotData_0.AmmoToFire, 0, false);
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.SingleShotData_0.AmmoToFire.IsUsed, 0);
					}
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Jam || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.SoftSlide || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.HardSlide || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Feed)
					{
						this.Player_0.InventoryController.ExamineMalfunction(this.Weapon_0, true);
						this.method_11();
					}
					if (this.FirearmController_0.method_65())
					{
						this.Player_0.InventoryController.ProcessFastWeaponSwitchAvailability();
					}
				}

				// Token: 0x06015C50 RID: 89168 RVA: 0x00727234 File Offset: 0x00725434
				public virtual void PrepareShot()
				{
					Weapon.EMalfunctionState emalfunctionState;
					Weapon.EMalfunctionSource malfSource;
					this.SingleShotData_0 = base.method_5(out emalfunctionState, out malfSource);
					this.Weapon_0.MalfState.State = emalfunctionState;
					if (emalfunctionState == Weapon.EMalfunctionState.None)
					{
						this.FirearmController_0.bool_3 = false;
						this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					}
					else
					{
						this.Weapon_0.MalfState.LastMalfunctionTime = GClass1891.PastTime;
						this.FirearmController_0.bool_3 = true;
						if (this.Player_0.Skills.TroubleFixingDurElite.Value)
						{
							this.Weapon_0.MalfState.AddMalfReduceChance(this.Player_0.ProfileId, malfSource);
						}
						this.FirearmsAnimator_0.MisfireSlideUnknown(false);
						if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
						{
							this.Player_0.InventoryController.ExamineMalfunction(this.Weapon_0, true);
						}
						if (emalfunctionState == Weapon.EMalfunctionState.Misfire)
						{
							this.method_11();
						}
						else
						{
							this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						}
					}
					this.ShowIncompatibleNotification();
					this.FirearmController_0._player.MouseLook(false);
				}

				// Token: 0x06015C51 RID: 89169 RVA: 0x0026531A File Offset: 0x0026351A
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
					if (this.SingleShotData_0.AmmoWillBeLoadedToChamber == null || this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.None)
					{
						this.FirearmController_0.bool_3 = true;
					}
				}

				// Token: 0x06015C52 RID: 89170 RVA: 0x00727350 File Offset: 0x00725550
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.SingleShotData_0.AmmoCountInChamberAfterShot);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.SingleShotData_0.AmmoCountInMagAfterShot);
					if (this.SingleShotData_0.AmmoWillBeLoadedToChamber != null)
					{
						this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.SingleShotData_0.AmmoWillBeLoadedToChamber, 0);
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015C53 RID: 89171 RVA: 0x007273CC File Offset: 0x007255CC
				public override void OnShellEjectEvent()
				{
					if (!this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoToFire != null)
					{
						this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.SingleShotData_0.AmmoToFire, 0);
						this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.SingleShotData_0.AmmoToFire.IsUsed, 0);
					}
					base.method_8();
				}

				// Token: 0x06015C54 RID: 89172 RVA: 0x00265357 File Offset: 0x00263557
				public override void Update(float deltaTime)
				{
					this.Float_0 -= deltaTime;
					if (this.Float_0 <= 0f && this.Bool_2)
					{
						this.method_13();
					}
				}

				// Token: 0x06015C55 RID: 89173 RVA: 0x00265382 File Offset: 0x00263582
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
					this.Bool_3 |= (pressed && this.Bool_4);
				}

				// Token: 0x06015C56 RID: 89174 RVA: 0x002653B0 File Offset: 0x002635B0
				public override void OnFireEndEvent()
				{
					this.FirearmController_0.IsTriggerPressed = false;
					if (!this.Weapon_0.HasChambers && this.SingleShotData_0.AmmoToFire != null)
					{
						this.FirearmController_0.weaponManagerClass.DestroyPatronInWeapon(0);
					}
				}

				// Token: 0x06015C57 RID: 89175 RVA: 0x002653EA File Offset: 0x002635EA
				public override void OnIdleStartEvent()
				{
					if (!this.Bool_1)
					{
						return;
					}
					this.Bool_2 = true;
				}

				// Token: 0x06015C58 RID: 89176 RVA: 0x00727438 File Offset: 0x00725638
				public void method_10()
				{
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.SingleShotData_0.AmmoCountInMagAfterShot);
					this.FirearmsAnimator_0.SetInventory(this.Bool_0);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					if (this.Bool_3 && !this.Bool_0)
					{
						this.FirearmController_0.CurrentOperation.SetTriggerPressed(true);
						this.FirearmController_0.CurrentOperation.SetTriggerPressed(false);
					}
				}

				// Token: 0x06015C59 RID: 89177 RVA: 0x007274F0 File Offset: 0x007256F0
				public void method_11()
				{
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.State = Player.EOperationState.Finished;
					this.Weapon_0.MalfState.AmmoToFire = this.SingleShotData_0.AmmoToFire;
					this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber = this.SingleShotData_0.AmmoWillBeLoadedToChamber;
					this.Weapon_0.MalfState.MalfunctionedAmmo = (this.SingleShotData_0.FedAmmo ?? this.SingleShotData_0.AmmoToFire);
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2049>().Start();
				}

				// Token: 0x06015C5A RID: 89178 RVA: 0x007275A8 File Offset: 0x007257A8
				public void method_12()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.SingleShotData_0.AmmoCountInChamberAfterShot);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.SingleShotData_0.AmmoCountInMagAfterShot);
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.SetAiming(false);
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015C5B RID: 89179 RVA: 0x00727614 File Offset: 0x00725814
				public void method_13()
				{
					if (this.Action_0 != null)
					{
						this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
						this.SetAiming(false);
						this.method_12();
						return;
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.method_10();
				}

				// Token: 0x06015C5C RID: 89180 RVA: 0x0072766C File Offset: 0x0072586C
				public override void FastForward()
				{
					base.FastForward();
					if (!this.Bool_1)
					{
						this.OnFireEvent();
					}
					this.Bool_3 = false;
					this.method_13();
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.2f);
				}

				// Token: 0x040128C8 RID: 75976
				[NonSerialized]
				public Player.FirearmController.GClass2028.SingleShotData SingleShotData_0;

				// Token: 0x040128C9 RID: 75977
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128CA RID: 75978
				[NonSerialized]
				public float Float_0;

				// Token: 0x040128CB RID: 75979
				[NonSerialized]
				public bool Bool_2;

				// Token: 0x040128CC RID: 75980
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x040128CD RID: 75981
				[NonSerialized]
				public bool Bool_4 = true;
			}

			// Token: 0x020039C7 RID: 14791
			public class GClass2028 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015C5D RID: 89181 RVA: 0x002653FC File Offset: 0x002635FC
				public GClass2028(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C5E RID: 89182 RVA: 0x00265405 File Offset: 0x00263605
				public override void SetLeftStanceAnimOnStartOperation()
				{
				}

				// Token: 0x06015C5F RID: 89183 RVA: 0x007276BC File Offset: 0x007258BC
				public Player.FirearmController.GClass2028.SingleShotData method_5(out Weapon.EMalfunctionState malfState, out Weapon.EMalfunctionSource malfSource)
				{
					AmmoItemClass ammoToFire;
					AmmoItemClass ammoItemClass;
					int num;
					this.method_6(out ammoToFire, out ammoItemClass, out num);
					BackendConfigSettingsClass instance = Singleton<BackendConfigSettingsClass>.Instance;
					float num2;
					float currentOverheat = this.Weapon_0.GetCurrentOverheat(GClass1891.PastTime, instance.Overheat, out num2);
					malfState = this.FirearmController_0.GetMalfunctionState(ammoToFire, num > 0, this.Weapon_0.IsBoltCatch, this.Weapon_0.GetCurrentMagazine() != null, currentOverheat, instance.Overheat.FixSlideOverheat, out malfSource);
					if (!this.Player_0.IsAI && this.Weapon_0.Template.AllowMisfire)
					{
						IHealthController healthController = this.Player_0.HealthController;
						if (((healthController != null) ? healthController.FindActiveEffect<GInterface369>(EBodyPart.Common) : null) != null)
						{
							malfState = Weapon.EMalfunctionState.Misfire;
							malfSource = Weapon.EMalfunctionSource.Effect;
						}
					}
					this.Weapon_0.MalfState.Source = malfSource;
					if (this.Player_0.IsAI && !instance.Malfunction.AllowMalfForBots)
					{
						malfState = Weapon.EMalfunctionState.None;
					}
					if (!this.Weapon_0.ValidateMalfunction(malfState))
					{
						malfState = Weapon.EMalfunctionState.None;
					}
					return this.method_7(malfState);
				}

				// Token: 0x06015C60 RID: 89184 RVA: 0x007277B8 File Offset: 0x007259B8
				public void method_6(out AmmoItemClass ammoToFire, out AmmoItemClass ammoToChamber, out int ammoCountInMagBeforeShot)
				{
					Slot[] chambers = this.Weapon_0.Chambers;
					Slot slot = this.Weapon_0.HasChambers ? chambers[0] : null;
					ammoToFire = (((slot != null) ? slot.ContainedItem : null) as AmmoItemClass);
					ammoToChamber = null;
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (currentMagazine == null)
					{
						ammoCountInMagBeforeShot = 0;
						return;
					}
					ammoCountInMagBeforeShot = currentMagazine.Count;
					if (!currentMagazine.IsAmmoCompatible(chambers) || ammoCountInMagBeforeShot <= 0)
					{
						return;
					}
					if (!this.Weapon_0.HasChambers)
					{
						ammoToFire = (AmmoItemClass)currentMagazine.Cartridges.Last;
						return;
					}
					ammoToChamber = (AmmoItemClass)currentMagazine.Cartridges.Last;
				}

				// Token: 0x06015C61 RID: 89185 RVA: 0x00727858 File Offset: 0x00725A58
				public Player.FirearmController.GClass2028.SingleShotData method_7(Weapon.EMalfunctionState malfState)
				{
					bool flag = malfState == Weapon.EMalfunctionState.Feed;
					Slot[] chambers = this.Weapon_0.Chambers;
					Player.FirearmController.GClass2028.SingleShotData singleShotData = new Player.FirearmController.GClass2028.SingleShotData
					{
						AmmoCountInChamberBeforeShot = (this.Weapon_0.HasChambers ? this.Weapon_0.ChamberAmmoCount : 1)
					};
					Slot slot = this.Weapon_0.HasChambers ? chambers[0] : null;
					AmmoItemClass ammoItemClass = ((slot != null) ? slot.ContainedItem : null) as AmmoItemClass;
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (this.Weapon_0.HasChambers)
					{
						bool succeeded = slot.RemoveItem(false).Succeeded;
						ammoItemClass.IsUsed = true;
						singleShotData.AmmoToFire = ammoItemClass;
					}
					if (currentMagazine == null)
					{
						singleShotData.AmmoCountInChamberAfterShot = 0;
						singleShotData.AmmoWillBeLoadedToChamber = null;
						singleShotData.IsAmmoCompatible = true;
						return singleShotData;
					}
					singleShotData.AmmoCountInMagBeforeShot = currentMagazine.Count;
					singleShotData.IsAmmoCompatible = currentMagazine.IsAmmoCompatible(chambers);
					if (singleShotData.IsAmmoCompatible && singleShotData.AmmoCountInMagBeforeShot > 0 && (malfState == Weapon.EMalfunctionState.None || malfState == Weapon.EMalfunctionState.Feed))
					{
						AmmoItemClass ammoItemClass2 = (AmmoItemClass)((!this.Weapon_0.HasChambers || flag) ? currentMagazine.Cartridges.PopToNowhere(this.FirearmController_0._player.InventoryController).Value.ResultItem : currentMagazine.Cartridges.PopTo(this.FirearmController_0._player.InventoryController, this.Weapon_0.Chambers[0].CreateItemAddress()).Value.ResultItem);
						if (this.Weapon_0.HasChambers)
						{
							if (flag)
							{
								singleShotData.FedAmmo = ammoItemClass2;
							}
							else
							{
								singleShotData.AmmoWillBeLoadedToChamber = ammoItemClass2;
							}
						}
						else
						{
							singleShotData.AmmoToFire = ammoItemClass2;
						}
						this.UncheckOnShot();
					}
					singleShotData.AmmoCountInChamberAfterShot = this.Weapon_0.ChamberAmmoCount;
					singleShotData.AmmoCountInMagAfterShot = this.Weapon_0.GetCurrentMagazineCount();
					return singleShotData;
				}

				// Token: 0x06015C62 RID: 89186 RVA: 0x00265407 File Offset: 0x00263607
				public override void BlindFire(int b)
				{
					base.BlindFire_Internal(b);
				}

				// Token: 0x06015C63 RID: 89187 RVA: 0x00265410 File Offset: 0x00263610
				public override void Reset()
				{
					this.Bool_0 = false;
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015C64 RID: 89188 RVA: 0x00265426 File Offset: 0x00263626
				public override void SetAiming(bool isAiming)
				{
					this.FirearmController_0.IsAiming = isAiming;
				}

				// Token: 0x06015C65 RID: 89189 RVA: 0x00727A38 File Offset: 0x00725C38
				public override void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback finishCallback, Callback startCallback)
				{
					Player.FirearmController.GClass2028.Class1224 @class = new Player.FirearmController.GClass2028.Class1224();
					@class.gclass2028_0 = this;
					@class.magazine = magazine;
					@class.itemAddress = itemAddress;
					@class.finishCallback = finishCallback;
					@class.startCallback = startCallback;
					this.FirearmController_0.IsTriggerPressed = false;
					if (this.Action_0 == null)
					{
						this.Action_0 = new Action(@class.method_0);
						return;
					}
					Callback finishCallback2 = @class.finishCallback;
					if (finishCallback2 == null)
					{
						return;
					}
					finishCallback2.Fail("Action is already planned");
				}

				// Token: 0x06015C66 RID: 89190 RVA: 0x00727AAC File Offset: 0x00725CAC
				public override void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback, bool quickReload = false)
				{
					Player.FirearmController.GClass2028.Class1225 @class = new Player.FirearmController.GClass2028.Class1225();
					@class.gclass2028_0 = this;
					@class.ammoPack = ammoPack;
					@class.finishCallback = finishCallback;
					@class.quickReload = quickReload;
					@class.startCallback = startCallback;
					this.FirearmController_0.IsTriggerPressed = false;
					if (this.Weapon_0.GetCurrentMagazine() == null)
					{
						return;
					}
					if (this.Action_0 == null)
					{
						this.Action_0 = new Action(@class.method_0);
					}
				}

				// Token: 0x06015C67 RID: 89191 RVA: 0x00727B18 File Offset: 0x00725D18
				public override void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback)
				{
					Player.FirearmController.GClass2028.Class1226 @class = new Player.FirearmController.GClass2028.Class1226();
					@class.gclass2028_0 = this;
					@class.ammoPack = ammoPack;
					@class.finishCallback = finishCallback;
					@class.startCallback = startCallback;
					this.FirearmController_0.IsTriggerPressed = false;
					if (this.Weapon_0.GetCurrentMagazine() == null)
					{
						return;
					}
					if (this.Action_0 == null)
					{
						this.Action_0 = new Action(@class.method_0);
					}
				}

				// Token: 0x06015C68 RID: 89192 RVA: 0x00727B7C File Offset: 0x00725D7C
				public override void QuickReloadMag(MagazineItemClass magazine, Callback finishCallback, Callback startCallback)
				{
					Player.FirearmController.GClass2028.Class1227 @class = new Player.FirearmController.GClass2028.Class1227();
					@class.gclass2028_0 = this;
					@class.magazine = magazine;
					@class.finishCallback = finishCallback;
					@class.startCallback = startCallback;
					this.FirearmController_0.IsTriggerPressed = false;
					if (this.Action_0 == null)
					{
						this.Action_0 = new Action(@class.method_0);
						return;
					}
					Callback finishCallback2 = @class.finishCallback;
					if (finishCallback2 == null)
					{
						return;
					}
					finishCallback2.Fail("Action is already planned");
				}

				// Token: 0x06015C69 RID: 89193 RVA: 0x00265434 File Offset: 0x00263634
				public override bool CanStartReload()
				{
					return this.Action_0 == null;
				}

				// Token: 0x06015C6A RID: 89194 RVA: 0x00727BE8 File Offset: 0x00725DE8
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					Player.FirearmController.GClass2028.Class1228 @class = new Player.FirearmController.GClass2028.Class1228();
					@class.gclass2028_0 = this;
					@class.onHidden = onHidden;
					@class.fastDrop = fastDrop;
					@class.nextControllerItem = nextControllerItem;
					this.FirearmController_0.IsTriggerPressed = false;
					this.Action_0 = new Action(@class.method_0);
				}

				// Token: 0x06015C6B RID: 89195 RVA: 0x0026543F File Offset: 0x0026363F
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					if (this.Weapon_0.IsBoltCatch)
					{
						this.FirearmsAnimator_0.SetBoltCatch(isCaught);
					}
				}

				// Token: 0x06015C6C RID: 89196 RVA: 0x0026545A File Offset: 0x0026365A
				public override void SetInventoryOpened(bool opened)
				{
					this.Bool_0 = opened;
				}

				// Token: 0x06015C6D RID: 89197 RVA: 0x00265463 File Offset: 0x00263663
				public void method_8()
				{
					this.FirearmController_0.weaponManagerClass.StartSpawnShell(this.FirearmController_0._player.Velocity * 0.66f, 0);
				}

				// Token: 0x06015C6E RID: 89198 RVA: 0x00727C38 File Offset: 0x00725E38
				public virtual void MakeMultiBarrelShot(List<Player.FirearmController.GClass2028.SingleShotData> singleShotDatas, List<int> chambersForFire)
				{
					bool multiBarrelShot = singleShotDatas.Count > 1;
					for (int i = 0; i < singleShotDatas.Count; i++)
					{
						this.MakeShot(singleShotDatas[i].AmmoToFire, chambersForFire[i], multiBarrelShot);
					}
				}

				// Token: 0x06015C6F RID: 89199 RVA: 0x00265490 File Offset: 0x00263690
				public virtual void MakeShot(AmmoItemClass ammo, int chamberIndex = 0, bool multiBarrelShot = false)
				{
					this.FirearmController_0.method_58(this.FirearmController_0.Item, ammo, chamberIndex, multiBarrelShot);
				}

				// Token: 0x06015C70 RID: 89200 RVA: 0x00727C7C File Offset: 0x00725E7C
				public virtual void UncheckOnShot()
				{
					Weapon item = this.FirearmController_0.Item;
					MagazineItemClass currentMagazine = item.GetCurrentMagazine();
					if (currentMagazine != null)
					{
						this.FirearmController_0._player.InventoryController.CheckChamber(item, this.FirearmController_0._player.Profile.CheckedMagazines.ContainsKey(currentMagazine.Id));
						if (Singleton<BackendConfigSettingsClass>.Instance.UncheckOnShot)
						{
							this.FirearmController_0._player.InventoryController.CheckMagazineAmmoDepend(currentMagazine, new Action(this.method_9), false, true);
							return;
						}
					}
					else
					{
						this.FirearmController_0._player.InventoryController.CheckChamber(item, false);
					}
				}

				// Token: 0x06015C71 RID: 89201 RVA: 0x002654AB File Offset: 0x002636AB
				public void method_9()
				{
				}

				// Token: 0x040128CE RID: 75982
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128CF RID: 75983
				[NonSerialized]
				public Action Action_0;

				// Token: 0x02003B09 RID: 15113
				public struct SingleShotData
				{
					// Token: 0x04012D86 RID: 77190
					public AmmoItemClass AmmoToFire;

					// Token: 0x04012D87 RID: 77191
					[CanBeNull]
					public AmmoItemClass AmmoWillBeLoadedToChamber;

					// Token: 0x04012D88 RID: 77192
					public AmmoItemClass FedAmmo;

					// Token: 0x04012D89 RID: 77193
					public int AmmoCountInChamberBeforeShot;

					// Token: 0x04012D8A RID: 77194
					public int AmmoCountInChamberAfterShot;

					// Token: 0x04012D8B RID: 77195
					public int AmmoCountInMagBeforeShot;

					// Token: 0x04012D8C RID: 77196
					public int AmmoCountInMagAfterShot;

					// Token: 0x04012D8D RID: 77197
					public bool IsAmmoCompatible;
				}

				// Token: 0x02003B0A RID: 15114
				[CompilerGenerated]
				public class Class1224
				{
					// Token: 0x0601625C RID: 90716 RVA: 0x0073EDE0 File Offset: 0x0073CFE0
					public void method_0()
					{
						GStruct156<Player.FirearmController.GClass2006> gstruct = Player.FirearmController.GClass2006.Run(this.gclass2028_0.FirearmController_0._player.InventoryController, this.gclass2028_0.FirearmController_0.Item, this.magazine, false, this.gclass2028_0.FirearmController_0.Item.MalfState.IsKnownMalfunction(this.gclass2028_0.FirearmController_0._player.ProfileId), this.itemAddress);
						if (gstruct.Succeeded)
						{
							this.gclass2028_0.State = Player.EOperationState.Finished;
							this.gclass2028_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2016>().Start(gstruct.Value, this.finishCallback);
							Callback callback = this.startCallback;
							if (callback == null)
							{
								return;
							}
							callback.Succeed();
							return;
						}
						else
						{
							Callback callback2 = this.finishCallback;
							if (callback2 == null)
							{
								return;
							}
							callback2.Invoke(gstruct);
							return;
						}
					}

					// Token: 0x04012D8E RID: 77198
					public Player.FirearmController.GClass2028 gclass2028_0;

					// Token: 0x04012D8F RID: 77199
					public MagazineItemClass magazine;

					// Token: 0x04012D90 RID: 77200
					public ItemAddress itemAddress;

					// Token: 0x04012D91 RID: 77201
					public Callback finishCallback;

					// Token: 0x04012D92 RID: 77202
					public Callback startCallback;
				}

				// Token: 0x02003B0B RID: 15115
				[CompilerGenerated]
				public class Class1225
				{
					// Token: 0x0601625E RID: 90718 RVA: 0x0073EEAC File Offset: 0x0073D0AC
					public void method_0()
					{
						this.gclass2028_0.State = Player.EOperationState.Finished;
						this.gclass2028_0.FirearmController_0.InitiateOperation<Player.FirearmController.CylinderReloadOperationClass>().Start(this.ammoPack, this.finishCallback, this.quickReload);
						Callback callback = this.startCallback;
						if (callback == null)
						{
							return;
						}
						callback.Succeed();
					}

					// Token: 0x04012D93 RID: 77203
					public Player.FirearmController.GClass2028 gclass2028_0;

					// Token: 0x04012D94 RID: 77204
					public AmmoPackReloadingClass ammoPack;

					// Token: 0x04012D95 RID: 77205
					public Callback finishCallback;

					// Token: 0x04012D96 RID: 77206
					public bool quickReload;

					// Token: 0x04012D97 RID: 77207
					public Callback startCallback;
				}

				// Token: 0x02003B0C RID: 15116
				[CompilerGenerated]
				public class Class1226
				{
					// Token: 0x06016260 RID: 90720 RVA: 0x0026A0D8 File Offset: 0x002682D8
					public void method_0()
					{
						this.gclass2028_0.State = Player.EOperationState.Finished;
						this.gclass2028_0.FirearmController_0.InitiateOperation<Player.FirearmController.AmmoPackReloadOperationClass>().Start(this.ammoPack, this.finishCallback);
						Callback callback = this.startCallback;
						if (callback == null)
						{
							return;
						}
						callback.Succeed();
					}

					// Token: 0x04012D98 RID: 77208
					public Player.FirearmController.GClass2028 gclass2028_0;

					// Token: 0x04012D99 RID: 77209
					public AmmoPackReloadingClass ammoPack;

					// Token: 0x04012D9A RID: 77210
					public Callback finishCallback;

					// Token: 0x04012D9B RID: 77211
					public Callback startCallback;
				}

				// Token: 0x02003B0D RID: 15117
				[CompilerGenerated]
				public class Class1227
				{
					// Token: 0x06016262 RID: 90722 RVA: 0x0073EEFC File Offset: 0x0073D0FC
					public void method_0()
					{
						GStruct156<Player.FirearmController.GClass2006> gstruct = Player.FirearmController.GClass2006.Run(this.gclass2028_0.FirearmController_0._player.InventoryController, this.gclass2028_0.FirearmController_0.Item, this.magazine, true, this.gclass2028_0.FirearmController_0.Item.MalfState.IsKnownMalfunction(this.gclass2028_0.FirearmController_0._player.ProfileId), null);
						if (gstruct.Succeeded)
						{
							this.gclass2028_0.State = Player.EOperationState.Finished;
							this.gclass2028_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2016>().Start(gstruct.Value, this.finishCallback);
							Callback callback = this.startCallback;
							if (callback == null)
							{
								return;
							}
							callback.Succeed();
							return;
						}
						else
						{
							Callback callback2 = this.finishCallback;
							if (callback2 == null)
							{
								return;
							}
							callback2.Invoke(gstruct);
							return;
						}
					}

					// Token: 0x04012D9C RID: 77212
					public Player.FirearmController.GClass2028 gclass2028_0;

					// Token: 0x04012D9D RID: 77213
					public MagazineItemClass magazine;

					// Token: 0x04012D9E RID: 77214
					public Callback finishCallback;

					// Token: 0x04012D9F RID: 77215
					public Callback startCallback;
				}

				// Token: 0x02003B0E RID: 15118
				[CompilerGenerated]
				public class Class1228
				{
					// Token: 0x06016264 RID: 90724 RVA: 0x0026A127 File Offset: 0x00268327
					public void method_0()
					{
						this.gclass2028_0.State = Player.EOperationState.Finished;
						this.gclass2028_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(this.onHidden, this.fastDrop, this.nextControllerItem);
					}

					// Token: 0x04012DA0 RID: 77216
					public Player.FirearmController.GClass2028 gclass2028_0;

					// Token: 0x04012DA1 RID: 77217
					public Action onHidden;

					// Token: 0x04012DA2 RID: 77218
					public bool fastDrop;

					// Token: 0x04012DA3 RID: 77219
					public Item nextControllerItem;
				}
			}

			// Token: 0x020039C8 RID: 14792
			public class FlareGunFireOperationClass : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015C72 RID: 89202 RVA: 0x002654AD File Offset: 0x002636AD
				public FlareGunFireOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C73 RID: 89203 RVA: 0x00727D24 File Offset: 0x00725F24
				public override void Start()
				{
					base.Start();
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs4(this.Weapon_0, CommandStatus.Begin, this.Player_0.InventoryController));
				}

				// Token: 0x06015C74 RID: 89204 RVA: 0x002654B6 File Offset: 0x002636B6
				public override void Reset()
				{
					this.AmmoItemClass = null;
					base.Reset();
				}

				// Token: 0x06015C75 RID: 89205 RVA: 0x002654C5 File Offset: 0x002636C5
				public override void PrepareShot()
				{
				}

				// Token: 0x06015C76 RID: 89206 RVA: 0x00727D74 File Offset: 0x00725F74
				public override void OnFireEvent()
				{
					this.Bool_1 = true;
					this.AmmoItemClass = (this.Weapon_0.FirstLoadedChamberSlot.ContainedItem as AmmoItemClass);
					if (this.AmmoItemClass != null && !this.AmmoItemClass.IsUsed)
					{
						this.AmmoItemClass.IsUsed = true;
						this.FirearmController_0.method_55(this.AmmoItemClass);
						this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.AmmoItemClass.IsUsed, 0);
						this.Weapon_0.FirstLoadedChamberSlot.RemoveItem(false);
						return;
					}
				}

				// Token: 0x06015C77 RID: 89207 RVA: 0x002654C7 File Offset: 0x002636C7
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
				}

				// Token: 0x06015C78 RID: 89208 RVA: 0x00727E04 File Offset: 0x00726004
				public override void OnFireEndEvent()
				{
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs4(this.Weapon_0, CommandStatus.Succeed, this.Player_0.InventoryController));
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.Weapon_0.ShellsInChambers[0] = (AmmoTemplate)this.AmmoItemClass.Template;
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015C79 RID: 89209 RVA: 0x002654DC File Offset: 0x002636DC
				public override bool CanNotBeInterrupted()
				{
					return true;
				}

				// Token: 0x040128D0 RID: 75984
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;
			}

			// Token: 0x020039C9 RID: 14793
			public class Class1269 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015C7A RID: 89210 RVA: 0x002654DF File Offset: 0x002636DF
				public Class1269(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C7B RID: 89211 RVA: 0x00727EB0 File Offset: 0x007260B0
				public void Start(FoldOperationClass foldOperation, Callback callback)
				{
					this.Bool_0 = false;
					this.FoldOperationClass = foldOperation;
					FoldableComponent foldable = this.FoldOperationClass.Foldable;
					this.FirearmsAnimator_0.SetInventory(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					if (foldable.CanBeFolded)
					{
						this.Callback_0 = callback;
						this.FirearmsAnimator_0.TriggerFold();
						return;
					}
					UnityEngine.Debug.LogError("FoldOperation can't fold anything");
					this.OnIdleStartEvent();
				}

				// Token: 0x06015C7C RID: 89212 RVA: 0x002654E8 File Offset: 0x002636E8
				public override void OnFold(bool b)
				{
					this.method_5();
				}

				// Token: 0x06015C7D RID: 89213 RVA: 0x002654F0 File Offset: 0x002636F0
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
				}

				// Token: 0x06015C7E RID: 89214 RVA: 0x00727F38 File Offset: 0x00726138
				public void method_5()
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.RecalculateErgonomic();
					this.FirearmsAnimator_0.Fold(this.FoldOperationClass.NewValue);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.InventoryOpened);
					if (this.Bool_0)
					{
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().HideWeapon(this.Action_0, this.Bool_1, null);
					}
					else
					{
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					}
					this.FoldOperationClass = null;
					if (this.Callback_0 != null)
					{
						Callback callback_ = this.Callback_0;
						this.Callback_0 = null;
						callback_.Succeed();
					}
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, (float)this.Weapon_0.CalculateCellSize().X);
					this.Player_0.ProceduralWeaponAnimation.UpdateWeaponVariables();
				}

				// Token: 0x06015C7F RID: 89215 RVA: 0x002654FE File Offset: 0x002636FE
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Bool_0 = true;
					this.Action_0 = onHidden;
					this.Bool_1 = fastDrop;
				}

				// Token: 0x06015C80 RID: 89216 RVA: 0x00265515 File Offset: 0x00263715
				public override void FastForward()
				{
					this.method_5();
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.2f);
				}

				// Token: 0x040128D1 RID: 75985
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128D2 RID: 75986
				[NonSerialized]
				public FoldOperationClass FoldOperationClass;

				// Token: 0x040128D3 RID: 75987
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128D4 RID: 75988
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040128D5 RID: 75989
				[NonSerialized]
				public bool Bool_1;
			}

			// Token: 0x020039CA RID: 14794
			public class GClass2037 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015C81 RID: 89217 RVA: 0x0026553E File Offset: 0x0026373E
				public GClass2037(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015C82 RID: 89218 RVA: 0x00265547 File Offset: 0x00263747
				public override void BlindFire(int b)
				{
					base.BlindFire_Internal(b);
				}

				// Token: 0x06015C83 RID: 89219 RVA: 0x00728014 File Offset: 0x00726214
				public virtual void Start(Action callback = null)
				{
					base.Start();
					this.Player_0.ProceduralWeaponAnimation.TacticalReload = false;
					this.Action_0 = callback;
					this.Float_0 = 0f;
					this.Bool_0 = false;
					this.Float_1 = 0f;
					this.FirearmController_0.SetAnimatorAndProceduralValues();
					if (this.Weapon_0.IsUnderBarrelDeviceActive)
					{
						this.FirearmController_0.ToggleLauncher(callback);
					}
					this.method_5();
					this.FirearmController_0.method_64();
				}

				// Token: 0x06015C84 RID: 89220 RVA: 0x00265550 File Offset: 0x00263750
				public void method_5()
				{
					if (this.Action_0 == null)
					{
						return;
					}
					this.Action_0();
					this.Action_0 = null;
				}

				// Token: 0x06015C85 RID: 89221 RVA: 0x0026556D File Offset: 0x0026376D
				public void method_6()
				{
					if (this.Action_1 == null)
					{
						return;
					}
					this.Action_1();
					this.Action_1 = null;
				}

				// Token: 0x06015C86 RID: 89222 RVA: 0x0026558A File Offset: 0x0026378A
				public override void OnIdleStartEvent()
				{
					this.SetLeftStanceAnimOnStartOperation();
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					this.FirearmController_0.bool_0 = false;
					this.FirearmController_0.bool_1 = false;
					this.method_6();
				}

				// Token: 0x06015C87 RID: 89223 RVA: 0x002655CA File Offset: 0x002637CA
				public override void OnEnd()
				{
					this.FirearmController_0.SetCompassState(false);
				}

				// Token: 0x06015C88 RID: 89224 RVA: 0x00728094 File Offset: 0x00726294
				public override void Update(float deltaTime)
				{
					if (!this.FirearmController_0.IsAiming && !this.FirearmController_0.InventoryOpened && this.FirearmsAnimator_0.IsIdling())
					{
						this.Float_0 += deltaTime;
					}
					else
					{
						this.Float_0 = 0f;
					}
					if ((double)this.Float_0 > EFTHardSettings.Instance.IDLING_MAX_TIME && (double)this.Player_0.MovementIdlingTime > EFTHardSettings.Instance.IDLING_MAX_TIME)
					{
						this.FirearmsAnimator_0.Idle();
						this.Float_0 = 0f;
					}
					this.ProcessAutoshot();
					this.ProcessRemoveOneOffWeapon();
					this.method_7();
				}

				// Token: 0x06015C89 RID: 89225 RVA: 0x002655D8 File Offset: 0x002637D8
				public override void OnDropWeapon()
				{
					this.Player_0.InventoryController.ThrowItem(this.Weapon_0, false, null);
				}

				// Token: 0x06015C8A RID: 89226 RVA: 0x00728138 File Offset: 0x00726338
				public virtual void ProcessRemoveOneOffWeapon()
				{
					if (this.FirearmController_0.Item.IsOneOff && this.FirearmController_0.Item.Repairable.Durability == 0f && this.Player_0.InventoryController.CanThrow(this.Weapon_0))
					{
						this.Player_0.InventoryController.TryThrowItem(this.Weapon_0, null, false);
					}
				}

				// Token: 0x06015C8B RID: 89227 RVA: 0x007281A4 File Offset: 0x007263A4
				public void method_7()
				{
					float layerWeight = this.FirearmsAnimator_0.GetLayerWeight(this.FirearmsAnimator_0.LACTIONS_LAYER_INDEX);
					if (this.Float_2 >= 1f && layerWeight < this.Float_2)
					{
						this.SetLeftStanceAnimOnStartOperation();
					}
					this.Float_2 = layerWeight;
				}

				// Token: 0x06015C8C RID: 89228 RVA: 0x007281EC File Offset: 0x007263EC
				public virtual void ProcessAutoshot()
				{
					if (!this.FirearmController_0.Item.MalfState.AutoshotChanceInited || this.FirearmController_0.Item.MalfState.AutoshotTime <= 0f)
					{
						return;
					}
					if (this.FirearmController_0.Item.MalfState.State != Weapon.EMalfunctionState.None)
					{
						this.FirearmController_0.Item.MalfState.AutoshotTime = -1f;
						return;
					}
					if (GClass1891.PastTime < this.FirearmController_0.Item.MalfState.AutoshotTime)
					{
						return;
					}
					this.FirearmController_0.Item.MalfState.AutoshotTime = -1f;
					Weapon.EFireMode selectedFireMode = this.FirearmController_0.Item.SelectedFireMode;
					this.FirearmController_0.Item.FireMode.FireMode = Weapon.EFireMode.single;
					this.SetTriggerPressed(true);
					this.FirearmController_0.Item.FireMode.FireMode = selectedFireMode;
					if (selectedFireMode == Weapon.EFireMode.semiauto)
					{
						this.SetTriggerPressed(false);
					}
				}

				// Token: 0x06015C8D RID: 89229 RVA: 0x002655F2 File Offset: 0x002637F2
				public override void OnSprintStart()
				{
					this.SetAiming(false);
				}

				// Token: 0x06015C8E RID: 89230 RVA: 0x002655FB File Offset: 0x002637FB
				public override void OnSprintFinished()
				{
				}

				// Token: 0x06015C8F RID: 89231 RVA: 0x002655FD File Offset: 0x002637FD
				public override void OnAimingDisabled()
				{
					this.SetAiming(false);
				}

				// Token: 0x06015C90 RID: 89232 RVA: 0x00265606 File Offset: 0x00263806
				public override void OnJumpOrFall()
				{
					this.SetAiming(false);
				}

				// Token: 0x06015C91 RID: 89233 RVA: 0x0026560F File Offset: 0x0026380F
				public void DisableAimingOnReload()
				{
					if (this.FirearmController_0.CurrentMasteringLevel < 2 || this.Weapon_0.IsBeltMachineGun)
					{
						this.SetAiming(false);
					}
				}

				// Token: 0x06015C92 RID: 89234 RVA: 0x007282EC File Offset: 0x007264EC
				public override void SetAiming(bool isAiming)
				{
					if (isAiming && !EFTHardSettings.Instance.CanAimInState(this.Player_0.CurrentState.Name))
					{
						return;
					}
					if (isAiming && this.FirearmController_0.Blindfire)
					{
						return;
					}
					if (isAiming && this.FirearmController_0.float_2 > EFTHardSettings.Instance.STOP_AIMING_AT && !this.Player_0.MovementContext.IsInMountedState)
					{
						return;
					}
					if (isAiming && !this.FirearmController_0.FirearmsAnimator.IsIdling() && this.FirearmController_0.Item.Template.ReloadMode == Weapon.EReloadMode.OnlyBarrel && !(this.FirearmController_0.Item is RocketLauncherItemClass))
					{
						return;
					}
					if (isAiming && !this.FirearmController_0.FirearmsAnimator.IsIdling() && this.Weapon_0.IsBeltMachineGun)
					{
						return;
					}
					this.FirearmController_0.IsAiming = isAiming;
					this.Float_0 = 0f;
				}

				// Token: 0x06015C93 RID: 89235 RVA: 0x007283D4 File Offset: 0x007265D4
				public override void SetInventoryOpened(bool opened)
				{
					this.SetAiming(false);
					if (this.Weapon_0 is RocketLauncherItemClass)
					{
						this.FirearmsAnimator_0.SetAimingFloat(0f);
					}
					this.SetTriggerPressed(false);
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015C94 RID: 89236 RVA: 0x00728424 File Offset: 0x00726624
				public override void SetTriggerPressed(bool pressed)
				{
					if (pressed && !this.FirearmController_0.SuitableForHandInput)
					{
						return;
					}
					if (pressed && this.FirearmController_0.bool_1)
					{
						return;
					}
					if (this.Weapon_0 is RocketLauncherItemClass && !this.FirearmController_0.IsAiming && this.FirearmController_0.bool_0)
					{
						return;
					}
					if (Singleton<GameWorld>.Instance.LocationId == "hideout" && this.Weapon_0 is RocketLauncherItemClass)
					{
						return;
					}
					if (!this.FirearmController_0.CanPressTrigger())
					{
						if (!pressed)
						{
							this.FirearmController_0.IsTriggerPressed = pressed;
							this.FirearmsAnimator_0.SetFire(pressed);
						}
						UnityEngine.Debug.Log("SetTriggerPressed has been halted. Waiting for network callback...");
						return;
					}
					if (pressed)
					{
						this.ShowIncompatibleNotification();
					}
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Weapon_0.GetCurrentMagazineCount());
					this.FirearmController_0.IsTriggerPressed = pressed;
					if (this.Weapon_0.HasMagazineWithBelt() && ((this.FirearmController_0.bool_0 && this.Weapon_0.WithAnimatorAiming && this.Weapon_0.GetCurrentMagazineCount() > 0 && !this.FirearmController_0.bool_7) || this.FirearmController_0.bool_1))
					{
						return;
					}
					if (this.FirearmController_0.IsTriggerPressed && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None && (this.Weapon_0.ChamberAmmoCount > 0 || this.Weapon_0.IsOneOff || (!this.Weapon_0.HasChambers && this.Weapon_0.GetCurrentMagazineCount() > 0)) && !(this.Weapon_0 is RevolverItemClass))
					{
						this.State = Player.EOperationState.Finished;
						if (this.FirearmController_0.Item.SelectedFireMode != Weapon.EFireMode.single && this.FirearmController_0.Item.SelectedFireMode != Weapon.EFireMode.doublet)
						{
							if (this.FirearmController_0.Item.SelectedFireMode != Weapon.EFireMode.semiauto)
							{
								this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2029>().Start();
								return;
							}
						}
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GenericFireOperationClass>().Start();
						return;
					}
					if (this.FirearmController_0.IsTriggerPressed && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None && this.Weapon_0 is RevolverItemClass)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GenericFireOperationClass>().Start();
						return;
					}
					this.FirearmsAnimator_0.SetFire(pressed);
					if (this.Weapon_0.MalfState.State > Weapon.EMalfunctionState.None && pressed)
					{
						this.FirearmController_0.FirearmsAnimator.MisfireSlideUnknown(false);
						this.Player_0.InventoryController.ExamineMalfunction(this.Weapon_0, false);
					}
					if (pressed)
					{
						this.FirearmController_0.DryShot(0, false);
					}
				}

				// Token: 0x06015C95 RID: 89237 RVA: 0x007286DC File Offset: 0x007268DC
				public override void ShowIncompatibleNotification()
				{
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					bool flag = currentMagazine != null && currentMagazine.IsAmmoCompatible(this.Weapon_0.Chambers);
					if (currentMagazine != null && !flag)
					{
						NotificationManagerClass.DisplaySingletonWarningNotification(string.Format("Ammo ({0}) is not compatible. Need: {1}".Localized(null), currentMagazine.Cartridges.Last.Name.Localized(null), this.Weapon_0.AmmoCaliber), ENotificationDurationType.Default);
					}
					this.Weapon_0.CompatibleAmmo = (flag || currentMagazine == null);
				}

				// Token: 0x06015C96 RID: 89238 RVA: 0x00728760 File Offset: 0x00726960
				public override bool ChangeFireMode(Weapon.EFireMode fireMode)
				{
					Weapon.EFireMode selectedFireMode = this.Weapon_0.SelectedFireMode;
					if (this.Weapon_0.IsBoltCatch && this.Weapon_0.NoFiremodeOnBoltcatch && this.FirearmsAnimator_0.GetBoltCatch())
					{
						return false;
					}
					if (selectedFireMode != fireMode)
					{
						this.method_8(fireMode);
						this.FirearmController_0.Item.FireMode.SetFireMode(fireMode);
						this.FirearmsAnimator_0.SetFireMode(this.FirearmController_0.Item.SelectedFireMode, false);
						this.FirearmController_0.SetCompassState(false);
						if (this.Player_0.ArmsAnimatorCommon.HasParameter(WeaponAnimationSpeedControllerClass.BOOL_FIREMODE_SPRINT))
						{
							this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
						}
						this.method_9();
						return true;
					}
					this.method_9();
					return false;
				}

				// Token: 0x06015C97 RID: 89239 RVA: 0x0072882C File Offset: 0x00726A2C
				public void method_8(Weapon.EFireMode fireMode)
				{
					if (!(this.Weapon_0 is RevolverItemClass))
					{
						return;
					}
					if (fireMode == Weapon.EFireMode.single)
					{
						if (this.Weapon_0.CylinderHammerClosed)
						{
							CylinderMagazineItemClass cylinderMagazineItemClass = this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass;
							cylinderMagazineItemClass.IncrementCamoraIndex(false);
							this.FirearmsAnimator_0.SetCamoraIndex(cylinderMagazineItemClass.CurrentCamoraIndex);
							this.FirearmsAnimator_0.HammerArmed();
						}
						this.FirearmsAnimator_0.SetDoubleAction(0f);
						this.Weapon_0.CylinderHammerClosed = false;
					}
				}

				// Token: 0x06015C98 RID: 89240 RVA: 0x007288A8 File Offset: 0x00726AA8
				public override bool CheckFireMode()
				{
					this.method_9();
					if (this.Weapon_0.FireMode.AvailableEFireModes.Length <= 1)
					{
						return false;
					}
					if (this.FirearmController_0._player.InventoryController.CheckItemAction(this.FirearmController_0.Item, this.FirearmController_0.Item.CurrentAddress).Failed)
					{
						return false;
					}
					this.SetAiming(false);
					if (!(this.Weapon_0 is RevolverItemClass))
					{
						this.FirearmsAnimator_0.TriggerFiremodeCheck();
					}
					if (!(this.Weapon_0 is RevolverItemClass))
					{
						this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.CheckFireMode);
					}
					return true;
				}

				// Token: 0x06015C99 RID: 89241 RVA: 0x00265633 File Offset: 0x00263833
				public void method_9()
				{
					if (this.Weapon_0 != null && this.Player_0.FirstPersonPointOfView)
					{
						Action<Weapon.EFireMode> onShowFireMode = this.Player_0.OnShowFireMode;
						if (onShowFireMode == null)
						{
							return;
						}
						onShowFireMode(this.Weapon_0.SelectedFireMode);
					}
				}

				// Token: 0x06015C9A RID: 89242 RVA: 0x0026566A File Offset: 0x0026386A
				public override void ShowGesture(EInteraction gesture)
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					this.FirearmsAnimator_0.Gesture(gesture);
				}

				// Token: 0x06015C9B RID: 89243 RVA: 0x00728944 File Offset: 0x00726B44
				public override void SetFirearmCompassState(bool active)
				{
					if (active && this.FirearmController_0.Blindfire)
					{
						return;
					}
					if (active)
					{
						this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					}
					this.FirearmController_0.CompassState.Value = active;
					if (active && this.FirearmController_0.IsAiming)
					{
						this.FirearmController_0.SetAim(false);
					}
				}

				// Token: 0x06015C9C RID: 89244 RVA: 0x007289A8 File Offset: 0x00726BA8
				public override bool ExamineWeapon()
				{
					if (this.FirearmController_0.Item.MalfState.State != Weapon.EMalfunctionState.None)
					{
						if ((this.FirearmController_0.Item.MalfState.State == Weapon.EMalfunctionState.Misfire || this.FirearmController_0.Item.MalfState.State == Weapon.EMalfunctionState.SoftSlide || this.FirearmController_0.Item.MalfState.State == Weapon.EMalfunctionState.HardSlide) && !this.FirearmController_0.Item.MalfState.IsKnownMalfunction(this.Player_0.ProfileId))
						{
							if (this.FirearmController_0.IsAiming)
							{
								return false;
							}
							this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.ExamineWeapon);
						}
						else
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2047>().Start();
						}
					}
					else
					{
						if (this.FirearmController_0.IsAiming)
						{
							return false;
						}
						this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.ExamineWeapon);
					}
					this.FirearmsAnimator_0.LookTrigger();
					return true;
				}

				// Token: 0x06015C9D RID: 89245 RVA: 0x0026568D File Offset: 0x0026388D
				public override void RollCylinder(Callback finishCallback, bool rollToZeroCamora)
				{
					if (!(this.Weapon_0 is RevolverItemClass))
					{
						return;
					}
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2054>().Start(finishCallback, rollToZeroCamora);
				}

				// Token: 0x06015C9E RID: 89246 RVA: 0x00728A8C File Offset: 0x00726C8C
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Player_0.PreviousWeaponAimState = this.FirearmController_0._isAiming;
					this.BlindFire(0);
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x06015C9F RID: 89247 RVA: 0x002656B6 File Offset: 0x002638B6
				public override bool CanRemove()
				{
					return true;
				}

				// Token: 0x06015CA0 RID: 89248 RVA: 0x00728AE0 File Offset: 0x00726CE0
				public override void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback finishCallback, Callback startCallback)
				{
					this.DisableAimingOnReload();
					this.SetTriggerPressed(false);
					GStruct156<Player.FirearmController.GClass2006> gstruct = Player.FirearmController.GClass2006.Run(this.Player_0.InventoryController, this.Weapon_0, magazine, false, this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId), itemAddress);
					if (gstruct.Succeeded)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2016>().Start(gstruct.Value, finishCallback);
						if (startCallback != null)
						{
							startCallback.Succeed();
							return;
						}
					}
					else if (finishCallback != null)
					{
						finishCallback.Invoke(gstruct);
					}
				}

				// Token: 0x06015CA1 RID: 89249 RVA: 0x00728B6C File Offset: 0x00726D6C
				public override void QuickReloadMag(MagazineItemClass magazine, Callback finishCallback, Callback startCallback)
				{
					this.DisableAimingOnReload();
					this.SetTriggerPressed(false);
					GStruct156<Player.FirearmController.GClass2006> gstruct = Player.FirearmController.GClass2006.Run(this.Player_0.InventoryController, this.Weapon_0, magazine, true, this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId), null);
					if (gstruct.Succeeded)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2016>().Start(gstruct.Value, finishCallback);
						if (startCallback != null)
						{
							startCallback.Succeed();
							return;
						}
					}
					else if (finishCallback != null)
					{
						finishCallback.Invoke(gstruct);
					}
				}

				// Token: 0x06015CA2 RID: 89250 RVA: 0x00728BF8 File Offset: 0x00726DF8
				public override void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback)
				{
					this.DisableAimingOnReload();
					this.SetTriggerPressed(false);
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (currentMagazine != null && currentMagazine.Count < currentMagazine.MaxCount)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.AmmoPackReloadOperationClass>().Start(ammoPack, finishCallback);
						if (startCallback != null)
						{
							startCallback.Succeed();
							return;
						}
					}
					else if (finishCallback != null)
					{
						finishCallback.Fail("Cant perform reload internal mag operation");
					}
				}

				// Token: 0x06015CA3 RID: 89251 RVA: 0x00728C60 File Offset: 0x00726E60
				public override void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback, bool quickReload = false)
				{
					this.DisableAimingOnReload();
					this.SetTriggerPressed(false);
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (currentMagazine != null && (quickReload || currentMagazine.Count < currentMagazine.MaxCount))
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.CylinderReloadOperationClass>().Start(ammoPack, finishCallback, quickReload);
						if (startCallback != null)
						{
							startCallback.Succeed();
							return;
						}
					}
					else if (finishCallback != null)
					{
						finishCallback.Fail("Cant perform reload internal mag operation");
					}
				}

				// Token: 0x06015CA4 RID: 89252 RVA: 0x00728CD0 File Offset: 0x00726ED0
				public override void ReloadBarrels(AmmoPackReloadingClass ammoPack, ItemAddress placeToPutContainedAmmoMagazine, Callback finishCallback, Callback startCallback)
				{
					this.DisableAimingOnReload();
					this.SetTriggerPressed(false);
					if (this.Weapon_0.Chambers.Length > 1)
					{
						GStruct156<Player.FirearmController.ReloadMultiBarrelResultClass> gstruct = Player.FirearmController.ReloadMultiBarrelResultClass.Run(this.Player_0.InventoryController, this.Player_0.InventoryController, this.Weapon_0, ammoPack, placeToPutContainedAmmoMagazine);
						if (gstruct.Error == null)
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.MutliBarrelReloadOperationClass>().Start(gstruct.Value, finishCallback);
							if (startCallback != null)
							{
								startCallback.Succeed();
								return;
							}
						}
						else if (finishCallback != null)
						{
							finishCallback.Invoke(gstruct);
							return;
						}
					}
					else
					{
						GStruct156<Player.FirearmController.ReloadSingleBarrelResultClass> gstruct2 = Player.FirearmController.ReloadSingleBarrelResultClass.Run(this.Player_0.InventoryController, this.Player_0.InventoryController, this.Weapon_0, ammoPack.GetAmmoToReload(0), placeToPutContainedAmmoMagazine);
						if (gstruct2.Error == null)
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.SingleBarrelReloadOperationClass>().Start(gstruct2.Value, finishCallback);
							if (startCallback != null)
							{
								startCallback.Succeed();
								return;
							}
						}
						else if (finishCallback != null)
						{
							finishCallback.Invoke(gstruct2);
						}
					}
				}

				// Token: 0x06015CA5 RID: 89253 RVA: 0x00728DC4 File Offset: 0x00726FC4
				public override bool CheckAmmo()
				{
					if (this.FirearmController_0 == null || this.Weapon_0 == null)
					{
						UnityEngine.Debug.LogError("Controller or Item in it is equal to null");
						return false;
					}
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (currentMagazine == null || this.FirearmController_0._player.InventoryController.CheckItemAction(this.FirearmController_0.Item, this.FirearmController_0.Item.CurrentAddress).Failed || this.FirearmController_0._player.InventoryController.CheckItemAction(currentMagazine, currentMagazine.CurrentAddress).Failed)
					{
						return false;
					}
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Feed || (this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.None && this.Weapon_0.IsBoltCatch))
					{
						this.SetAiming(false);
						this.FirearmController_0.FirearmsAnimator.MisfireSlideUnknown(false);
						this.Player_0.InventoryController.ExamineMalfunction(this.FirearmController_0.Item, false);
						return false;
					}
					if (this.Weapon_0 is RevolverItemClass || this.Weapon_0.Chambers.Length > 1)
					{
						this.Player_0.InventoryController.CheckChamber(this.Weapon_0, true);
					}
					if (this.Player_0.FirstPersonPointOfView)
					{
						AmmoItemClass ammoItemClass;
						if (!(this.Weapon_0 is RevolverItemClass))
						{
							ammoItemClass = (currentMagazine.Cartridges.Last as AmmoItemClass);
						}
						else
						{
							CylinderMagazineItemClass cylinderMagazineItemClass = (CylinderMagazineItemClass)currentMagazine;
							ammoItemClass = ((cylinderMagazineItemClass != null) ? cylinderMagazineItemClass.GetFirstAmmo(!this.Weapon_0.CylinderHammerClosed) : null);
						}
						AmmoItemClass ammoItemClass2 = ammoItemClass;
						Action<int, int, int, string, bool> onShowAmmoDetails = this.Player_0.OnShowAmmoDetails;
						if (onShowAmmoDetails != null)
						{
							onShowAmmoDetails(currentMagazine.Count, currentMagazine.MaxCount, Mathf.Max(this.Player_0.Profile.MagDrillsMastering, currentMagazine.CheckOverride), (ammoItemClass2 != null) ? ammoItemClass2.Name.Localized(null) : null, this.Weapon_0 is RevolverItemClass || this.Weapon_0.Chambers.Length > 1);
						}
						this.Player_0.InventoryController.StrictCheckMagazine(currentMagazine, true, 0, false, true);
					}
					this.SetAiming(false);
					this.FirearmsAnimator_0.CheckAmmo();
					bool isExternalMag = this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport || (this.Weapon_0.ReloadMode == Weapon.EReloadMode.InternalMagazine && currentMagazine == null);
					this.FirearmsAnimator_0.SetIsExternalMag(isExternalMag);
					if (this.FirearmController_0._player.MovementContext.StationaryWeapon != null)
					{
						return true;
					}
					this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.CheckMagazine);
					return true;
				}

				// Token: 0x06015CA6 RID: 89254 RVA: 0x00729064 File Offset: 0x00727264
				public override bool CheckChamber()
				{
					if (this.FirearmController_0.IsTriggerPressed)
					{
						return false;
					}
					if (this.FirearmController_0._player.MovementContext.StationaryWeapon != null)
					{
						return false;
					}
					if (this.Weapon_0 is RevolverItemClass)
					{
						return false;
					}
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None)
					{
						if (this.FirearmController_0._player.InventoryController.CheckItemAction(this.FirearmController_0.Item, this.FirearmController_0.Item.CurrentAddress).Failed)
						{
							return false;
						}
						this.SetAiming(false);
						this.FirearmsAnimator_0.CheckChamber();
						this.Player_0.InventoryController.CheckChamber(this.Weapon_0, true);
						this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.CheckChamber);
					}
					else
					{
						this.SetAiming(false);
						if (this.Weapon_0.MalfState.IsKnownMalfType(this.Player_0.ProfileId))
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.FixMalfunctionOperationClass>().Start();
						}
						else
						{
							this.FirearmsAnimator_0.MisfireSlideUnknown(false);
							this.Player_0.InventoryController.ExamineMalfunction(this.FirearmController_0.Item, false);
						}
					}
					return true;
				}

				// Token: 0x06015CA7 RID: 89255 RVA: 0x002656B9 File Offset: 0x002638B9
				public override bool CanStartReload()
				{
					return true;
				}

				// Token: 0x06015CA8 RID: 89256 RVA: 0x002656BC File Offset: 0x002638BC
				public virtual void RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType utilityType)
				{
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2038>().Start(utilityType);
				}

				// Token: 0x06015CA9 RID: 89257 RVA: 0x00729194 File Offset: 0x00727394
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GClass3513 gclass = operation as GClass3513;
					if (gclass != null)
					{
						GInterface443 ginterface = gclass.InternalOperation as GInterface443;
						if (ginterface != null && this.Weapon_0.SupportsInternalReload)
						{
							AmmoItemClass ammoItemClass = ginterface.Item1 as AmmoItemClass;
							if (ammoItemClass != null)
							{
								this.FirearmController_0.ReloadWithAmmo(new AmmoPackReloadingClass(new List<AmmoItemClass>
								{
									ammoItemClass
								}), callback);
								return;
							}
						}
						if (callback != null)
						{
							callback.Fail(string.Format("Failed to load ammo into a weapon with \"{0}\" reload mode.", this.Weapon_0.ReloadMode));
						}
						return;
					}
					GInterface443 ginterface2 = operation as GInterface443;
					if (ginterface2 == null)
					{
						callback.Succeed();
						return;
					}
					if (!this.FirearmController_0.method_21(operation))
					{
						if (this.Player_0.InventoryController.IsAnimatedSlot(ginterface2.From1))
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2026>().Start(ginterface2.Item1, callback);
							return;
						}
						callback.Succeed();
						return;
					}
					else
					{
						this.FirearmController_0.IsTriggerPressed = false;
						FoldOperationClass foldOperationClass = operation as FoldOperationClass;
						if (foldOperationClass != null)
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.Class1269>().Start(foldOperationClass, callback);
							return;
						}
						AmmoItemClass ammoItemClass2 = ginterface2.Item1 as AmmoItemClass;
						if (ammoItemClass2 != null)
						{
							MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
							bool flag = this.Weapon_0 is RevolverItemClass;
							if (!this.Weapon_0.HasChambers && !flag)
							{
								callback.Fail(string.Format("Can't perform chambers operation '{0}' in the weapon without chambers", operation));
								return;
							}
							LauncherItemClass underbarrelWeapon = this.FirearmController_0.UnderbarrelWeapon;
							if (underbarrelWeapon != null && ((ginterface2.From1 != null && ginterface2.From1.Container == underbarrelWeapon.Chamber) || (ginterface2.To1 != null && ginterface2.To1.Container == underbarrelWeapon.Chamber)))
							{
								this.method_10(ginterface2, ammoItemClass2, callback);
								return;
							}
							if (flag)
							{
								this.method_11(ginterface2, ammoItemClass2, callback);
								return;
							}
							GClass3505 gclass2 = operation as GClass3505;
							if (gclass2 == null)
							{
								string text = null;
								for (int i = 0; i < this.Weapon_0.Chambers.Length; i++)
								{
									Slot slot = this.Weapon_0.Chambers[i];
									Item containedItem = slot.ContainedItem;
									if (ginterface2.From1 != null && ginterface2.From1.Container == slot && containedItem == ginterface2.Item1)
									{
										if ((this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport) && currentMagazine != null)
										{
											text = string.Format("Can't perform operation {0} while mag in the weapon", operation);
										}
										else
										{
											if (this.Weapon_0.ReloadMode != Weapon.EReloadMode.InternalMagazine || this.Weapon_0.GetCurrentMagazineCount() <= 0)
											{
												ItemAddress destinationAddress = null;
												GInterface445 ginterface3 = ginterface2 as GInterface445;
												if (ginterface3 != null)
												{
													MoveOperationClass moveOperationClass = ginterface3.BaseInventoryOperation as MoveOperationClass;
													if (moveOperationClass != null && this.Weapon_0.Chambers.Contains(moveOperationClass.To.Container))
													{
														destinationAddress = moveOperationClass.To;
													}
												}
												this.State = Player.EOperationState.Finished;
												this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2024>().Start((AmmoItemClass)ginterface2.Item1, i, destinationAddress, callback);
												this.Player_0.ExecuteSkill(new Action(this.method_12));
												return;
											}
											text = string.Format("Can't perform operation {0} while mag is not empty", operation);
										}
									}
									else if (ginterface2.To1 != null && ginterface2.To1.Container == slot)
									{
										if (!this.Weapon_0.CanLoadAmmoToChamber)
										{
											text = string.Format("Can't perform chambers operation in the weapon that can't load ammo to chamber, operation: {0}", operation);
										}
										else if ((this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport) && currentMagazine != null)
										{
											text = string.Format("Can't perform operation {0} while mag in the weapon", operation);
										}
										else
										{
											if (this.Weapon_0.ReloadMode != Weapon.EReloadMode.InternalMagazine || currentMagazine == null || currentMagazine.Cartridges.Count != currentMagazine.MaxCount || slot.CanAccept(currentMagazine.Cartridges.Last))
											{
												this.State = Player.EOperationState.Finished;
												this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2045>().Start((AmmoItemClass)ginterface2.Item1, i, callback);
												this.Player_0.ExecuteSkill(new Action(this.method_13));
												return;
											}
											text = string.Format("Can't perform operation {0} - mag is full and last patron is not valid for chamber", operation);
										}
									}
								}
								string error;
								if ((error = text) == null)
								{
									error = string.Format("Can't perform operation {0}: {1} {2}->{3}", new object[]
									{
										operation,
										ginterface2.Item1,
										ginterface2.From1,
										ginterface2.To1
									});
								}
								callback.Fail(error);
								return;
							}
							if (this.Weapon_0.ReloadMode != Weapon.EReloadMode.OnlyBarrel)
							{
								this.State = Player.EOperationState.Finished;
								this.FirearmController_0.InitiateOperation<Player.FirearmController.RechamberOperationClass>().Start(gclass2.AmmoInChamber, callback);
								return;
							}
							callback.Fail("This weapon can't perform RechamberOperation");
							return;
						}
						else
						{
							if (ginterface2.Item1 is MagazineItemClass)
							{
								if (this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport)
								{
									if (ginterface2.To1 != null && ginterface2.To1.IsChildOf(this.Weapon_0, false))
									{
										GStruct156<Player.FirearmController.GClass2005> gstruct = Player.FirearmController.GClass2005.Run(this.Player_0.InventoryController, this.Weapon_0, this.Player_0.ProfileId);
										if (gstruct.Succeeded)
										{
											this.State = Player.EOperationState.Finished;
											this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2039>().Start(gstruct.Value, callback);
											return;
										}
										callback.Invoke(gstruct);
										return;
									}
									else if (ginterface2.From1 != null && ginterface2.From1.IsChildOf(this.Weapon_0, false))
									{
										this.State = Player.EOperationState.Finished;
										this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2050>().Start((MagazineItemClass)ginterface2.Item1, (Slot)ginterface2.From1.Container, callback);
										return;
									}
								}
								UnityEngine.Debug.LogErrorFormat("not implemented for operation {0}, just do it", new object[]
								{
									operation
								});
								callback.Succeed();
								return;
							}
							if (!(ginterface2.Item1 is Mod))
							{
								UnityEngine.Debug.LogErrorFormat("not implemented for operation {0}, just do it", new object[]
								{
									operation
								});
								callback.Succeed();
								return;
							}
							if (ginterface2.From1 != null && ginterface2.From1.IsChildOf(this.Weapon_0, false))
							{
								this.State = Player.EOperationState.Finished;
								Slot slot2 = (Slot)ginterface2.From1.Container;
								this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2052>().Start(ginterface2.Item1, slot2, callback);
								return;
							}
							if (ginterface2.To1 != null && ginterface2.To1.IsChildOf(this.Weapon_0, false))
							{
								this.State = Player.EOperationState.Finished;
								Slot slot3 = (Slot)ginterface2.To1.Container;
								this.FirearmController_0.InitiateOperation<Player.FirearmController.Class1264>().Start(ginterface2.Item1, slot3, callback);
								return;
							}
							UnityEngine.Debug.LogErrorFormat("Mod operation for operation {0}, just do it", new object[]
							{
								operation
							});
							callback.Succeed();
							return;
						}
					}
				}

				// Token: 0x06015CAA RID: 89258 RVA: 0x00729814 File Offset: 0x00727A14
				public void method_10(GInterface443 oneItemOperation, AmmoItemClass ammo, Callback callback)
				{
					Player.FirearmController.GClass2037.Class1229 @class = new Player.FirearmController.GClass2037.Class1229();
					@class.gclass2037_0 = this;
					@class.ammo = ammo;
					@class.oneItemOperation = oneItemOperation;
					@class.callback = callback;
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.SetInventory(false);
					if (@class.oneItemOperation.From1 != null)
					{
						this.Action_1 = new Action(@class.method_0);
					}
					else
					{
						this.Action_1 = new Action(@class.method_2);
					}
					this.method_6();
				}

				// Token: 0x06015CAB RID: 89259 RVA: 0x00729890 File Offset: 0x00727A90
				public void method_11(GInterface443 oneItemOperation, AmmoItemClass ammo, Callback callback)
				{
					CylinderMagazineItemClass cylinderMagazineItemClass = this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass;
					GClass3505 gclass = oneItemOperation as GClass3505;
					if (gclass == null)
					{
						ItemAddress itemAddress = null;
						GInterface445 ginterface = oneItemOperation as GInterface445;
						if (ginterface != null)
						{
							MoveOperationClass moveOperationClass = ginterface.BaseInventoryOperation as MoveOperationClass;
							if (moveOperationClass != null && cylinderMagazineItemClass.Camoras.Contains(moveOperationClass.To.Container))
							{
								itemAddress = moveOperationClass.To;
							}
						}
						for (int i = 0; i < cylinderMagazineItemClass.Camoras.Length; i++)
						{
							Slot slot = cylinderMagazineItemClass.Camoras[i];
							Item containedItem = slot.ContainedItem;
							if (oneItemOperation.From1 != null && oneItemOperation.From1.Container == slot && containedItem == oneItemOperation.Item1)
							{
								if (this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport)
								{
									if (this.Weapon_0.GetCurrentMagazine() != null)
									{
										goto IL_181;
									}
								}
								this.State = Player.EOperationState.Finished;
								this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2023>().Start((AmmoItemClass)oneItemOperation.Item1, i, itemAddress, callback);
								this.Player_0.ExecuteSkill(new Action(this.method_14));
								return;
							}
							if (oneItemOperation.To1 != null && oneItemOperation.To1.Container == slot)
							{
								if (!this.Weapon_0.CanLoadAmmoToChamber)
								{
									callback.Fail("Can't perform chambers operation in the weapon that can't load ammo to chamber, operation: " + ((oneItemOperation != null) ? oneItemOperation.ToString() : null));
								}
								else
								{
									if ((this.Weapon_0.ReloadMode != Weapon.EReloadMode.ExternalMagazine && this.Weapon_0.ReloadMode != Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport) || this.Weapon_0.GetCurrentMagazine() == null)
									{
										this.State = Player.EOperationState.Finished;
										this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2044>().Start((AmmoItemClass)oneItemOperation.Item1, i, callback);
										this.Player_0.ExecuteSkill(new Action(this.method_15));
										return;
									}
									callback.Fail(string.Format("Can't perform operation {0} while mag in the weapon", oneItemOperation));
								}
							}
							IL_181:;
						}
						callback.Fail(string.Format("Can't perform operation {0}", oneItemOperation));
						return;
					}
					if (this.Weapon_0.ReloadMode != Weapon.EReloadMode.OnlyBarrel)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.RechamberOperationClass>().Start(gclass.AmmoInChamber, callback);
						return;
					}
					callback.Fail("This weapon can't perform RechamberOperation");
				}

				// Token: 0x06015CAC RID: 89260 RVA: 0x002656F0 File Offset: 0x002638F0
				public override void SetLeftStanceAnimOnStartOperation()
				{
					if (!this.Weapon_0.IsStationaryWeapon && !this.Player_0._isInventoryOpened && !this.FirearmController_0.DisableLeftStanceByOverlap)
					{
						this.Player_0.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromHandsAction();
						return;
					}
				}

				// Token: 0x06015CAD RID: 89261 RVA: 0x0026572F File Offset: 0x0026392F
				public override bool ToggleLauncher(Action callback)
				{
					if (this.FirearmController_0.UnderbarrelWeapon != null)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>().Start(true, callback);
						this.Player_0.ProceduralWeaponAnimation.IsGrenadeLauncher = true;
						return true;
					}
					return false;
				}

				// Token: 0x06015CAE RID: 89262 RVA: 0x0026576B File Offset: 0x0026396B
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015CAF RID: 89263 RVA: 0x00265779 File Offset: 0x00263979
				public override void DropBackpackOperationInvoke(Item item, Callback callback)
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2026>().Start(item, callback);
				}

				// Token: 0x06015CB0 RID: 89264 RVA: 0x00729AC0 File Offset: 0x00727CC0
				public override void ToggleLeftStance()
				{
					if (!this.Weapon_0.IsStationaryWeapon && !this.Weapon_0.BlockLeftStance && !this.FirearmController_0.CurrentCompassState && !this.Player_0.MovementContext.IsInPronePose)
					{
						this.Player_0.MovementContext.LeftStanceController.ToggleLeftStance();
						return;
					}
				}

				// Token: 0x06015CB1 RID: 89265 RVA: 0x00265794 File Offset: 0x00263994
				public override bool ToggleBipod()
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.Class1270>().Start(null);
					return true;
				}

				// Token: 0x06015CB2 RID: 89266 RVA: 0x002657AF File Offset: 0x002639AF
				[CompilerGenerated]
				public void method_12()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x06015CB3 RID: 89267 RVA: 0x002657D1 File Offset: 0x002639D1
				[CompilerGenerated]
				public void method_13()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x06015CB4 RID: 89268 RVA: 0x002657F3 File Offset: 0x002639F3
				[CompilerGenerated]
				public void method_14()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x06015CB5 RID: 89269 RVA: 0x00265815 File Offset: 0x00263A15
				[CompilerGenerated]
				public void method_15()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x040128D6 RID: 75990
				[NonSerialized]
				public float Float_0;

				// Token: 0x040128D7 RID: 75991
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128D8 RID: 75992
				[NonSerialized]
				public float Float_1;

				// Token: 0x040128D9 RID: 75993
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040128DA RID: 75994
				[NonSerialized]
				public Action Action_1;

				// Token: 0x040128DB RID: 75995
				[NonSerialized]
				public float Float_2;

				// Token: 0x02003B0F RID: 15119
				[CompilerGenerated]
				public class Class1229
				{
					// Token: 0x06016266 RID: 90726 RVA: 0x0073EFC4 File Offset: 0x0073D1C4
					public void method_0()
					{
						Player.FirearmController.GClass2056 gclass = this.gclass2037_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>();
						bool isLauncherEnabled = true;
						Action action;
						if ((action = this.action_0) == null)
						{
							action = (this.action_0 = new Action(this.method_1));
						}
						gclass.Start(isLauncherEnabled, action);
					}

					// Token: 0x06016267 RID: 90727 RVA: 0x0026A164 File Offset: 0x00268364
					public void method_1()
					{
						this.gclass2037_0.FirearmController_0.CurrentOperation.LauncherInventoryUnchamberFromMainWeapon(this.ammo, 0, this.oneItemOperation.To1, this.callback);
					}

					// Token: 0x06016268 RID: 90728 RVA: 0x0073F008 File Offset: 0x0073D208
					public void method_2()
					{
						Player.FirearmController.GClass2056 gclass = this.gclass2037_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>();
						bool isLauncherEnabled = true;
						Action action;
						if ((action = this.action_1) == null)
						{
							action = (this.action_1 = new Action(this.method_3));
						}
						gclass.Start(isLauncherEnabled, action);
					}

					// Token: 0x06016269 RID: 90729 RVA: 0x0026A193 File Offset: 0x00268393
					public void method_3()
					{
						this.gclass2037_0.FirearmController_0.CurrentOperation.LoadLauncherFromMainWeapon(this.ammo, 0, this.oneItemOperation.To1, this.callback);
					}

					// Token: 0x04012DA4 RID: 77220
					public Player.FirearmController.GClass2037 gclass2037_0;

					// Token: 0x04012DA5 RID: 77221
					public AmmoItemClass ammo;

					// Token: 0x04012DA6 RID: 77222
					public GInterface443 oneItemOperation;

					// Token: 0x04012DA7 RID: 77223
					public Callback callback;

					// Token: 0x04012DA8 RID: 77224
					public Action action_0;

					// Token: 0x04012DA9 RID: 77225
					public Action action_1;
				}
			}

			// Token: 0x020039CB RID: 14795
			public class GClass2039 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015CB6 RID: 89270 RVA: 0x00265837 File Offset: 0x00263A37
				public GClass2039(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015CB7 RID: 89271 RVA: 0x00729B1C File Offset: 0x00727D1C
				public virtual void Start(Player.FirearmController.GClass2005 insertMagResult, Callback callback)
				{
					this.Gclass2005_0 = insertMagResult;
					this.Callback_0 = callback;
					base.Start();
					this.FirearmsAnimator_0.SetFire(false);
					this.FirearmsAnimator_0.SetIsExternalMag(true);
					this.FirearmsAnimator_0.SetCanReload(true);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetMagTypeCurrent(this.Gclass2005_0.Magazine.magAnimationIndex);
					this.FirearmsAnimator_0.SetMagTypeNew(this.Gclass2005_0.Magazine.magAnimationIndex);
					this.FirearmsAnimator_0.InsertMagInInventoryMode();
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.FirearmController_0.bool_1 = true;
					if (this.Weapon_0.IsBoltCatch && this.Weapon_0.ChamberAmmoCount == 1 && !this.Gclass2005_0.HasNewAmmo && !this.Weapon_0.ManualBoltCatch && !this.Weapon_0.MustBoltBeOpennedForExternalReload && !this.Weapon_0.MustBoltBeOpennedForInternalReload)
					{
						this.FirearmsAnimator_0.SetBoltCatch(false);
					}
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire && this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId) && this.Gclass2005_0.Magazine.Count > 0 && this.Gclass2005_0.AmmoCompatible)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber(0f);
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
				}

				// Token: 0x06015CB8 RID: 89272 RVA: 0x00265840 File Offset: 0x00263A40
				public override void Reset()
				{
					this.Callback_0 = null;
					this.Gclass2005_0 = null;
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.Bool_2 = false;
					base.Reset();
				}

				// Token: 0x06015CB9 RID: 89273 RVA: 0x00729CAC File Offset: 0x00727EAC
				public override void OnMagAppeared()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					this.WeaponManagerClass.SetupMod(this.Gclass2005_0.MagazineSlot.Slot, Singleton<PoolManagerClass>.Instance.CreateItem(this.Gclass2005_0.Magazine, true));
					if (this.Gclass2005_0.Magazine.IsMagazineWithBelt)
					{
						this.FirearmController_0.weaponPrefab_0.UpdateAnimatorHierarchy();
						if (this.FirearmController_0.HasBipod)
						{
							this.FirearmController_0.FirearmsAnimator.SetBipod(this.FirearmController_0.BipodState);
						}
					}
				}

				// Token: 0x06015CBA RID: 89274 RVA: 0x00729D44 File Offset: 0x00727F44
				public override void OnMagInsertedToWeapon()
				{
					if (this.Bool_2)
					{
						return;
					}
					this.Bool_2 = true;
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Gclass2005_0.MagazineAmmoCount + (this.Gclass2005_0.HasNewAmmo ? 1 : 0));
					this.FirearmsAnimator_0.SetMagInWeapon(true);
					this.FirearmsAnimator_0.SetAmmoCompatible(this.Gclass2005_0.AmmoCompatible);
					if (!this.Gclass2005_0.HasNewAmmo && (this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.Misfire || !this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId) || !this.Gclass2005_0.AmmoCompatible || this.Gclass2005_0.Magazine.Count <= 0))
					{
						this.method_5();
					}
					if (this.FirearmController_0.HasBipod)
					{
						this.FirearmController_0.FirearmsAnimator.SetBipod(this.FirearmController_0.BipodState);
					}
				}

				// Token: 0x06015CBB RID: 89275 RVA: 0x0026586B File Offset: 0x00263A6B
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCaught);
				}

				// Token: 0x06015CBC RID: 89276 RVA: 0x00729E38 File Offset: 0x00728038
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Gclass2005_0.Magazine.Count);
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					if (this.Gclass2005_0.HasNewAmmo)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon(this.Gclass2005_0.NewAmmo, 0);
					}
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Gclass2005_0.Weapon.ChamberAmmoCount);
					this.method_5();
				}

				// Token: 0x06015CBD RID: 89277 RVA: 0x00265879 File Offset: 0x00263A79
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015CBE RID: 89278 RVA: 0x00265893 File Offset: 0x00263A93
				public void method_5()
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.RecalculateErgonomic();
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
					this.FirearmController_0.WeaponModified();
				}

				// Token: 0x06015CBF RID: 89279 RVA: 0x002658CE File Offset: 0x00263ACE
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x06015CC0 RID: 89280 RVA: 0x002658D1 File Offset: 0x00263AD1
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnMagAppeared();
					this.OnMagInsertedToWeapon();
					this.OnAddAmmoInChamber();
					if (this.State != Player.EOperationState.Finished)
					{
						this.method_5();
					}
				}

				// Token: 0x06015CC1 RID: 89281 RVA: 0x00729ED0 File Offset: 0x007280D0
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.RecalculateErgonomic();
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmController_0.IsAiming = false;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x040128DC RID: 75996
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128DD RID: 75997
				[NonSerialized]
				public Player.FirearmController.GClass2005 Gclass2005_0;

				// Token: 0x040128DE RID: 75998
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128DF RID: 75999
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128E0 RID: 76000
				[NonSerialized]
				public bool Bool_2;
			}

			// Token: 0x020039CC RID: 14796
			public class GClass2005
			{
				// Token: 0x17003544 RID: 13636
				// (get) Token: 0x06015CC2 RID: 89282 RVA: 0x002658FE File Offset: 0x00263AFE
				public AmmoItemClass NewAmmo
				{
					get
					{
						GInterface424 ginterface424_ = this.Ginterface424_0;
						return (AmmoItemClass)((ginterface424_ != null) ? ginterface424_.ResultItem : null);
					}
				}

				// Token: 0x17003545 RID: 13637
				// (get) Token: 0x06015CC3 RID: 89283 RVA: 0x00265917 File Offset: 0x00263B17
				public bool HasNewAmmo
				{
					get
					{
						return this.Ginterface424_0 != null;
					}
				}

				// Token: 0x06015CC4 RID: 89284 RVA: 0x00729F24 File Offset: 0x00728124
				public GClass2005(Weapon weapon, MagazineItemClass magazine, bool ammoCompatible, [CanBeNull] GClass3410 removeOldAmmoResult, [CanBeNull] GInterface424 addNewAmmoResult)
				{
					this.Weapon = weapon;
					this.Magazine = magazine;
					this.MagazineAmmoCount = magazine.Count;
					this.MagazineSlot = (GClass3391)magazine.Parent;
					this.AmmoCompatible = ammoCompatible;
					this.Gclass3410_0 = removeOldAmmoResult;
					this.Ginterface424_0 = addNewAmmoResult;
				}

				// Token: 0x06015CC5 RID: 89285 RVA: 0x00265922 File Offset: 0x00263B22
				public void RollBack()
				{
					GInterface424 ginterface424_ = this.Ginterface424_0;
					if (ginterface424_ != null)
					{
						ginterface424_.RollBack();
					}
					GClass3410 gclass3410_ = this.Gclass3410_0;
					if (gclass3410_ == null)
					{
						return;
					}
					gclass3410_.RollBack();
				}

				// Token: 0x06015CC6 RID: 89286 RVA: 0x00265945 File Offset: 0x00263B45
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					GInterface424 ginterface424_ = this.Ginterface424_0;
					if (ginterface424_ != null)
					{
						ginterface424_.RaiseEvents(controller, status);
					}
					GClass3410 gclass3410_ = this.Gclass3410_0;
					if (gclass3410_ == null)
					{
						return;
					}
					gclass3410_.RaiseEvents(controller, status);
				}

				// Token: 0x06015CC7 RID: 89287 RVA: 0x00729F7C File Offset: 0x0072817C
				public static GStruct156<Player.FirearmController.GClass2005> Run(InventoryController inventoryController, Weapon weapon, string playerId)
				{
					MagazineItemClass currentMagazine = weapon.GetCurrentMagazine();
					Slot[] chambers = weapon.Chambers;
					Slot slot = weapon.HasChambers ? chambers[0] : null;
					bool flag = currentMagazine.IsAmmoCompatible(chambers);
					GStruct154<GClass3410> gstruct = (slot == null || !weapon.MustBoltBeOpennedForExternalReload || slot.ContainedItem == null) ? default(GStruct154<GClass3410>) : InteractionsHandlerClass.Remove(slot.ContainedItem, inventoryController, false);
					if (gstruct.Failed)
					{
						return gstruct.Error;
					}
					bool flag2 = weapon.MalfState.State == Weapon.EMalfunctionState.None || (weapon.MalfState.State == Weapon.EMalfunctionState.Misfire && weapon.MalfState.IsKnownMalfunction(playerId));
					Weapon.EMalfunctionState state = weapon.MalfState.State;
					if (flag2 && weapon.MalfState.State != Weapon.EMalfunctionState.None)
					{
						weapon.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
					}
					GStruct154<GInterface424> gstruct2 = (slot != null && slot.ContainedItem == null && currentMagazine.Count > 0 && flag && flag2) ? currentMagazine.Cartridges.PopTo(inventoryController, slot.CreateItemAddress()) : default(GStruct154<GInterface424>);
					if (flag2 && state != Weapon.EMalfunctionState.None)
					{
						weapon.MalfState.ChangeStateSilent(state);
					}
					if (gstruct2.Failed)
					{
						GClass3410 value = gstruct.Value;
						if (value != null)
						{
							value.RollBack();
						}
						return gstruct2.Error;
					}
					return new Player.FirearmController.GClass2005(weapon, currentMagazine, flag, gstruct.Value, gstruct2.Value);
				}

				// Token: 0x06015CC8 RID: 89288 RVA: 0x0026596C File Offset: 0x00263B6C
				public bool CanExecute(TraderControllerClass itemController)
				{
					return true;
				}

				// Token: 0x040128E1 RID: 76001
				public readonly Weapon Weapon;

				// Token: 0x040128E2 RID: 76002
				public readonly MagazineItemClass Magazine;

				// Token: 0x040128E3 RID: 76003
				public readonly int MagazineAmmoCount;

				// Token: 0x040128E4 RID: 76004
				public readonly GClass3391 MagazineSlot;

				// Token: 0x040128E5 RID: 76005
				public readonly bool AmmoCompatible;

				// Token: 0x040128E6 RID: 76006
				[CanBeNull]
				[NonSerialized]
				public GClass3410 Gclass3410_0;

				// Token: 0x040128E7 RID: 76007
				[CanBeNull]
				[NonSerialized]
				public GInterface424 Ginterface424_0;
			}

			// Token: 0x020039CD RID: 14797
			public class GClass2034 : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015CC9 RID: 89289 RVA: 0x0026596F File Offset: 0x00263B6F
				public GClass2034(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015CCA RID: 89290 RVA: 0x00265978 File Offset: 0x00263B78
				public new void Start()
				{
					base.Start();
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullFireStateName, 1, 0.2f);
				}

				// Token: 0x06015CCB RID: 89291 RVA: 0x002659A1 File Offset: 0x00263BA1
				public override void PrepareShot()
				{
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015CCC RID: 89292 RVA: 0x002659B9 File Offset: 0x00263BB9
				public override void Reset()
				{
					this.Bool_5 = false;
					base.Reset();
				}

				// Token: 0x06015CCD RID: 89293 RVA: 0x002659C8 File Offset: 0x00263BC8
				public void method_14()
				{
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmsAnimator_0.SetFire(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>().Start(null);
				}

				// Token: 0x06015CCE RID: 89294 RVA: 0x002659FA File Offset: 0x00263BFA
				public override void OnFireEndEvent()
				{
					this.method_14();
				}

				// Token: 0x06015CCF RID: 89295 RVA: 0x00265A02 File Offset: 0x00263C02
				public override void SetInventoryOpened(bool opened)
				{
					this.Bool_5 = opened;
				}

				// Token: 0x06015CD0 RID: 89296 RVA: 0x0072A0E4 File Offset: 0x007282E4
				public override void OnFireEvent()
				{
					if (this.Bool_1)
					{
						return;
					}
					FirearmsAnimator firearmsAnimator = this.FirearmController_0.weaponPrefab_0.FirearmsAnimator;
					firearmsAnimator.ResetGestureTrigger();
					firearmsAnimator.ResetHandReadyTrigger();
					IAnimator animator = firearmsAnimator.Animator;
					animator.SetLayerWeight(animator.GetLayerIndex("LActions"), 0f);
					animator.Play("Idle", animator.GetLayerIndex("LActions"), 0f);
					LauncherItemClass underbarrelWeapon = this.FirearmController_0.UnderbarrelWeapon;
					AmmoItemClass ammoItemClass = underbarrelWeapon.Chamber.ContainedItem as AmmoItemClass;
					this.FirearmController_0.method_57(underbarrelWeapon, ammoItemClass);
					underbarrelWeapon.Chamber.RemoveItem(false);
					ammoItemClass.IsUsed = true;
					this.Bool_1 = true;
					if (ammoItemClass.AmmoTemplate.RemoveShellAfterFire)
					{
						this.FirearmController_0.underbarrelManagerClass.DestroyPatronInWeapon();
					}
					else
					{
						this.FirearmController_0.underbarrelManagerClass.MoveAmmoFromChamberToShellPort(ammoItemClass.IsUsed, 0);
					}
					if (!ammoItemClass.AmmoTemplate.RemoveShellAfterFire)
					{
						underbarrelWeapon.ShellsInChambers[0] = ammoItemClass.AmmoTemplate;
					}
					this.FirearmsAnimator_0.SetShellsInWeapon(ammoItemClass.AmmoTemplate.RemoveShellAfterFire ? 0 : 1);
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
				}

				// Token: 0x040128E8 RID: 76008
				[NonSerialized]
				public bool Bool_5;
			}

			// Token: 0x020039CE RID: 14798
			public class GClass2040 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015CD1 RID: 89297 RVA: 0x00265A0B File Offset: 0x00263C0B
				public GClass2040(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015CD2 RID: 89298 RVA: 0x0072A210 File Offset: 0x00728410
				public void Start(Action callback = null)
				{
					base.Start();
					this.Action_0 = callback;
					this.LauncherItemClass = this.FirearmController_0.UnderbarrelWeapon;
					WeaponAnimationSpeedControllerClass.SetUseLeftHand(this.FirearmsAnimator_0.Animator, false);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.LauncherItemClass.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.bool_2);
					this.FirearmsAnimator_0.ResetCheckChamberTrigger();
					this.FirearmsAnimator_0.SetFire(false);
					Action action_ = this.Action_0;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x06015CD3 RID: 89299 RVA: 0x00265A14 File Offset: 0x00263C14
				public override void SetLeftStanceAnimOnStartOperation()
				{
					if (this.Weapon_0.IsStationaryWeapon)
					{
						return;
					}
					this.Player_0.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromHandsAction();
				}

				// Token: 0x06015CD4 RID: 89300 RVA: 0x00265A39 File Offset: 0x00263C39
				public override bool ToggleLauncher(Action callback)
				{
					this.method_5(callback);
					return true;
				}

				// Token: 0x06015CD5 RID: 89301 RVA: 0x00265A43 File Offset: 0x00263C43
				public void method_5(Action callback)
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>().Start(false, callback);
				}

				// Token: 0x06015CD6 RID: 89302 RVA: 0x00265A5E File Offset: 0x00263C5E
				public void method_6()
				{
					this.Player_0.UpdateLauncherBones(false, this.FirearmController_0.underbarrelManagerClass.LauncherWeaponPrefab);
					this.Bool_0 = true;
				}

				// Token: 0x06015CD7 RID: 89303 RVA: 0x00265A83 File Offset: 0x00263C83
				public override void ForceSetUnderbarrelRangeIndex(int rangeIndex)
				{
					this.LauncherItemClass.ForceSetSightRangeIndex(rangeIndex);
				}

				// Token: 0x06015CD8 RID: 89304 RVA: 0x00265A91 File Offset: 0x00263C91
				public override void UnderbarrelSightingRangeDown()
				{
					this.LauncherItemClass.SightingRangeDown();
					this.method_7();
				}

				// Token: 0x06015CD9 RID: 89305 RVA: 0x00265AA4 File Offset: 0x00263CA4
				public override void UnderbarrelSightingRangeUp()
				{
					this.LauncherItemClass.SightingRangeUp();
					this.method_7();
				}

				// Token: 0x06015CDA RID: 89306 RVA: 0x0072A2A0 File Offset: 0x007284A0
				public void method_7()
				{
					this.Player_0.ShowAmmoCountZeroingPanel(this.LauncherItemClass.RangeValue.ToString() ?? "");
				}

				// Token: 0x06015CDB RID: 89307 RVA: 0x00265AB7 File Offset: 0x00263CB7
				public override void SprintStateChanged(bool value)
				{
					this.FirearmsAnimator_0.SetSprint(value);
				}

				// Token: 0x06015CDC RID: 89308 RVA: 0x0072A2D4 File Offset: 0x007284D4
				public override void Update(float deltaTime)
				{
					if (this.Bool_0 && !this.FirearmsAnimator_0.IsIdling())
					{
						this.Player_0.UpdateLauncherBones(true, this.FirearmController_0.underbarrelManagerClass.LauncherWeaponPrefab);
						this.Bool_0 = false;
					}
					this.SetSightingRange(deltaTime);
				}

				// Token: 0x06015CDD RID: 89309 RVA: 0x0072A320 File Offset: 0x00728520
				public virtual void SetSightingRange(float deltaTime)
				{
					int lastRangeValue = this.LauncherItemClass.LastRangeValue;
					if (lastRangeValue != this.LauncherItemClass.RangeValue)
					{
						int num;
						if (lastRangeValue > this.LauncherItemClass.RangeValue)
						{
							num = (int)Mathf.Clamp((float)lastRangeValue - 400f * deltaTime, (float)this.LauncherItemClass.RangeValue, (float)lastRangeValue);
						}
						else
						{
							if (lastRangeValue >= this.LauncherItemClass.RangeValue)
							{
								return;
							}
							num = (int)Mathf.Clamp((float)lastRangeValue + 400f * deltaTime, (float)lastRangeValue, (float)this.LauncherItemClass.RangeValue);
						}
						this.LauncherItemClass.LastRangeValue = num;
						this.FirearmsAnimator_0.SetUnderbarrelSightingRange((float)num);
					}
				}

				// Token: 0x06015CDE RID: 89310 RVA: 0x0072A3C4 File Offset: 0x007285C4
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
					if (pressed && !this.Player_0.StateIsSuitableForHandInput)
					{
						return;
					}
					if (pressed && this.LauncherItemClass.Chamber.ContainedItem != null)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2034>().Start();
						return;
					}
					this.FirearmController_0.firearmsAnimator_0.SetFire(pressed);
					if (pressed)
					{
						this.FirearmController_0.DryShot(0, true);
					}
				}

				// Token: 0x06015CDF RID: 89311 RVA: 0x00265AC5 File Offset: 0x00263CC5
				public override bool ExamineWeapon()
				{
					if (this.FirearmController_0.IsAiming)
					{
						return false;
					}
					this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.ExamineWeapon);
					this.FirearmsAnimator_0.LookTrigger();
					return true;
				}

				// Token: 0x06015CE0 RID: 89312 RVA: 0x00265AE9 File Offset: 0x00263CE9
				public override void OnIdleStartEvent()
				{
					this.SetLeftStanceAnimOnStartOperation();
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
				}

				// Token: 0x06015CE1 RID: 89313 RVA: 0x00265B0B File Offset: 0x00263D0B
				public override void ReloadGrenadeLauncher(AmmoPackReloadingClass ammoPack, Callback callback)
				{
					if (this.LauncherItemClass.Chamber.ContainedItem == null)
					{
						this.SetAiming(false);
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2042>().Start(ammoPack, callback);
					}
				}

				// Token: 0x06015CE2 RID: 89314 RVA: 0x00265B3F File Offset: 0x00263D3F
				public override void SetInventoryOpened(bool opened)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015CE3 RID: 89315 RVA: 0x00265B67 File Offset: 0x00263D67
				public override bool CanStartReload()
				{
					return true;
				}

				// Token: 0x06015CE4 RID: 89316 RVA: 0x0072A43C File Offset: 0x0072863C
				public override void SetAiming(bool isAiming)
				{
					if (isAiming && !EFTHardSettings.Instance.CanAimInState(this.Player_0.CurrentState.Name))
					{
						return;
					}
					if (this.FirearmController_0.float_2 > EFTHardSettings.Instance.STOP_AIMING_AT && isAiming)
					{
						this.FirearmController_0.AimingInterruptedByOverlap = false;
						return;
					}
					this.FirearmController_0.IsAiming = isAiming;
				}

				// Token: 0x06015CE5 RID: 89317 RVA: 0x0072A4A0 File Offset: 0x007286A0
				public override void Interact(bool isInteracting, int actionIndex)
				{
					if (!this.FirearmsAnimator_0.IsIdling())
					{
						return;
					}
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					this.Player_0.SendHandsInteractionStateChanged(isInteracting, actionIndex);
					this.FirearmController_0.weaponPrefab_0.FirearmsAnimator.SetInteract(isInteracting, actionIndex);
					this.method_6();
				}

				// Token: 0x06015CE6 RID: 89318 RVA: 0x0072A4FC File Offset: 0x007286FC
				public override void Pickup(bool pickup)
				{
					if (!this.FirearmsAnimator_0.IsIdling())
					{
						return;
					}
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					this.FirearmController_0.weaponPrefab_0.FirearmsAnimator.SetPickup(pickup);
					this.method_6();
				}

				// Token: 0x06015CE7 RID: 89319 RVA: 0x00265B6A File Offset: 0x00263D6A
				public override void ShowGesture(EInteraction gesture)
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					this.FirearmController_0.weaponPrefab_0.FirearmsAnimator.Gesture(gesture);
					this.method_6();
				}

				// Token: 0x06015CE8 RID: 89320 RVA: 0x00265B9D File Offset: 0x00263D9D
				public override void LoadLauncherFromMainWeapon(AmmoItemClass ammo, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.FirearmController_0.IsTriggerPressed = false;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2043>().Start(ammo, 0, callback);
				}

				// Token: 0x06015CE9 RID: 89321 RVA: 0x00265BD4 File Offset: 0x00263DD4
				public override void LauncherInventoryUnchamberFromMainWeapon(AmmoItemClass ammo, int camoraIndex, ItemAddress itemAddress, Callback callback)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2014>().Start(ammo, 0, itemAddress, callback);
				}

				// Token: 0x06015CEA RID: 89322 RVA: 0x0072A548 File Offset: 0x00728748
				public void method_8(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>().Start(false, null);
					this.FirearmController_0.FirearmsAnimator.Animator.Play("ILDE GRIP", this.FirearmController_0.FirearmsAnimator.Animator.GetLayerIndex("LActions"), 0f);
					this.FirearmController_0.CurrentOperation.LauncherDisappeared();
					this.FirearmController_0.CurrentOperation.HideWeapon(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x06015CEB RID: 89323 RVA: 0x0072A5D8 File Offset: 0x007287D8
				public override void DropBackpackOperationInvoke(Item item, Callback callback)
				{
					Player.FirearmController.GClass2040.Class1230 @class = new Player.FirearmController.GClass2040.Class1230();
					@class.gclass2040_0 = this;
					@class.item = item;
					@class.callback = callback;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>().Start(false, new Action(@class.method_0));
				}

				// Token: 0x06015CEC RID: 89324 RVA: 0x0072A624 File Offset: 0x00728824
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					Player.FirearmController.GClass2040.Class1231 @class = new Player.FirearmController.GClass2040.Class1231();
					@class.gclass2040_0 = this;
					@class.onHidden = onHidden;
					@class.fastDrop = fastDrop;
					@class.nextControllerItem = nextControllerItem;
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2056>().Start(false, new Action(@class.method_0));
				}

				// Token: 0x06015CED RID: 89325 RVA: 0x0072A688 File Offset: 0x00728888
				public void method_9(GInterface443 oneItemOperation, AmmoItemClass ammo, Callback callback)
				{
					ItemAddress itemAddress = null;
					Slot chamber = this.LauncherItemClass.Chamber;
					AmmoItemClass ammoItemClass = chamber.ContainedItem as AmmoItemClass;
					if (oneItemOperation.From1 != null && oneItemOperation.From1.Container == chamber && ammoItemClass == oneItemOperation.Item1)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2014>().Start((AmmoItemClass)oneItemOperation.Item1, 0, itemAddress, callback);
						this.Player_0.ExecuteSkill(new Action(this.method_10));
						return;
					}
					if (oneItemOperation.To1 != null && oneItemOperation.To1.Container == chamber)
					{
						this.State = Player.EOperationState.Finished;
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2043>().Start((AmmoItemClass)oneItemOperation.Item1, 0, callback);
						this.Player_0.ExecuteSkill(new Action(this.method_11));
						return;
					}
					if (callback != null)
					{
						callback.Fail("Failed operation in LauncherIdling");
					}
				}

				// Token: 0x06015CEE RID: 89326 RVA: 0x0072A76C File Offset: 0x0072896C
				public override bool CheckChamber()
				{
					if (this.FirearmController_0.IsTriggerPressed)
					{
						return false;
					}
					if (this.FirearmController_0._player.MovementContext.StationaryWeapon != null)
					{
						return false;
					}
					if (this.LauncherItemClass.UseAmmoWithoutShell && this.LauncherItemClass.ChamberAmmoCount == 0)
					{
						return false;
					}
					if (this.FirearmController_0._player.InventoryController.CheckItemAction(this.FirearmController_0.Item, this.FirearmController_0.Item.CurrentAddress).Failed)
					{
						return false;
					}
					this.SetAiming(false);
					this.FirearmsAnimator_0.CheckChamber();
					this.Player_0.InventoryController.CheckChamber(this.Weapon_0, true);
					this.RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType.CheckChamber);
					return true;
				}

				// Token: 0x06015CEF RID: 89327 RVA: 0x00265C00 File Offset: 0x00263E00
				public virtual void RunUtilityOperation(Player.FirearmController.GClass2038.EUtilityType utilityType)
				{
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2041>().Start(utilityType, this.LauncherItemClass);
				}

				// Token: 0x06015CF0 RID: 89328 RVA: 0x0072A830 File Offset: 0x00728A30
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (!this.FirearmController_0.method_21(operation))
					{
						if (this.Player_0.InventoryController.IsAnimatedSlot(ginterface.From1))
						{
							this.DropBackpackOperationInvoke(ginterface.Item1, callback);
							return;
						}
						callback.Succeed();
						return;
					}
					else
					{
						this.FirearmController_0.IsTriggerPressed = false;
						FoldOperationClass foldOperationClass = operation as FoldOperationClass;
						if (foldOperationClass != null)
						{
							this.State = Player.EOperationState.Finished;
							this.FirearmController_0.InitiateOperation<Player.FirearmController.Class1269>().Start(foldOperationClass, callback);
							return;
						}
						AmmoItemClass ammoItemClass = ginterface.Item1 as AmmoItemClass;
						if (ammoItemClass != null && this.FirearmController_0.IsInLauncherMode())
						{
							this.method_9(ginterface, ammoItemClass, callback);
							return;
						}
						if (callback != null)
						{
							callback.Fail("Failed operation in LauncherIdling");
						}
						return;
					}
				}

				// Token: 0x06015CF1 RID: 89329 RVA: 0x00265C3A File Offset: 0x00263E3A
				public override void ToggleLeftStance()
				{
					if (!this.Weapon_0.IsStationaryWeapon && !this.Weapon_0.BlockLeftStance && !this.FirearmController_0.CurrentCompassState)
					{
						this.Player_0.MovementContext.LeftStanceController.ToggleLeftStance();
						return;
					}
				}

				// Token: 0x06015CF2 RID: 89330 RVA: 0x00265C79 File Offset: 0x00263E79
				[CompilerGenerated]
				public void method_10()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x06015CF3 RID: 89331 RVA: 0x00265C9B File Offset: 0x00263E9B
				[CompilerGenerated]
				public void method_11()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x040128E9 RID: 76009
				[NonSerialized]
				public LauncherItemClass LauncherItemClass;

				// Token: 0x040128EA RID: 76010
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040128EB RID: 76011
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x02003B10 RID: 15120
				[CompilerGenerated]
				public class Class1230
				{
					// Token: 0x0601626B RID: 90731 RVA: 0x0026A1CA File Offset: 0x002683CA
					public void method_0()
					{
						this.gclass2040_0.FirearmController_0.CurrentOperation.DropBackpackOperationInvoke(this.item, this.callback);
					}

					// Token: 0x04012DAA RID: 77226
					public Player.FirearmController.GClass2040 gclass2040_0;

					// Token: 0x04012DAB RID: 77227
					public Item item;

					// Token: 0x04012DAC RID: 77228
					public Callback callback;
				}

				// Token: 0x02003B11 RID: 15121
				[CompilerGenerated]
				public class Class1231
				{
					// Token: 0x0601626D RID: 90733 RVA: 0x0026A1F5 File Offset: 0x002683F5
					public void method_0()
					{
						this.gclass2040_0.FirearmController_0.CurrentOperation.HideWeapon(this.onHidden, this.fastDrop, this.nextControllerItem);
					}

					// Token: 0x04012DAD RID: 77229
					public Player.FirearmController.GClass2040 gclass2040_0;

					// Token: 0x04012DAE RID: 77230
					public Action onHidden;

					// Token: 0x04012DAF RID: 77231
					public bool fastDrop;

					// Token: 0x04012DB0 RID: 77232
					public Item nextControllerItem;
				}
			}

			// Token: 0x020039CF RID: 14799
			public class GClass2042 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015CF4 RID: 89332 RVA: 0x00265CBD File Offset: 0x00263EBD
				public GClass2042(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015CF5 RID: 89333 RVA: 0x0072A8F0 File Offset: 0x00728AF0
				public virtual void Start(AmmoPackReloadingClass ammoPack, Callback callback)
				{
					base.Start();
					this.AmmoPackReloadingClass = ammoPack;
					this.AmmoPackReloadingClass.LockItems();
					this.Callback_0 = callback;
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.Reload(true);
					this.method_5();
				}

				// Token: 0x06015CF6 RID: 89334 RVA: 0x00265CC6 File Offset: 0x00263EC6
				public override void Reset()
				{
					this.AmmoPackReloadingClass = null;
					this.Callback_0 = null;
					this.AmmoItemClass = null;
					this.Bool_0 = false;
					this.Action_0 = null;
					this.Bool_1 = false;
					base.Reset();
				}

				// Token: 0x06015CF7 RID: 89335 RVA: 0x00265CF8 File Offset: 0x00263EF8
				public override void SetInventoryOpened(bool opened)
				{
					this.Bool_0 = opened;
				}

				// Token: 0x06015CF8 RID: 89336 RVA: 0x00265D01 File Offset: 0x00263F01
				public override void OnMagAppeared()
				{
					this.FirearmController_0.underbarrelManagerClass.SetRoundIntoWeapon(this.AmmoItemClass);
				}

				// Token: 0x06015CF9 RID: 89337 RVA: 0x0072A94C File Offset: 0x00728B4C
				public override void OnAddAmmoInChamber()
				{
					this.State = Player.EOperationState.Finished;
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_1;
					Player.FirearmController.GClass2040 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>();
					gclass.Start(null);
					Callback callback_ = this.Callback_0;
					if (callback_ != null)
					{
						callback_.Succeed();
					}
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015CFA RID: 89338 RVA: 0x00265D19 File Offset: 0x00263F19
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Action_0 = onHidden;
					this.Bool_1 = fastDrop;
				}

				// Token: 0x06015CFB RID: 89339 RVA: 0x0072A9A0 File Offset: 0x00728BA0
				public void method_5()
				{
					this.AmmoPackReloadingClass.UnlockItems();
					this.AmmoItemClass = this.AmmoPackReloadingClass.GetAmmoToReload(1);
					this.Weapon_0.RaiseRefreshEvent(false, true);
					LauncherItemClass underbarrelWeapon = this.FirearmController_0.UnderbarrelWeapon;
					GStruct154<GInterface424> gstruct = this.AmmoPackReloadingClass.LoadAmmo(this.Player_0.InventoryController, this.Player_0.InventoryController, underbarrelWeapon.Chamber.CreateItemAddress());
					if (gstruct.Error != null)
					{
						string str = "ReloadInternalMagOperation::Prepare --- Could not get ammo to load, error: ";
						Error error = gstruct.Error;
						UnityEngine.Debug.LogError(str + ((error != null) ? error.ToString() : null));
						return;
					}
					gstruct.Value.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Begin);
					gstruct.Value.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Succeed);
					this.AmmoItemClass = (AmmoItemClass)gstruct.Value.Item;
					if (this.AmmoItemClass == null)
					{
						UnityEngine.Debug.LogError("No ammo in ammo pack");
						return;
					}
				}

				// Token: 0x06015CFC RID: 89340 RVA: 0x0072AA94 File Offset: 0x00728C94
				public override void OnShellEjectEvent()
				{
					this.FirearmController_0.underbarrelManagerClass.StartSpawnShell(this.FirearmController_0._player.Velocity * 0.33f, 0);
					for (int i = 0; i < this.FirearmController_0.UnderbarrelWeapon.ShellsInChambers.Length; i++)
					{
						this.FirearmController_0.UnderbarrelWeapon.ShellsInChambers[i] = null;
					}
					this.FirearmsAnimator_0.SetShellsInWeapon(this.FirearmController_0.UnderbarrelWeapon.ShellsInLauncherCount);
				}

				// Token: 0x040128EC RID: 76012
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040128ED RID: 76013
				[NonSerialized]
				public AmmoPackReloadingClass AmmoPackReloadingClass;

				// Token: 0x040128EE RID: 76014
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040128EF RID: 76015
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x040128F0 RID: 76016
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128F1 RID: 76017
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x020039D0 RID: 14800
			public class GClass2041 : Player.FirearmController.GClass2040
			{
				// Token: 0x06015CFD RID: 89341 RVA: 0x00265D29 File Offset: 0x00263F29
				public GClass2041(Player.FirearmController firearmController) : base(firearmController)
				{
				}

				// Token: 0x06015CFE RID: 89342 RVA: 0x00265D32 File Offset: 0x00263F32
				public void Start(Player.FirearmController.GClass2038.EUtilityType utilityType, LauncherItemClass launcher)
				{
					this.EutilityType_0 = utilityType;
					this.LauncherItemClass = launcher;
					this.FirearmsAnimator_0.SetShellsInWeapon(this.LauncherItemClass.ShellsInLauncherCount);
					this.State = Player.EOperationState.Executing;
					this.Float_1 = 0f;
				}

				// Token: 0x06015CFF RID: 89343 RVA: 0x00265D6A File Offset: 0x00263F6A
				public override void OnIdleStartEvent()
				{
					if (this.State != Player.EOperationState.Ready)
					{
						return;
					}
					base.OnIdleStartEvent();
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>().Start(null);
				}

				// Token: 0x06015D00 RID: 89344 RVA: 0x00265D93 File Offset: 0x00263F93
				public override void OnUtilityOperationStartEvent()
				{
					this.State = Player.EOperationState.Ready;
				}

				// Token: 0x06015D01 RID: 89345 RVA: 0x00265D9C File Offset: 0x00263F9C
				public override bool CanStartReload()
				{
					return false;
				}

				// Token: 0x06015D02 RID: 89346 RVA: 0x00265D9F File Offset: 0x00263F9F
				public override void Reset()
				{
					this.EutilityType_0 = Player.FirearmController.GClass2038.EUtilityType.None;
					base.Reset();
				}

				// Token: 0x06015D03 RID: 89347 RVA: 0x00265DAE File Offset: 0x00263FAE
				public override bool CheckAmmo()
				{
					return false;
				}

				// Token: 0x06015D04 RID: 89348 RVA: 0x00265DB1 File Offset: 0x00263FB1
				public override bool CheckChamber()
				{
					return false;
				}

				// Token: 0x06015D05 RID: 89349 RVA: 0x00265DB4 File Offset: 0x00263FB4
				public override bool CheckFireMode()
				{
					return false;
				}

				// Token: 0x06015D06 RID: 89350 RVA: 0x00265DB7 File Offset: 0x00263FB7
				public override void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015D07 RID: 89351 RVA: 0x00265DB9 File Offset: 0x00263FB9
				public override void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015D08 RID: 89352 RVA: 0x00265DBB File Offset: 0x00263FBB
				public override void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback, bool quickReload = false)
				{
				}

				// Token: 0x06015D09 RID: 89353 RVA: 0x00265DBD File Offset: 0x00263FBD
				public override void QuickReloadMag(MagazineItemClass magazine, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015D0A RID: 89354 RVA: 0x00265DBF File Offset: 0x00263FBF
				public override void ReloadGrenadeLauncher(AmmoPackReloadingClass ammoPack, Callback callback)
				{
				}

				// Token: 0x06015D0B RID: 89355 RVA: 0x00265DC1 File Offset: 0x00263FC1
				public override void SetTriggerPressed(bool pressed)
				{
					if (this.EutilityType_0 == Player.FirearmController.GClass2038.EUtilityType.ExamineWeapon)
					{
						this.OnUtilityOperationStartEvent();
						this.OnIdleStartEvent();
						this.FirearmController_0.CurrentOperation.SetTriggerPressed(pressed);
					}
				}

				// Token: 0x06015D0C RID: 89356 RVA: 0x00265DE9 File Offset: 0x00263FE9
				public override void SetInventoryOpened(bool opened)
				{
					this.Bool_1 = opened;
					if (!this.Bool_1)
					{
						this.Float_1 = 0f;
					}
					base.SetInventoryOpened(opened);
				}

				// Token: 0x06015D0D RID: 89357 RVA: 0x0072AB18 File Offset: 0x00728D18
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (this.State != Player.EOperationState.Executing || this.Bool_1)
					{
						return;
					}
					if (this.Float_1 > 2.5f)
					{
						if (this.FirearmsAnimator_0 != null)
						{
							UnityEngine.Debug.LogError("UtilityOperationEvent not found on " + this.FirearmsAnimator_0.Animator.name);
						}
						else
						{
							UnityEngine.Debug.LogError("UtilityOperationEvent not found. No animator!");
						}
						this.State = Player.EOperationState.Ready;
						this.OnIdleStartEvent();
						return;
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x06015D0E RID: 89358 RVA: 0x00265E0C File Offset: 0x0026400C
				public override void SetSightingRange(float deltaTime)
				{
				}

				// Token: 0x06015D0F RID: 89359 RVA: 0x00265E0E File Offset: 0x0026400E
				public override void SetAiming(bool isAiming)
				{
				}

				// Token: 0x06015D10 RID: 89360 RVA: 0x00265E10 File Offset: 0x00264010
				public override bool ExamineWeapon()
				{
					return true;
				}

				// Token: 0x06015D11 RID: 89361 RVA: 0x0072AB9C File Offset: 0x00728D9C
				public override void OnShellEjectEvent()
				{
					this.FirearmController_0.underbarrelManagerClass.StartSpawnShell(this.FirearmController_0._player.Velocity * 0.33f, 0);
					for (int i = 0; i < this.LauncherItemClass.ShellsInChambers.Length; i++)
					{
						this.LauncherItemClass.ShellsInChambers[i] = null;
					}
					this.FirearmsAnimator_0.SetShellsInWeapon(this.LauncherItemClass.ShellsInLauncherCount);
				}

				// Token: 0x040128F2 RID: 76018
				[NonSerialized]
				public const float Float_0 = 2.5f;

				// Token: 0x040128F3 RID: 76019
				[NonSerialized]
				public float Float_1;

				// Token: 0x040128F4 RID: 76020
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040128F5 RID: 76021
				[NonSerialized]
				public Player.FirearmController.GClass2038.EUtilityType EutilityType_0;

				// Token: 0x040128F6 RID: 76022
				[NonSerialized]
				public new LauncherItemClass LauncherItemClass;
			}

			// Token: 0x020039D1 RID: 14801
			public class GClass2043 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D12 RID: 89362 RVA: 0x00265E13 File Offset: 0x00264013
				public GClass2043(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D13 RID: 89363 RVA: 0x0072AC10 File Offset: 0x00728E10
				public virtual void Start(AmmoItemClass ammo, int chamberIndex, Callback callback)
				{
					this.AmmoItemClass = ammo;
					this.Int_0 = chamberIndex;
					this.Callback_0 = callback;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.SetFire(false);
					this.FirearmsAnimator_0.LoadOneTrigger(true);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetChamberIndexForLoadUnloadAmmo((float)chamberIndex);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015D14 RID: 89364 RVA: 0x00265E23 File Offset: 0x00264023
				public override void Reset()
				{
					this.AmmoItemClass = null;
					this.Int_0 = -1;
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015D15 RID: 89365 RVA: 0x00265E40 File Offset: 0x00264040
				public override void OnMagAppeared()
				{
					this.FirearmController_0.underbarrelManagerClass.SetRoundIntoWeapon(this.AmmoItemClass);
				}

				// Token: 0x06015D16 RID: 89366 RVA: 0x00265E58 File Offset: 0x00264058
				public override void OnRemoveShellEvent()
				{
					this.FirearmController_0.underbarrelManagerClass.RemoveShellInWeapon();
					this.FirearmsAnimator_0.SetShellsInWeapon(0);
				}

				// Token: 0x06015D17 RID: 89367 RVA: 0x0072AC94 File Offset: 0x00728E94
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber(1f);
					this.FirearmsAnimator_0.SetShellsInWeapon(0);
					this.FirearmsAnimator_0.SetCanReload(false);
					this.FirearmsAnimator_0.LoadOneTrigger(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>().Start(null);
					Callback callback_ = this.Callback_0;
					if (callback_ == null)
					{
						return;
					}
					callback_.Succeed();
				}

				// Token: 0x06015D18 RID: 89368 RVA: 0x00265E76 File Offset: 0x00264076
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCaught);
				}

				// Token: 0x06015D19 RID: 89369 RVA: 0x00265E84 File Offset: 0x00264084
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x040128F7 RID: 76023
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x040128F8 RID: 76024
				[NonSerialized]
				public int Int_0 = -1;

				// Token: 0x040128F9 RID: 76025
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x020039D2 RID: 14802
			public class GClass2044 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D1A RID: 89370 RVA: 0x00265E9E File Offset: 0x0026409E
				public GClass2044(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D1B RID: 89371 RVA: 0x0072AD00 File Offset: 0x00728F00
				public virtual void Start(AmmoItemClass ammo, int camoraIndex, Callback callback)
				{
					this.AmmoItemClass = ammo;
					this.CylinderMagazineItemClass = (this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass);
					this.Callback_0 = callback;
					this.Int_0 = camoraIndex;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.LoadOneTrigger(true);
					if (this.Weapon_0.ShellsInChambers[this.Int_0] != null)
					{
						this.FirearmsAnimator_0.SetCamoraIndexWithShellForRemove(this.Int_0);
					}
					else
					{
						this.FirearmsAnimator_0.SetCamoraIndexWithShellForRemove(-1);
					}
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.GetShellsInWeaponCount());
					this.FirearmsAnimator_0.SetCamoraIndexForLoadAmmo(this.Int_0);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count - 1);
					this.FirearmsAnimator_0.SetCanReload(true);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015D1C RID: 89372 RVA: 0x00265EAE File Offset: 0x002640AE
				public override void Reset()
				{
					this.AmmoItemClass = null;
					this.CylinderMagazineItemClass = null;
					this.Callback_0 = null;
					this.Int_0 = -1;
					base.Reset();
				}

				// Token: 0x06015D1D RID: 89373 RVA: 0x00265ED2 File Offset: 0x002640D2
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnRemoveShellEvent();
					this.OnAddAmmoInChamber();
					this.AddAmmoToMag();
				}

				// Token: 0x06015D1E RID: 89374 RVA: 0x00265EF0 File Offset: 0x002640F0
				public override void OnMagPuttedToRig()
				{
					this.SwitchToIdle();
				}

				// Token: 0x06015D1F RID: 89375 RVA: 0x00265EF8 File Offset: 0x002640F8
				public override void OnRemoveShellEvent()
				{
					this.Weapon_0.ShellsInChambers[this.Int_0] = null;
					this.WeaponManagerClass.RemoveShellInWeapon(this.Int_0);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.GetShellsInWeaponCount());
				}

				// Token: 0x06015D20 RID: 89376 RVA: 0x0072AE0C File Offset: 0x0072900C
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.GetShellsInWeaponCount());
					this.FirearmsAnimator_0.SetCanReload(true);
					this.FirearmsAnimator_0.LoadOneTrigger(false);
					this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass, this.Int_0);
				}

				// Token: 0x06015D21 RID: 89377 RVA: 0x00265F34 File Offset: 0x00264134
				public override void AddAmmoToMag()
				{
					this.FirearmsAnimator_0.SetCanReload(false);
				}

				// Token: 0x06015D22 RID: 89378 RVA: 0x00265F42 File Offset: 0x00264142
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCaught);
				}

				// Token: 0x06015D23 RID: 89379 RVA: 0x00265F50 File Offset: 0x00264150
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015D24 RID: 89380 RVA: 0x0072AE74 File Offset: 0x00729074
				public virtual void SwitchToIdle()
				{
					this.CylinderMagazineItemClass.ResetCamoraIndex();
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
				}

				// Token: 0x06015D25 RID: 89381 RVA: 0x00265F6A File Offset: 0x0026416A
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.SwitchToIdle();
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x040128FA RID: 76026
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x040128FB RID: 76027
				[NonSerialized]
				public int Int_0 = -1;

				// Token: 0x040128FC RID: 76028
				[NonSerialized]
				public CylinderMagazineItemClass CylinderMagazineItemClass;

				// Token: 0x040128FD RID: 76029
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x020039D3 RID: 14803
			public class GClass2045 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D26 RID: 89382 RVA: 0x00265F85 File Offset: 0x00264185
				public GClass2045(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D27 RID: 89383 RVA: 0x0072AEC8 File Offset: 0x007290C8
				public virtual void Start(AmmoItemClass ammo, int chamberIndex, Callback callback)
				{
					this.AmmoItemClass = ammo;
					this.Int_0 = chamberIndex;
					this.Callback_0 = callback;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					this.FirearmsAnimator_0.SetFire(false);
					this.FirearmsAnimator_0.LoadOneTrigger(true);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetChamberIndexForLoadUnloadAmmo((float)chamberIndex);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					base.method_3();
				}

				// Token: 0x06015D28 RID: 89384 RVA: 0x00265F95 File Offset: 0x00264195
				public override void Reset()
				{
					this.AmmoItemClass = null;
					this.Int_0 = -1;
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015D29 RID: 89385 RVA: 0x0072AF54 File Offset: 0x00729154
				public override void OnRemoveShellEvent()
				{
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						this.Weapon_0.ShellsInChambers[i] = null;
					}
					this.WeaponManagerClass.RemoveAllShells();
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
				}

				// Token: 0x06015D2A RID: 89386 RVA: 0x0072AFA8 File Offset: 0x007291A8
				public override void OnMagAppeared()
				{
					if (!this.AmmoItemClass.IsUsed && !this.WeaponManagerClass.HasPatronInWeapon(this.Int_0))
					{
						this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass, this.Int_0);
					}
					if (this.AmmoItemClass.IsUsed && !this.WeaponManagerClass.HasShellInWeapon(this.Int_0))
					{
						this.WeaponManagerClass.CreatePatronInShellPort(this.AmmoItemClass, 0);
					}
				}

				// Token: 0x06015D2B RID: 89387 RVA: 0x0072B020 File Offset: 0x00729220
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.Player_0.ExecuteSkill(new Action(this.method_5));
					this.FirearmsAnimator_0.SetCanReload(false);
					this.FirearmsAnimator_0.LoadOneTrigger(false);
					if (!this.AmmoItemClass.IsUsed && !this.WeaponManagerClass.HasPatronInWeapon(this.Int_0))
					{
						this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass, this.Int_0);
					}
					if (this.AmmoItemClass.IsUsed && !this.WeaponManagerClass.HasShellInWeapon(this.Int_0))
					{
						this.WeaponManagerClass.CreatePatronInShellPort(this.AmmoItemClass, this.Int_0);
					}
					this.SwitchToIdle();
				}

				// Token: 0x06015D2C RID: 89388 RVA: 0x00265FB2 File Offset: 0x002641B2
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCaught);
				}

				// Token: 0x06015D2D RID: 89389 RVA: 0x00265FC0 File Offset: 0x002641C0
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015D2E RID: 89390 RVA: 0x00265FDA File Offset: 0x002641DA
				public virtual void SwitchToIdle()
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
				}

				// Token: 0x06015D2F RID: 89391 RVA: 0x00265FFF File Offset: 0x002641FF
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmController_0.IsAiming = false;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x06015D30 RID: 89392 RVA: 0x00266033 File Offset: 0x00264233
				[CompilerGenerated]
				public void method_5()
				{
					this.Player_0.Skills.RaidLoadedAmmoAction.Complete(1f);
				}

				// Token: 0x040128FE RID: 76030
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x040128FF RID: 76031
				[NonSerialized]
				public int Int_0 = -1;

				// Token: 0x04012900 RID: 76032
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x020039D4 RID: 14804
			public abstract class GClass2046 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D31 RID: 89393 RVA: 0x0026604F File Offset: 0x0026424F
				public GClass2046(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D32 RID: 89394 RVA: 0x0072B100 File Offset: 0x00729300
				public new virtual void Start()
				{
					base.Start();
					this.AmmoItemClass = this.Weapon_0.MalfState.AmmoToFire;
					this.AmmoItemClass_1 = this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber;
					this.Player_0.MovementContext.SetBlindFire(0);
				}

				// Token: 0x06015D33 RID: 89395 RVA: 0x00266058 File Offset: 0x00264258
				public override void Reset()
				{
					this.AmmoItemClass = null;
					this.AmmoItemClass_1 = null;
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015D34 RID: 89396 RVA: 0x00266075 File Offset: 0x00264275
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)(this.Weapon_0.ChamberAmmoCount - ((this.AmmoItemClass_1 != null) ? 1 : 0)));
					this.WeaponManagerClass.SetupPatronInWeaponForJam(0);
				}

				// Token: 0x06015D35 RID: 89397 RVA: 0x0072B150 File Offset: 0x00729350
				public void method_5()
				{
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.State = Player.EOperationState.Finished;
					if (this.Action_0 != null)
					{
						this.Action_0();
						return;
					}
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015D36 RID: 89398 RVA: 0x0072B1AC File Offset: 0x007293AC
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					Player.FirearmController.GClass2046.Class1232 @class = new Player.FirearmController.GClass2046.Class1232();
					@class.gclass2046_0 = this;
					@class.onHidden = onHidden;
					@class.fastDrop = fastDrop;
					@class.nextControllerItem = nextControllerItem;
					this.FirearmController_0.IsTriggerPressed = false;
					this.FirearmController_0.IsAiming = false;
					this.Action_0 = new Action(@class.method_0);
				}

				// Token: 0x06015D37 RID: 89399 RVA: 0x002660A7 File Offset: 0x002642A7
				public override void SetLeftStanceAnimOnStartOperation()
				{
				}

				// Token: 0x04012901 RID: 76033
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x04012902 RID: 76034
				[NonSerialized]
				public AmmoItemClass AmmoItemClass_1;

				// Token: 0x04012903 RID: 76035
				[NonSerialized]
				public Action Action_0;

				// Token: 0x02003B12 RID: 15122
				[CompilerGenerated]
				public class Class1232
				{
					// Token: 0x0601626F RID: 90735 RVA: 0x0026A226 File Offset: 0x00268426
					public void method_0()
					{
						this.gclass2046_0.State = Player.EOperationState.Finished;
						this.gclass2046_0.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(this.onHidden, this.fastDrop, this.nextControllerItem);
					}

					// Token: 0x04012DB1 RID: 77233
					public Player.FirearmController.GClass2046 gclass2046_0;

					// Token: 0x04012DB2 RID: 77234
					public Action onHidden;

					// Token: 0x04012DB3 RID: 77235
					public bool fastDrop;

					// Token: 0x04012DB4 RID: 77236
					public Item nextControllerItem;
				}
			}

			// Token: 0x020039D5 RID: 14805
			public class IsOneOffFireOperationClass : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015D38 RID: 89400 RVA: 0x002660A9 File Offset: 0x002642A9
				public IsOneOffFireOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D39 RID: 89401 RVA: 0x0072B208 File Offset: 0x00729408
				public override void Start()
				{
					base.Start();
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmController_0.SendStartOneShotFire();
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs4(this.Weapon_0, CommandStatus.Begin, this.Player_0.InventoryController));
				}

				// Token: 0x06015D3A RID: 89402 RVA: 0x0072B264 File Offset: 0x00729464
				public override void StartFireAnimation()
				{
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None)
					{
						if (this.Weapon_0 is RevolverItemClass && this.Weapon_0.CylinderHammerClosed)
						{
							this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullDoubleActionFireStateName, 1, 0f);
							return;
						}
						this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullFireStateName, 1, 0f);
					}
				}

				// Token: 0x06015D3B RID: 89403 RVA: 0x002660B2 File Offset: 0x002642B2
				public override void Reset()
				{
					this.AmmoItemClass = null;
					base.Reset();
				}

				// Token: 0x06015D3C RID: 89404 RVA: 0x002660C1 File Offset: 0x002642C1
				public override void PrepareShot()
				{
				}

				// Token: 0x06015D3D RID: 89405 RVA: 0x0072B2E0 File Offset: 0x007294E0
				public override void OnFireEvent()
				{
					this.AmmoItemClass = new AmmoItemClass(Guid.NewGuid().ToString(), this.Weapon_0.Template.DefAmmoTemplate);
					if (this.AmmoItemClass == null)
					{
						return;
					}
					this.AmmoItemClass.IsUsed = true;
					this.FirearmController_0.method_55(this.AmmoItemClass);
					this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.AmmoItemClass.IsUsed, 0);
					this.AmmoItemClass = null;
					this.Weapon_0.Repairable.Durability = 0f;
				}

				// Token: 0x06015D3E RID: 89406 RVA: 0x002660C3 File Offset: 0x002642C3
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
				}

				// Token: 0x06015D3F RID: 89407 RVA: 0x0072B37C File Offset: 0x0072957C
				public override void OnFireEndEvent()
				{
					this.Bool_1 = true;
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs4(this.Weapon_0, CommandStatus.Succeed, this.Player_0.InventoryController));
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015D40 RID: 89408 RVA: 0x002660D8 File Offset: 0x002642D8
				public override void FastForward()
				{
					if (!this.Bool_1)
					{
						this.OnFireEvent();
					}
					this.OnFireEndEvent();
				}

				// Token: 0x06015D41 RID: 89409 RVA: 0x002660EE File Offset: 0x002642EE
				public override bool CanNotBeInterrupted()
				{
					return true;
				}

				// Token: 0x04012904 RID: 76036
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;
			}

			// Token: 0x020039D6 RID: 14806
			public class GClass2050 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D42 RID: 89410 RVA: 0x002660F1 File Offset: 0x002642F1
				public GClass2050(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D43 RID: 89411 RVA: 0x0072B420 File Offset: 0x00729620
				public virtual void Start(MagazineItemClass magazine, Slot from, Callback callback)
				{
					this.Slot_0 = from;
					this.Callback_0 = callback;
					this.Bool_4 = magazine.IsMagazineWithBelt;
					base.Start();
					this.FirearmsAnimator_0.PullOutMagInInventoryMode();
					this.FirearmsAnimator_0.SetCanReload(false);
					this.FirearmsAnimator_0.ResetInsertMagInInventoryMode();
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.FirearmController_0.bool_1 = true;
					if (this.Weapon_0.IsBeltMachineGun)
					{
						this.FirearmController_0.IsAiming = false;
					}
					if (!this.Weapon_0.MustBoltBeOpennedForExternalReload)
					{
						this.Bool_2 = true;
						this.Bool_3 = true;
						if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
						{
							this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
						}
					}
					else if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber(1f);
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.FirearmsAnimator_0.SetIsExternalMag(true);
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					this.FirearmsAnimator_0.SetMagTypeCurrent((currentMagazine != null) ? currentMagazine.magAnimationIndex : 0);
					if (this.Weapon_0.IsBoltCatch && this.Weapon_0.ChamberAmmoCount == 1 && !this.Weapon_0.ManualBoltCatch && !this.Weapon_0.MustBoltBeOpennedForExternalReload && !this.Weapon_0.MustBoltBeOpennedForInternalReload)
					{
						this.FirearmsAnimator_0.SetBoltCatch(false);
					}
				}

				// Token: 0x06015D44 RID: 89412 RVA: 0x002660FA File Offset: 0x002642FA
				public override void Reset()
				{
					this.Slot_0 = null;
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015D45 RID: 89413 RVA: 0x0072B5D8 File Offset: 0x007297D8
				public override void OnMagPulledOutFromWeapon()
				{
					this.Bool_0 = true;
					this.FirearmsAnimator_0.SetAmmoOnMag(0);
					this.FirearmsAnimator_0.SetMagInWeapon(false);
					if (this.FirearmController_0.HasBipod)
					{
						this.FirearmController_0.FirearmsAnimator.SetBipod(this.FirearmController_0.BipodState);
					}
				}

				// Token: 0x06015D46 RID: 89414 RVA: 0x0072B62C File Offset: 0x0072982C
				public override void OnMagPuttedToRig()
				{
					this.Bool_1 = true;
					this.WeaponManagerClass.RemoveMod(this.Slot_0);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.RecalculateErgonomic();
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.Callback_0.Succeed();
					this.FirearmController_0.WeaponModified();
					if (this.Bool_4)
					{
						this.FirearmController_0.weaponPrefab_0.UpdateAnimatorHierarchy();
						if (this.FirearmController_0.HasBipod)
						{
							this.FirearmController_0.FirearmsAnimator.SetBipod(this.FirearmController_0.BipodState);
						}
					}
				}

				// Token: 0x06015D47 RID: 89415 RVA: 0x00266110 File Offset: 0x00264310
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015D48 RID: 89416 RVA: 0x0072B6CC File Offset: 0x007298CC
				public override void OnShellEjectEvent()
				{
					this.Bool_2 = true;
					if (this.Weapon_0.MustBoltBeOpennedForExternalReload && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.WeaponManagerClass.CreatePatronInShellPort(this.Weapon_0.MalfState.MalfunctionedAmmo, 0);
						this.WeaponManagerClass.StartSpawnMisfiredCartridge(this.Player_0.Velocity * 0.66f);
						return;
					}
					AmmoItemClass ammoItemClass = null;
					for (int i = 0; i < this.Weapon_0.Chambers.Length; i++)
					{
						ammoItemClass = (AmmoItemClass)this.Weapon_0.Chambers[i].ContainedItem;
						if (ammoItemClass != null && !ammoItemClass.IsUsed)
						{
							break;
						}
					}
					this.WeaponManagerClass.MoveAmmoFromChamberToShellPort(ammoItemClass.IsUsed, 0);
					this.WeaponManagerClass.StartSpawnShell(this.Player_0.Velocity * 0.66f, 0);
				}

				// Token: 0x06015D49 RID: 89417 RVA: 0x0072B7B0 File Offset: 0x007299B0
				public override void RemoveAmmoFromChamber()
				{
					this.Bool_3 = true;
					if (this.Weapon_0.MustBoltBeOpennedForExternalReload && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
						return;
					}
					bool flag = false;
					Slot[] chambers = this.Weapon_0.Chambers;
					int num = 0;
					while (num < chambers.Length && !flag)
					{
						Slot slot = chambers[num];
						AmmoItemClass ammoItemClass = (AmmoItemClass)slot.ContainedItem;
						flag |= (!ammoItemClass.IsUsed && slot.RemoveItem(false).Succeeded);
						num++;
					}
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015D4A RID: 89418 RVA: 0x0026612A File Offset: 0x0026432A
				public override void OnOnOffBoltCatchEvent(bool isCaught)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCaught);
				}

				// Token: 0x06015D4B RID: 89419 RVA: 0x00266138 File Offset: 0x00264338
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x06015D4C RID: 89420 RVA: 0x0072B868 File Offset: 0x00729A68
				public override void FastForward()
				{
					if (!this.Bool_3)
					{
						this.RemoveAmmoFromChamber();
					}
					if (!this.Bool_2)
					{
						this.OnShellEjectEvent();
					}
					if (!this.Bool_0)
					{
						this.OnMagPulledOutFromWeapon();
					}
					if (!this.Bool_1)
					{
						this.OnMagPuttedToRig();
					}
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.1f);
				}

				// Token: 0x04012905 RID: 76037
				[NonSerialized]
				public Slot Slot_0;

				// Token: 0x04012906 RID: 76038
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012907 RID: 76039
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012908 RID: 76040
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012909 RID: 76041
				[NonSerialized]
				public bool Bool_2;

				// Token: 0x0401290A RID: 76042
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x0401290B RID: 76043
				[NonSerialized]
				public bool Bool_4;
			}

			// Token: 0x020039D7 RID: 14807
			public class RechamberOperationClass : Player.FirearmController.GClass2013
			{
				// Token: 0x06015D4D RID: 89421 RVA: 0x0026613B File Offset: 0x0026433B
				public RechamberOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D4E RID: 89422 RVA: 0x0072B8D0 File Offset: 0x00729AD0
				public virtual void Start(AmmoItemClass ammo, Callback callback)
				{
					base.Start();
					this.Callback_0 = callback;
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					if (this.Weapon_0.ChamberAmmoCount == 0)
					{
						this.SwitchToIdle();
						return;
					}
					if (this.Weapon_0.HasChambers)
					{
						Slot slot = this.Weapon_0.Chambers[0];
					}
					this.Item_0 = ammo;
					InteractionsHandlerClass.Remove(this.Item_0, this.Player_0.InventoryController, true);
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					if (currentMagazine != null && currentMagazine.Count > 0)
					{
						this.Item_1 = currentMagazine.Cartridges.Last;
						this.Player_0.ExecuteSkill(new Action(this.method_5));
					}
					this.FirearmController_0.SetAim(false);
					this.Player_0.MovementContext.SetBlindFire(0);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.Rechamber(true);
					this.FirearmsAnimator_0.SetInventory(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015D4F RID: 89423 RVA: 0x00266144 File Offset: 0x00264344
				public override void Reset()
				{
					this.Item_0 = null;
					this.Item_1 = null;
					this.Action_0 = null;
					this.Bool_0 = false;
					this.Bool_1 = false;
					this.Bool_2 = false;
					base.Reset();
				}

				// Token: 0x06015D50 RID: 89424 RVA: 0x00266176 File Offset: 0x00264376
				public override void RemoveAmmoFromChamber()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.WeaponManagerClass.RemovePatronInWeapon(0);
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
				}

				// Token: 0x06015D51 RID: 89425 RVA: 0x002661A4 File Offset: 0x002643A4
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015D52 RID: 89426 RVA: 0x002661B2 File Offset: 0x002643B2
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					if (this.Item_1 == null)
					{
						return;
					}
					this.WeaponManagerClass.SetRoundIntoWeapon((AmmoItemClass)this.Item_1, 0);
					this.SwitchToIdle();
				}

				// Token: 0x06015D53 RID: 89427 RVA: 0x0072BA08 File Offset: 0x00729C08
				public override void OnShellEjectEvent()
				{
					if (this.Bool_2)
					{
						return;
					}
					this.Bool_2 = true;
					Callback callback_ = this.Callback_0;
					if (callback_ != null)
					{
						callback_.Succeed();
					}
					this.WeaponManagerClass.ThrowPatronAsLoot(this.Item_0, this.Player_0, "RechamberOperation.OnShellEjectEvent");
					if (this.Item_1 == null)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015D54 RID: 89428 RVA: 0x0072BA60 File Offset: 0x00729C60
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					Player.FirearmController.RechamberOperationClass.Class1233 @class = new Player.FirearmController.RechamberOperationClass.Class1233();
					@class.RechamberOperationClass = this;
					@class.onHidden = onHidden;
					@class.fastDrop = fastDrop;
					@class.nextControllerItem = nextControllerItem;
					this.Action_0 = new Action(@class.method_0);
				}

				// Token: 0x06015D55 RID: 89429 RVA: 0x0072BAA4 File Offset: 0x00729CA4
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.RemoveAmmoFromChamber();
					MagazineItemClass currentMagazine = this.Weapon_0.GetCurrentMagazine();
					bool flag = this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazine || this.Weapon_0.ReloadMode == Weapon.EReloadMode.ExternalMagazineWithInternalReloadSupport;
					bool flag2 = currentMagazine != null && currentMagazine.Count > 0;
					if (this.Weapon_0.IsBoltCatch && this.Item_1 == null && !flag2 && ((flag && currentMagazine != null) || !flag))
					{
						this.OnOnOffBoltCatchEvent(true);
					}
					this.OnShellEjectEvent();
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnAddAmmoInChamber();
					if (this.State != Player.EOperationState.Finished)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015D56 RID: 89430 RVA: 0x0072BB4C File Offset: 0x00729D4C
				public virtual void SwitchToIdle()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Weapon_0.GetCurrentMagazineCount());
					this.FirearmsAnimator_0.Rechamber(false);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.bool_2);
					this.State = Player.EOperationState.Finished;
					if (this.Action_0 == null)
					{
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
						return;
					}
					this.Action_0();
				}

				// Token: 0x06015D57 RID: 89431 RVA: 0x002661EA File Offset: 0x002643EA
				[CompilerGenerated]
				public void method_5()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x0401290C RID: 76044
				[NonSerialized]
				public Item Item_0;

				// Token: 0x0401290D RID: 76045
				[NonSerialized]
				public Item Item_1;

				// Token: 0x0401290E RID: 76046
				[NonSerialized]
				public Action Action_0;

				// Token: 0x0401290F RID: 76047
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012910 RID: 76048
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012911 RID: 76049
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012912 RID: 76050
				[NonSerialized]
				public bool Bool_2;

				// Token: 0x02003B13 RID: 15123
				[CompilerGenerated]
				public class Class1233
				{
					// Token: 0x06016271 RID: 90737 RVA: 0x0026A263 File Offset: 0x00268463
					public void method_0()
					{
						this.RechamberOperationClass.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(this.onHidden, this.fastDrop, this.nextControllerItem);
					}

					// Token: 0x04012DB5 RID: 77237
					public Player.FirearmController.RechamberOperationClass RechamberOperationClass;

					// Token: 0x04012DB6 RID: 77238
					public Action onHidden;

					// Token: 0x04012DB7 RID: 77239
					public bool fastDrop;

					// Token: 0x04012DB8 RID: 77240
					public Item nextControllerItem;
				}
			}

			// Token: 0x020039D8 RID: 14808
			public class CylinderReloadOperationClass : Player.FirearmController.AmmoPackReloadOperationClass
			{
				// Token: 0x06015D58 RID: 89432 RVA: 0x0026620C File Offset: 0x0026440C
				public CylinderReloadOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D59 RID: 89433 RVA: 0x00266232 File Offset: 0x00264432
				public virtual void Start(AmmoPackReloadingClass ammoPack, Callback callback, bool quickReload = false)
				{
					base.Start(ammoPack, callback);
					this.Bool_4 = quickReload;
					this.method_9();
					base.Boolean_0 = false;
				}

				// Token: 0x06015D5A RID: 89434 RVA: 0x00266250 File Offset: 0x00264450
				public override void OnMagPuttedToRig()
				{
					this.method_13();
					this.SwitchToIdle();
				}

				// Token: 0x06015D5B RID: 89435 RVA: 0x0072BBEC File Offset: 0x00729DEC
				public override void Reset()
				{
					base.Reset();
					this.Bool_4 = false;
					this.Bool_5 = false;
					this.Bool_3 = false;
					this.CylinderMagazineItemClass = null;
					this.Int_1 = -1;
					this.Int_2 = 0;
					this.List_0.Clear();
					this.List_1.Clear();
				}

				// Token: 0x06015D5C RID: 89436 RVA: 0x0072BC40 File Offset: 0x00729E40
				public void method_9()
				{
					this.CylinderMagazineItemClass = (this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass);
					this.Int_2 = this.CylinderMagazineItemClass.Count;
					this.Bool_3 = ((this.Bool_4 || this.CylinderMagazineItemClass.Count == 0) && this.FirearmController_0.CurrentMasteringLevel > 0);
					this.FirearmsAnimator_0.SetWeaponLevel((float)(this.Bool_3 ? 1 : 0));
					this.List_0 = (this.Bool_3 ? this.CylinderMagazineItemClass.GetCamorasIndexesList() : this.CylinderMagazineItemClass.GetFreeCamorasIndexesFromCurrentActiveIndex(this.Bool_4, !this.Weapon_0.CylinderHammerClosed));
					this.Weapon_0.GetShellsIndexes(this.List_1);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.List_1.Count);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count);
					this.SendReloadCommand();
					if (this.CylinderMagazineItemClass.Count != 0)
					{
						this.method_16();
						this.FirearmsAnimator_0.SetCamoraIndexWithShellForRemove(this.Int_1);
					}
					if (this.Bool_4)
					{
						this.FirearmsAnimator_0.ReloadFast(this.Bool_4);
						this.FirearmsAnimator_0.SetAmmoCountForRemove(this.List_1.Count + this.CylinderMagazineItemClass.Count);
						this.FirearmsAnimator_0.ResetReload();
						this.Int_2 = 0;
					}
					else
					{
						this.FirearmsAnimator_0.SetAmmoCountForRemove(this.List_1.Count);
					}
					this.method_14();
				}

				// Token: 0x06015D5D RID: 89437 RVA: 0x0026625E File Offset: 0x0026445E
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015D5E RID: 89438 RVA: 0x0026626C File Offset: 0x0026446C
				public override void OnMagAppeared()
				{
					this.method_10();
				}

				// Token: 0x06015D5F RID: 89439 RVA: 0x0072BDC4 File Offset: 0x00729FC4
				public void method_10()
				{
					if (!this.Bool_3)
					{
						return;
					}
					this.CylinderMagazineItemClass.SetCurrentCamoraIndex(this.Weapon_0.CylinderHammerClosed ? (this.CylinderMagazineItemClass.MaxCount - 1) : 0);
					int num = 0;
					while (num < this.CylinderMagazineItemClass.MaxCount && num < this.AmmoPackReloadingClass.AmmoCount)
					{
						AmmoItemClass ammoToReload = this.AmmoPackReloadingClass.GetAmmoToReload(num);
						this.WeaponManagerClass.SetRoundIntoWeapon(ammoToReload, num);
						num++;
					}
				}

				// Token: 0x06015D60 RID: 89440 RVA: 0x0072BE40 File Offset: 0x0072A040
				public void method_11()
				{
					if (!this.Bool_3)
					{
						return;
					}
					int num = this.Int_0;
					while (num < this.List_0.Count && num < this.AmmoPackReloadingClass.AmmoCount)
					{
						this.WeaponManagerClass.DestroyPatronInWeapon(this.List_0[num]);
						num++;
					}
				}

				// Token: 0x06015D61 RID: 89441 RVA: 0x00266274 File Offset: 0x00264474
				public override void RemoveAmmoFromChamber()
				{
					this.method_11();
				}

				// Token: 0x06015D62 RID: 89442 RVA: 0x0072BE98 File Offset: 0x0072A098
				public override void OnRemoveShellEvent()
				{
					if (this.CylinderMagazineItemClass.Count == 0)
					{
						this.method_17();
						return;
					}
					if (this.Bool_4)
					{
						this.method_17();
						this.method_18();
						return;
					}
					this.Weapon_0.ShellsInChambers[this.Int_1] = null;
					this.WeaponManagerClass.StartSpawnShell(this.Player_0.Velocity * 0.33f, this.Int_1);
					this.method_16();
				}

				// Token: 0x06015D63 RID: 89443 RVA: 0x0026627C File Offset: 0x0026447C
				public override void OnShellEjectEvent()
				{
					this.FirearmsAnimator_0.SetCamoraIndexWithShellForRemove(this.Int_1);
				}

				// Token: 0x06015D64 RID: 89444 RVA: 0x0026628F File Offset: 0x0026448F
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_3)
					{
						this.method_12();
					}
					else
					{
						this.method_15();
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count + this.Int_0);
				}

				// Token: 0x06015D65 RID: 89445 RVA: 0x0072BF10 File Offset: 0x0072A110
				public void method_12()
				{
					if (this.Int_0 < this.List_0.Count && this.Int_0 < this.AmmoPackReloadingClass.AmmoCount)
					{
						this.Int_0++;
						this.FirearmsAnimator_0.SetAmmoOnMag(this.Int_0);
						if (this.Int_0 >= this.List_0.Count || this.Int_0 >= this.AmmoPackReloadingClass.AmmoCount)
						{
							this.AddAmmoToMag();
						}
						return;
					}
				}

				// Token: 0x06015D66 RID: 89446 RVA: 0x0072BF90 File Offset: 0x0072A190
				public override void AddAmmoToMag()
				{
					this.method_14();
					base.Boolean_0 = true;
					this.FirearmsAnimator_0.SetAmmoOnMag(this.CylinderMagazineItemClass.Count + this.Int_0);
					if (!this.CanReload() || this.Bool_1)
					{
						this.FirearmsAnimator_0.SetMasteringReloadAborted(this.Bool_1);
						this.method_13();
					}
				}

				// Token: 0x06015D67 RID: 89447 RVA: 0x0072BFF0 File Offset: 0x0072A1F0
				public static void smethod_0(int ammoToLoadIntoMag, AmmoPackReloadingClass ammoPack, Player player, CylinderMagazineItemClass magazine, Weapon weapon, List<int> camorasIndexesForLoadAmmo)
				{
					for (int i = 0; i < ammoToLoadIntoMag; i++)
					{
						GStruct154<GInterface424> gstruct = ammoPack.LoadAmmo(player.InventoryController, player.InventoryController, magazine.Camoras[camorasIndexesForLoadAmmo[i]].CreateItemAddress());
						if (gstruct.Error == null)
						{
							gstruct.Value.RaiseEvents(player.InventoryController, CommandStatus.Begin);
							gstruct.Value.RaiseEvents(player.InventoryController, CommandStatus.Succeed);
						}
						else
						{
							string[] array = new string[6];
							array[0] = "SwitchToIdle: Cannot load ammo. AmmoCount: ";
							array[1] = ammoPack.AmmoCount.ToString();
							array[2] = ", AmmoToLoadIntoMag: ";
							array[3] = (ammoToLoadIntoMag - i).ToString();
							array[4] = ", Error: ";
							int num = 5;
							Error error = gstruct.Error;
							array[num] = ((error != null) ? error.ToString() : null);
							UnityEngine.Debug.LogError(string.Concat(array));
						}
					}
				}

				// Token: 0x06015D68 RID: 89448 RVA: 0x002662C4 File Offset: 0x002644C4
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					base.HideWeapon(onHidden, fastDrop, null);
					this.Bool_1 = true;
				}

				// Token: 0x06015D69 RID: 89449 RVA: 0x002662D6 File Offset: 0x002644D6
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					if (this.State != Player.EOperationState.Finished)
					{
						this.method_13();
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015D6A RID: 89450 RVA: 0x0072C0C4 File Offset: 0x0072A2C4
				public void method_13()
				{
					if (this.Bool_5)
					{
						return;
					}
					this.Bool_5 = true;
					if (this.Int_0 > 0)
					{
						this.Player_0.ExecuteSkill(new Action(this.method_20));
					}
					this.Weapon_0.Parent.RaiseRemoveEvent(this.Weapon_0, CommandStatus.Failed, this.Player_0.InventoryController);
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.FirearmsAnimator_0.SetCanReload(false);
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 1);
					}
				}

				// Token: 0x06015D6B RID: 89451 RVA: 0x0072C170 File Offset: 0x0072A370
				public virtual void SwitchToIdle()
				{
					this.AmmoPackReloadingClass.UnlockItems();
					this.method_19();
					this.FirearmsAnimator_0.SetMasteringReloadAborted(false);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.InventoryOpened);
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Weapon_0.RaiseRefreshEvent(false, true);
					this.State = Player.EOperationState.Finished;
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					base.method_6();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015D6C RID: 89452 RVA: 0x0072C1F8 File Offset: 0x0072A3F8
				public void method_14()
				{
					if (this.Int_0 >= this.List_0.Count)
					{
						return;
					}
					int camoraIndexForLoadAmmo = this.List_0[this.Int_0];
					this.FirearmsAnimator_0.SetCamoraIndexForLoadAmmo(camoraIndexForLoadAmmo);
				}

				// Token: 0x06015D6D RID: 89453 RVA: 0x0072C238 File Offset: 0x0072A438
				public void method_15()
				{
					if (this.Int_0 < this.List_0.Count && this.Int_0 < this.AmmoPackReloadingClass.AmmoCount)
					{
						this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
						this.FirearmsAnimator_0.SetCamoraIndexForLoadAmmo(this.List_0[this.Int_0]);
						AmmoItemClass ammoToReload = this.AmmoPackReloadingClass.GetAmmoToReload(this.Int_0);
						this.WeaponManagerClass.SetRoundIntoWeapon(ammoToReload, this.List_0[this.Int_0]);
						this.Int_0++;
						return;
					}
				}

				// Token: 0x06015D6E RID: 89454 RVA: 0x002662F7 File Offset: 0x002644F7
				public virtual void SendReloadCommand()
				{
				}

				// Token: 0x06015D6F RID: 89455 RVA: 0x0072C2E0 File Offset: 0x0072A4E0
				public void method_16()
				{
					this.FirearmsAnimator_0.SetShellsInWeapon(this.List_1.Count);
					if (this.Bool_4)
					{
						return;
					}
					if (this.List_1.Count == 0)
					{
						return;
					}
					this.Int_1 = this.List_1.First<int>();
					this.List_1.RemoveAt(0);
				}

				// Token: 0x06015D70 RID: 89456 RVA: 0x002662F9 File Offset: 0x002644F9
				public override bool CanReload()
				{
					return this.AmmoPackReloadingClass.AmmoCount - this.Int_0 > 0 && this.Int_2 + this.Int_0 != this.MagazineItemClass.MaxCount;
				}

				// Token: 0x06015D71 RID: 89457 RVA: 0x0072C338 File Offset: 0x0072A538
				public void method_17()
				{
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						this.Weapon_0.ShellsInChambers[i] = null;
					}
					this.WeaponManagerClass.StartSpawnAllShells(Vector3.down);
					this.FirearmsAnimator_0.SetShellsInWeapon(0);
				}

				// Token: 0x06015D72 RID: 89458 RVA: 0x0072C388 File Offset: 0x0072A588
				public void method_18()
				{
					this.WeaponManagerClass.DestroyAllPatronsInWeapon();
					Slot[] camoras = this.CylinderMagazineItemClass.Camoras;
					for (int i = 0; i < camoras.Length; i++)
					{
						Item containedItem = camoras[i].ContainedItem;
						if (containedItem != null)
						{
							GStruct154<GInterface424> gstruct = this.CylinderMagazineItemClass.RemoveAmmoInCamora(containedItem, this.Player_0.InventoryController);
							if (gstruct.Failed)
							{
								UnityEngine.Debug.LogError(gstruct.Error);
								return;
							}
							this.WeaponManagerClass.ThrowPatronAsLoot(containedItem, this.Player_0, "ReloadCylinderMagOperation.RemoveAllAmmo");
						}
					}
				}

				// Token: 0x06015D73 RID: 89459 RVA: 0x0072C40C File Offset: 0x0072A60C
				public void method_19()
				{
					AmmoPackReloadingClass ammoPackReloadingClass = this.AmmoPackReloadingClass;
					CylinderMagazineItemClass cylinderMagazineItemClass = this.CylinderMagazineItemClass;
					Weapon weapon_ = this.Weapon_0;
					int int_ = this.Int_0;
					Player player_ = this.Player_0;
					List<int> list_ = this.List_0;
					Player.FirearmController.CylinderReloadOperationClass.smethod_0(int_, ammoPackReloadingClass, player_, cylinderMagazineItemClass, weapon_, list_);
					if (!weapon_.CylinderHammerClosed)
					{
						this.CylinderMagazineItemClass.SetNotEmptyCamoraAsActive();
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(cylinderMagazineItemClass.Count);
					this.Player_0.InventoryController.CheckChamber(this.Weapon_0, true);
				}

				// Token: 0x06015D74 RID: 89460 RVA: 0x0026632F File Offset: 0x0026452F
				[CompilerGenerated]
				public void method_20()
				{
					this.Player_0.Skills.WeaponReloadAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x04012913 RID: 76051
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x04012914 RID: 76052
				[NonSerialized]
				public CylinderMagazineItemClass CylinderMagazineItemClass;

				// Token: 0x04012915 RID: 76053
				[NonSerialized]
				public List<int> List_0 = new List<int>();

				// Token: 0x04012916 RID: 76054
				[NonSerialized]
				public List<int> List_1 = new List<int>();

				// Token: 0x04012917 RID: 76055
				[NonSerialized]
				public int Int_1 = -1;

				// Token: 0x04012918 RID: 76056
				[NonSerialized]
				public bool Bool_4;

				// Token: 0x04012919 RID: 76057
				[NonSerialized]
				public int Int_2;

				// Token: 0x0401291A RID: 76058
				[NonSerialized]
				public bool Bool_5;
			}

			// Token: 0x020039D9 RID: 14809
			public class GClass2016 : Player.FirearmController.GClass2015
			{
				// Token: 0x06015D75 RID: 89461 RVA: 0x00266351 File Offset: 0x00264551
				public GClass2016(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D76 RID: 89462 RVA: 0x0026635A File Offset: 0x0026455A
				public override void SetAiming(bool isAiming)
				{
					if (this.Gclass2006_0.NextMagazine.IsMagazineWithBelt)
					{
						return;
					}
					base.method_5(isAiming);
				}

				// Token: 0x06015D77 RID: 89463 RVA: 0x0072C48C File Offset: 0x0072A68C
				public virtual void Start(Player.FirearmController.GClass2006 reloadExternalMagResult, [CanBeNull] Callback callback)
				{
					this.Callback_1 = callback;
					base.Start(callback);
					this.FirearmController_0.bool_1 = true;
					this.Gclass2006_0 = reloadExternalMagResult;
					this.FirearmsAnimator_0.SetAmmoCompatible(this.Gclass2006_0.AmmoCompatible);
					this.FirearmsAnimator_0.SetIsExternalMag(true);
					if (this.Gclass2006_0.RemoveFromChamberResult == null)
					{
						this.Bool_1 = true;
					}
					if (this.Gclass2006_0.PopNewAmmoResult == null)
					{
						this.Bool_6 = true;
					}
					this.FirearmsAnimator_0.SetCanReload(true);
					this.FirearmsAnimator_0.Reload((this.Gclass2006_0.OldMagazine != null) ? this.Gclass2006_0.OldMagazine.magAnimationIndex : -1, this.Gclass2006_0.NextMagazine.magAnimationIndex, reloadExternalMagResult.QuickReload);
					this.Gclass2006_0.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Begin);
					if (this.Weapon_0.IsBoltCatch && this.Weapon_0.ChamberAmmoCount == 1 && this.Gclass2006_0.PopNewAmmoResult == null && !this.Weapon_0.ManualBoltCatch && !this.Weapon_0.MustBoltBeOpennedForExternalReload && !this.Weapon_0.MustBoltBeOpennedForInternalReload)
					{
						this.FirearmsAnimator_0.SetBoltCatch(false);
					}
					this.Player_0.Say(EPhraseTrigger.OnWeaponReload, false, 0f, (ETagStatus)0, 100, false);
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire && this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId) && this.Gclass2006_0.NextMagazine.Count > 0 && this.Gclass2006_0.AmmoCompatible)
					{
						this.Bool_6 = false;
						this.FirearmsAnimator_0.SetAmmoInChamber(0f);
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
				}

				// Token: 0x06015D78 RID: 89464 RVA: 0x0072C658 File Offset: 0x0072A858
				public override void Reset()
				{
					this.Callback_1 = null;
					this.Bool_1 = false;
					this.Bool_2 = false;
					this.Bool_3 = false;
					this.Bool_4 = false;
					this.Bool_5 = false;
					this.Bool_6 = false;
					this.Bool_8 = false;
					this.Gclass2006_0 = null;
					base.Reset();
				}

				// Token: 0x06015D79 RID: 89465 RVA: 0x00266376 File Offset: 0x00264576
				public override void UseSecondMagForReload()
				{
					this.method_9();
				}

				// Token: 0x06015D7A RID: 89466 RVA: 0x0026637E File Offset: 0x0026457E
				public override void OnShellEjectEvent()
				{
					this.WeaponManagerClass.StartSpawnShell(this.Player_0.Velocity * 0.66f, 0);
				}

				// Token: 0x06015D7B RID: 89467 RVA: 0x0072C6AC File Offset: 0x0072A8AC
				public override void RemoveAmmoFromChamber()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					if (this.Gclass2006_0.RemoveFromChamberResult != null)
					{
						this.WeaponManagerClass.RemovePatronInWeapon(0);
					}
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
					Player.FirearmController.GClass2006 gclass2006_ = this.Gclass2006_0;
					if (((gclass2006_ != null) ? gclass2006_.RemoveFromChamberResult : null) != null)
					{
						this.WeaponManagerClass.ThrowPatronAsLoot(this.Gclass2006_0.RemoveFromChamberResult.Item, this.Player_0, "ReloadExternalMagOperation.RemoveAmmoFromChamber");
					}
				}

				// Token: 0x06015D7C RID: 89468 RVA: 0x002663A1 File Offset: 0x002645A1
				public override void OnMagPulledOutFromWeapon()
				{
					if (this.Bool_2)
					{
						return;
					}
					this.Bool_2 = true;
					base.method_7();
					this.FirearmsAnimator_0.SetMagInWeapon(false);
				}

				// Token: 0x06015D7D RID: 89469 RVA: 0x0072C72C File Offset: 0x0072A92C
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_3)
					{
						return;
					}
					this.Bool_3 = true;
					if (this.Gclass2006_0.RemoveOldMagResult != null)
					{
						Item item = this.Gclass2006_0.RemoveOldMagResult.Item;
						this.DropMod(item, EWeaponModType.mod_magazine);
					}
					this.WeaponManagerClass.RemoveMod(this.Gclass2006_0.MagazineSlot);
				}

				// Token: 0x06015D7E RID: 89470 RVA: 0x0072C788 File Offset: 0x0072A988
				public virtual void DropMod(Item droppedMod, EWeaponModType modType)
				{
					BifacialTransform bodyTransform = this.Player_0.PlayerBones.BodyTransform;
					Transform original = bodyTransform.Original;
					Transform modTransform = this.WeaponManagerClass.GetModTransform(modType);
					Vector3 position = original.InverseTransformPoint(modTransform.position);
					Quaternion rhs = Quaternion.Inverse(original.rotation) * modTransform.rotation;
					Vector3 position2 = bodyTransform.TransformPoint(position);
					Quaternion rotation = bodyTransform.rotation * rhs;
					Vector3 velocity = Vector3.down / 100f;
					Vector3 angularVelocity = new Vector3(UnityEngine.Random.Range(-3f, 3f), UnityEngine.Random.Range(-3f, 3f), UnityEngine.Random.Range(-3f, 3f));
					Singleton<GameWorld>.Instance.ThrowItem(droppedMod, this.Player_0, position2, rotation, velocity, angularVelocity, true, true, 0f);
				}

				// Token: 0x06015D7F RID: 89471 RVA: 0x0072C858 File Offset: 0x0072AA58
				public override void OnMagAppeared()
				{
					if (this.Bool_4)
					{
						return;
					}
					this.Bool_4 = true;
					base.method_7();
					this.WeaponManagerClass.SetupMod(this.Gclass2006_0.MagazineSlot, Singleton<PoolManagerClass>.Instance.CreateItem(this.Gclass2006_0.NextMagazine, Player.GetVisibleToCamera(this.Player_0), this.Player_0, true));
					if (this.Gclass2006_0.NextMagazine.IsMagazineWithBelt)
					{
						this.FirearmController_0.weaponPrefab_0.UpdateAnimatorHierarchy();
						if (this.FirearmController_0.HasBipod)
						{
							this.FirearmController_0.FirearmsAnimator.SetBipod(this.FirearmController_0.BipodState);
						}
					}
				}

				// Token: 0x06015D80 RID: 89472 RVA: 0x0072C904 File Offset: 0x0072AB04
				public override void OnMagInsertedToWeapon()
				{
					if (this.Bool_5)
					{
						return;
					}
					this.Bool_5 = true;
					this.FirearmsAnimator_0.SetMagInWeapon(true);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Gclass2006_0.NextMagazine.Count + ((this.Gclass2006_0.PopNewAmmoResult == null) ? 0 : 1));
					if (this.Weapon_0.HasChambers && this.Gclass2006_0.PopNewAmmoResult == null && this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.SoftSlide && this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.HardSlide && this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.Jam && (this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.Misfire || !this.Weapon_0.MalfState.IsKnownMalfunction(this.Player_0.ProfileId) || !this.Gclass2006_0.AmmoCompatible))
					{
						this.SwitchToIdlingState();
					}
					this.FirearmsAnimator_0.SetMagTypeCurrent(this.Gclass2006_0.NextMagazine.magAnimationIndex);
				}

				// Token: 0x06015D81 RID: 89473 RVA: 0x002663C5 File Offset: 0x002645C5
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					if (!isCatched && this.Bool_8)
					{
						return;
					}
					if (!isCatched)
					{
						this.Bool_8 = true;
					}
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015D82 RID: 89474 RVA: 0x0072CA10 File Offset: 0x0072AC10
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_6)
					{
						return;
					}
					this.Bool_6 = true;
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Gclass2006_0.NextMagazine.Count);
					if (this.Weapon_0.HasChambers && this.Gclass2006_0.PopNewAmmoResult != null)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon((AmmoItemClass)this.Gclass2006_0.PopNewAmmoResult.ResultItem, 0);
					}
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Gclass2006_0.Weapon.ChamberAmmoCount);
					if (!this.Bool_8)
					{
						this.OnOnOffBoltCatchEvent(false);
					}
					this.SwitchToIdlingState();
				}

				// Token: 0x06015D83 RID: 89475 RVA: 0x002663E9 File Offset: 0x002645E9
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					if (this.Bool_2 || this.Bool_4)
					{
						this.FirearmsAnimator_0.SetInventory(opened);
					}
				}

				// Token: 0x06015D84 RID: 89476 RVA: 0x0072CAD0 File Offset: 0x0072ACD0
				public virtual void SwitchToIdlingState()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.State = Player.EOperationState.Finished;
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Gclass2006_0.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Succeed);
					this.FirearmController_0.RecalculateErgonomic();
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					Callback callback_ = this.Callback_1;
					if (callback_ != null)
					{
						callback_.Succeed();
					}
					this.FirearmController_0.WeaponModified();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015D85 RID: 89477 RVA: 0x00266413 File Offset: 0x00264613
				public void method_9()
				{
					UnityEngine.Debug.LogError("Not Implemented");
				}

				// Token: 0x06015D86 RID: 89478 RVA: 0x0026641F File Offset: 0x0026461F
				public override void OnIdleStartEvent()
				{
					if (!this.Bool_4)
					{
						return;
					}
					this.FirearmController_0.bool_1 = false;
					this.SwitchToIdlingState();
				}

				// Token: 0x06015D87 RID: 89479 RVA: 0x0072CB5C File Offset: 0x0072AD5C
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.RemoveAmmoFromChamber();
					this.OnMagPulledOutFromWeapon();
					this.OnMagPuttedToRig();
					this.OnMagAppeared();
					this.OnMagInsertedToWeapon();
					this.OnAddAmmoInChamber();
					this.OnOnOffBoltCatchEvent(false);
					if (this.State != Player.EOperationState.Finished)
					{
						this.SwitchToIdlingState();
					}
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.1f);
				}

				// Token: 0x0401291B RID: 76059
				[NonSerialized]
				public Callback Callback_1;

				// Token: 0x0401291C RID: 76060
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x0401291D RID: 76061
				[NonSerialized]
				public bool Bool_2;

				// Token: 0x0401291E RID: 76062
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x0401291F RID: 76063
				[NonSerialized]
				public bool Bool_4;

				// Token: 0x04012920 RID: 76064
				[NonSerialized]
				public bool Bool_5;

				// Token: 0x04012921 RID: 76065
				[NonSerialized]
				public bool Bool_6;

				// Token: 0x04012922 RID: 76066
				[NonSerialized]
				public bool Bool_7;

				// Token: 0x04012923 RID: 76067
				[NonSerialized]
				public bool Bool_8;

				// Token: 0x04012924 RID: 76068
				[NonSerialized]
				public Player.FirearmController.GClass2006 Gclass2006_0;
			}

			// Token: 0x020039DA RID: 14810
			public class GClass2006
			{
				// Token: 0x06015D88 RID: 89480 RVA: 0x0072CBD0 File Offset: 0x0072ADD0
				public GClass2006(TraderControllerClass itemController, [CanBeNull] GClass3410 removeFromChamberResult, [CanBeNull] GClass3410 removeOldMagResult, [CanBeNull] GClass3411 moveOldMagResult, GClass3411 insertNextMagResult, [CanBeNull] GInterface424 popNewAmmoResult, Weapon weapon, bool ammoCompatible, bool quickReload, bool isKnownMalfunction)
				{
					this.ItemController = itemController;
					this.Weapon = weapon;
					this.AmmoCompatible = ammoCompatible;
					this.OldMagazine = ((removeOldMagResult != null) ? ((MagazineItemClass)removeOldMagResult.Item) : ((MagazineItemClass)((moveOldMagResult != null) ? moveOldMagResult.Item : null)));
					this.NextMagazine = (MagazineItemClass)insertNextMagResult.Item;
					this.MagazineSlot = ((GClass3391)insertNextMagResult.To).Slot;
					this.QuickReload = quickReload;
					this.IsKnownMalfunction = isKnownMalfunction;
					this.RemoveFromChamberResult = removeFromChamberResult;
					this.RemoveOldMagResult = removeOldMagResult;
					this.MoveOldMagResult = moveOldMagResult;
					this.InsertNextMagResult = insertNextMagResult;
					this.PopNewAmmoResult = popNewAmmoResult;
				}

				// Token: 0x06015D89 RID: 89481 RVA: 0x0072CC84 File Offset: 0x0072AE84
				public void RollBack()
				{
					GInterface424 popNewAmmoResult = this.PopNewAmmoResult;
					if (popNewAmmoResult != null)
					{
						popNewAmmoResult.RollBack();
					}
					this.InsertNextMagResult.RollBack();
					GClass3410 removeOldMagResult = this.RemoveOldMagResult;
					if (removeOldMagResult != null)
					{
						removeOldMagResult.RollBack();
					}
					GClass3411 moveOldMagResult = this.MoveOldMagResult;
					if (moveOldMagResult != null)
					{
						moveOldMagResult.RollBack();
					}
					GClass3410 removeFromChamberResult = this.RemoveFromChamberResult;
					if (removeFromChamberResult == null)
					{
						return;
					}
					removeFromChamberResult.RollBack();
				}

				// Token: 0x06015D8A RID: 89482 RVA: 0x0072CCE0 File Offset: 0x0072AEE0
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					this.Weapon.Parent.RaiseRemoveEvent(this.Weapon, (status == CommandStatus.Begin) ? CommandStatus.Begin : CommandStatus.Failed, controller);
					GClass3410 removeFromChamberResult = this.RemoveFromChamberResult;
					if (removeFromChamberResult != null)
					{
						removeFromChamberResult.RaiseEvents(controller, status);
					}
					GClass3410 removeOldMagResult = this.RemoveOldMagResult;
					if (removeOldMagResult != null)
					{
						removeOldMagResult.RaiseEvents(controller, status);
					}
					GClass3411 moveOldMagResult = this.MoveOldMagResult;
					if (moveOldMagResult != null)
					{
						moveOldMagResult.RaiseEvents(controller, status);
					}
					this.InsertNextMagResult.RaiseEvents(controller, status);
					GInterface424 popNewAmmoResult = this.PopNewAmmoResult;
					if (popNewAmmoResult == null)
					{
						return;
					}
					popNewAmmoResult.RaiseEvents(controller, status);
				}

				// Token: 0x06015D8B RID: 89483 RVA: 0x0072CD64 File Offset: 0x0072AF64
				public static GStruct156<Player.FirearmController.GClass2006> Run(TraderControllerClass itemController, Weapon weapon, MagazineItemClass nextMagazine, bool quickReload, bool isKnownMalfunction, [CanBeNull] ItemAddress vestTargetAddress)
				{
					Slot slot = weapon.HasChambers ? weapon.Chambers[0] : null;
					AmmoItemClass ammoItemClass = ((slot != null) ? slot.ContainedItem : null) as AmmoItemClass;
					MagazineItemClass currentMagazine = weapon.GetCurrentMagazine();
					Slot magazineSlot = weapon.GetMagazineSlot();
					Weapon.EMalfunctionState state = weapon.MalfState.State;
					if (state == Weapon.EMalfunctionState.Misfire)
					{
						weapon.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
					}
					GStruct154<GClass3410> gstruct = (ammoItemClass == null || !weapon.MustBoltBeOpennedForExternalReload) ? default(GStruct154<GClass3410>) : InteractionsHandlerClass.Remove(ammoItemClass, itemController, false);
					weapon.MalfState.ChangeStateSilent(state);
					if (gstruct.Failed)
					{
						return gstruct.Error;
					}
					GStruct154<GClass3410> gstruct2 = default(GStruct154<GClass3410>);
					GStruct154<GClass3411> gstruct3 = default(GStruct154<GClass3411>);
					if (currentMagazine != null)
					{
						if (vestTargetAddress != null)
						{
							gstruct3 = InteractionsHandlerClass.Move(currentMagazine, vestTargetAddress, itemController, false);
							if (gstruct3.Failed)
							{
								GClass3410 value = gstruct.Value;
								if (value != null)
								{
									value.RollBack();
								}
								return gstruct3.Error;
							}
						}
						else
						{
							gstruct2 = InteractionsHandlerClass.Remove(currentMagazine, itemController, false);
							if (gstruct2.Failed)
							{
								GClass3410 value2 = gstruct.Value;
								if (value2 != null)
								{
									value2.RollBack();
								}
								return gstruct2.Error;
							}
						}
					}
					GStruct154<GClass3411> gstruct4 = InteractionsHandlerClass.Move(nextMagazine, magazineSlot.CreateItemAddress(), itemController, false);
					if (gstruct4.Failed)
					{
						GClass3410 value3 = gstruct2.Value;
						if (value3 != null)
						{
							value3.RollBack();
						}
						GClass3411 value4 = gstruct3.Value;
						if (value4 != null)
						{
							value4.RollBack();
						}
						GClass3410 value5 = gstruct.Value;
						if (value5 != null)
						{
							value5.RollBack();
						}
						return gstruct4.Error;
					}
					bool flag = nextMagazine.IsAmmoCompatible(weapon.Chambers);
					GStruct154<GInterface424> gstruct5 = default(GStruct154<GInterface424>);
					if (slot != null && slot.ContainedItem == null && nextMagazine.Count > 0 && flag)
					{
						object obj = weapon.MalfState.State == Weapon.EMalfunctionState.None || (weapon.MalfState.State == Weapon.EMalfunctionState.Misfire && isKnownMalfunction);
						Weapon.EMalfunctionState state2 = weapon.MalfState.State;
						object obj2 = obj;
						if (obj2 != null && weapon.MalfState.State != Weapon.EMalfunctionState.None)
						{
							weapon.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
						}
						if (obj2 != null)
						{
							gstruct5 = nextMagazine.Cartridges.PopTo(itemController, slot.CreateItemAddress());
							if (state2 != Weapon.EMalfunctionState.None)
							{
								weapon.MalfState.ChangeStateSilent(state2);
							}
							if (gstruct5.Failed)
							{
								gstruct4.Value.RollBack();
								GClass3410 value6 = gstruct2.Value;
								if (value6 != null)
								{
									value6.RollBack();
								}
								GClass3411 value7 = gstruct3.Value;
								if (value7 != null)
								{
									value7.RollBack();
								}
								GClass3410 value8 = gstruct.Value;
								if (value8 != null)
								{
									value8.RollBack();
								}
								return gstruct5.Error;
							}
						}
					}
					return new Player.FirearmController.GClass2006(itemController, gstruct.Value, gstruct2.Value, gstruct3.Value, gstruct4.Value, gstruct5.Value, weapon, flag, quickReload, isKnownMalfunction);
				}

				// Token: 0x06015D8C RID: 89484 RVA: 0x0072D014 File Offset: 0x0072B214
				public bool CanExecute(TraderControllerClass itemController)
				{
					return !this.Weapon.CheckAction(null).Failed && !this.NextMagazine.CheckAction(null).Failed && (this.OldMagazine == null || !this.OldMagazine.CheckAction(this.MagazineSlot.CreateItemAddress()).Failed) && (this.MoveOldMagResult == null || !this.MoveOldMagResult.Item.CheckAction(this.MoveOldMagResult.To).Failed);
				}

				// Token: 0x04012925 RID: 76069
				public readonly TraderControllerClass ItemController;

				// Token: 0x04012926 RID: 76070
				public readonly Weapon Weapon;

				// Token: 0x04012927 RID: 76071
				public readonly bool AmmoCompatible;

				// Token: 0x04012928 RID: 76072
				[CanBeNull]
				public readonly MagazineItemClass OldMagazine;

				// Token: 0x04012929 RID: 76073
				public readonly MagazineItemClass NextMagazine;

				// Token: 0x0401292A RID: 76074
				public readonly Slot MagazineSlot;

				// Token: 0x0401292B RID: 76075
				public readonly bool QuickReload;

				// Token: 0x0401292C RID: 76076
				public readonly bool IsKnownMalfunction;

				// Token: 0x0401292D RID: 76077
				[CanBeNull]
				public readonly GClass3410 RemoveFromChamberResult;

				// Token: 0x0401292E RID: 76078
				[CanBeNull]
				public readonly GClass3410 RemoveOldMagResult;

				// Token: 0x0401292F RID: 76079
				[CanBeNull]
				public readonly GClass3411 MoveOldMagResult;

				// Token: 0x04012930 RID: 76080
				public readonly GClass3411 InsertNextMagResult;

				// Token: 0x04012931 RID: 76081
				[CanBeNull]
				public readonly GInterface424 PopNewAmmoResult;
			}

			// Token: 0x020039DB RID: 14811
			public class AmmoPackReloadOperationClass : Player.FirearmController.GClass2015
			{
				// Token: 0x17003546 RID: 13638
				// (get) Token: 0x06015D8D RID: 89485 RVA: 0x0026643C File Offset: 0x0026463C
				// (set) Token: 0x06015D8E RID: 89486 RVA: 0x00266444 File Offset: 0x00264644
				public bool Boolean_0
				{
					get
					{
						return this.Bool_2;
					}
					set
					{
						this.Bool_2 = value;
						if (!this.Bool_2 && value)
						{
							base.method_7();
						}
					}
				}

				// Token: 0x06015D8F RID: 89487 RVA: 0x0026645E File Offset: 0x0026465E
				public AmmoPackReloadOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D90 RID: 89488 RVA: 0x0072D0AC File Offset: 0x0072B2AC
				public virtual void Start(AmmoPackReloadingClass ammoPack, [CanBeNull] Callback callback)
				{
					base.Start(callback);
					this.AmmoPackReloadingClass = ammoPack;
					this.FirearmsAnimator_0.SetInventory(false);
					this.FirearmsAnimator_0.SetCanReload(true);
					this.FirearmsAnimator_0.Reload(true);
					this.FirearmsAnimator_0.SetIsExternalMag(false);
					this.AmmoPackReloadingClass.LockItems();
					this.Weapon_0.Parent.RaiseRemoveEvent(this.Weapon_0, CommandStatus.Begin, this.Player_0.InventoryController);
					this.MagazineItemClass = this.Weapon_0.GetCurrentMagazine();
				}

				// Token: 0x06015D91 RID: 89489 RVA: 0x00266467 File Offset: 0x00264667
				public override void Reset()
				{
					this.AmmoPackReloadingClass = null;
					this.MagazineItemClass = null;
					this.Int_0 = 0;
					this.Bool_1 = false;
					this.Boolean_0 = false;
					base.Reset();
				}

				// Token: 0x06015D92 RID: 89490 RVA: 0x00266492 File Offset: 0x00264692
				public virtual bool CanReload()
				{
					return this.AmmoPackReloadingClass.AmmoCount - this.Int_0 > 0 && this.MagazineItemClass.Count + this.Int_0 != this.MagazineItemClass.MaxCount;
				}

				// Token: 0x06015D93 RID: 89491 RVA: 0x002664CD File Offset: 0x002646CD
				public override void SetTriggerPressed(bool pressed)
				{
					this.Bool_1 |= (pressed && this.Boolean_0);
				}

				// Token: 0x06015D94 RID: 89492 RVA: 0x002664E8 File Offset: 0x002646E8
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.Bool_1 = true;
					if (this.Boolean_0)
					{
						this.FirearmsAnimator_0.SetInventory(opened);
					}
				}

				// Token: 0x04012932 RID: 76082
				[NonSerialized]
				public AmmoPackReloadingClass AmmoPackReloadingClass;

				// Token: 0x04012933 RID: 76083
				[NonSerialized]
				public MagazineItemClass MagazineItemClass;

				// Token: 0x04012934 RID: 76084
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012935 RID: 76085
				[NonSerialized]
				public int Int_0;

				// Token: 0x04012936 RID: 76086
				[NonSerialized]
				public bool Bool_2;
			}

			// Token: 0x020039DC RID: 14812
			public class AmmoPackReloadInternalOneChamberOperationClass : Player.FirearmController.AmmoPackReloadOperationClass
			{
				// Token: 0x06015D95 RID: 89493 RVA: 0x00266511 File Offset: 0x00264711
				public AmmoPackReloadInternalOneChamberOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015D96 RID: 89494 RVA: 0x0026651A File Offset: 0x0026471A
				public override void Start(AmmoPackReloadingClass ammoPack, Callback callback)
				{
					base.Start(ammoPack, callback);
					this.method_9();
				}

				// Token: 0x06015D97 RID: 89495 RVA: 0x0072D138 File Offset: 0x0072B338
				public void method_9()
				{
					bool flag = this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.None || this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire;
					if (this.Weapon_0.ChamberAmmoCount == 0 && flag)
					{
						Weapon.EMalfunctionState state = this.Weapon_0.MalfState.State;
						if (state == Weapon.EMalfunctionState.Misfire)
						{
							this.Weapon_0.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
						}
						GStruct154<GInterface424> gstruct = this.AmmoPackReloadingClass.LoadAmmo(this.Player_0.InventoryController, this.Player_0.InventoryController, base.Slot_0.CreateItemAddress());
						this.Weapon_0.MalfState.ChangeStateSilent(state);
						if (gstruct.Error != null)
						{
							string str = "ReloadInternalMagOperation::Prepare --- Could not get ammo to load, error: ";
							Error error = gstruct.Error;
							UnityEngine.Debug.LogError(str + ((error != null) ? error.ToString() : null));
							return;
						}
						this.AmmoItemClass = (AmmoItemClass)gstruct.Value.ResultItem;
						GClass3411 gclass = gstruct.Value as GClass3411;
						if (gclass != null)
						{
							gclass.From.RaiseRemoveEvent(this.AmmoItemClass, CommandStatus.Succeed, this.Player_0.InventoryController);
						}
						if (gstruct.Value is GClass3417)
						{
							((GClass3417)gstruct.Value).From.RaiseRemoveEvent(this.AmmoItemClass, CommandStatus.Succeed, this.Player_0.InventoryController);
						}
					}
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
				}

				// Token: 0x06015D98 RID: 89496 RVA: 0x0026652A File Offset: 0x0026472A
				public override void Reset()
				{
					this.AmmoItemClass = null;
					this.Bool_3 = false;
					base.Reset();
				}

				// Token: 0x06015D99 RID: 89497 RVA: 0x00266540 File Offset: 0x00264740
				public override void OnMagAppeared()
				{
					base.Boolean_0 = true;
				}

				// Token: 0x06015D9A RID: 89498 RVA: 0x0072D2B4 File Offset: 0x0072B4B4
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_3)
					{
						return;
					}
					this.Bool_3 = true;
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire && this.AmmoItemClass == null)
					{
						base.Boolean_0 = true;
						if (!this.CanReload() || this.Bool_1)
						{
							this.SwitchToIdle();
						}
						return;
					}
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					base.Boolean_0 = true;
					this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass, 0);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetCanReload(this.CanReload());
					this.Player_0.ExecuteSkill(new Action(this.method_11));
					if (!this.CanReload() || this.Bool_1)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015D9B RID: 89499 RVA: 0x00266549 File Offset: 0x00264749
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015D9C RID: 89500 RVA: 0x0072D394 File Offset: 0x0072B594
				public override void AddAmmoToMag()
				{
					base.Boolean_0 = true;
					this.Int_0++;
					this.FirearmsAnimator_0.SetAmmoOnMag(this.MagazineItemClass.Count + this.Int_0);
					this.Player_0.ExecuteSkill(new Action(this.method_12));
					if (!this.CanReload() || this.Bool_1)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015D9D RID: 89501 RVA: 0x0072D400 File Offset: 0x0072B600
				public virtual void SwitchToIdle()
				{
					this.FirearmsAnimator_0.SetCanReload(this.CanReload() && !this.Bool_1);
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 1);
					}
					this.method_10();
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Weapon_0.RaiseRefreshEvent(false, true);
					this.State = Player.EOperationState.Finished;
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					base.method_6();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015D9E RID: 89502 RVA: 0x0072D4A4 File Offset: 0x0072B6A4
				public void method_10()
				{
					AmmoPackReloadingClass ammoPackReloadingClass = this.AmmoPackReloadingClass;
					MagazineItemClass magazineItemClass = this.MagazineItemClass;
					Weapon weapon_ = this.Weapon_0;
					int int_ = this.Int_0;
					Player player_ = this.Player_0;
					ammoPackReloadingClass.UnlockItems();
					Player.FirearmController.AmmoPackReloadInternalOneChamberOperationClass.CommitReloadWithAmmo(int_, ammoPackReloadingClass, player_, magazineItemClass, weapon_);
					this.FirearmsAnimator_0.SetAmmoOnMag(magazineItemClass.Count);
					weapon_.Parent.RaiseRemoveEvent(weapon_, CommandStatus.Failed, this.Player_0.InventoryController);
				}

				// Token: 0x06015D9F RID: 89503 RVA: 0x0072D50C File Offset: 0x0072B70C
				public static void CommitReloadWithAmmo(int ammoToLoadIntoMag, AmmoPackReloadingClass ammoPack, Player player, MagazineItemClass magazine, Weapon weapon)
				{
					Player.FirearmController.AmmoPackReloadInternalOneChamberOperationClass.Class1234 @class = new Player.FirearmController.AmmoPackReloadInternalOneChamberOperationClass.Class1234();
					@class.player = player;
					@class.weapon = weapon;
					for (int i = 0; i < ammoToLoadIntoMag; i++)
					{
						GStruct154<GInterface424> gstruct = ammoPack.LoadAmmo(@class.player.InventoryController, @class.player.InventoryController, magazine.Cartridges.CreateItemAddress());
						if (gstruct.Error == null)
						{
							gstruct.Value.RaiseEvents(@class.player.InventoryController, CommandStatus.Begin);
							gstruct.Value.RaiseEvents(@class.player.InventoryController, CommandStatus.Succeed);
						}
						else
						{
							string[] array = new string[6];
							array[0] = "SwitchToIdle: Cannot load ammo. AmmoCount: ";
							array[1] = ammoPack.AmmoCount.ToString();
							array[2] = ", AmmoToLoadIntoMag: ";
							array[3] = (ammoToLoadIntoMag - i).ToString();
							array[4] = ", Error: ";
							int num = 5;
							Error error = gstruct.Error;
							array[num] = ((error != null) ? error.ToString() : null);
							UnityEngine.Debug.LogError(string.Concat(array));
						}
						Player player2 = @class.player;
						Action action;
						if ((action = @class.action_0) == null)
						{
							action = (@class.action_0 = new Action(@class.method_0));
						}
						player2.ExecuteSkill(action);
					}
				}

				// Token: 0x06015DA0 RID: 89504 RVA: 0x00266557 File Offset: 0x00264757
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					base.HideWeapon(onHidden, fastDrop, null);
					this.Bool_1 = true;
				}

				// Token: 0x06015DA1 RID: 89505 RVA: 0x0072D62C File Offset: 0x0072B82C
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.Bool_1 = true;
					if (this.AmmoItemClass != null)
					{
						this.OnAddAmmoInChamber();
						if (this.Weapon_0.IsBoltCatch)
						{
							this.OnOnOffBoltCatchEvent(false);
						}
					}
					if (this.State != Player.EOperationState.Finished)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015DA2 RID: 89506 RVA: 0x00266569 File Offset: 0x00264769
				[CompilerGenerated]
				public void method_11()
				{
					this.Player_0.Skills.WeaponChamberAction.Complete(this.Weapon_0, 1f);
				}

				// Token: 0x06015DA3 RID: 89507 RVA: 0x0026658B File Offset: 0x0026478B
				[CompilerGenerated]
				public void method_12()
				{
					this.Player_0.Skills.RaidLoadedAmmoAction.Complete(1f);
				}

				// Token: 0x04012937 RID: 76087
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x04012938 RID: 76088
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x02003B14 RID: 15124
				[CompilerGenerated]
				public class Class1234
				{
					// Token: 0x06016273 RID: 90739 RVA: 0x0026A294 File Offset: 0x00268494
					public void method_0()
					{
						this.player.Skills.WeaponReloadAction.Complete(this.weapon, 1f);
					}

					// Token: 0x04012DB9 RID: 77241
					public Player player;

					// Token: 0x04012DBA RID: 77242
					public Weapon weapon;

					// Token: 0x04012DBB RID: 77243
					public Action action_0;
				}
			}

			// Token: 0x020039DD RID: 14813
			public class AmmoPackReloadInternalBoltOpenOperationClass : Player.FirearmController.AmmoPackReloadOperationClass
			{
				// Token: 0x06015DA4 RID: 89508 RVA: 0x002665A7 File Offset: 0x002647A7
				public AmmoPackReloadInternalBoltOpenOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DA5 RID: 89509 RVA: 0x002665B0 File Offset: 0x002647B0
				public override void Start(AmmoPackReloadingClass ammoPack, Callback callback)
				{
					base.Start(ammoPack, callback);
					this.method_9();
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
				}

				// Token: 0x06015DA6 RID: 89510 RVA: 0x002665EA File Offset: 0x002647EA
				public override void Reset()
				{
					this.Item_0 = null;
					this.Bool_3 = false;
					this.Bool_4 = false;
					base.Reset();
				}

				// Token: 0x06015DA7 RID: 89511 RVA: 0x0072D67C File Offset: 0x0072B87C
				public void method_9()
				{
					if (this.Weapon_0.ChamberAmmoCount != 0)
					{
						this.Item_0 = base.Slot_0.ContainedItem;
						if (this.Item_0 == null)
						{
							UnityEngine.Debug.LogError("ReloadInternalMagWithOpenBoltOperation::Prepare --- Could not get from chamber");
							return;
						}
						Weapon.EMalfunctionState state = this.Weapon_0.MalfState.State;
						if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
						{
							this.Weapon_0.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
						}
						bool succeeded = InteractionsHandlerClass.Remove(this.Item_0, this.Player_0.InventoryController, false).Succeeded;
						if (state == Weapon.EMalfunctionState.Misfire)
						{
							this.Weapon_0.MalfState.ChangeStateSilent(state);
						}
					}
				}

				// Token: 0x06015DA8 RID: 89512 RVA: 0x0072D728 File Offset: 0x0072B928
				public override void RemoveAmmoFromChamber()
				{
					if (this.Bool_4)
					{
						return;
					}
					this.Bool_4 = true;
					this.WeaponManagerClass.RemovePatronInWeapon(0);
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
					this.WeaponManagerClass.ThrowPatronAsLoot(this.Item_0, this.Player_0, "ReloadInternalMagWithOpenBoltOperation.RemoveAmmoFromChamber");
				}

				// Token: 0x06015DA9 RID: 89513 RVA: 0x00266607 File Offset: 0x00264807
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015DAA RID: 89514 RVA: 0x0072D780 File Offset: 0x0072B980
				public override void AddAmmoToMag()
				{
					this.WeaponManagerClass.DestroyPatronInWeapon(0);
					base.Boolean_0 = true;
					this.Int_0++;
					this.FirearmsAnimator_0.SetAmmoOnMag(this.MagazineItemClass.Count + this.Int_0);
					this.Player_0.ExecuteSkill(new Action(this.method_10));
					this.FirearmsAnimator_0.SetCanReload(this.CanReload() && !this.Bool_1);
				}

				// Token: 0x06015DAB RID: 89515 RVA: 0x0072D804 File Offset: 0x0072BA04
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_3)
					{
						return;
					}
					this.Bool_3 = true;
					base.Boolean_0 = true;
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
						this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					}
					this.SwitchToIdle();
				}

				// Token: 0x06015DAC RID: 89516 RVA: 0x0072D860 File Offset: 0x0072BA60
				public virtual void SwitchToIdle()
				{
					this.AmmoPackReloadingClass.UnlockItems();
					Player.FirearmController.AmmoPackReloadInternalBoltOpenOperationClass.CommitReloadWithAmmo(this.Int_0, this.AmmoPackReloadingClass, this.Player_0, this.MagazineItemClass, this.Weapon_0);
					this.Player_0.InventoryController.RaiseRemoveEvent(new GEventArgs3(this.Weapon_0, this.Weapon_0.Parent, CommandStatus.Failed, this.Player_0.InventoryController));
					this.WeaponManagerClass.DestroyPatronInWeapon(0);
					if (base.Slot_0.ContainedItem != null)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon((AmmoItemClass)base.Slot_0.ContainedItem, 0);
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.MagazineItemClass.Count);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetCanReload(false);
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Weapon_0.RaiseRefreshEvent(false, true);
					this.State = Player.EOperationState.Finished;
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					base.method_6();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015DAD RID: 89517 RVA: 0x0072D984 File Offset: 0x0072BB84
				public static void CommitReloadWithAmmo(int ammoToLoadIntoMag, AmmoPackReloadingClass ammoPack, Player player, MagazineItemClass magazine, Weapon weapon)
				{
					Player.FirearmController.AmmoPackReloadInternalBoltOpenOperationClass.Class1235 @class = new Player.FirearmController.AmmoPackReloadInternalBoltOpenOperationClass.Class1235();
					@class.player = player;
					@class.weapon = weapon;
					for (int i = 0; i < ammoToLoadIntoMag; i++)
					{
						GStruct154<GInterface424> gstruct = ammoPack.LoadAmmo(@class.player.InventoryController, @class.player.InventoryController, magazine.Cartridges.CreateItemAddress());
						if (gstruct.Succeeded)
						{
							gstruct.Value.RaiseEvents(@class.player.InventoryController, CommandStatus.Begin);
							gstruct.Value.RaiseEvents(@class.player.InventoryController, CommandStatus.Succeed);
							Player player2 = @class.player;
							Action action;
							if ((action = @class.action_0) == null)
							{
								action = (@class.action_0 = new Action(@class.method_0));
							}
							player2.ExecuteSkill(action);
						}
						else
						{
							string[] array = new string[6];
							array[0] = "SwitchToIdle: Cannot load ammo. AmmoCount: ";
							array[1] = ammoPack.AmmoCount.ToString();
							array[2] = ", AmmoToLoadIntoMag: ";
							array[3] = (ammoToLoadIntoMag - i).ToString();
							array[4] = ", Error: ";
							int num = 5;
							Error error = gstruct.Error;
							array[num] = ((error != null) ? error.ToString() : null);
							UnityEngine.Debug.LogError(string.Concat(array));
						}
					}
					if (ammoToLoadIntoMag > 0 && @class.weapon.ChamberAmmoCount == 0)
					{
						if (magazine.IsAmmoCompatible(@class.weapon.Chambers))
						{
							GStruct154<GInterface424> gstruct2 = magazine.Cartridges.PopTo(@class.player.InventoryController, @class.weapon.Chambers[0].CreateItemAddress());
							if (gstruct2.Failed)
							{
								string str = "CommitAmmoInChamber pop failed: ";
								Error error2 = gstruct2.Error;
								UnityEngine.Debug.LogError(str + ((error2 != null) ? error2.ToString() : null));
							}
						}
						@class.player.ExecuteSkill(new Action(@class.method_1));
					}
				}

				// Token: 0x06015DAE RID: 89518 RVA: 0x00266615 File Offset: 0x00264815
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					base.HideWeapon(onHidden, fastDrop, null);
					this.Bool_1 = true;
				}

				// Token: 0x06015DAF RID: 89519 RVA: 0x0072DB38 File Offset: 0x0072BD38
				public override void OnShowAmmo(bool value)
				{
					if (value)
					{
						AmmoItemClass ammoToReload = this.AmmoPackReloadingClass.GetAmmoToReload(this.Int_0);
						if (ammoToReload != null)
						{
							this.WeaponManagerClass.SetRoundIntoWeapon(ammoToReload, 0);
						}
					}
				}

				// Token: 0x06015DB0 RID: 89520 RVA: 0x0072DB6C File Offset: 0x0072BD6C
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					if (this.Item_0 != null)
					{
						this.RemoveAmmoFromChamber();
					}
					this.OnAddAmmoInChamber();
					if (this.Weapon_0.IsBoltCatch)
					{
						this.OnOnOffBoltCatchEvent(false);
					}
					if (this.State != Player.EOperationState.Finished)
					{
						this.SwitchToIdle();
					}
				}

				// Token: 0x06015DB1 RID: 89521 RVA: 0x00266627 File Offset: 0x00264827
				[CompilerGenerated]
				public void method_10()
				{
					this.Player_0.Skills.RaidLoadedAmmoAction.Complete(1f);
				}

				// Token: 0x04012939 RID: 76089
				[NonSerialized]
				public Item Item_0;

				// Token: 0x0401293A RID: 76090
				[NonSerialized]
				public bool Bool_3;

				// Token: 0x0401293B RID: 76091
				[NonSerialized]
				public bool Bool_4;

				// Token: 0x02003B15 RID: 15125
				[CompilerGenerated]
				public class Class1235
				{
					// Token: 0x06016275 RID: 90741 RVA: 0x0026A2BE File Offset: 0x002684BE
					public void method_0()
					{
						this.player.Skills.WeaponReloadAction.Complete(this.weapon, 1f);
					}

					// Token: 0x06016276 RID: 90742 RVA: 0x0026A2E0 File Offset: 0x002684E0
					public void method_1()
					{
						this.player.Skills.WeaponChamberAction.Complete(this.weapon, 1f);
					}

					// Token: 0x04012DBC RID: 77244
					public Player player;

					// Token: 0x04012DBD RID: 77245
					public Weapon weapon;

					// Token: 0x04012DBE RID: 77246
					public Action action_0;
				}
			}

			// Token: 0x020039DE RID: 14814
			public class MutliBarrelReloadOperationClass : Player.FirearmController.GClass2015
			{
				// Token: 0x06015DB2 RID: 89522 RVA: 0x00266643 File Offset: 0x00264843
				public MutliBarrelReloadOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DB3 RID: 89523 RVA: 0x0072DBBC File Offset: 0x0072BDBC
				public virtual void Start(Player.FirearmController.ReloadMultiBarrelResultClass reloadMultiBarrelResult, Callback callback)
				{
					base.Start(callback);
					this.ReloadMultiBarrelResultClass = reloadMultiBarrelResult;
					this.ReloadMultiBarrelResultClass.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Begin);
					this.Int_0 = this.Weapon_0.ShellsInWeaponCount;
					this.method_9();
					base.method_3();
					this.FirearmsAnimator_0.SetCanReload(true);
					this.FirearmsAnimator_0.Reload(true);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.Player_0.Say(EPhraseTrigger.OnWeaponReload, false, 0f, (ETagStatus)0, 100, false);
				}

				// Token: 0x06015DB4 RID: 89524 RVA: 0x0072DC68 File Offset: 0x0072BE68
				public void method_9()
				{
					int num = 0;
					foreach (Player.FirearmController.GClass2007 gclass in this.ReloadMultiBarrelResultClass.ChambersForReloading)
					{
						num++;
						this.FirearmsAnimator_0.SetChamberIndexForLoadUnloadAmmo((float)gclass.ChamberIndex);
					}
					if (num == this.ReloadMultiBarrelResultClass.ChambersInWeaponTotal)
					{
						this.FirearmsAnimator_0.SetChamberIndexForLoadUnloadAmmo((float)num);
					}
				}

				// Token: 0x06015DB5 RID: 89525 RVA: 0x0026664C File Offset: 0x0026484C
				public override void Reset()
				{
					this.Int_0 = 0;
					this.Bool_2 = false;
					this.Bool_1 = false;
					this.ReloadMultiBarrelResultClass = null;
					base.Reset();
				}

				// Token: 0x06015DB6 RID: 89526 RVA: 0x00266670 File Offset: 0x00264870
				public override void FastForward()
				{
					if (this.Bool_2)
					{
						return;
					}
					this.OnRemoveShellEvent();
					this.OnShellEjectEvent();
					this.OnAddAmmoInChamber();
				}

				// Token: 0x06015DB7 RID: 89527 RVA: 0x0026668D File Offset: 0x0026488D
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015DB8 RID: 89528 RVA: 0x0072DCEC File Offset: 0x0072BEEC
				public override void OnRemoveShellEvent()
				{
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						this.Weapon_0.ShellsInChambers[i] = null;
					}
					this.WeaponManagerClass.RemoveAllShells();
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
				}

				// Token: 0x06015DB9 RID: 89529 RVA: 0x0072DD40 File Offset: 0x0072BF40
				public override void OnShellEjectEvent()
				{
					this.FirearmsAnimator_0.SetCanReload(true);
					IEnumerable<Player.FirearmController.GClass2007> chambersForReloading = this.ReloadMultiBarrelResultClass.ChambersForReloading;
					bool discardOldAmmo = this.ReloadMultiBarrelResultClass.DiscardOldAmmo;
					foreach (Player.FirearmController.GClass2007 gclass in chambersForReloading)
					{
						if (gclass.OldAmmoResult != null)
						{
							if (discardOldAmmo)
							{
								AmmoItemClass ammoItemClass = (AmmoItemClass)gclass.OldAmmoResult.Item;
								if (!ammoItemClass.IsUsed)
								{
									this.WeaponManagerClass.RemovePatronInWeapon(gclass.ChamberIndex);
									this.WeaponManagerClass.ThrowPatronAsLoot(ammoItemClass, this.Player_0, "ReloadMultiBarrelOperation.OnShellEjectEvent");
								}
							}
							else
							{
								this.WeaponManagerClass.DestroyPatronInWeapon(gclass.ChamberIndex);
							}
						}
					}
					if (this.Int_0 > 0)
					{
						this.WeaponManagerClass.StartSpawnAllShells(this.Player_0.Velocity * 0.33f);
					}
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015DBA RID: 89530 RVA: 0x002666A6 File Offset: 0x002648A6
				public override void OnAddAmmoInChamber()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_2 = true;
					this.Bool_1 = true;
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015DBB RID: 89531 RVA: 0x0072DE44 File Offset: 0x0072C044
				public override void AddAmmoToMag()
				{
					this.ReloadMultiBarrelResultClass.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Succeed);
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.SetCanReload(false);
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Weapon_0.RaiseRefreshEvent(false, true);
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					base.method_6();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015DBC RID: 89532 RVA: 0x0072DEBC File Offset: 0x0072C0BC
				public override void OnMagAppeared()
				{
					foreach (Player.FirearmController.GClass2007 gclass in this.ReloadMultiBarrelResultClass.ChambersForReloading)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon((AmmoItemClass)gclass.InsertResult.ResultItem, gclass.ChamberIndex);
					}
				}

				// Token: 0x06015DBD RID: 89533 RVA: 0x002666D6 File Offset: 0x002648D6
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.FastForward();
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2053>().Start(onHidden, fastDrop, nextControllerItem);
				}

				// Token: 0x0401293C RID: 76092
				[NonSerialized]
				public Player.FirearmController.ReloadMultiBarrelResultClass ReloadMultiBarrelResultClass;

				// Token: 0x0401293D RID: 76093
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x0401293E RID: 76094
				[NonSerialized]
				public bool Bool_2;

				// Token: 0x0401293F RID: 76095
				[NonSerialized]
				public int Int_0;
			}

			// Token: 0x020039DF RID: 14815
			public class GClass2007
			{
				// Token: 0x06015DBE RID: 89534 RVA: 0x002666F1 File Offset: 0x002648F1
				public GClass2007(int chamberIndex, GInterface424 oldAmmoResult, GInterface424 insertResult)
				{
					this.ChamberIndex = chamberIndex;
					this.OldAmmoResult = oldAmmoResult;
					this.InsertResult = insertResult;
				}

				// Token: 0x06015DBF RID: 89535 RVA: 0x0026670E File Offset: 0x0026490E
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					GInterface424 oldAmmoResult = this.OldAmmoResult;
					if (oldAmmoResult != null)
					{
						oldAmmoResult.RaiseEvents(controller, status);
					}
					this.InsertResult.RaiseEvents(controller, status);
				}

				// Token: 0x06015DC0 RID: 89536 RVA: 0x0072DF2C File Offset: 0x0072C12C
				public bool CheckAction()
				{
					GInterface424 oldAmmoResult = this.OldAmmoResult;
					return oldAmmoResult != null && oldAmmoResult.Item.CheckAction(null).Succeeded && this.InsertResult.ResultItem.CheckAction(null).Succeeded;
				}

				// Token: 0x06015DC1 RID: 89537 RVA: 0x00266730 File Offset: 0x00264930
				public void RollBack()
				{
					GInterface424 oldAmmoResult = this.OldAmmoResult;
					if (oldAmmoResult != null)
					{
						oldAmmoResult.RollBack();
					}
					this.InsertResult.RollBack();
				}

				// Token: 0x04012940 RID: 76096
				public readonly int ChamberIndex;

				// Token: 0x04012941 RID: 76097
				public readonly GInterface424 OldAmmoResult;

				// Token: 0x04012942 RID: 76098
				public readonly GInterface424 InsertResult;
			}

			// Token: 0x020039E0 RID: 14816
			public class ReloadMultiBarrelResultClass
			{
				// Token: 0x06015DC2 RID: 89538 RVA: 0x0026674E File Offset: 0x0026494E
				public ReloadMultiBarrelResultClass(TraderControllerClass itemController, AmmoPackReloadingClass ammoPackToLoad, Weapon weapon, int chambersInWeaponTotal, ItemAddress placeToPutContainedAmmo, IReadOnlyCollection<Player.FirearmController.GClass2007> chambersForReloading, bool discardOldAmmo)
				{
					this.ItemController = itemController;
					this.AmmoPackToLoad = ammoPackToLoad;
					this.Weapon = weapon;
					this.ChambersInWeaponTotal = chambersInWeaponTotal;
					this.PlaceToPutContainedAmmo = placeToPutContainedAmmo;
					this.ChambersForReloading = chambersForReloading;
					this.DiscardOldAmmo = discardOldAmmo;
				}

				// Token: 0x06015DC3 RID: 89539 RVA: 0x0072DF78 File Offset: 0x0072C178
				public static GStruct156<Player.FirearmController.ReloadMultiBarrelResultClass> Run(IIdGenerator idGenerator, TraderControllerClass itemController, Weapon weapon, AmmoPackReloadingClass ammoPack, ItemAddress placeToPutContainedAmmo)
				{
					int num = weapon.Chambers.Length;
					if (num == 0)
					{
						return default(GStruct156<Player.FirearmController.ReloadMultiBarrelResultClass>).Error;
					}
					bool flag = placeToPutContainedAmmo == null;
					List<Player.FirearmController.GClass2007> list = new List<Player.FirearmController.GClass2007>();
					int num2 = 0;
					for (int i = 0; i < num; i++)
					{
						Slot slot = weapon.Chambers[i];
						AmmoItemClass ammoItemClass = slot.ContainedItem as AmmoItemClass;
						if (ammoItemClass == null || ammoItemClass.IsUsed)
						{
							AmmoItemClass ammoToReload = ammoPack.GetAmmoToReload(num2);
							if (ammoToReload == null)
							{
								break;
							}
							int stackObjectsCount = ammoToReload.StackObjectsCount;
							ItemAddress to = slot.CreateItemAddress();
							GStruct154<GInterface424> gstruct = default(GStruct154<GInterface424>);
							if (ammoItemClass != null)
							{
								gstruct = (flag ? InteractionsHandlerClass.Remove(ammoItemClass, itemController, false).Cast<GClass3410, GInterface424>() : InteractionsHandlerClass.Move(ammoItemClass, placeToPutContainedAmmo, itemController, false).Cast<GClass3411, GInterface424>());
								if (gstruct.Failed)
								{
									goto IL_10D;
								}
							}
							GStruct154<GInterface424> gstruct2 = InteractionsHandlerClass.ApplySingleItemToAddress(ammoToReload, idGenerator, itemController, to);
							if (gstruct2.Failed)
							{
								GInterface424 value = gstruct.Value;
								if (value != null)
								{
									value.RollBack();
								}
							}
							else
							{
								Player.FirearmController.GClass2007 item = new Player.FirearmController.GClass2007(i, gstruct.Value, gstruct2.Value);
								list.Add(item);
								if (stackObjectsCount <= 1)
								{
									num2++;
								}
							}
						}
						IL_10D:;
					}
					return new Player.FirearmController.ReloadMultiBarrelResultClass(itemController, ammoPack, weapon, num, placeToPutContainedAmmo, list, flag);
				}

				// Token: 0x06015DC4 RID: 89540 RVA: 0x0072E0B4 File Offset: 0x0072C2B4
				public void RollBack()
				{
					foreach (Player.FirearmController.GClass2007 gclass in this.ChambersForReloading)
					{
						gclass.RollBack();
					}
				}

				// Token: 0x06015DC5 RID: 89541 RVA: 0x0072E100 File Offset: 0x0072C300
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					if (this.ChambersForReloading.Count == 0)
					{
						return;
					}
					this.Weapon.Parent.RaiseRemoveEvent(this.Weapon, (status == CommandStatus.Begin) ? CommandStatus.Begin : CommandStatus.Failed, controller);
					foreach (Player.FirearmController.GClass2007 gclass in this.ChambersForReloading)
					{
						gclass.RaiseEvents(controller, status);
					}
				}

				// Token: 0x06015DC6 RID: 89542 RVA: 0x0072E17C File Offset: 0x0072C37C
				public bool CanExecute(TraderControllerClass itemController)
				{
					if (this.Weapon.CheckAction(null).Failed)
					{
						return false;
					}
					using (IEnumerator<Player.FirearmController.GClass2007> enumerator = this.ChambersForReloading.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							if (enumerator.Current.CheckAction())
							{
								return true;
							}
						}
					}
					return false;
				}

				// Token: 0x04012943 RID: 76099
				public readonly TraderControllerClass ItemController;

				// Token: 0x04012944 RID: 76100
				public readonly AmmoPackReloadingClass AmmoPackToLoad;

				// Token: 0x04012945 RID: 76101
				public readonly Weapon Weapon;

				// Token: 0x04012946 RID: 76102
				public readonly ItemAddress PlaceToPutContainedAmmo;

				// Token: 0x04012947 RID: 76103
				public readonly IReadOnlyCollection<Player.FirearmController.GClass2007> ChambersForReloading;

				// Token: 0x04012948 RID: 76104
				public readonly int ChambersInWeaponTotal;

				// Token: 0x04012949 RID: 76105
				public readonly bool DiscardOldAmmo;
			}

			// Token: 0x020039E1 RID: 14817
			public class SingleBarrelReloadOperationClass : Player.FirearmController.GClass2015
			{
				// Token: 0x06015DC7 RID: 89543 RVA: 0x0026678B File Offset: 0x0026498B
				public SingleBarrelReloadOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DC8 RID: 89544 RVA: 0x0072E1E8 File Offset: 0x0072C3E8
				public virtual void Start(Player.FirearmController.ReloadSingleBarrelResultClass reloadSingleBarrelResult, Callback callback)
				{
					base.Start(callback);
					this.ReloadSingleBarrelResultClass = reloadSingleBarrelResult;
					this.ReloadSingleBarrelResultClass.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Begin);
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)(reloadSingleBarrelResult.HasOldAmmoInChamber ? this.Weapon_0.ChamberAmmoCount : 0));
					this.FirearmsAnimator_0.SetCanReload(true);
					this.FirearmsAnimator_0.Reload(true);
					if (reloadSingleBarrelResult.HasOldAmmoInChamber)
					{
						for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
						{
							this.Weapon_0.ShellsInChambers[i] = null;
						}
					}
					this.Player_0.Say(EPhraseTrigger.OnWeaponReload, false, 0f, (ETagStatus)0, 100, false);
				}

				// Token: 0x06015DC9 RID: 89545 RVA: 0x00266794 File Offset: 0x00264994
				public override void Reset()
				{
					this.ReloadSingleBarrelResultClass = null;
					base.Reset();
				}

				// Token: 0x06015DCA RID: 89546 RVA: 0x002667A3 File Offset: 0x002649A3
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015DCB RID: 89547 RVA: 0x0072E2B0 File Offset: 0x0072C4B0
				public override void OnRemoveShellEvent()
				{
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						this.Weapon_0.ShellsInChambers[i] = null;
					}
					this.WeaponManagerClass.RemoveAllShells();
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
				}

				// Token: 0x06015DCC RID: 89548 RVA: 0x0072E304 File Offset: 0x0072C504
				public override void OnShellEjectEvent()
				{
					this.FirearmsAnimator_0.SetCanReload(true);
					if (this.ReloadSingleBarrelResultClass.HasOldAmmoInChamber)
					{
						if (this.ReloadSingleBarrelResultClass.DiscardOldAmmoToInventory)
						{
							this.WeaponManagerClass.DestroyPatronInWeapon(0);
						}
						else
						{
							AmmoItemClass ammoItemClass = (AmmoItemClass)this.ReloadSingleBarrelResultClass.OldAmmoResult.Item;
							if (!ammoItemClass.IsUsed)
							{
								this.WeaponManagerClass.RemovePatronInWeapon(0);
								this.WeaponManagerClass.ThrowPatronAsLoot(ammoItemClass, this.Player_0, "ReloadSingleBarrelOperation.OnShellEjectEvent");
							}
						}
					}
					else if (this.Weapon_0.HasShellsInChamberBarrelOnlyWeapon)
					{
						this.WeaponManagerClass.StartSpawnShell(this.Player_0.Velocity, 0);
					}
					this.FirearmsAnimator_0.SetAmmoInChamber(0f);
				}

				// Token: 0x06015DCD RID: 89549 RVA: 0x0072E3C0 File Offset: 0x0072C5C0
				public override void OnAddAmmoInChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.ReloadSingleBarrelResultClass.RaiseEvents(this.Player_0.InventoryController, CommandStatus.Succeed);
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.SetCanReload(false);
					Action action_ = this.Action_0;
					bool bool_ = this.Bool_0;
					this.Weapon_0.RaiseRefreshEvent(false, true);
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.InventoryOpened);
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					base.method_6();
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015DCE RID: 89550 RVA: 0x002667BC File Offset: 0x002649BC
				public override void OnMagAppeared()
				{
					this.WeaponManagerClass.SetRoundIntoWeapon((AmmoItemClass)this.ReloadSingleBarrelResultClass.InsertNewAmmoResult.ResultItem, 0);
				}

				// Token: 0x06015DCF RID: 89551 RVA: 0x002667DF File Offset: 0x002649DF
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnRemoveShellEvent();
					this.OnShellEjectEvent();
					this.OnAddAmmoInChamber();
				}

				// Token: 0x06015DD0 RID: 89552 RVA: 0x002667FD File Offset: 0x002649FD
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					base.HideWeapon(onHidden, fastDrop, nextControllerItem);
					this.FastForward();
				}

				// Token: 0x0401294A RID: 76106
				[NonSerialized]
				public Player.FirearmController.ReloadSingleBarrelResultClass ReloadSingleBarrelResultClass;
			}

			// Token: 0x020039E2 RID: 14818
			public class ReloadSingleBarrelResultClass
			{
				// Token: 0x17003547 RID: 13639
				// (get) Token: 0x06015DD1 RID: 89553 RVA: 0x0026680E File Offset: 0x00264A0E
				public bool DiscardOldAmmoToInventory
				{
					get
					{
						return this.PlaceToPutContainedAmmoMagazine != null;
					}
				}

				// Token: 0x17003548 RID: 13640
				// (get) Token: 0x06015DD2 RID: 89554 RVA: 0x00266819 File Offset: 0x00264A19
				public bool HasOldAmmoInChamber
				{
					get
					{
						return this.OldAmmoResult != null;
					}
				}

				// Token: 0x17003549 RID: 13641
				// (get) Token: 0x06015DD3 RID: 89555 RVA: 0x00266824 File Offset: 0x00264A24
				// (set) Token: 0x06015DD4 RID: 89556 RVA: 0x0026682C File Offset: 0x00264A2C
				public MongoID AmmoToLoadTemplateId { get; set; }

				// Token: 0x1700354A RID: 13642
				// (get) Token: 0x06015DD5 RID: 89557 RVA: 0x00266835 File Offset: 0x00264A35
				// (set) Token: 0x06015DD6 RID: 89558 RVA: 0x0026683D File Offset: 0x00264A3D
				public MongoID? AmmoToUnloadTemplateId { get; set; }

				// Token: 0x06015DD7 RID: 89559 RVA: 0x0072E464 File Offset: 0x0072C664
				public ReloadSingleBarrelResultClass(AmmoItemClass ammoToLoad, [CanBeNull] GInterface424 oldAmmoResult, [NotNull] GInterface424 insertNewAmmoResult, Weapon weapon, ItemAddress placeToPutContainedAmmoMagazine)
				{
					this.AmmoItemClass = ammoToLoad;
					this.Weapon_0 = weapon;
					this.PlaceToPutContainedAmmoMagazine = placeToPutContainedAmmoMagazine;
					this.OldAmmoResult = oldAmmoResult;
					this.InsertNewAmmoResult = insertNewAmmoResult;
					this.AmmoToLoadTemplateId = this.AmmoItemClass.TemplateId;
					GInterface424 oldAmmoResult2 = this.OldAmmoResult;
					this.AmmoToUnloadTemplateId = ((oldAmmoResult2 != null) ? new MongoID?(oldAmmoResult2.ResultItem.TemplateId) : null);
				}

				// Token: 0x06015DD8 RID: 89560 RVA: 0x0072E4D8 File Offset: 0x0072C6D8
				public static GStruct156<Player.FirearmController.ReloadSingleBarrelResultClass> Run(IIdGenerator idGenerator, TraderControllerClass itemController, Weapon weapon, AmmoItemClass ammo, ItemAddress placeToPutContainedAmmoMagazine)
				{
					Slot slot = weapon.Chambers[0];
					AmmoItemClass ammoItemClass = slot.ContainedItem as AmmoItemClass;
					ItemAddress to = slot.CreateItemAddress();
					GStruct154<GInterface424> gstruct = default(GStruct154<GInterface424>);
					if (ammoItemClass != null)
					{
						gstruct = ((placeToPutContainedAmmoMagazine == null) ? InteractionsHandlerClass.Remove(ammoItemClass, itemController, false).Cast<GClass3410, GInterface424>() : InteractionsHandlerClass.Move(ammoItemClass, placeToPutContainedAmmoMagazine, itemController, false).Cast<GClass3411, GInterface424>());
						if (gstruct.Failed)
						{
							return gstruct.Error;
						}
					}
					GStruct154<GInterface424> gstruct2 = InteractionsHandlerClass.ApplySingleItemToAddress(ammo, idGenerator, itemController, to);
					if (gstruct2.Failed)
					{
						GInterface424 value = gstruct.Value;
						if (value != null)
						{
							value.RollBack();
						}
						return gstruct2.Error;
					}
					return new Player.FirearmController.ReloadSingleBarrelResultClass(ammo, gstruct.Value, gstruct2.Value, weapon, placeToPutContainedAmmoMagazine);
				}

				// Token: 0x06015DD9 RID: 89561 RVA: 0x00266846 File Offset: 0x00264A46
				public void RollBack()
				{
					GInterface424 oldAmmoResult = this.OldAmmoResult;
					if (oldAmmoResult != null)
					{
						oldAmmoResult.RollBack();
					}
					this.InsertNewAmmoResult.RollBack();
				}

				// Token: 0x06015DDA RID: 89562 RVA: 0x00266864 File Offset: 0x00264A64
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					this.Weapon_0.Parent.RaiseRemoveEvent(this.Weapon_0, (status == CommandStatus.Begin) ? CommandStatus.Begin : CommandStatus.Failed, controller);
					GInterface424 oldAmmoResult = this.OldAmmoResult;
					if (oldAmmoResult != null)
					{
						oldAmmoResult.RaiseEvents(controller, status);
					}
					this.InsertNewAmmoResult.RaiseEvents(controller, status);
				}

				// Token: 0x06015DDB RID: 89563 RVA: 0x0072E590 File Offset: 0x0072C790
				public bool CanExecute(TraderControllerClass itemController)
				{
					return !this.Weapon_0.CheckAction(null).Failed && (this.OldAmmoResult == null || !this.OldAmmoResult.Item.CheckAction(null).Failed) && this.AmmoItemClass.CheckAction(null).Succeeded;
				}

				// Token: 0x0401294B RID: 76107
				[CanBeNull]
				public readonly GInterface424 OldAmmoResult;

				// Token: 0x0401294C RID: 76108
				[NotNull]
				public readonly GInterface424 InsertNewAmmoResult;

				// Token: 0x0401294D RID: 76109
				public readonly ItemAddress PlaceToPutContainedAmmoMagazine;

				// Token: 0x0401294E RID: 76110
				[NonSerialized]
				public Weapon Weapon_0;

				// Token: 0x0401294F RID: 76111
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x04012950 RID: 76112
				[CompilerGenerated]
				[NonSerialized]
				public MongoID MongoID_0;

				// Token: 0x04012951 RID: 76113
				[CompilerGenerated]
				[NonSerialized]
				public MongoID? Nullable_0;
			}

			// Token: 0x020039E3 RID: 14819
			public class GClass2052 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015DDC RID: 89564 RVA: 0x002668A4 File Offset: 0x00264AA4
				public GClass2052(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DDD RID: 89565 RVA: 0x0072E5F0 File Offset: 0x0072C7F0
				public void Start(Item item, Slot slot, Callback callback)
				{
					this.Slot_0 = slot;
					this.Callback_0 = callback;
					base.Start();
					this.FirearmsAnimator_0.SetupMod(true);
					this.FirearmController_0.SetAim(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.Player_0.MovementContext.SetBlindFire(0);
				}

				// Token: 0x06015DDE RID: 89566 RVA: 0x002668AD File Offset: 0x00264AAD
				public override void Reset()
				{
					this.Slot_0 = null;
					this.Callback_0 = null;
					this.Bool_0 = false;
					base.Reset();
				}

				// Token: 0x06015DDF RID: 89567 RVA: 0x002668CA File Offset: 0x00264ACA
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnModChanged();
				}

				// Token: 0x06015DE0 RID: 89568 RVA: 0x002668DC File Offset: 0x00264ADC
				public override void SetAiming(bool isAiming)
				{
					if (!isAiming)
					{
						this.FirearmController_0.IsAiming = false;
					}
				}

				// Token: 0x06015DE1 RID: 89569 RVA: 0x0072E648 File Offset: 0x0072C848
				public override void OnModChanged()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.WeaponManagerClass.RemoveMod(this.Slot_0);
					this.FirearmsAnimator_0.SetupMod(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.method_5();
					this.Callback_0.Succeed();
					this.WeaponManagerClass.ModFinallyRemoved(this.Slot_0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, (float)this.Weapon_0.CalculateCellSize().X);
					this.Player_0.UpdateFirstPersonGrip(GripPose.EGripType.Common, this.FirearmController_0.HandsHierarchy);
					this.FirearmController_0.ClearModAudioController(this.Slot_0);
					this.FirearmController_0.WeaponModified();
				}

				// Token: 0x06015DE2 RID: 89570 RVA: 0x002668ED File Offset: 0x00264AED
				public void method_5()
				{
					if (this.Slot_0.ContainedItem is LauncherItemClass)
					{
						this.FirearmController_0.method_8();
					}
				}

				// Token: 0x06015DE3 RID: 89571 RVA: 0x0026690C File Offset: 0x00264B0C
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015DE4 RID: 89572 RVA: 0x00266926 File Offset: 0x00264B26
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x04012952 RID: 76114
				[NonSerialized]
				public Slot Slot_0;

				// Token: 0x04012953 RID: 76115
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012954 RID: 76116
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x020039E4 RID: 14820
			public class GClass2053 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015DE5 RID: 89573 RVA: 0x00266929 File Offset: 0x00264B29
				public GClass2053(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DE6 RID: 89574 RVA: 0x0072E718 File Offset: 0x0072C918
				public void Start(Action onHidden, bool fastDrop = false, Item nextControllerItem = null)
				{
					this.Action_0 = onHidden;
					if (this.Player_0.UsedSimplifiedSkeleton)
					{
						base.Start();
						this.FastForward();
						return;
					}
					this.Weapon_0.IsUnderBarrelDeviceActive = false;
					if (this.FirearmController_0.CheckForFastWeaponSwitch(nextControllerItem))
					{
						WeaponSkillClass weaponSkillClass;
						this.Player_0.Skills.WeaponSkills.TryGetValue(this.FirearmController_0.Item.GetType(), out weaponSkillClass);
						this.Player_0.Physical.OnWeaponSwitchFast((weaponSkillClass != null) ? weaponSkillClass.Level : 0);
						this.FirearmsAnimator_0.SetSpeedParameters(1f, this.FirearmController_0.GetWeaponDrawSpeedMultiplier(this.FirearmController_0.Item, true));
						this.Player_0.QuickdrawWeaponFast = true;
						this.Player_0.QuickdrawTime = GClass1891.PastTime;
						Action onStartQuickdrawPistol = this.Player_0.OnStartQuickdrawPistol;
						if (onStartQuickdrawPistol != null)
						{
							onStartQuickdrawPistol();
						}
					}
					base.Start();
					this.FirearmsAnimator_0.SetActiveParam(false, true);
					this.FirearmsAnimator_0.SetFastHide(fastDrop);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015DE7 RID: 89575 RVA: 0x00266932 File Offset: 0x00264B32
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x06015DE8 RID: 89576 RVA: 0x00266949 File Offset: 0x00264B49
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015DE9 RID: 89577 RVA: 0x00266958 File Offset: 0x00264B58
				public override void HideWeaponComplete()
				{
					this.State = Player.EOperationState.Finished;
					Action action_ = this.Action_0;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x06015DEA RID: 89578 RVA: 0x00266971 File Offset: 0x00264B71
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Action_0 = (Action)Delegate.Combine(this.Action_0, onHidden);
				}

				// Token: 0x06015DEB RID: 89579 RVA: 0x0026698A File Offset: 0x00264B8A
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.HideWeaponComplete();
					}
				}

				// Token: 0x06015DEC RID: 89580 RVA: 0x0026699B File Offset: 0x00264B9B
				public override void OnDropWeapon()
				{
					this.HideWeaponComplete();
				}

				// Token: 0x06015DED RID: 89581 RVA: 0x002669A3 File Offset: 0x00264BA3
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x06015DEE RID: 89582 RVA: 0x002669A6 File Offset: 0x00264BA6
				public override void BlindFire(int b)
				{
					base.BlindFire(0);
				}

				// Token: 0x04012955 RID: 76117
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x020039E5 RID: 14821
			public class GClass2010
			{
				// Token: 0x06015DEF RID: 89583 RVA: 0x002669AF File Offset: 0x00264BAF
				public GClass2010(TraderControllerClass itemController, GInterface424 popNewAmmoResult, Weapon weapon, bool ammoCompatible)
				{
					this.AmmoCompatible = ammoCompatible;
					this.ItemController = itemController;
					this.Weapon = weapon;
					this.PopNewAmmoResult = popNewAmmoResult;
				}

				// Token: 0x06015DF0 RID: 89584 RVA: 0x002669D4 File Offset: 0x00264BD4
				public void RollBack()
				{
					GInterface424 popNewAmmoResult = this.PopNewAmmoResult;
					if (popNewAmmoResult == null)
					{
						return;
					}
					popNewAmmoResult.RollBack();
				}

				// Token: 0x06015DF1 RID: 89585 RVA: 0x002669E6 File Offset: 0x00264BE6
				public void RaiseEvents(TraderControllerClass controller, CommandStatus status)
				{
					this.Weapon.Parent.RaiseRemoveEvent(this.Weapon, (status == CommandStatus.Begin) ? CommandStatus.Begin : CommandStatus.Failed, controller);
					GInterface424 popNewAmmoResult = this.PopNewAmmoResult;
					if (popNewAmmoResult == null)
					{
						return;
					}
					popNewAmmoResult.RaiseEvents(controller, status);
				}

				// Token: 0x06015DF2 RID: 89586 RVA: 0x0072E83C File Offset: 0x0072CA3C
				public static GStruct156<Player.FirearmController.GClass2010> Run(TraderControllerClass itemController, Weapon weapon)
				{
					Slot slot = weapon.HasChambers ? weapon.Chambers[0] : null;
					MagazineItemClass currentMagazine = weapon.GetCurrentMagazine();
					bool flag = currentMagazine.IsAmmoCompatible(weapon.Chambers);
					if (slot == null || slot.ContainedItem != null || !flag)
					{
						return default(GStruct156<GClass3411>).Error;
					}
					GStruct154<GInterface424> gstruct = currentMagazine.Cartridges.PopTo(itemController, slot.CreateItemAddress());
					if (gstruct.Failed)
					{
						return gstruct.Error;
					}
					return new Player.FirearmController.GClass2010(itemController, gstruct.Value, weapon, flag);
				}

				// Token: 0x06015DF3 RID: 89587 RVA: 0x0072E8D0 File Offset: 0x0072CAD0
				public bool CanExecute(TraderControllerClass itemController)
				{
					return this.Weapon.CheckAction(null).Succeeded;
				}

				// Token: 0x04012956 RID: 76118
				public readonly TraderControllerClass ItemController;

				// Token: 0x04012957 RID: 76119
				public readonly Weapon Weapon;

				// Token: 0x04012958 RID: 76120
				public readonly bool AmmoCompatible;

				// Token: 0x04012959 RID: 76121
				public readonly GInterface424 PopNewAmmoResult;
			}

			// Token: 0x020039E6 RID: 14822
			public class FixMalfunctionOperationClass : Player.FirearmController.GClass2046
			{
				// Token: 0x06015DF4 RID: 89588 RVA: 0x00266A18 File Offset: 0x00264C18
				public FixMalfunctionOperationClass(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015DF5 RID: 89589 RVA: 0x0072E8F4 File Offset: 0x0072CAF4
				public override void Start()
				{
					base.Start();
					this.Player_0.StopBlindFire();
					this.FirearmsAnimator_0.MalfunctionRepair(true);
					this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					float num = 1f;
					float fixSpeed = this.FirearmController_0.gclass2250_0.FixSpeed;
					bool flag = this.FirearmController_0._player.MovementContext.PhysicalConditionIs(EPhysicalCondition.LeftArmDamaged);
					bool flag2 = this.FirearmController_0._player.MovementContext.PhysicalConditionIs(EPhysicalCondition.RightArmDamaged);
					BackendConfigSettingsClass.GClass1738 malfunction = Singleton<BackendConfigSettingsClass>.Instance.Malfunction;
					float num2 = (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.HardSlide) ? malfunction.MalfRepairHardSlideMult : 1f;
					if (flag && flag2)
					{
						num = malfunction.MalfRepairTwoHandsBrokenMult;
					}
					else if (flag || flag2)
					{
						num = malfunction.MalfRepairOneHandBrokenMult;
					}
					this.FirearmsAnimator_0.SetMalfRepairSpeed(fixSpeed * num * num2);
					this.Player_0.MovementContext.PlayerAnimator.method_1(fixSpeed * num * num2);
					this.Player_0.ExecuteSkill(new Action(this.method_6));
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs5(this.Weapon_0, CommandStatus.Begin, this.Player_0.InventoryController));
					this.EmalfunctionState_0 = this.Weapon_0.MalfState.State;
					this.Weapon_0.MalfState.Repair();
				}

				// Token: 0x06015DF6 RID: 89590 RVA: 0x00266A21 File Offset: 0x00264C21
				public override void FastForward()
				{
					this.OnAddAmmoInChamber();
					this.OnShellEjectEvent();
					this.OnMalfunctionOffEvent();
				}

				// Token: 0x06015DF7 RID: 89591 RVA: 0x00266A35 File Offset: 0x00264C35
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmsAnimator_0.SetFire(pressed);
				}

				// Token: 0x06015DF8 RID: 89592 RVA: 0x00266A43 File Offset: 0x00264C43
				public override void Reset()
				{
					base.Reset();
					this.Bool_0 = false;
					this.Bool_1 = false;
				}

				// Token: 0x06015DF9 RID: 89593 RVA: 0x00266A59 File Offset: 0x00264C59
				public override void OnOnOffBoltCatchEvent(bool isCatched)
				{
					if (!isCatched)
					{
						UnityEngine.Debug.LogError(string.Format("OnOnOffBoltCatchEvent error: isCatched {0}, must be true!", isCatched));
					}
					if (isCatched && this.Weapon_0.ChamberAmmoCount == 1)
					{
						return;
					}
					this.FirearmsAnimator_0.SetBoltCatch(isCatched);
				}

				// Token: 0x06015DFA RID: 89594 RVA: 0x00266A91 File Offset: 0x00264C91
				public override void OnIdleStartEvent()
				{
				}

				// Token: 0x06015DFB RID: 89595 RVA: 0x0072EA8C File Offset: 0x0072CC8C
				public override void RemoveAmmoFromChamber()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					if (this.EmalfunctionState_0 == Weapon.EMalfunctionState.Jam)
					{
						this.WeaponManagerClass.SetupPatronInWeaponForJam(0);
						return;
					}
					if (this.EmalfunctionState_0 == Weapon.EMalfunctionState.Feed)
					{
						this.WeaponManagerClass.RemoveShellInWeapon(0);
					}
					this.WeaponManagerClass.CreatePatronInShellPort(this.AmmoItemClass, 0);
				}

				// Token: 0x06015DFC RID: 89596 RVA: 0x0072EAF0 File Offset: 0x0072CCF0
				public override void OnAddAmmoInChamber()
				{
					bool flag2;
					bool flag = (flag2 = (this.Weapon_0.GetCurrentMagazine() != null)) && this.Weapon_0.GetCurrentMagazine().Count > 0;
					if (flag2 && this.Weapon_0.GetCurrentMagazine().IsAmmoCompatible(this.Weapon_0.Chambers) && flag2 && flag && this.Weapon_0.HasChambers && this.Weapon_0.Chambers[0].ContainedItem == null)
					{
						GStruct156<Player.FirearmController.GClass2010> gstruct = Player.FirearmController.GClass2010.Run(this.FirearmController_0._player.InventoryController, this.FirearmController_0.Item);
						if (gstruct.Error != null)
						{
							string str = "Failed move ammo to chamber: ";
							Error error = gstruct.Error;
							UnityEngine.Debug.LogError(str + ((error != null) ? error.ToString() : null));
						}
						if (gstruct.Value.PopNewAmmoResult == null)
						{
							this.Bool_0 = true;
						}
						else
						{
							this.AmmoItemClass_1 = (gstruct.Value.PopNewAmmoResult.ResultItem as AmmoItemClass);
						}
					}
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Weapon_0.GetCurrentMagazineCount());
					if (this.EmalfunctionState_0 == Weapon.EMalfunctionState.Feed)
					{
						this.WeaponManagerClass.RemoveShellInWeapon(0);
					}
					if (this.AmmoItemClass_1 != null)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass_1, 0);
					}
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
				}

				// Token: 0x06015DFD RID: 89597 RVA: 0x0072EC8C File Offset: 0x0072CE8C
				public override void OnMalfunctionOffEvent()
				{
					this.FirearmsAnimator_0.MalfunctionRepair(false);
					this.FirearmsAnimator_0.Malfunction((int)this.Weapon_0.MalfState.State);
					this.FirearmsAnimator_0.MisfireSlideUnknown(false);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetAmmoOnMag(this.Weapon_0.GetCurrentMagazineCount());
					this.Weapon_0.MalfState.AmmoToFire = null;
					this.Weapon_0.MalfState.AmmoWillBeLoadedToChamber = null;
					this.Weapon_0.MalfState.MalfunctionedAmmo = null;
					this.Player_0.InventoryController.CallMalfunctionRepaired(this.Weapon_0);
					this.Player_0.InventoryController.RaiseEvent(new GEventArgs5(this.Weapon_0, CommandStatus.Succeed, this.Player_0.InventoryController));
					if (this.Weapon_0.HasChambers && this.Weapon_0.ChamberAmmoCount == 0)
					{
						this.FirearmController_0.weaponManagerClass.DestroyPatronInWeapon(0);
					}
					base.method_5();
				}

				// Token: 0x06015DFE RID: 89598 RVA: 0x00266A93 File Offset: 0x00264C93
				public override bool CheckChamber()
				{
					return false;
				}

				// Token: 0x06015DFF RID: 89599 RVA: 0x0072ED9C File Offset: 0x0072CF9C
				public override void OnShellEjectEvent()
				{
					if (this.Bool_1)
					{
						return;
					}
					this.Bool_1 = true;
					switch (this.EmalfunctionState_0)
					{
					case Weapon.EMalfunctionState.Misfire:
					case Weapon.EMalfunctionState.HardSlide:
					case Weapon.EMalfunctionState.SoftSlide:
						this.WeaponManagerClass.StartSpawnMisfiredCartridge(this.Player_0.Velocity);
						return;
					case Weapon.EMalfunctionState.Jam:
						this.WeaponManagerClass.SpawnShellAfterJam(0);
						return;
					case Weapon.EMalfunctionState.Feed:
						this.WeaponManagerClass.ThrowPatronAsLoot(this.Weapon_0.MalfState.MalfunctionedAmmo, this.Player_0, "RepairMalfunction.OnShellEjectEvent");
						return;
					default:
						return;
					}
				}

				// Token: 0x06015E00 RID: 89600 RVA: 0x00266A96 File Offset: 0x00264C96
				[CompilerGenerated]
				public void method_6()
				{
					this.Player_0.Skills.WeaponFixAction.Complete(1f);
				}

				// Token: 0x0401295A RID: 76122
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x0401295B RID: 76123
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x0401295C RID: 76124
				[NonSerialized]
				public Weapon.EMalfunctionState EmalfunctionState_0;
			}

			// Token: 0x020039E7 RID: 14823
			public class GClass2054 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015E01 RID: 89601 RVA: 0x00266AB2 File Offset: 0x00264CB2
				public GClass2054(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E02 RID: 89602 RVA: 0x0072EE28 File Offset: 0x0072D028
				public virtual void Start(Callback finishCallback, bool rollToZeroCamora)
				{
					this.Callback_0 = finishCallback;
					this.CylinderMagazineItemClass = (this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass);
					this.Bool_1 = rollToZeroCamora;
					base.Start();
					this.FirearmController_0.IsAiming = false;
					if (rollToZeroCamora)
					{
						this.FirearmsAnimator_0.RollToZeroCamora(true);
					}
					else
					{
						this.FirearmsAnimator_0.SetRollCylinder(true);
					}
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015E03 RID: 89603 RVA: 0x00266ABB File Offset: 0x00264CBB
				public override void Reset()
				{
					base.Reset();
					this.Bool_0 = false;
					this.CylinderMagazineItemClass = null;
				}

				// Token: 0x06015E04 RID: 89604 RVA: 0x00266AD1 File Offset: 0x00264CD1
				public override void FastForward()
				{
					if (this.State == Player.EOperationState.Finished)
					{
						return;
					}
					this.OnMagPuttedToRig();
				}

				// Token: 0x06015E05 RID: 89605 RVA: 0x0072EEA4 File Offset: 0x0072D0A4
				public override void OnMagPuttedToRig()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					this.CylinderMagazineItemClass.IncrementCamoraIndex(this.Bool_1);
					this.FirearmsAnimator_0.SetCamoraIndex(this.CylinderMagazineItemClass.CurrentCamoraIndex);
					this.FirearmsAnimator_0.SetRollCylinder(false);
					this.FirearmsAnimator_0.RollToZeroCamora(false);
					Callback callback_ = this.Callback_0;
					if (callback_ == null)
					{
						return;
					}
					callback_.Succeed();
				}

				// Token: 0x06015E06 RID: 89606 RVA: 0x00266AE3 File Offset: 0x00264CE3
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x0401295D RID: 76125
				[NonSerialized]
				public CylinderMagazineItemClass CylinderMagazineItemClass;

				// Token: 0x0401295E RID: 76126
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x0401295F RID: 76127
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x04012960 RID: 76128
				[NonSerialized]
				public bool Bool_1;
			}

			// Token: 0x020039E8 RID: 14824
			public class GClass2027 : Player.FirearmController.GClass2026
			{
				// Token: 0x06015E07 RID: 89607 RVA: 0x00266AFD File Offset: 0x00264CFD
				public GClass2027(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E08 RID: 89608 RVA: 0x00266B06 File Offset: 0x00264D06
				public override void Start(Item item, Callback callback)
				{
					this.Float_1 = 0f;
					this.Bool_1 = false;
					base.Start(item, callback);
				}

				// Token: 0x06015E09 RID: 89609 RVA: 0x00266B22 File Offset: 0x00264D22
				public override void FastForward()
				{
					if (!this.Bool_1)
					{
						this.Bool_1 = true;
						this.OnBackpackDropEvent();
					}
				}

				// Token: 0x06015E0A RID: 89610 RVA: 0x00266B39 File Offset: 0x00264D39
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (!this.Bool_1 && this.Float_1 > 0.35f)
					{
						this.Bool_1 = true;
						this.OnBackpackDropEvent();
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x04012961 RID: 76129
				[NonSerialized]
				public const float Float_0 = 0.35f;

				// Token: 0x04012962 RID: 76130
				[NonSerialized]
				public float Float_1;

				// Token: 0x04012963 RID: 76131
				[NonSerialized]
				public bool Bool_1;
			}

			// Token: 0x020039E9 RID: 14825
			public class GClass2055 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015E0B RID: 89611 RVA: 0x00266B72 File Offset: 0x00264D72
				public GClass2055(Player.FirearmController controller) : base(controller)
				{
					controller._player.Logger.LogInfo("SpawnOperation", Array.Empty<object>());
				}

				// Token: 0x06015E0C RID: 89612 RVA: 0x0072EF28 File Offset: 0x0072D128
				public virtual void Start(Action onWeaponAppear)
				{
					this.FirearmController_0._player.Logger.LogInfo("SpawnOperation.Start()", Array.Empty<object>());
					this.Action_0 = onWeaponAppear;
					base.Start();
					this.FirearmsAnimator_0.SetActiveParam(true, true);
					this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.LACTIONS_LAYER_INDEX, 0);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, (float)this.Weapon_0.CalculateCellSize().X);
					int chamberAmmoCount = this.Weapon_0.ChamberAmmoCount;
					int currentMagazineCount = this.Weapon_0.GetCurrentMagazineCount();
					this.MagazineItemClass = this.Weapon_0.GetCurrentMagazine();
					this.FirearmController_0.AmmoInChamberOnSpawn = chamberAmmoCount;
					if (this.Weapon_0.HasChambers)
					{
						this.FirearmsAnimator_0.SetAmmoInChamber((float)chamberAmmoCount);
					}
					else
					{
						this.FirearmsAnimator_0.SetHammerArmed(this.Weapon_0.Armed);
					}
					CylinderMagazineItemClass cylinderMagazineItemClass = this.Weapon_0.GetCurrentMagazine() as CylinderMagazineItemClass;
					if (cylinderMagazineItemClass != null)
					{
						bool hammerArmed = !this.Weapon_0.CylinderHammerClosed;
						this.FirearmsAnimator_0.SetHammerArmed(hammerArmed);
						this.FirearmsAnimator_0.SetCamoraIndex(cylinderMagazineItemClass.CurrentCamoraIndex);
						for (int i = 0; i < cylinderMagazineItemClass.Count; i++)
						{
							if (cylinderMagazineItemClass.Camoras[i].ContainedItem != null)
							{
								this.Weapon_0.ShellsInChambers[i] = null;
								this.WeaponManagerClass.RemoveShellInWeapon(i);
							}
						}
					}
					if (this.Weapon_0.IsMultiBarrel)
					{
						for (int j = 0; j < this.Weapon_0.Chambers.Length; j++)
						{
							if (this.Weapon_0.Chambers[j].ContainedItem != null)
							{
								this.Weapon_0.ShellsInChambers[j] = null;
								this.WeaponManagerClass.RemoveShellInWeapon(j);
							}
						}
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(currentMagazineCount);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.Player_0.Skills.OnWeaponDraw(this.Weapon_0);
					bool flag = this.MagazineItemClass == null || this.MagazineItemClass.IsAmmoCompatible(this.Weapon_0.Chambers);
					this.Bool_1 = flag;
					this.FirearmsAnimator_0.SetAmmoCompatible(flag);
					if (this.Bool_1 && this.MagazineItemClass != null && this.MagazineItemClass.Count > 0 && this.FirearmController_0.Item.Chambers.Length != 0 && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 0);
					}
					if (this.MagazineItemClass != null && chamberAmmoCount == 0 && currentMagazineCount > 0 && flag && this.FirearmController_0.Item.Chambers.Length != 0)
					{
						Weapon.EMalfunctionState state = this.FirearmController_0.Item.MalfState.State;
						if (state == Weapon.EMalfunctionState.Misfire)
						{
							this.FirearmController_0.Item.MalfState.ChangeStateSilent(Weapon.EMalfunctionState.None);
						}
						GStruct154<GInterface424> gstruct = this.MagazineItemClass.Cartridges.PopTo(this.FirearmController_0._player.InventoryController, this.FirearmController_0.Item.Chambers[0].CreateItemAddress());
						this.FirearmController_0.Item.MalfState.ChangeStateSilent(state);
						if (gstruct.Value == null)
						{
							return;
						}
						this.WeaponManagerClass.RemoveAllShells();
						this.Player_0.UpdatePhones();
						this.AmmoItemClass = (AmmoItemClass)gstruct.Value.ResultItem;
					}
				}

				// Token: 0x06015E0D RID: 89613 RVA: 0x0072F2A4 File Offset: 0x0072D4A4
				public override void SetLeftStanceAnimOnStartOperation()
				{
					if (this.Weapon_0.IsStationaryWeapon)
					{
						return;
					}
					if (this.Weapon_0.BlockLeftStance)
					{
						this.Player_0.MovementContext.LeftStanceController.SetLeftStanceForce(false);
						return;
					}
					this.Player_0.MovementContext.LeftStanceController.SetAnimatorLeftStanceToCacheFromHandsAction();
				}

				// Token: 0x06015E0E RID: 89614 RVA: 0x00266B95 File Offset: 0x00264D95
				public override void Reset()
				{
					base.Reset();
					this.Action_0 = null;
					this.Action_1 = null;
					this.MagazineItemClass = null;
					this.AmmoItemClass = null;
					this.Bool_1 = false;
				}

				// Token: 0x06015E0F RID: 89615 RVA: 0x0072F2F8 File Offset: 0x0072D4F8
				public override void OnAddAmmoInChamber()
				{
					if (this.AmmoItemClass == null)
					{
						return;
					}
					this.FirearmsAnimator_0.SetAmmoOnMag(this.MagazineItemClass.Count);
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					if (this.Weapon_0.HasChambers)
					{
						this.WeaponManagerClass.SetRoundIntoWeapon(this.AmmoItemClass, 0);
					}
				}

				// Token: 0x06015E10 RID: 89616 RVA: 0x0072F35C File Offset: 0x0072D55C
				public override void WeaponAppeared()
				{
					if (this.Bool_1 && this.MagazineItemClass != null && this.FirearmController_0.Item.Chambers.Length != 0 && this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						base.method_2();
					}
					if (this.Weapon_0.MalfState.State != Weapon.EMalfunctionState.None)
					{
						this.Player_0.NeedRepairMalfPhraseSituation(this.Weapon_0.MalfState.State, this.Weapon_0.MalfState.IsKnownMalfType(this.FirearmController_0._player.ProfileId));
					}
					this.FirearmController_0.SetupProp();
					this.FirearmController_0._player.Logger.LogInfo("SpawnOperation.WeaponAppeared()", Array.Empty<object>());
					this.State = Player.EOperationState.Finished;
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					gclass.Start(null);
					this.Action_0();
					Action<Player.FirearmController> action_ = this.FirearmController_0.action_1;
					this.FirearmController_0.action_1 = null;
					if (action_ != null)
					{
						action_(this.FirearmController_0);
					}
					if (this.Action_1 != null)
					{
						gclass.HideWeapon(this.Action_1, this.Bool_0, null);
					}
					this.Action_1 = null;
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					this.FirearmController_0.method_10();
					if (this.Player_0.FastSlotSelection && this.Player_0.PreviousWeaponAimState)
					{
						this.FirearmController_0.ToggleAim();
					}
					if (this.Weapon_0.IsStationaryWeapon)
					{
						this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
					}
				}

				// Token: 0x06015E11 RID: 89617 RVA: 0x00266BC0 File Offset: 0x00264DC0
				public override void OnIdleStartEvent()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.WeaponAppeared();
					}
				}

				// Token: 0x06015E12 RID: 89618 RVA: 0x00266BD1 File Offset: 0x00264DD1
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Bool_0 = fastDrop;
					this.Action_1 = onHidden;
				}

				// Token: 0x06015E13 RID: 89619 RVA: 0x00266BE1 File Offset: 0x00264DE1
				public override void SetInventoryOpened(bool opened)
				{
				}

				// Token: 0x06015E14 RID: 89620 RVA: 0x00266BE3 File Offset: 0x00264DE3
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.1f);
						this.WeaponAppeared();
					}
				}

				// Token: 0x06015E15 RID: 89621 RVA: 0x00266C15 File Offset: 0x00264E15
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x04012964 RID: 76132
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012965 RID: 76133
				[NonSerialized]
				public Action Action_1;

				// Token: 0x04012966 RID: 76134
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012967 RID: 76135
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;

				// Token: 0x04012968 RID: 76136
				[NonSerialized]
				public MagazineItemClass MagazineItemClass;

				// Token: 0x04012969 RID: 76137
				[NonSerialized]
				public bool Bool_1;
			}

			// Token: 0x020039EA RID: 14826
			public class GClass2049 : Player.FirearmController.GClass2046
			{
				// Token: 0x06015E16 RID: 89622 RVA: 0x00266C18 File Offset: 0x00264E18
				public GClass2049(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E17 RID: 89623 RVA: 0x0072F4F8 File Offset: 0x0072D6F8
				public override void Start()
				{
					base.Start();
					if (this.Weapon_0.MalfState.State == Weapon.EMalfunctionState.Misfire)
					{
						AmmoItemClass ammoToFire = this.Weapon_0.MalfState.AmmoToFire;
						ammoToFire.IsUsed = false;
						BackendConfigSettingsClass instance = Singleton<BackendConfigSettingsClass>.Instance;
						float num;
						float currentOverheat = this.Weapon_0.GetCurrentOverheat(GClass1891.PastTime, instance.Overheat, out num);
						this.FirearmController_0.ShotMisfired(ammoToFire, this.Weapon_0.MalfState.State, currentOverheat);
					}
				}

				// Token: 0x06015E18 RID: 89624 RVA: 0x0072F574 File Offset: 0x0072D774
				public override void OnShellEjectEvent()
				{
					this.FirearmController_0.weaponManagerClass.StartSpawnShell(this.FirearmController_0._player.Velocity * 0.66f, 0);
					this.FirearmController_0.weaponManagerClass.SetRoundIntoWeapon(this.Weapon_0.MalfState.MalfunctionedAmmo, 0);
					this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(false, 0);
				}

				// Token: 0x06015E19 RID: 89625 RVA: 0x00266C21 File Offset: 0x00264E21
				public override void FastForward()
				{
					this.OnMalfunctionOffEvent();
				}

				// Token: 0x06015E1A RID: 89626 RVA: 0x0072F5E0 File Offset: 0x0072D7E0
				public override void OnMalfunctionOffEvent()
				{
					this.FirearmsAnimator_0.SetAmmoInChamber((float)this.Weapon_0.ChamberAmmoCount);
					this.FirearmsAnimator_0.SetLayerWeight(this.FirearmsAnimator_0.MALFUNCTION_LAYER_INDEX, 1);
					this.FirearmsAnimator_0.Malfunction(-1);
					base.method_5();
				}
			}

			// Token: 0x020039EB RID: 14827
			public class Class1270 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015E1B RID: 89627 RVA: 0x00266C29 File Offset: 0x00264E29
				public Class1270(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E1C RID: 89628 RVA: 0x0072F630 File Offset: 0x0072D830
				public void Start(Action callback = null)
				{
					this.Action_0 = callback;
					this.FirearmController_0.BipodState = !this.FirearmController_0.BipodState;
					this.FirearmsAnimator_0.SetInventory(false);
					this.FirearmsAnimator_0.SetBipod(this.FirearmController_0.BipodState);
					this.Player_0.MovementContext.SetBlindFire(0);
					EBipodToggleDirection bipodToggleDirection = this.WeaponManagerClass.BipodViewController.BipodToggleDirection;
					this.Player_0.MovementContext.SetInteractInHands((bipodToggleDirection == EBipodToggleDirection.Forward) ? (this.FirearmController_0.BipodState ? EInteraction.BipodForwardOn : EInteraction.BipodForwardOff) : (this.FirearmController_0.BipodState ? EInteraction.BipodBackwardOn : EInteraction.BipodBackwardOff));
					this.Player_0.ProceduralWeaponAnimation.IsBipodUsed = this.FirearmController_0.BipodState;
				}

				// Token: 0x06015E1D RID: 89629 RVA: 0x00266C32 File Offset: 0x00264E32
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015E1E RID: 89630 RVA: 0x00266C41 File Offset: 0x00264E41
				public override void SetInventoryOpened(bool opened)
				{
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015E1F RID: 89631 RVA: 0x00266C5B File Offset: 0x00264E5B
				public override void OnBipodToggleEvent()
				{
					this.method_5();
				}

				// Token: 0x06015E20 RID: 89632 RVA: 0x0072F6F8 File Offset: 0x0072D8F8
				public void method_5()
				{
					this.State = Player.EOperationState.Finished;
					this.FirearmsAnimator_0.SetInventory(this.FirearmController_0.InventoryOpened);
					if (this.Bool_0)
					{
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().HideWeapon(this.Action_1, this.Bool_1, null);
					}
					else
					{
						this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
					}
					if (this.Action_0 != null)
					{
						Action action_ = this.Action_0;
						if (action_ != null)
						{
							action_();
						}
						this.Action_0 = null;
					}
				}

				// Token: 0x06015E21 RID: 89633 RVA: 0x00266C63 File Offset: 0x00264E63
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Bool_0 = true;
					this.Action_1 = onHidden;
					this.Bool_1 = fastDrop;
				}

				// Token: 0x06015E22 RID: 89634 RVA: 0x00266C7A File Offset: 0x00264E7A
				public override void FastForward()
				{
					this.method_5();
					this.FirearmsAnimator_0.Animator.Play(this.FirearmsAnimator_0.FullIdleStateName, 1, 0.2f);
				}

				// Token: 0x06015E23 RID: 89635 RVA: 0x00266CA3 File Offset: 0x00264EA3
				public override bool CanChangeLightState(FirearmLightStateStruct[] lightsStates)
				{
					return false;
				}

				// Token: 0x0401296A RID: 76138
				[NonSerialized]
				public Action Action_0;

				// Token: 0x0401296B RID: 76139
				[NonSerialized]
				public Action Action_1;

				// Token: 0x0401296C RID: 76140
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x0401296D RID: 76141
				[NonSerialized]
				public bool Bool_1;
			}

			// Token: 0x020039EC RID: 14828
			public class GClass2056 : Player.FirearmController.GClass2013
			{
				// Token: 0x06015E24 RID: 89636 RVA: 0x00266CA6 File Offset: 0x00264EA6
				public GClass2056(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E25 RID: 89637 RVA: 0x0072F77C File Offset: 0x0072D97C
				public void Start(bool isLauncherEnabled, Action callback = null)
				{
					this.Player_0.SetLauncherState(isLauncherEnabled);
					this.Action_0 = callback;
					this.Bool_0 = isLauncherEnabled;
					this.WeaponPrefab_0 = this.FirearmController_0.underbarrelManagerClass.LauncherWeaponPrefab;
					if (this.WeaponPrefab_0.FirearmsAnimator == null)
					{
						this.WeaponPrefab_0.Init(null, true);
					}
					this.FirearmsAnimator_0.SetLauncher(isLauncherEnabled);
					if (isLauncherEnabled)
					{
						this.WeaponPrefab_0.SetUnderbarrelFastAnimator(this.Player_0);
						this.method_6(true);
					}
					else
					{
						this.WeaponPrefab_0.FirearmsAnimator.SetActiveParam(false, true);
					}
					this.Weapon_0.IsUnderBarrelDeviceActive = isLauncherEnabled;
					if (isLauncherEnabled)
					{
						this.FirearmController_0.method_9();
						this.Player_0.UpdateLauncherBones(isLauncherEnabled, this.WeaponPrefab_0);
					}
					this.method_5();
					base.Start();
				}

				// Token: 0x06015E26 RID: 89638 RVA: 0x00266CAF File Offset: 0x00264EAF
				public override void SetLeftStanceAnimOnStartOperation()
				{
				}

				// Token: 0x06015E27 RID: 89639 RVA: 0x00266CB1 File Offset: 0x00264EB1
				public override void Reset()
				{
					base.Reset();
					this.Action_1 = null;
					this.Bool_1 = false;
					this.Action_0 = null;
					this.WeaponPrefab_0 = null;
					this.Bool_0 = false;
				}

				// Token: 0x06015E28 RID: 89640 RVA: 0x00266CDC File Offset: 0x00264EDC
				public override void SetInventoryOpened(bool opened)
				{
					this.SetAiming(false);
					this.SetTriggerPressed(false);
					this.FirearmController_0.InventoryOpened = opened;
					this.FirearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015E29 RID: 89641 RVA: 0x00266D04 File Offset: 0x00264F04
				public override void HideWeapon(Action onHidden, bool fastDrop, Item nextControllerItem = null)
				{
					this.Action_1 = onHidden;
					this.Bool_1 = fastDrop;
				}

				// Token: 0x06015E2A RID: 89642 RVA: 0x0072F848 File Offset: 0x0072DA48
				public override void LauncherAppeared()
				{
					this.State = Player.EOperationState.Finished;
					Action action_ = this.Action_1;
					bool bool_ = this.Bool_1;
					this.Player_0.UpdateFirstPersonGrip(GripPose.EGripType.Common, this.FirearmController_0.HandsHierarchy);
					this.Player_0.ProceduralWeaponAnimation.method_8(this.FirearmController_0, this.FirearmController_0.UnderbarrelWeapon, null, this.FirearmController_0.gclass2250_0);
					this.Player_0.ProceduralWeaponAnimation.IsGrenadeLauncher = true;
					Player.FirearmController.GClass2040 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2040>();
					if (action_ != null)
					{
						this.Action_0 = null;
					}
					gclass.Start(this.Action_0);
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015E2B RID: 89643 RVA: 0x00266D14 File Offset: 0x00264F14
				public override void OnEnd()
				{
					base.OnEnd();
					this.WeaponPrefab_0 = null;
				}

				// Token: 0x06015E2C RID: 89644 RVA: 0x0072F8F0 File Offset: 0x0072DAF0
				public override void LauncherDisappeared()
				{
					Action action_ = this.Action_1;
					bool bool_ = this.Bool_1;
					this.State = Player.EOperationState.Finished;
					this.Player_0.UpdateLauncherBones(false, this.WeaponPrefab_0);
					this.Player_0.UpdateFirstPersonGrip(GripPose.EGripType.Common, this.FirearmController_0.HandsHierarchy);
					this.Player_0.ProceduralWeaponAnimation.method_8(this.FirearmController_0, this.FirearmController_0.Item, this.FirearmController_0.weaponPrefab_0, this.FirearmController_0.gclass2250_0);
					this.Player_0.ProceduralWeaponAnimation.IsGrenadeLauncher = false;
					this.Player_0.ProceduralWeaponAnimation.FindMountingPoint(this.FirearmController_0.HandsHierarchy);
					this.method_6(false);
					this.WeaponPrefab_0.ResetUnderbarrelFastAnimator(this.Player_0);
					Player.FirearmController.GClass2037 gclass = this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>();
					if (action_ != null)
					{
						this.Action_0 = null;
					}
					gclass.Start(this.Action_0);
					if (action_ != null)
					{
						gclass.HideWeapon(action_, bool_, null);
					}
				}

				// Token: 0x06015E2D RID: 89645 RVA: 0x00266D23 File Offset: 0x00264F23
				public override void FastForward()
				{
					if (this.Bool_0)
					{
						this.LauncherAppeared();
						return;
					}
					this.LauncherDisappeared();
				}

				// Token: 0x06015E2E RID: 89646 RVA: 0x00266D3A File Offset: 0x00264F3A
				public void method_5()
				{
					if (!this.FirearmController_0.Blindfire)
					{
						return;
					}
					this.FirearmController_0.Blindfire = false;
					this.Player_0.ProceduralWeaponAnimation.StartBlindFire(0);
				}

				// Token: 0x06015E2F RID: 89647 RVA: 0x0072F9E4 File Offset: 0x0072DBE4
				public void method_6(bool val)
				{
					this.WeaponPrefab_0.Animator.enabled = val;
					if (val)
					{
						this.WeaponPrefab_0.FirearmsAnimator.AddEventsConsumer(this.FirearmController_0);
						this.FirearmController_0.firearmsAnimator_0 = this.WeaponPrefab_0.FirearmsAnimator;
						this.FirearmController_0.AnimationEventsEmitter = this.WeaponPrefab_0.AnimationEventsEmitter;
						this.WeaponPrefab_0.FirearmsAnimator.SetActiveParam(true, true);
						return;
					}
					this.WeaponPrefab_0.FirearmsAnimator.RemoveEventsConsumer(this.FirearmController_0);
					this.FirearmController_0.firearmsAnimator_0 = this.FirearmController_0.weaponPrefab_0.FirearmsAnimator;
					this.FirearmController_0.AnimationEventsEmitter = this.FirearmController_0.weaponPrefab_0.AnimationEventsEmitter;
				}

				// Token: 0x0401296E RID: 76142
				[NonSerialized]
				public Action Action_0;

				// Token: 0x0401296F RID: 76143
				[NonSerialized]
				public WeaponPrefab WeaponPrefab_0;

				// Token: 0x04012970 RID: 76144
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x04012971 RID: 76145
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012972 RID: 76146
				[NonSerialized]
				public Action Action_1;
			}

			// Token: 0x020039ED RID: 14829
			public class UnderbarrelManagerClass : GInterface210
			{
				// Token: 0x1700354B RID: 13643
				// (get) Token: 0x06015E30 RID: 89648 RVA: 0x00266D67 File Offset: 0x00264F67
				public FirearmsEffects FirearmsEffects
				{
					get
					{
						return this.FirearmsEffects_0;
					}
				}

				// Token: 0x1700354C RID: 13644
				// (get) Token: 0x06015E31 RID: 89649 RVA: 0x00266D6F File Offset: 0x00264F6F
				public WeaponSoundPlayer WeaponSoundPlayer
				{
					get
					{
						return this.WeaponSoundPlayer_0;
					}
				}

				// Token: 0x1700354D RID: 13645
				// (get) Token: 0x06015E32 RID: 89650 RVA: 0x00266D77 File Offset: 0x00264F77
				public static WeaponSounds WeaponSounds_0
				{
					get
					{
						return Singleton<BetterAudio>.Instance.MiscCollisionSounds;
					}
				}

				// Token: 0x1700354E RID: 13646
				// (get) Token: 0x06015E33 RID: 89651 RVA: 0x00266D83 File Offset: 0x00264F83
				public BifacialTransform Fireport
				{
					get
					{
						return this.BifacialTransform_0;
					}
				}

				// Token: 0x1700354F RID: 13647
				// (get) Token: 0x06015E34 RID: 89652 RVA: 0x00266D8B File Offset: 0x00264F8B
				public WeaponPrefab LauncherWeaponPrefab
				{
					get
					{
						return this.WeaponPrefab_0;
					}
				}

				// Token: 0x06015E35 RID: 89653 RVA: 0x00266D93 File Offset: 0x00264F93
				public void Init(Player player, Player.FirearmController controller, LauncherItemClass launcher)
				{
					this.WeaponPrefab_0 = controller.weaponPrefab_0._objectInstance.gameObject.GetComponentInChildren<WeaponPrefab>();
					this.method_0(player, controller, launcher);
				}

				// Token: 0x06015E36 RID: 89654 RVA: 0x00266DB9 File Offset: 0x00264FB9
				public void Init(Player player, Player.FirearmController controller, LauncherItemClass launcher, GameObject underbarrelPrefab)
				{
					this.WeaponPrefab_0 = underbarrelPrefab.GetComponent<WeaponPrefab>();
					this.method_0(player, controller, launcher);
				}

				// Token: 0x06015E37 RID: 89655 RVA: 0x00266DD1 File Offset: 0x00264FD1
				public void InitWeaponSoundPlayer()
				{
					this.method_3();
				}

				// Token: 0x06015E38 RID: 89656 RVA: 0x0072FAA8 File Offset: 0x0072DCA8
				public void method_0(Player player, Player.FirearmController controller, LauncherItemClass launcher)
				{
					this.Player_0 = player;
					this.FirearmController_0 = controller;
					this.LauncherItemClass = launcher;
					this.LauncherItemClass.ResetRangeValueToDefault();
					this.ShellExtractionData_0 = this.WeaponPrefab_0.GetComponent<ShellExtractionData>();
					this.method_1();
					this.method_2();
					this.method_4();
					this.method_5();
				}

				// Token: 0x06015E39 RID: 89657 RVA: 0x00266DD9 File Offset: 0x00264FD9
				public void method_1()
				{
					this.FirearmsEffects_0 = this.WeaponPrefab_0.gameObject.AddComponent<FirearmsEffects>();
					this.FirearmsEffects_0.Init(this.WeaponPrefab_0.transform);
				}

				// Token: 0x06015E3A RID: 89658 RVA: 0x00266E07 File Offset: 0x00265007
				public void method_2()
				{
					this.BifacialTransform_0.Original = TransformHelperClass.FindTransformRecursive(this.WeaponPrefab_0.transform, "fireport", false);
				}

				// Token: 0x06015E3B RID: 89659 RVA: 0x0072FB00 File Offset: 0x0072DD00
				public void method_3()
				{
					if (this.Bool_0)
					{
						return;
					}
					this.WeaponSoundPlayer_0 = this.WeaponPrefab_0.transform.GetComponent<WeaponSoundPlayer>();
					this.WeaponSoundPlayer_0.Init(this.FirearmController_0, this.BifacialTransform_0, this.Player_0);
					this.Bool_0 = true;
				}

				// Token: 0x06015E3C RID: 89660 RVA: 0x00266E2A File Offset: 0x0026502A
				public void StartSpawnShell(Vector3 playerVelocity, int shellPortIndex = 0)
				{
					if (!this.method_7())
					{
						return;
					}
					this.WeaponPrefab_0.StartCoroutine(this.method_11(playerVelocity, shellPortIndex));
				}

				// Token: 0x06015E3D RID: 89661 RVA: 0x0072FB50 File Offset: 0x0072DD50
				public void method_4()
				{
					this.Transform_0 = TransformHelperClass.FindTransformRecursive(this.WeaponPrefab_0.transform, "shellport", false);
					this.Transform_1 = TransformHelperClass.FindTransformRecursive(this.WeaponPrefab_0.transform, "patron_in_weapon", false);
					if (this.Transform_0 != null)
					{
						this.Vector3_0 = this.Transform_0.localPosition;
					}
				}

				// Token: 0x06015E3E RID: 89662 RVA: 0x0072FBB4 File Offset: 0x0072DDB4
				public void method_5()
				{
					if (this.LauncherItemClass.Chamber.ContainedItem != null)
					{
						this.SetRoundIntoWeapon((AmmoItemClass)this.LauncherItemClass.Chamber.ContainedItem);
					}
					if (this.LauncherItemClass.ShellsInChambers != null)
					{
						for (int i = 0; i < this.LauncherItemClass.ShellsInChambers.Length; i++)
						{
							AmmoTemplate ammoTemplate = this.LauncherItemClass.ShellsInChambers[i];
							if (ammoTemplate != null)
							{
								this.SetPatronInShellPort(Singleton<PoolManagerClass>.Instance.CreateFromPool<AmmoPoolObject>(ammoTemplate.Prefab), i);
							}
						}
					}
				}

				// Token: 0x06015E3F RID: 89663 RVA: 0x00266E49 File Offset: 0x00265049
				public bool method_6()
				{
					return CameraClass.Instance.Distance(this.WeaponPrefab_0.transform.position) < EFTHardSettings.Instance.PATRONS_MANIPULATIONS_VISIBLE_DISTANCE;
				}

				// Token: 0x06015E40 RID: 89664 RVA: 0x00266E71 File Offset: 0x00265071
				public bool method_7()
				{
					return CameraClass.Instance.Distance(this.WeaponPrefab_0.transform.position) < EFTHardSettings.Instance.FLYING_SHELLS_VISIBLE_DISTANCE;
				}

				// Token: 0x06015E41 RID: 89665 RVA: 0x0072FC3C File Offset: 0x0072DE3C
				public void MoveAmmoFromChamberToShellPort(bool ammoIsUsed, int chamberIndex = 0)
				{
					AmmoPoolObject ammoPoolObject_ = this.AmmoPoolObject_0;
					this.AmmoPoolObject_0 = null;
					if (ammoPoolObject_ == null)
					{
						return;
					}
					this.SetPatronInShellPort(ammoPoolObject_, chamberIndex);
					if (this.method_6())
					{
						ammoPoolObject_.SetUsed(ammoIsUsed);
					}
				}

				// Token: 0x06015E42 RID: 89666 RVA: 0x0072FC78 File Offset: 0x0072DE78
				public void SetRoundIntoWeapon(AmmoItemClass ammo)
				{
					if (!this.method_6())
					{
						return;
					}
					if (this.AmmoPoolObject_0 != null)
					{
						UnityEngine.Debug.LogWarning("Already have an ammo in chamber");
						this.DestroyPatronInWeapon();
					}
					Transform transform_ = this.Transform_1;
					if (transform_.childCount > 0)
					{
						AssetPoolObject.ReturnToPool(transform_.GetChild(0).gameObject, true);
					}
					AmmoPoolObject ammoPoolObject = Player.FirearmController.UnderbarrelManagerClass.smethod_0(ammo);
					ammoPoolObject.SetUsed(ammo.IsUsed);
					Player.FirearmController.UnderbarrelManagerClass.ParentAmmoOrShellToTransform(ammoPoolObject.gameObject, transform_);
					this.AmmoPoolObject_0 = ammoPoolObject;
				}

				// Token: 0x06015E43 RID: 89667 RVA: 0x0072FCF8 File Offset: 0x0072DEF8
				public void SetPatronInShellPort(AmmoPoolObject ammoObject, int shellTransformIndex = 0)
				{
					if (this.AmmoPoolObject_1 != null)
					{
						UnityEngine.Debug.LogError("Error: already have a shell in shell port");
						AssetPoolObject.ReturnToPool(this.AmmoPoolObject_1.gameObject, true);
					}
					this.AmmoPoolObject_1 = ammoObject;
					Player.FirearmController.UnderbarrelManagerClass.ParentAmmoOrShellToTransform(ammoObject.gameObject, this.Transform_0);
				}

				// Token: 0x06015E44 RID: 89668 RVA: 0x00266E99 File Offset: 0x00265099
				public bool DestroyPatronInWeapon()
				{
					if (this.AmmoPoolObject_0 == null)
					{
						return false;
					}
					AssetPoolObject.ReturnToPool(this.AmmoPoolObject_0.gameObject, true);
					this.AmmoPoolObject_0 = null;
					return true;
				}

				// Token: 0x06015E45 RID: 89669 RVA: 0x00266EC4 File Offset: 0x002650C4
				public void RemoveShellInWeapon()
				{
					if (!this.method_6())
					{
						return;
					}
					this.method_8();
				}

				// Token: 0x06015E46 RID: 89670 RVA: 0x00266ED5 File Offset: 0x002650D5
				public void method_8()
				{
					if (this.AmmoPoolObject_1 == null)
					{
						return;
					}
					AssetPoolObject.ReturnToPool(this.AmmoPoolObject_1.gameObject, true);
					this.AmmoPoolObject_1 = null;
				}

				// Token: 0x06015E47 RID: 89671 RVA: 0x00266EFE File Offset: 0x002650FE
				public bool HasPatronInWeapon()
				{
					return this.AmmoPoolObject_0 != null;
				}

				// Token: 0x06015E48 RID: 89672 RVA: 0x00266F0C File Offset: 0x0026510C
				public bool HasShellInWeapon()
				{
					return this.AmmoPoolObject_1 != null;
				}

				// Token: 0x06015E49 RID: 89673 RVA: 0x0072FD48 File Offset: 0x0072DF48
				public static AmmoPoolObject smethod_0(Item ammo)
				{
					GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateItem(ammo, true);
					AmmoPoolObject component = gameObject.GetComponent<AmmoPoolObject>();
					if (component == null)
					{
						string str = "Error: gameobject ";
						GameObject gameObject2 = gameObject;
						throw new Exception(str + ((gameObject2 != null) ? gameObject2.ToString() : null) + " doesn't have AmmoPoolObject component");
					}
					return component;
				}

				// Token: 0x06015E4A RID: 89674 RVA: 0x0072FD94 File Offset: 0x0072DF94
				public static void ParentAmmoOrShellToTransform(GameObject shell, Transform shellParent)
				{
					shell.transform.position = shellParent.position;
					shell.transform.rotation = shellParent.rotation;
					shell.transform.localRotation *= Quaternion.Euler(90f, 0f, 0f);
					shell.transform.SetParent(shellParent, true);
					shell.transform.localScale = Vector3.one;
					shell.transform.localPosition = Vector3.zero;
					shell.SetActive(true);
				}

				// Token: 0x06015E4B RID: 89675 RVA: 0x0072FE24 File Offset: 0x0072E024
				public AmmoPoolObject method_9(Vector3 playerVelocity, AmmoPoolObject shell)
				{
					AmmoPoolObject ammoPoolObject = Singleton<GameWorld>.Instance.SpawnShellInTheWorld(ref shell);
					ammoPoolObject.transform.parent = null;
					Vector3 shotRotationVector = this.ShellExtractionData_0.GetShotRotationVector();
					Vector3 shotAdditionalForce = this.ShellExtractionData_0.GetShotAdditionalForce();
					Vector3 force = (this.Transform_0.localPosition - this.Vector3_0) * this.ShellExtractionData_0.GetShotShellForceMultiplier() + shotAdditionalForce;
					this.method_10(force, shotRotationVector, ammoPoolObject, playerVelocity);
					ammoPoolObject.StartAutoDestroyCountDown(1f);
					return ammoPoolObject;
				}

				// Token: 0x06015E4C RID: 89676 RVA: 0x00266F1A File Offset: 0x0026511A
				public void method_10(Vector3 force, Vector3 torque, AmmoPoolObject shell, Vector3 parentForce)
				{
					shell.EnablePhysics(force, torque, parentForce, this.Transform_0.transform.forward);
					shell.gameObject.layer = LayerMaskClass.ShellsLayer;
					shell.Shell.CollisionListener = this;
				}

				// Token: 0x06015E4D RID: 89677 RVA: 0x00266F52 File Offset: 0x00265152
				public IEnumerator method_11(Vector3 playerVelocity, int shellPortIndex = 0)
				{
					Player.FirearmController.UnderbarrelManagerClass.Class1236 @class = new Player.FirearmController.UnderbarrelManagerClass.Class1236(0);
					@class.UnderbarrelManagerClass = this;
					@class.playerVelocity = playerVelocity;
					return @class;
				}

				// Token: 0x06015E4E RID: 89678 RVA: 0x0072FEA8 File Offset: 0x0072E0A8
				public void method_12(Vector3 position, BaseBallistic.ESurfaceSound material, ECaliber caliber)
				{
					SoundBank soundBank = null;
					float volume = 1f;
					switch (material)
					{
					case BaseBallistic.ESurfaceSound.Concrete:
					case BaseBallistic.ESurfaceSound.Asphalt:
						soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmConcrete : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmConcrete : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calConcrete : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavyConcrete : null))));
						break;
					case BaseBallistic.ESurfaceSound.Metal:
						soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmMetal : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmMetal : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calMetal : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavyMetal : null))));
						break;
					case BaseBallistic.ESurfaceSound.Wood:
						soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmWood : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmWood : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calWood : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavyWood : null))));
						break;
					case BaseBallistic.ESurfaceSound.Soil:
					case BaseBallistic.ESurfaceSound.Gravel:
						soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmSoil : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmSoil : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calSoil : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavySoil : null))));
						break;
					case BaseBallistic.ESurfaceSound.Grass:
						soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmSoil : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmSoil : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calSoil : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavySoil : null))));
						break;
					case BaseBallistic.ESurfaceSound.Glass:
						break;
					default:
						if (material == BaseBallistic.ESurfaceSound.Plastic)
						{
							soundBank = ((caliber == ECaliber.Shell9Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell9mmPlastic : ((caliber == ECaliber.Shell556Mm) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell556mmPlastic : ((caliber == ECaliber.Shell12Cal) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.Shell12calPlastic : ((caliber == ECaliber.ShellHeavy) ? Player.FirearmController.UnderbarrelManagerClass.WeaponSounds_0.ShellHeavyPlastic : null))));
							volume = 0.6f;
						}
						break;
					}
					if (soundBank != null)
					{
						EOcclusionTest occlusionTest = (this.Player_0 == null || this.Player_0.PointOfView == EPointOfView.ThirdPerson) ? EOcclusionTest.OneShotPropagation : EOcclusionTest.None;
						Singleton<BetterAudio>.Instance.PlayAtPoint(position + Vector3.up / 4f, soundBank, (int)soundBank.SourceType, CameraClass.Instance.Distance(position), volume, -1f, EnvironmentType.Outdoor, occlusionTest, true, false, false);
					}
				}

				// Token: 0x06015E4F RID: 89679 RVA: 0x00266F68 File Offset: 0x00265168
				public void InvokeShellCollision(Vector3 position, BaseBallistic.ESurfaceSound material, ECaliber caliber)
				{
					this.method_12(position, material, caliber);
				}

				// Token: 0x06015E50 RID: 89680 RVA: 0x00266F73 File Offset: 0x00265173
				public void Clear()
				{
					this.RemoveShellInWeapon();
					this.DestroyPatronInWeapon();
				}

				// Token: 0x04012973 RID: 76147
				public const string SHELLPORT_TRANSFORM_NAME = "shellport";

				// Token: 0x04012974 RID: 76148
				public const string PATRON_IN_WEAPON_TRANSFORM_NAME = "patron_in_weapon";

				// Token: 0x04012975 RID: 76149
				[NonSerialized]
				public Player Player_0;

				// Token: 0x04012976 RID: 76150
				[NonSerialized]
				public Player.FirearmController FirearmController_0;

				// Token: 0x04012977 RID: 76151
				[NonSerialized]
				public WeaponPrefab WeaponPrefab_0;

				// Token: 0x04012978 RID: 76152
				[NonSerialized]
				public LauncherItemClass LauncherItemClass;

				// Token: 0x04012979 RID: 76153
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x0401297A RID: 76154
				[NonSerialized]
				public FirearmsEffects FirearmsEffects_0;

				// Token: 0x0401297B RID: 76155
				[NonSerialized]
				public WeaponSoundPlayer WeaponSoundPlayer_0;

				// Token: 0x0401297C RID: 76156
				[NonSerialized]
				public Transform Transform_0;

				// Token: 0x0401297D RID: 76157
				[NonSerialized]
				public Vector3 Vector3_0;

				// Token: 0x0401297E RID: 76158
				[NonSerialized]
				public Transform Transform_1;

				// Token: 0x0401297F RID: 76159
				[NonSerialized]
				public AmmoPoolObject AmmoPoolObject_0;

				// Token: 0x04012980 RID: 76160
				[NonSerialized]
				public AmmoPoolObject AmmoPoolObject_1;

				// Token: 0x04012981 RID: 76161
				[NonSerialized]
				public ShellExtractionData ShellExtractionData_0;

				// Token: 0x04012982 RID: 76162
				[NonSerialized]
				public BifacialTransform BifacialTransform_0 = new BifacialTransform();

				// Token: 0x04012983 RID: 76163
				[NonSerialized]
				public WaitForEndOfFrame WaitForEndOfFrame_0 = new WaitForEndOfFrame();
			}

			// Token: 0x020039EE RID: 14830
			public class GClass2038 : Player.FirearmController.GClass2037
			{
				// Token: 0x06015E52 RID: 89682 RVA: 0x00266FA0 File Offset: 0x002651A0
				public GClass2038(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E53 RID: 89683 RVA: 0x00266FA9 File Offset: 0x002651A9
				public void Start(Player.FirearmController.GClass2038.EUtilityType utilityType)
				{
					this.EutilityType_0 = utilityType;
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
					this.State = Player.EOperationState.Executing;
					this.Float_4 = 0f;
					this.SetLeftStanceAnimOnStartOperation();
				}

				// Token: 0x06015E54 RID: 89684 RVA: 0x00266FE0 File Offset: 0x002651E0
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x06015E55 RID: 89685 RVA: 0x00266FF7 File Offset: 0x002651F7
				public override void OnIdleStartEvent()
				{
					if (this.State != Player.EOperationState.Ready)
					{
						return;
					}
					base.OnIdleStartEvent();
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015E56 RID: 89686 RVA: 0x00267020 File Offset: 0x00265220
				public override void OnUtilityOperationStartEvent()
				{
					this.State = Player.EOperationState.Ready;
				}

				// Token: 0x06015E57 RID: 89687 RVA: 0x00267029 File Offset: 0x00265229
				public override bool CanStartReload()
				{
					return false;
				}

				// Token: 0x06015E58 RID: 89688 RVA: 0x0026702C File Offset: 0x0026522C
				public override void Reset()
				{
					this.EutilityType_0 = Player.FirearmController.GClass2038.EUtilityType.None;
					base.Reset();
				}

				// Token: 0x06015E59 RID: 89689 RVA: 0x0026703B File Offset: 0x0026523B
				public override bool CheckAmmo()
				{
					return false;
				}

				// Token: 0x06015E5A RID: 89690 RVA: 0x0026703E File Offset: 0x0026523E
				public override bool CheckChamber()
				{
					return false;
				}

				// Token: 0x06015E5B RID: 89691 RVA: 0x00267041 File Offset: 0x00265241
				public override bool CheckFireMode()
				{
					return false;
				}

				// Token: 0x06015E5C RID: 89692 RVA: 0x00267044 File Offset: 0x00265244
				public override void ReloadMag(MagazineItemClass magazine, ItemAddress itemAddress, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015E5D RID: 89693 RVA: 0x00267046 File Offset: 0x00265246
				public override void ReloadWithAmmo(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015E5E RID: 89694 RVA: 0x00267048 File Offset: 0x00265248
				public override void ReloadCylinderMagazine(AmmoPackReloadingClass ammoPack, Callback finishCallback, Callback startCallback, bool quickReload = false)
				{
				}

				// Token: 0x06015E5F RID: 89695 RVA: 0x0026704A File Offset: 0x0026524A
				public override void QuickReloadMag(MagazineItemClass magazine, Callback finishCallback, Callback startCallback)
				{
				}

				// Token: 0x06015E60 RID: 89696 RVA: 0x0026704C File Offset: 0x0026524C
				public override void ReloadGrenadeLauncher(AmmoPackReloadingClass ammoPack, Callback callback)
				{
				}

				// Token: 0x06015E61 RID: 89697 RVA: 0x0026704E File Offset: 0x0026524E
				public override void SetTriggerPressed(bool pressed)
				{
					if (this.EutilityType_0 == Player.FirearmController.GClass2038.EUtilityType.ExamineWeapon)
					{
						this.OnUtilityOperationStartEvent();
						this.OnIdleStartEvent();
						this.FirearmController_0.CurrentOperation.SetTriggerPressed(pressed);
					}
				}

				// Token: 0x06015E62 RID: 89698 RVA: 0x00267076 File Offset: 0x00265276
				public override void SetInventoryOpened(bool opened)
				{
					this.Bool_1 = opened;
					if (!this.Bool_1)
					{
						this.Float_4 = 0f;
					}
					base.SetInventoryOpened(opened);
				}

				// Token: 0x06015E63 RID: 89699 RVA: 0x007300F8 File Offset: 0x0072E2F8
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (this.State != Player.EOperationState.Executing || this.Bool_1)
					{
						return;
					}
					if (this.Float_4 > 2.5f)
					{
						if (this.FirearmsAnimator_0 != null)
						{
							UnityEngine.Debug.LogError("UtilityOperationEvent not found on " + this.FirearmsAnimator_0.Animator.name);
						}
						else
						{
							UnityEngine.Debug.LogError("UtilityOperationEvent not found. No animator!");
						}
						this.State = Player.EOperationState.Ready;
						this.OnIdleStartEvent();
						return;
					}
					this.Float_4 += deltaTime;
				}

				// Token: 0x06015E64 RID: 89700 RVA: 0x00267099 File Offset: 0x00265299
				public override void SetAiming(bool isAiming)
				{
				}

				// Token: 0x06015E65 RID: 89701 RVA: 0x0026709B File Offset: 0x0026529B
				public override bool ExamineWeapon()
				{
					return true;
				}

				// Token: 0x06015E66 RID: 89702 RVA: 0x0073017C File Offset: 0x0072E37C
				public override void OnShellEjectEvent()
				{
					this.FirearmController_0.weaponManagerClass.StartSpawnShell(this.FirearmController_0._player.Velocity * 0.66f, 0);
					for (int i = 0; i < this.Weapon_0.ShellsInChambers.Length; i++)
					{
						this.Weapon_0.ShellsInChambers[i] = null;
					}
					this.FirearmsAnimator_0.SetShellsInWeapon(this.Weapon_0.ShellsInWeaponCount);
				}

				// Token: 0x04012984 RID: 76164
				[NonSerialized]
				public const float Float_3 = 2.5f;

				// Token: 0x04012985 RID: 76165
				[NonSerialized]
				public float Float_4;

				// Token: 0x04012986 RID: 76166
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x04012987 RID: 76167
				[NonSerialized]
				public Player.FirearmController.GClass2038.EUtilityType EutilityType_0;

				// Token: 0x02003B17 RID: 15127
				public enum EUtilityType
				{
					// Token: 0x04012DC5 RID: 77253
					None,
					// Token: 0x04012DC6 RID: 77254
					ExamineWeapon,
					// Token: 0x04012DC7 RID: 77255
					CheckChamber,
					// Token: 0x04012DC8 RID: 77256
					CheckMagazine,
					// Token: 0x04012DC9 RID: 77257
					CheckFireMode
				}
			}

			// Token: 0x020039EF RID: 14831
			public class GClass2036 : Player.FirearmController.GenericFireOperationClass
			{
				// Token: 0x06015E67 RID: 89703 RVA: 0x0026709E File Offset: 0x0026529E
				public GClass2036(Player.FirearmController controller) : base(controller)
				{
				}

				// Token: 0x06015E68 RID: 89704 RVA: 0x002670A7 File Offset: 0x002652A7
				public override void Start()
				{
					base.Start();
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
					this.FirearmController_0.SetAim(false);
				}

				// Token: 0x06015E69 RID: 89705 RVA: 0x002670D1 File Offset: 0x002652D1
				public override void PrepareShot()
				{
					this.FirearmsAnimator_0.SetFire(this.FirearmController_0.IsTriggerPressed);
				}

				// Token: 0x06015E6A RID: 89706 RVA: 0x007301F0 File Offset: 0x0072E3F0
				public override void OnFireEvent()
				{
					this.Bool_1 = true;
					this.AmmoItemClass = (this.Weapon_0.FirstLoadedChamberSlot.ContainedItem as AmmoItemClass);
					if (this.AmmoItemClass == null)
					{
						return;
					}
					this.AmmoItemClass.IsUsed = true;
					this.FirearmController_0.method_56(this.AmmoItemClass);
					this.FirearmController_0.Weapon.FirstLoadedChamberSlot.RemoveItem(false);
					this.FirearmController_0.weaponManagerClass.MoveAmmoFromChamberToShellPort(this.AmmoItemClass.IsUsed, 0);
				}

				// Token: 0x06015E6B RID: 89707 RVA: 0x002670E9 File Offset: 0x002652E9
				public override void OnFireEndEvent()
				{
					this.SetTriggerPressed(false);
					this.FirearmsAnimator_0.SetFire(false);
					this.State = Player.EOperationState.Finished;
					this.FirearmController_0.InitiateOperation<Player.FirearmController.GClass2037>().Start(null);
				}

				// Token: 0x06015E6C RID: 89708 RVA: 0x00267116 File Offset: 0x00265316
				public override void SetTriggerPressed(bool pressed)
				{
					this.FirearmController_0.IsTriggerPressed = pressed;
				}

				// Token: 0x06015E6D RID: 89709 RVA: 0x0026712B File Offset: 0x0026532B
				public override bool CanNotBeInterrupted()
				{
					return true;
				}

				// Token: 0x06015E6E RID: 89710 RVA: 0x0026712E File Offset: 0x0026532E
				public override void Reset()
				{
					this.AmmoItemClass = null;
					base.Reset();
				}

				// Token: 0x04012988 RID: 76168
				[NonSerialized]
				public AmmoItemClass AmmoItemClass;
			}

			// Token: 0x020039F0 RID: 14832
			[CompilerGenerated]
			[Serializable]
			public class Class1237
			{
				// Token: 0x06015E71 RID: 89713 RVA: 0x00267151 File Offset: 0x00265351
				public bool method_0(TacticalComboItemClass x)
				{
					return x.Light != null && x.Light.IsActive;
				}

				// Token: 0x06015E72 RID: 89714 RVA: 0x00267168 File Offset: 0x00265368
				public bool method_1(Slot slot)
				{
					return slot.ContainedItem is BipodItemClass;
				}

				// Token: 0x06015E73 RID: 89715 RVA: 0x00267178 File Offset: 0x00265378
				public BipodItemClass method_2(Slot x)
				{
					return x.ContainedItem as BipodItemClass;
				}

				// Token: 0x06015E74 RID: 89716 RVA: 0x00267185 File Offset: 0x00265385
				public bool method_3(Slot slot)
				{
					return slot.ContainedItem is TacticalComboItemClass;
				}

				// Token: 0x06015E75 RID: 89717 RVA: 0x00267195 File Offset: 0x00265395
				public TacticalComboItemClass method_4(Slot x)
				{
					return x.ContainedItem as TacticalComboItemClass;
				}

				// Token: 0x06015E76 RID: 89718 RVA: 0x002671A2 File Offset: 0x002653A2
				public bool method_5(Slot slot)
				{
					return slot.ContainedItem is Mod;
				}

				// Token: 0x06015E77 RID: 89719 RVA: 0x002671B2 File Offset: 0x002653B2
				public Mod method_6(Slot slot)
				{
					return slot.ContainedItem as Mod;
				}

				// Token: 0x06015E78 RID: 89720 RVA: 0x002671BF File Offset: 0x002653BF
				public int method_7(Mod mod)
				{
					return mod.UniqueAnimationModID;
				}

				// Token: 0x06015E79 RID: 89721 RVA: 0x002671C7 File Offset: 0x002653C7
				public Item method_8(Slot x)
				{
					return x.ContainedItem;
				}

				// Token: 0x06015E7A RID: 89722 RVA: 0x002671CF File Offset: 0x002653CF
				public string method_9(LightComponent x)
				{
					return x.Item.Id;
				}

				// Token: 0x06015E7B RID: 89723 RVA: 0x002671DC File Offset: 0x002653DC
				public LightComponent method_10(LightComponent x)
				{
					return x;
				}

				// Token: 0x06015E7C RID: 89724 RVA: 0x002671DF File Offset: 0x002653DF
				public Item method_11(Slot x)
				{
					return x.ContainedItem;
				}

				// Token: 0x06015E7D RID: 89725 RVA: 0x002671E7 File Offset: 0x002653E7
				public string method_12(SightComponent x)
				{
					return x.Item.Id;
				}

				// Token: 0x06015E7E RID: 89726 RVA: 0x002671F4 File Offset: 0x002653F4
				public SightComponent method_13(SightComponent x)
				{
					return x;
				}

				// Token: 0x06015E7F RID: 89727 RVA: 0x002671F7 File Offset: 0x002653F7
				public bool method_14(KeyValuePair<string, LightComponent> x)
				{
					return x.Value.IsActive;
				}

				// Token: 0x06015E80 RID: 89728 RVA: 0x00267205 File Offset: 0x00265405
				public Item method_15(Slot slot)
				{
					return slot.ContainedItem;
				}

				// Token: 0x04012989 RID: 76169
				public static readonly Player.FirearmController.Class1237 class1237_0 = new Player.FirearmController.Class1237();

				// Token: 0x0401298A RID: 76170
				public static Func<TacticalComboItemClass, bool> func_0;

				// Token: 0x0401298B RID: 76171
				public static Func<Slot, bool> func_1;

				// Token: 0x0401298C RID: 76172
				public static Func<Slot, BipodItemClass> func_2;

				// Token: 0x0401298D RID: 76173
				public static Func<Slot, bool> func_3;

				// Token: 0x0401298E RID: 76174
				public static Func<Slot, TacticalComboItemClass> func_4;

				// Token: 0x0401298F RID: 76175
				public static Func<Slot, bool> func_5;

				// Token: 0x04012990 RID: 76176
				public static Func<Slot, Mod> func_6;

				// Token: 0x04012991 RID: 76177
				public static Func<Mod, int> func_7;

				// Token: 0x04012992 RID: 76178
				public static Func<Slot, Item> func_8;

				// Token: 0x04012993 RID: 76179
				public static Func<LightComponent, string> func_9;

				// Token: 0x04012994 RID: 76180
				public static Func<LightComponent, LightComponent> func_10;

				// Token: 0x04012995 RID: 76181
				public static Func<Slot, Item> func_11;

				// Token: 0x04012996 RID: 76182
				public static Func<SightComponent, string> func_12;

				// Token: 0x04012997 RID: 76183
				public static Func<SightComponent, SightComponent> func_13;

				// Token: 0x04012998 RID: 76184
				public static Func<KeyValuePair<string, LightComponent>, bool> func_14;

				// Token: 0x04012999 RID: 76185
				public static Func<Slot, Item> func_15;
			}

			// Token: 0x020039F1 RID: 14833
			[CompilerGenerated]
			[Serializable]
			public class Class1238<T> where T : Player.FirearmController
			{
				// Token: 0x06015E83 RID: 89731 RVA: 0x00267221 File Offset: 0x00265421
				public bool method_0(Slot slot)
				{
					return slot.ContainedItem is BipodItemClass;
				}

				// Token: 0x06015E84 RID: 89732 RVA: 0x00267231 File Offset: 0x00265431
				public BipodItemClass method_1(Slot x)
				{
					return x.ContainedItem as BipodItemClass;
				}

				// Token: 0x06015E85 RID: 89733 RVA: 0x0026723E File Offset: 0x0026543E
				public bool method_2(Slot slot)
				{
					return slot.ContainedItem is TacticalComboItemClass;
				}

				// Token: 0x06015E86 RID: 89734 RVA: 0x0026724E File Offset: 0x0026544E
				public TacticalComboItemClass method_3(Slot x)
				{
					return x.ContainedItem as TacticalComboItemClass;
				}

				// Token: 0x0401299A RID: 76186
				public static readonly Player.FirearmController.Class1238<T> class1238_0 = new Player.FirearmController.Class1238<T>();

				// Token: 0x0401299B RID: 76187
				public static Func<Slot, bool> func_0;

				// Token: 0x0401299C RID: 76188
				public static Func<Slot, BipodItemClass> func_1;

				// Token: 0x0401299D RID: 76189
				public static Func<Slot, bool> func_2;

				// Token: 0x0401299E RID: 76190
				public static Func<Slot, TacticalComboItemClass> func_3;
			}

			// Token: 0x020039F2 RID: 14834
			[CompilerGenerated]
			public class Class1239<T> where T : Player.FirearmController
			{
				// Token: 0x06015E88 RID: 89736 RVA: 0x00267263 File Offset: 0x00265463
				public bool method_0()
				{
					return this.player.AIData != null && this.player.AIData.IsAI && this.player.AIData.BotOwner.LookSensor.ShootFromEyes;
				}

				// Token: 0x06015E89 RID: 89737 RVA: 0x002672A2 File Offset: 0x002654A2
				public bool method_1()
				{
					return this.player.AIData != null && this.player.IsAI && this.player.AIData.IsNoOffsetShooting;
				}

				// Token: 0x06015E8A RID: 89738 RVA: 0x002672D0 File Offset: 0x002654D0
				public void method_2()
				{
					ProceduralWeaponAnimation proceduralWeaponAnimation = this.player.ProceduralWeaponAnimation;
					proceduralWeaponAnimation.AvailableScopesChanged = (Action)Delegate.Remove(proceduralWeaponAnimation.AvailableScopesChanged, new Action(this.controller.ValidateCurrentScopeIndex));
				}

				// Token: 0x06015E8B RID: 89739 RVA: 0x00267308 File Offset: 0x00265508
				public void method_3()
				{
					this.controller.firearmsAnimator_0.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x06015E8C RID: 89740 RVA: 0x0026732A File Offset: 0x0026552A
				public void method_4(bool visible)
				{
					this.controller.weaponManagerClass.SetVisiblePatronInWeapon(visible, 0);
				}

				// Token: 0x06015E8D RID: 89741 RVA: 0x00267343 File Offset: 0x00265543
				public void method_5()
				{
					this.controller.firearmsAnimator_0.SetPatronInWeaponVisibleEvent -= this.method_4;
				}

				// Token: 0x06015E8E RID: 89742 RVA: 0x00730278 File Offset: 0x0072E478
				public void method_6()
				{
					this.controller._player.Skills.WeaponMastered -= this.controller.OnCurrentWeaponBeingMastered;
					this.controller._player.Skills.OnSkillLevelChanged -= this.controller.method_3;
					this.controller._player.MovementContext.PhysicalConditionChanged -= this.controller.method_4;
				}

				// Token: 0x0401299F RID: 76191
				public Player player;

				// Token: 0x040129A0 RID: 76192
				public T controller;
			}

			// Token: 0x020039F3 RID: 14835
			[CompilerGenerated]
			public class Class1240
			{
				// Token: 0x06015E90 RID: 89744 RVA: 0x0026736E File Offset: 0x0026556E
				public void method_0(Player.AbstractHandsController oldController, Player.AbstractHandsController newController)
				{
					if (oldController != this.firearmController)
					{
						return;
					}
					this.firearmController_0._player.OnHandsControllerChanged -= this.method_0;
					GInterface73 ginterface = this.modAudioController;
					if (ginterface == null)
					{
						return;
					}
					ginterface.Clear();
				}

				// Token: 0x040129A1 RID: 76193
				public Player.FirearmController firearmController;

				// Token: 0x040129A2 RID: 76194
				public Player.FirearmController firearmController_0;

				// Token: 0x040129A3 RID: 76195
				public GInterface73 modAudioController;
			}

			// Token: 0x020039F4 RID: 14836
			[CompilerGenerated]
			public class Class1241
			{
				// Token: 0x06015E92 RID: 89746 RVA: 0x00730318 File Offset: 0x0072E518
				public void method_0()
				{
					this.callback();
					this.firearmController_0._player.MovementContext.OnStateChanged += this.firearmController_0.method_17;
					this.firearmController_0._player.Physical.OnSprintStateChangedEvent += this.firearmController_0.method_16;
				}

				// Token: 0x040129A4 RID: 76196
				public Action callback;

				// Token: 0x040129A5 RID: 76197
				public Player.FirearmController firearmController_0;
			}

			// Token: 0x020039F5 RID: 14837
			[CompilerGenerated]
			public class Class1242
			{
				// Token: 0x06015E94 RID: 89748 RVA: 0x002673BB File Offset: 0x002655BB
				public void method_0()
				{
					this.inventoryOperation.Confirm(true);
					this.callback();
				}

				// Token: 0x040129A6 RID: 76198
				public Player.Class1312 inventoryOperation;

				// Token: 0x040129A7 RID: 76199
				public Action callback;
			}
		}

		// Token: 0x0200298D RID: 10637
		public interface GInterface193
		{
			// Token: 0x0601249F RID: 74911
			void OnIdleStartAction();

			// Token: 0x060124A0 RID: 74912
			void OnDrawCompleteAction();

			// Token: 0x060124A1 RID: 74913
			void OnHideCompleteActionAction();

			// Token: 0x060124A2 RID: 74914
			void OnDropGrenadeAction();

			// Token: 0x060124A3 RID: 74915
			void OnDropFinishedAction();

			// Token: 0x060124A4 RID: 74916
			void StartCountdown();

			// Token: 0x060124A5 RID: 74917
			void HideGrenade(Action onHidden, bool fastHide);

			// Token: 0x060124A6 RID: 74918
			void PutGrenadeBack();

			// Token: 0x060124A7 RID: 74919
			void ShowGesture(EInteraction gesture);

			// Token: 0x060124A8 RID: 74920
			bool CanRemove();

			// Token: 0x060124A9 RID: 74921
			void FastForward();

			// Token: 0x060124AA RID: 74922
			void OnBackpackDrop();

			// Token: 0x060124AB RID: 74923
			void Execute(GInterface438 operation, Callback callback);
		}

		// Token: 0x0200298E RID: 10638
		public abstract class BaseGrenadeHandsController : Player.ItemHandsController
		{
			// Token: 0x17002F78 RID: 12152
			// (get) Token: 0x060124AC RID: 74924 RVA: 0x0023F1FB File Offset: 0x0023D3FB
			public new ThrowWeapItemClass Item
			{
				get
				{
					return base.Item as ThrowWeapItemClass;
				}
			}

			// Token: 0x17002F79 RID: 12153
			// (get) Token: 0x060124AD RID: 74925 RVA: 0x0023F208 File Offset: 0x0023D408
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x17002F7A RID: 12154
			// (get) Token: 0x060124AE RID: 74926 RVA: 0x0023F210 File Offset: 0x0023D410
			public Player.GInterface193 GInterface193_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.GInterface193;
				}
			}

			// Token: 0x060124AF RID: 74927 RVA: 0x0023F21D File Offset: 0x0023D41D
			public static T smethod_6<T>(Player player, ThrowWeapItemClass item, bool setQuickThrowParameters) where T : Player.BaseGrenadeHandsController
			{
				T t = Player.ItemHandsController.smethod_0<T>(player, item);
				Player.BaseGrenadeHandsController.smethod_8<T>(t, player, setQuickThrowParameters);
				return t;
			}

			// Token: 0x060124B0 RID: 74928 RVA: 0x0068449C File Offset: 0x0068269C
			public static Task<T> smethod_7<T>(Player player, ThrowWeapItemClass item, bool setQuickThrowParameters) where T : Player.BaseGrenadeHandsController
			{
				Player.BaseGrenadeHandsController.Struct319<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.item = item;
				@struct.setQuickThrowParameters = setQuickThrowParameters;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.BaseGrenadeHandsController.Struct319<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060124B1 RID: 74929 RVA: 0x006844F0 File Offset: 0x006826F0
			public static void smethod_8<T>(T controller, Player player, bool setQuickThrowParameters) where T : Player.BaseGrenadeHandsController
			{
				Player.BaseGrenadeHandsController.Class1244<T> @class = new Player.BaseGrenadeHandsController.Class1244<T>();
				@class.controller = controller;
				@class.player = player;
				WeaponPrefab componentInChildren = @class.controller.ControllerGameObject.GetComponentInChildren<WeaponPrefab>();
				@class.controller.firearmsAnimator_0 = componentInChildren.FirearmsAnimator;
				@class.controller.firearmsAnimator_0.AddEventsConsumer(@class.controller);
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_0));
				@class.controller.transform_0 = @class.player.PlayerBones.WeaponRoot.Original;
				if (setQuickThrowParameters)
				{
					@class.controller.firearmsAnimator_0.SetQuickFire(true);
					@class.controller.firearmsAnimator_0.SetActiveParam(false, true);
				}
				@class.controller.firearmsAnimator_0.SkipTime(0.016666668f);
				@class.controller.grenadePrefab_0 = @class.controller._controllerObject.GetComponent<GrenadePrefab>();
				@class.controller.transform_1 = TransformHelperClass.FindTransformRecursive(@class.player.PlayerBones.WeaponRoot.Original, @class.controller.grenadePrefab_0.ThrowingParts[0], false);
				@class.controller.transform_1.gameObject.SetActive(true);
				@class.controller.transform_2 = @class.controller.grenadePrefab_0.ThrowingParts.Select(new Func<string, Transform>(@class.method_1)).ToArray<Transform>();
				for (int i = 0; i < @class.controller.transform_2.Length; i++)
				{
					@class.controller.transform_2[i].gameObject.SetActive(true);
				}
				@class.controller._player.HandsAnimator = @class.controller.firearmsAnimator_0;
				bool flag = @class.controller._player.UpdateGrenadeAnimatorDuePoV();
				@class.controller.firearmsAnimator_0.Animator.SetFloat("ThirdPersonAnimation", (float)(flag ? 1 : 0));
				@class.player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				@class.player.ProceduralWeaponAnimation.InitTransforms(@class.controller.HandsHierarchy, null);
				componentInChildren.ObjectInHands.AfterGetFromPoolInit(@class.player.ProceduralWeaponAnimation, null, @class.player.IsYourPlayer);
				@class.controller._controllerObject.GetComponent<BaseSoundPlayer>().Init(@class.controller, @class.player.PlayerBones.WeaponRoot, @class.player);
			}

			// Token: 0x060124B2 RID: 74930 RVA: 0x0023F22E File Offset: 0x0023D42E
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_6();
			}

			// Token: 0x060124B3 RID: 74931 RVA: 0x0023F236 File Offset: 0x0023D436
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_5();
			}

			// Token: 0x060124B4 RID: 74932 RVA: 0x0023F23E File Offset: 0x0023D43E
			public override void IEventsConsumerOnFiringBullet()
			{
				this.method_3();
			}

			// Token: 0x060124B5 RID: 74933 RVA: 0x0023F246 File Offset: 0x0023D446
			public override void IEventsConsumerOnIdleStart()
			{
				this.method_4();
			}

			// Token: 0x060124B6 RID: 74934 RVA: 0x0023F24E File Offset: 0x0023D44E
			public override void IEventsConsumerOnFireEnd()
			{
				this.method_2();
			}

			// Token: 0x060124B7 RID: 74935 RVA: 0x0023F256 File Offset: 0x0023D456
			public override void IEventsConsumerOnAddAmmoInChamber()
			{
				this.method_1();
			}

			// Token: 0x060124B8 RID: 74936 RVA: 0x0023F25E File Offset: 0x0023D45E
			public override void IEventsConsumerOnDelAmmoChamber()
			{
				this.method_8();
			}

			// Token: 0x060124B9 RID: 74937 RVA: 0x0023F266 File Offset: 0x0023D466
			public override void IEventsConsumerOnThirdAction(int intParam)
			{
				base.TranslateAnimatorParameter(intParam);
			}

			// Token: 0x060124BA RID: 74938 RVA: 0x0023F26F File Offset: 0x0023D46F
			public override void IEventsConsumerOnCook()
			{
				this.vmethod_0();
			}

			// Token: 0x060124BB RID: 74939 RVA: 0x0023F277 File Offset: 0x0023D477
			public override void IEventsOnBackpackDrop()
			{
				this.method_7();
			}

			// Token: 0x060124BC RID: 74940 RVA: 0x0023F27F File Offset: 0x0023D47F
			public override bool SupportPickup()
			{
				return true;
			}

			// Token: 0x060124BD RID: 74941 RVA: 0x0023F282 File Offset: 0x0023D482
			public override void IEventsConsumerOnOnUseProp(bool boolParam)
			{
				base.SetPropVisibility(boolParam);
			}

			// Token: 0x060124BE RID: 74942 RVA: 0x0023F28B File Offset: 0x0023D48B
			public override void Pickup(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetPickup(p);
				}
			}

			// Token: 0x060124BF RID: 74943 RVA: 0x0023F2A1 File Offset: 0x0023D4A1
			public override void Interact(bool isInteracting, int actionIndex)
			{
				if (this.CanInteract())
				{
					this._player.SendHandsInteractionStateChanged(isInteracting, actionIndex);
					this.firearmsAnimator_0.SetInteract(isInteracting, actionIndex);
				}
			}

			// Token: 0x060124C0 RID: 74944 RVA: 0x0023F2C5 File Offset: 0x0023D4C5
			public override bool CanInteract()
			{
				return this.firearmsAnimator_0.IsIdling() && this.firearmsAnimator_0.Animator.GetBool(WeaponAnimationSpeedControllerClass.BOOL_ACTIVE);
			}

			// Token: 0x060124C1 RID: 74945 RVA: 0x0023F2EB File Offset: 0x0023D4EB
			public override void Loot(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetLooting(p);
				}
			}

			// Token: 0x060124C2 RID: 74946 RVA: 0x0023F301 File Offset: 0x0023D501
			public override float GetAnimatorFloatParam(int hash)
			{
				return this.firearmsAnimator_0.GetAnimatorParameter(hash);
			}

			// Token: 0x060124C3 RID: 74947 RVA: 0x0023F30F File Offset: 0x0023D50F
			public override bool IsInInteraction()
			{
				return this.firearmsAnimator_0.IsInInteraction;
			}

			// Token: 0x060124C4 RID: 74948 RVA: 0x006847D4 File Offset: 0x006829D4
			public override bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction() || this.firearmsAnimator_0.GetLayerWeight(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX) >= float.Epsilon || this.firearmsAnimator_0.Animator.IsInTransition(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX);
			}

			// Token: 0x060124C5 RID: 74949 RVA: 0x0023F31C File Offset: 0x0023D51C
			public override void Spawn(float animationSpeed, Action callback)
			{
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
			}

			// Token: 0x060124C6 RID: 74950 RVA: 0x00684824 File Offset: 0x00682A24
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.BaseGrenadeHandsController.Class1245 @class = new Player.BaseGrenadeHandsController.Class1245();
				@class.baseGrenadeHandsController_0 = this;
				@class.animationSpeed = animationSpeed;
				@class.callback = callback;
				@class.fastDrop = fastDrop;
				Callback<IHandsThrowController> callback2 = new Callback<IHandsThrowController>(@class.method_0);
				Player.GrenadeHandsController grenadeHandsController = this as Player.GrenadeHandsController;
				if (this.CanRemove())
				{
					callback2(grenadeHandsController);
					return;
				}
				if (grenadeHandsController != null)
				{
					grenadeHandsController.SetOnUsedCallback(callback2);
				}
			}

			// Token: 0x060124C7 RID: 74951 RVA: 0x0068488C File Offset: 0x00682A8C
			public virtual void ActualDrop(Result<IHandsThrowController> controller, float animationSpeed, Action callback, bool fastDrop)
			{
				Player.BaseGrenadeHandsController.Class1246 @class = new Player.BaseGrenadeHandsController.Class1246();
				@class.callback = callback;
				if (base.Destroyed)
				{
					this.GInterface193_0.HideGrenade(@class.callback, fastDrop);
					return;
				}
				base.Destroyed = true;
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				@class.inventoryOperation = this._player.method_138(this.Item);
				Action onHidden = new Action(@class.method_0);
				this.GInterface193_0.HideGrenade(onHidden, fastDrop);
			}

			// Token: 0x060124C8 RID: 74952 RVA: 0x0023F32A File Offset: 0x0023D52A
			public override void Destroy()
			{
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this.firearmsAnimator_0 = null;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x060124C9 RID: 74953 RVA: 0x0023F35A File Offset: 0x0023D55A
			public void method_1()
			{
				this.GInterface193_0.StartCountdown();
			}

			// Token: 0x060124CA RID: 74954 RVA: 0x00684908 File Offset: 0x00682B08
			public virtual void vmethod_0()
			{
				if (this.grenadeEmission_0 != null)
				{
					return;
				}
				this.grenadeEmission_0 = Singleton<Effects>.Instance.GetEmissionEffect(this.grenadePrefab_0.GrenadeItself.EmmisionEffect);
				this.grenadeEmission_0.AttachTo(this.transform_1, this.grenadePrefab_0.GrenadeItself.Offset);
				this.grenadeEmission_0.SetFillParams(0f, this.Item.EmitTime);
				this.grenadeEmission_0.StartEmission(0f);
			}

			// Token: 0x060124CB RID: 74955 RVA: 0x0023F367 File Offset: 0x0023D567
			public void method_2()
			{
				this.GInterface193_0.OnDropFinishedAction();
			}

			// Token: 0x060124CC RID: 74956 RVA: 0x0023F374 File Offset: 0x0023D574
			public void method_3()
			{
				this.GInterface193_0.OnDropGrenadeAction();
			}

			// Token: 0x060124CD RID: 74957 RVA: 0x0023F381 File Offset: 0x0023D581
			public void method_4()
			{
				this.GInterface193_0.OnIdleStartAction();
			}

			// Token: 0x060124CE RID: 74958 RVA: 0x0023F38E File Offset: 0x0023D58E
			public void method_5()
			{
				this.GInterface193_0.OnHideCompleteActionAction();
			}

			// Token: 0x060124CF RID: 74959 RVA: 0x0023F39B File Offset: 0x0023D59B
			public void method_6()
			{
				this.GInterface193_0.OnDrawCompleteAction();
			}

			// Token: 0x060124D0 RID: 74960 RVA: 0x0023F3A8 File Offset: 0x0023D5A8
			public override bool CanExecute(GInterface438 operation)
			{
				return true;
			}

			// Token: 0x060124D1 RID: 74961 RVA: 0x0023F3AB File Offset: 0x0023D5AB
			public override void Execute(GInterface438 operation, Callback callback)
			{
				this.GInterface193_0.Execute(operation, callback);
			}

			// Token: 0x060124D2 RID: 74962 RVA: 0x0023F3BA File Offset: 0x0023D5BA
			public override void ShowGesture(EInteraction gesture)
			{
				this.GInterface193_0.ShowGesture(gesture);
			}

			// Token: 0x060124D3 RID: 74963 RVA: 0x0023F3C8 File Offset: 0x0023D5C8
			public void method_7()
			{
				this.GInterface193_0.OnBackpackDrop();
			}

			// Token: 0x060124D4 RID: 74964 RVA: 0x0023F3D5 File Offset: 0x0023D5D5
			public void method_8()
			{
				this.GInterface193_0.PutGrenadeBack();
			}

			// Token: 0x060124D5 RID: 74965 RVA: 0x00684990 File Offset: 0x00682B90
			public virtual void vmethod_1(float timeSinceSafetyLevelRemoved, bool low = false)
			{
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this._player.Spirit.IsActive)
				{
					this._player.Spirit.PlayerSync();
				}
				float num = 1f;
				Vector3 direction = Vector3.up;
				Vector3? throwPosition = null;
				float forcePower = 3f;
				bool flag = this._player.IsAI && this._player.AIData.BotOwner.BotState == EBotState.Active;
				if (this._player.HealthController.IsAlive)
				{
					if (flag)
					{
						try
						{
							BotGrenadeController grenades = this._player.AIData.BotOwner.WeaponManager.Grenades;
							float num2 = (grenades.Mass <= 0.01f) ? 0.5f : grenades.Mass;
							forcePower = grenades.AIGreanageThrowData.Force * num2;
							direction = GClass855.NormalizeFastSelf(grenades.ToThrowDirection);
							Vector3 direction2 = grenades.AIGreanageThrowData.Direction;
							throwPosition = new Vector3?(this.FindThrowPosition());
							goto IL_1E8;
						}
						catch (Exception)
						{
							return;
						}
					}
					num = (low ? 0.66f : (1f + this._player.Skills.StrengthBuffThrowDistanceInc));
					forcePower = EFTHardSettings.Instance.GrenadeForce;
					if (!this._player.Skills.ThrowingEliteBuff)
					{
						Vector3 b = Mathf.Clamp01(0.5f - this._player.Physical.HandsStamina.NormalValue) * UnityEngine.Random.onUnitSphere;
						direction = (-this.transform_0.up * 5f + b).normalized;
						num *= Mathf.Lerp(0.4f, 1f, this._player.Physical.HandsStamina.NormalValue + 0.5f);
					}
					else
					{
						direction = -this.transform_0.up;
					}
					IL_1E8:
					this.method_9(throwPosition, timeSinceSafetyLevelRemoved, num, direction, forcePower, low, !flag);
				}
			}

			// Token: 0x060124D6 RID: 74966 RVA: 0x00684BA8 File Offset: 0x00682DA8
			public void method_9(Vector3? throwPosition, float timeSinceSafetyLevelRemoved, float lowHighThrow, Vector3 direction, float forcePower, bool lowThrow, bool withVelocity)
			{
				Vector3 vector = direction * (forcePower * lowHighThrow);
				if (withVelocity)
				{
					vector += this._player.Velocity;
				}
				if (throwPosition == null)
				{
					throwPosition = new Vector3?(this.FindThrowPosition());
				}
				this.vmethod_2(timeSinceSafetyLevelRemoved, throwPosition.Value, this.transform_1.rotation, vector, lowThrow);
			}

			// Token: 0x060124D7 RID: 74967 RVA: 0x00684C0C File Offset: 0x00682E0C
			public Vector3 FindThrowPosition()
			{
				Vector3 vector = this.transform_1.position + this.transform_1.rotation * this.grenadePrefab_0.GrenadeItself.Offset;
				RaycastHit raycastHit;
				Vector3 vector2;
				if (Player.BaseGrenadeHandsController.CheckHandsToBodyObstacles(this._player, vector, out raycastHit, out vector2))
				{
					vector = vector2;
				}
				return vector;
			}

			// Token: 0x060124D8 RID: 74968 RVA: 0x00684C60 File Offset: 0x00682E60
			public static bool CheckHandsToBodyObstacles(Player player, Vector3 point, out RaycastHit hit, out Vector3 correctedPoint)
			{
				Vector3 projectionOnRealForwardSurface = player.MovementContext.GetProjectionOnRealForwardSurface(point);
				bool flag2;
				bool flag = EFTPhysicsClass.LinecastInBothSides(projectionOnRealForwardSurface, point, out hit, out flag2, LayerMasksDataAbstractClass.StaticObjectsHitMask, LayerMasksDataAbstractClass.StaticObjectsHitMask, Player.BaseGrenadeHandsController.raycastHit_0, Player.BaseGrenadeHandsController.func_0);
				if (flag)
				{
					correctedPoint = hit.point - (point - projectionOnRealForwardSurface).normalized * 0.1f;
					return flag;
				}
				correctedPoint = point;
				return flag;
			}

			// Token: 0x060124D9 RID: 74969 RVA: 0x00684CD0 File Offset: 0x00682ED0
			public Grenade method_10(Vector3 position, Quaternion rotation, Vector3 force, float prewarm = 0f)
			{
				GrenadeSettings grenadeSettings = UnityEngine.Object.Instantiate<GrenadeSettings>(this.grenadePrefab_0.GrenadeItself);
				Grenade grenade = Singleton<GInterface169>.Instance.GrenadeFactory.Create(grenadeSettings, position, rotation, force, this.Item, this._player.ProfileId, prewarm, true, false);
				Singleton<GInterface169>.Instance.RegisterGrenade(grenade);
				return grenade;
			}

			// Token: 0x060124DA RID: 74970 RVA: 0x00684D24 File Offset: 0x00682F24
			public virtual void vmethod_2(float timeSinceSafetyLevelRemoved, Vector3 position, Quaternion rotation, Vector3 force, bool lowThrow)
			{
				this._player.ExecuteSkill(new Action(this.method_12));
				GStruct154<Player.GClass2060> gstruct = this._player.method_139(this.Item, lowThrow, false);
				if (gstruct.Succeeded)
				{
					gstruct.Value.RaiseEvents(this._player.InventoryController, CommandStatus.Begin);
					gstruct.Value.RaiseEvents(this._player.InventoryController, CommandStatus.Succeed);
					Grenade grenade = this.method_10(position, rotation, force, timeSinceSafetyLevelRemoved);
					SmokeGrenade smokeGrenade = grenade as SmokeGrenade;
					if (smokeGrenade != null)
					{
						if (this.grenadeEmission_0 == null)
						{
							this.vmethod_0();
						}
						if (this.grenadeEmission_0 != null)
						{
							this.grenadeEmission_0.AttachTo(smokeGrenade.transform, Vector3.zero);
							SmokeGrenade smokeGrenade2 = smokeGrenade;
							smokeGrenade2.EmissionEnd = (Action<Grenade>)Delegate.Combine(smokeGrenade2.EmissionEnd, new Action<Grenade>(this.grenadeEmission_0.StopEmission));
							smokeGrenade.VelocityBelowThreshold += this.grenadeEmission_0.Stall;
						}
					}
					Transform[] array = this.transform_2;
					for (int i = 0; i < array.Length; i++)
					{
						array[i].gameObject.SetActive(false);
					}
					if (Singleton<BotEventHandler>.Instantiated)
					{
						if (this._player.IsAI)
						{
							grenade.SetRigidbodyMass(0.5f);
							Singleton<BotEventHandler>.Instance.ThrowGrenade(grenade, position + Vector3.up, force, 0.5f);
							return;
						}
						Singleton<BotEventHandler>.Instance.ThrowGrenade(grenade, position + Vector3.up, force, 0.6f);
					}
					return;
				}
				string str = "Couldn't throw grenade: ";
				Error error = gstruct.Error;
				UnityEngine.Debug.LogError(str + ((error != null) ? error.ToString() : null));
			}

			// Token: 0x060124DB RID: 74971 RVA: 0x0023F3E2 File Offset: 0x0023D5E2
			public bool method_11(out PlantingKitsItemClass plantingKit)
			{
				plantingKit = this._player.InventoryController.Inventory.Equipment.GetAllItems().OfType<PlantingKitsItemClass>().FirstOrDefault<PlantingKitsItemClass>();
				return plantingKit != null;
			}

			// Token: 0x060124DC RID: 74972 RVA: 0x0023F40F File Offset: 0x0023D60F
			public override void FastForwardCurrentState()
			{
				this.GInterface193_0.FastForward();
			}

			// Token: 0x060124DD RID: 74973 RVA: 0x0023F41C File Offset: 0x0023D61C
			public BaseGrenadeHandsController()
			{
			}

			// Token: 0x060124DF RID: 74975 RVA: 0x0023F446 File Offset: 0x0023D646
			[CompilerGenerated]
			public void method_12()
			{
				this._player.Skills.ThrowAction.Complete(1f);
			}

			// Token: 0x0400EDD8 RID: 60888
			public const float MASS = 0.6f;

			// Token: 0x0400EDD9 RID: 60889
			protected FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400EDDA RID: 60890
			private const string string_0 = "fireport";

			// Token: 0x0400EDDB RID: 60891
			protected Transform transform_0;

			// Token: 0x0400EDDC RID: 60892
			protected Transform transform_1;

			// Token: 0x0400EDDD RID: 60893
			protected Transform[] transform_2;

			// Token: 0x0400EDDE RID: 60894
			protected GrenadePrefab grenadePrefab_0;

			// Token: 0x0400EDDF RID: 60895
			protected GrenadeEmission grenadeEmission_0;

			// Token: 0x0400EDE0 RID: 60896
			private static readonly RaycastHit[] raycastHit_0 = new RaycastHit[8];

			// Token: 0x0400EDE1 RID: 60897
			private static Func<RaycastHit, bool> func_0 = new Func<RaycastHit, bool>(Player.BaseGrenadeHandsController.Class1243.class1243_0.method_0);

			// Token: 0x020039F8 RID: 14840
			[CompilerGenerated]
			[Serializable]
			public class Class1243
			{
				// Token: 0x06015E9B RID: 89755 RVA: 0x00267404 File Offset: 0x00265604
				public bool method_0(RaycastHit raycastHit)
				{
					return false;
				}

				// Token: 0x040129B8 RID: 76216
				public static readonly Player.BaseGrenadeHandsController.Class1243 class1243_0 = new Player.BaseGrenadeHandsController.Class1243();
			}

			// Token: 0x020039F9 RID: 14841
			[CompilerGenerated]
			public class Class1244<T> where T : Player.BaseGrenadeHandsController
			{
				// Token: 0x06015E9D RID: 89757 RVA: 0x0026740F File Offset: 0x0026560F
				public void method_0()
				{
					this.controller.firearmsAnimator_0.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x06015E9E RID: 89758 RVA: 0x00267431 File Offset: 0x00265631
				public Transform method_1(string x)
				{
					return TransformHelperClass.FindTransformRecursive(this.player.PlayerBones.WeaponRoot.Original, x, false);
				}

				// Token: 0x040129B9 RID: 76217
				public T controller;

				// Token: 0x040129BA RID: 76218
				public Player player;
			}

			// Token: 0x020039FA RID: 14842
			[CompilerGenerated]
			public class Class1245
			{
				// Token: 0x06015EA0 RID: 89760 RVA: 0x00267457 File Offset: 0x00265657
				public void method_0(Result<IHandsThrowController> result)
				{
					this.baseGrenadeHandsController_0.ActualDrop(result, this.animationSpeed, this.callback, this.fastDrop);
				}

				// Token: 0x040129BB RID: 76219
				public Player.BaseGrenadeHandsController baseGrenadeHandsController_0;

				// Token: 0x040129BC RID: 76220
				public float animationSpeed;

				// Token: 0x040129BD RID: 76221
				public Action callback;

				// Token: 0x040129BE RID: 76222
				public bool fastDrop;
			}

			// Token: 0x020039FB RID: 14843
			[CompilerGenerated]
			public class Class1246
			{
				// Token: 0x06015EA2 RID: 89762 RVA: 0x0026747F File Offset: 0x0026567F
				public void method_0()
				{
					this.inventoryOperation.Confirm(true);
					this.callback();
				}

				// Token: 0x040129BF RID: 76223
				public Player.Class1312 inventoryOperation;

				// Token: 0x040129C0 RID: 76224
				public Action callback;
			}
		}

		// Token: 0x0200298F RID: 10639
		public class GrenadeHandsController : Player.BaseGrenadeHandsController, IHandsThrowController, GInterface199, IHandsController, GInterface197
		{
			// Token: 0x060124E0 RID: 74976 RVA: 0x0023F462 File Offset: 0x0023D662
			public static T smethod_9<T>(Player player, ThrowWeapItemClass item) where T : Player.GrenadeHandsController
			{
				return Player.BaseGrenadeHandsController.smethod_6<T>(player, item, false);
			}

			// Token: 0x060124E1 RID: 74977 RVA: 0x0023F46C File Offset: 0x0023D66C
			public static Task<T> smethod_10<T>(Player player, ThrowWeapItemClass item) where T : Player.GrenadeHandsController
			{
				return Player.BaseGrenadeHandsController.smethod_7<T>(player, item, false);
			}

			// Token: 0x17002F7B RID: 12155
			// (get) Token: 0x060124E2 RID: 74978 RVA: 0x0023F476 File Offset: 0x0023D676
			public Player.GrenadeHandsController.Class1272 CurrentOperation
			{
				get
				{
					return base.CurrentHandsOperation as Player.GrenadeHandsController.Class1272;
				}
			}

			// Token: 0x17002F7C RID: 12156
			// (get) Token: 0x060124E3 RID: 74979 RVA: 0x00684ED0 File Offset: 0x006830D0
			public bool WaitingForHighThrow
			{
				get
				{
					Player.GrenadeHandsController.Class1275 @class = this.CurrentOperation as Player.GrenadeHandsController.Class1275;
					return @class != null && @class.WaitingHighThrow;
				}
			}

			// Token: 0x17002F7D RID: 12157
			// (get) Token: 0x060124E4 RID: 74980 RVA: 0x0023F483 File Offset: 0x0023D683
			public new ThrowWeapItemClass Item
			{
				get
				{
					return base.Item;
				}
			}

			// Token: 0x17002F7E RID: 12158
			// (get) Token: 0x060124E5 RID: 74981 RVA: 0x0023F48B File Offset: 0x0023D68B
			// (set) Token: 0x060124E6 RID: 74982 RVA: 0x0023F493 File Offset: 0x0023D693
			public Weapon.EFireMode CurrentFireMode { get; set; } = Weapon.EFireMode.grenadeThrowing;

			// Token: 0x060124E7 RID: 74983 RVA: 0x00684EF4 File Offset: 0x006830F4
			public override bool CanExecute(GInterface438 operation)
			{
				GInterface443 ginterface = operation as GInterface443;
				return ginterface == null || !this._player.InventoryController.IsAnimatedSlot(ginterface.From1) || this.CurrentOperation is Player.GrenadeHandsController.Class1277 || this.CurrentOperation is Player.GrenadeHandsController.TripwireStateManagerClass;
			}

			// Token: 0x060124E8 RID: 74984 RVA: 0x0023F49C File Offset: 0x0023D69C
			public override void Execute(GInterface438 operation, Callback callback)
			{
				base.GInterface193_0.Execute(operation, callback);
			}

			// Token: 0x060124E9 RID: 74985 RVA: 0x0023F4AB File Offset: 0x0023D6AB
			public override void Spawn(float animationSpeed, Action callback)
			{
				base.InitiateOperation<Player.GrenadeHandsController.Class1280>().Start(callback);
				base.Spawn(animationSpeed, callback);
			}

			// Token: 0x060124EA RID: 74986 RVA: 0x0023F4C1 File Offset: 0x0023D6C1
			public virtual void ExamineWeapon()
			{
				this.CurrentOperation.ExamineWeapon();
			}

			// Token: 0x060124EB RID: 74987 RVA: 0x0023F4CE File Offset: 0x0023D6CE
			public virtual void PullRingForHighThrow()
			{
				this.CurrentOperation.PullRingForHighThrow();
			}

			// Token: 0x060124EC RID: 74988 RVA: 0x0023F4DB File Offset: 0x0023D6DB
			public virtual void HighThrow()
			{
				this.CurrentOperation.HighThrow();
			}

			// Token: 0x060124ED RID: 74989 RVA: 0x0023F4E8 File Offset: 0x0023D6E8
			public void SetFireModeVisual(Weapon.EFireMode fireMode)
			{
				Action<Weapon.EFireMode> onShowFireMode = this._player.OnShowFireMode;
				if (onShowFireMode == null)
				{
					return;
				}
				onShowFireMode(fireMode);
			}

			// Token: 0x060124EE RID: 74990 RVA: 0x0023F500 File Offset: 0x0023D700
			public bool CanChangeFireMode(Weapon.EFireMode fireMode)
			{
				return this.CurrentOperation.CanChangeFireMode(fireMode);
			}

			// Token: 0x060124EF RID: 74991 RVA: 0x0023F50E File Offset: 0x0023D70E
			public virtual void ChangeFireMode(Weapon.EFireMode fireMode)
			{
				this.CurrentOperation.ChangeFireMode(fireMode);
			}

			// Token: 0x060124F0 RID: 74992 RVA: 0x00684F44 File Offset: 0x00683144
			public virtual void HandleFireInput()
			{
				if (this.WaitingForHighThrow)
				{
					this.HighThrow();
					return;
				}
				Player.GrenadeHandsController.Class1272 currentOperation = this.CurrentOperation;
				if (currentOperation is Player.GrenadeHandsController.Class1277)
				{
					this.PullRingForHighThrow();
					return;
				}
				Player.GrenadeHandsController.TripwireStateManagerClass tripwireStateManagerClass = currentOperation as Player.GrenadeHandsController.TripwireStateManagerClass;
				if (tripwireStateManagerClass == null)
				{
					return;
				}
				tripwireStateManagerClass.HandleFireInput();
			}

			// Token: 0x060124F1 RID: 74993 RVA: 0x00684F88 File Offset: 0x00683188
			public virtual void HandleAltFireInput()
			{
				if (this.WaitingForLowThrow)
				{
					this.LowThrow();
					return;
				}
				Player.GrenadeHandsController.Class1272 currentOperation = this.CurrentOperation;
				if (currentOperation is Player.GrenadeHandsController.Class1277)
				{
					this.PullRingForLowThrow();
					return;
				}
				Player.GrenadeHandsController.TripwireStateManagerClass tripwireStateManagerClass = currentOperation as Player.GrenadeHandsController.TripwireStateManagerClass;
				if (tripwireStateManagerClass == null)
				{
					return;
				}
				tripwireStateManagerClass.HandleAltFireInput();
			}

			// Token: 0x060124F2 RID: 74994 RVA: 0x0023F51C File Offset: 0x0023D71C
			public virtual void PlantTripwire()
			{
				this.CurrentOperation.PlantTripwire();
			}

			// Token: 0x17002F7F RID: 12159
			// (get) Token: 0x060124F3 RID: 74995 RVA: 0x00684FCC File Offset: 0x006831CC
			public bool WaitingForLowThrow
			{
				get
				{
					Player.GrenadeHandsController.Class1276 @class = this.CurrentOperation as Player.GrenadeHandsController.Class1276;
					return @class != null && @class.WaitingLowThrow;
				}
			}

			// Token: 0x060124F4 RID: 74996 RVA: 0x0023F529 File Offset: 0x0023D729
			public virtual void PullRingForLowThrow()
			{
				this.CurrentOperation.PullRingForLowThrow();
			}

			// Token: 0x060124F5 RID: 74997 RVA: 0x0023F536 File Offset: 0x0023D736
			public virtual void LowThrow()
			{
				this.CurrentOperation.LowThrow();
			}

			// Token: 0x060124F6 RID: 74998 RVA: 0x0023F543 File Offset: 0x0023D743
			public virtual void SetOnUsedCallback(Callback<IHandsThrowController> callback)
			{
				this.callback_0 = callback;
			}

			// Token: 0x060124F7 RID: 74999 RVA: 0x0023F54C File Offset: 0x0023D74C
			public override void SetInventoryOpened(bool opened)
			{
				if (opened)
				{
					this.SetCompassState(false);
				}
				this.CurrentOperation.SetInventoryOpened(opened);
			}

			// Token: 0x060124F8 RID: 75000 RVA: 0x0023F564 File Offset: 0x0023D764
			public override bool IsInventoryOpen()
			{
				return this.firearmsAnimator_0.IsInInventory;
			}

			// Token: 0x060124F9 RID: 75001 RVA: 0x0023F571 File Offset: 0x0023D771
			public override bool CanRemove()
			{
				return this.CurrentOperation.CanRemove();
			}

			// Token: 0x060124FA RID: 75002 RVA: 0x0023F57E File Offset: 0x0023D77E
			public virtual void vmethod_3()
			{
			}

			// Token: 0x060124FB RID: 75003 RVA: 0x0023F580 File Offset: 0x0023D780
			public virtual bool CanThrow()
			{
				return this._player.StateIsSuitableForHandInput;
			}

			// Token: 0x060124FC RID: 75004 RVA: 0x0023F58D File Offset: 0x0023D78D
			public override void SetCompassState(bool active)
			{
				if (this.CanChangeCompassState(active))
				{
					this.CurrentOperation.SetGrenadeCompassState(active);
				}
			}

			// Token: 0x060124FD RID: 75005 RVA: 0x00684FF0 File Offset: 0x006831F0
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.GrenadeHandsController.Class1280),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_13)
					},
					{
						typeof(Player.GrenadeHandsController.Class1277),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_14)
					},
					{
						typeof(Player.GrenadeHandsController.Class1279),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_15)
					},
					{
						typeof(Player.GrenadeHandsController.Class1275),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_16)
					},
					{
						typeof(Player.GrenadeHandsController.Class1276),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_17)
					},
					{
						typeof(Player.GrenadeHandsController.TripwireStateManagerClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_18)
					},
					{
						typeof(Player.GrenadeHandsController.Class1273),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_19)
					}
				};
			}

			// Token: 0x060124FF RID: 75007 RVA: 0x0023F5B3 File Offset: 0x0023D7B3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_13()
			{
				return new Player.GrenadeHandsController.Class1280(this);
			}

			// Token: 0x06012500 RID: 75008 RVA: 0x0023F5BB File Offset: 0x0023D7BB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_14()
			{
				return new Player.GrenadeHandsController.Class1277(this);
			}

			// Token: 0x06012501 RID: 75009 RVA: 0x0023F5C3 File Offset: 0x0023D7C3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_15()
			{
				return new Player.GrenadeHandsController.Class1279(this);
			}

			// Token: 0x06012502 RID: 75010 RVA: 0x0023F5CB File Offset: 0x0023D7CB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_16()
			{
				return new Player.GrenadeHandsController.Class1275(this);
			}

			// Token: 0x06012503 RID: 75011 RVA: 0x0023F5D3 File Offset: 0x0023D7D3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_17()
			{
				return new Player.GrenadeHandsController.Class1276(this);
			}

			// Token: 0x06012504 RID: 75012 RVA: 0x0023F5DB File Offset: 0x0023D7DB
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_18()
			{
				return new Player.GrenadeHandsController.TripwireStateManagerClass(this);
			}

			// Token: 0x06012505 RID: 75013 RVA: 0x0023F5E3 File Offset: 0x0023D7E3
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_19()
			{
				return new Player.GrenadeHandsController.Class1273(this);
			}

			// Token: 0x0400EDE2 RID: 60898
			private bool bool_0;

			// Token: 0x0400EDE3 RID: 60899
			private Callback<IHandsThrowController> callback_0;

			// Token: 0x0400EDE4 RID: 60900
			[CompilerGenerated]
			private Weapon.EFireMode efireMode_0;

			// Token: 0x020039FD RID: 14845
			public class Class1273 : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x06015EA5 RID: 89765 RVA: 0x002674A6 File Offset: 0x002656A6
				public Class1273(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EA6 RID: 89766 RVA: 0x0073148C File Offset: 0x0072F68C
				public virtual void Start(Item item, Callback callback)
				{
					this.Callback_0 = callback;
					base.Start();
					this.Gparam_0.FirearmsAnimator.SetInventory(false);
					this.Gparam_0._player.SendHandsInteractionStateChanged(true, 300);
					this.Gparam_0._player.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
				}

				// Token: 0x06015EA7 RID: 89767 RVA: 0x002674AF File Offset: 0x002656AF
				public void Setup(Player.GrenadeHandsController.Class1273.ESourceState sourceState)
				{
					this.EsourceState_0 = sourceState;
				}

				// Token: 0x06015EA8 RID: 89768 RVA: 0x002674B8 File Offset: 0x002656B8
				public override void Reset()
				{
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015EA9 RID: 89769 RVA: 0x007314E4 File Offset: 0x0072F6E4
				public override void OnBackpackDrop()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0._player.SendHandsInteractionStateChanged(false, 300);
					this.Gparam_0.FirearmsAnimator.SetInteract(false, 300);
					this.Gparam_0._player.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
					WeaponAnimationSpeedControllerClass.ResetTriggerHandReady(this.Gparam_0.FirearmsAnimator.Animator);
					this.Gparam_0.FirearmsAnimator.SetInventory(this.Gparam_0.bool_0);
					Player.GrenadeHandsController.Class1273.ESourceState esourceState_ = this.EsourceState_0;
					if (esourceState_ != Player.GrenadeHandsController.Class1273.ESourceState.IdleState)
					{
						if (esourceState_ == Player.GrenadeHandsController.Class1273.ESourceState.PlantTripwireState)
						{
							this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.TripwireStateManagerClass>().Start();
						}
					}
					else
					{
						this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1277>().Start();
					}
					this.Callback_0.Succeed();
				}

				// Token: 0x06015EAA RID: 89770 RVA: 0x002674C7 File Offset: 0x002656C7
				public override void SetInventoryOpened(bool opened)
				{
					this.Gparam_0.bool_0 = opened;
				}

				// Token: 0x040129C7 RID: 76231
				[NonSerialized]
				public Callback Callback_0;

				// Token: 0x040129C8 RID: 76232
				[NonSerialized]
				public Player.GrenadeHandsController.Class1273.ESourceState EsourceState_0;

				// Token: 0x02003B18 RID: 15128
				public enum ESourceState
				{
					// Token: 0x04012DCB RID: 77259
					IdleState,
					// Token: 0x04012DCC RID: 77260
					PlantTripwireState
				}
			}

			// Token: 0x020039FE RID: 14846
			public abstract class Class1272 : Player.Class1271<Player.GrenadeHandsController>
			{
				// Token: 0x06015EAB RID: 89771 RVA: 0x002674D5 File Offset: 0x002656D5
				public Class1272(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EAC RID: 89772 RVA: 0x002674DE File Offset: 0x002656DE
				public virtual void ExamineWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015EAD RID: 89773 RVA: 0x002674E6 File Offset: 0x002656E6
				public virtual void PullRingForHighThrow()
				{
					base.method_0();
				}

				// Token: 0x06015EAE RID: 89774 RVA: 0x002674EE File Offset: 0x002656EE
				public virtual void HighThrow()
				{
					base.method_0();
				}

				// Token: 0x06015EAF RID: 89775 RVA: 0x002674F6 File Offset: 0x002656F6
				public virtual void PullRingForLowThrow()
				{
					base.method_0();
				}

				// Token: 0x06015EB0 RID: 89776 RVA: 0x002674FE File Offset: 0x002656FE
				public virtual void LowThrow()
				{
					base.method_0();
				}

				// Token: 0x06015EB1 RID: 89777 RVA: 0x00267506 File Offset: 0x00265706
				public virtual void ChangeFireMode(Weapon.EFireMode fireMode)
				{
					base.method_0();
				}

				// Token: 0x06015EB2 RID: 89778 RVA: 0x0026750E File Offset: 0x0026570E
				public virtual void HandleFireInput()
				{
					base.method_0();
				}

				// Token: 0x06015EB3 RID: 89779 RVA: 0x00267516 File Offset: 0x00265716
				public virtual void HandleAltFireInput()
				{
					base.method_0();
				}

				// Token: 0x06015EB4 RID: 89780 RVA: 0x0026751E File Offset: 0x0026571E
				public virtual void SetInventoryOpened(bool opened)
				{
					base.method_0();
				}

				// Token: 0x06015EB5 RID: 89781 RVA: 0x00267526 File Offset: 0x00265726
				public virtual void SetGrenadeCompassState(bool active)
				{
					base.method_0();
				}

				// Token: 0x06015EB6 RID: 89782 RVA: 0x0026752E File Offset: 0x0026572E
				public virtual void PlantTripwire()
				{
					base.method_0();
				}

				// Token: 0x06015EB7 RID: 89783 RVA: 0x00267536 File Offset: 0x00265736
				public virtual bool CanChangeFireMode(Weapon.EFireMode fireMode)
				{
					base.method_0();
					return false;
				}
			}

			// Token: 0x020039FF RID: 14847
			public class Class1275 : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x17003550 RID: 13648
				// (get) Token: 0x06015EB8 RID: 89784 RVA: 0x0026753F File Offset: 0x0026573F
				public virtual bool WaitingHighThrow
				{
					get
					{
						return this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Idling;
					}
				}

				// Token: 0x06015EB9 RID: 89785 RVA: 0x0026754A File Offset: 0x0026574A
				public Class1275(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EBA RID: 89786 RVA: 0x00267553 File Offset: 0x00265753
				public new void Start()
				{
					this.Gparam_0._player.Say(EPhraseTrigger.OnGrenade, false, 0f, (ETagStatus)0, 100, false);
					base.Start();
					this.vmethod_0();
					this.EthrowState_0 = Player.GrenadeHandsController.Class1275.EThrowState.Idling;
				}

				// Token: 0x06015EBB RID: 89787 RVA: 0x00267584 File Offset: 0x00265784
				public override void Reset()
				{
					base.Reset();
					this.EthrowState_0 = Player.GrenadeHandsController.Class1275.EThrowState.None;
					this.Action_0 = null;
				}

				// Token: 0x06015EBC RID: 89788 RVA: 0x0026759A File Offset: 0x0026579A
				public virtual void vmethod_0()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Hold);
				}

				// Token: 0x06015EBD RID: 89789 RVA: 0x002675AD File Offset: 0x002657AD
				public override void HighThrow()
				{
					if (this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Throwing)
					{
						if (this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Threw)
						{
							this.EthrowState_0 = Player.GrenadeHandsController.Class1275.EThrowState.Throwing;
							this.Gparam_0.firearmsAnimator_0.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Throw);
							return;
						}
					}
				}

				// Token: 0x06015EBE RID: 89790 RVA: 0x002675DC File Offset: 0x002657DC
				public override void OnDropGrenadeAction()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Idle);
					this.method_2(false);
				}

				// Token: 0x06015EBF RID: 89791 RVA: 0x002675F6 File Offset: 0x002657F6
				public void method_2(bool low = false)
				{
					this.Gparam_0.transform_1.gameObject.SetActive(false);
					this.Gparam_0.vmethod_1(0f, low);
				}

				// Token: 0x06015EC0 RID: 89792 RVA: 0x007315A8 File Offset: 0x0072F7A8
				public override void OnDropFinishedAction()
				{
					if (this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Threw)
					{
						return;
					}
					this.EthrowState_0 = Player.GrenadeHandsController.Class1275.EThrowState.Threw;
					if (this.Gparam_0.Destroyed)
					{
						if (this.Action_0 != null)
						{
							this.Action_0();
						}
						this.Action_0 = null;
						return;
					}
					if (this.Gparam_0.callback_0 != null)
					{
						this.Gparam_0.callback_0(this.Gparam_0);
					}
				}

				// Token: 0x06015EC1 RID: 89793 RVA: 0x00731618 File Offset: 0x0072F818
				public override void HideGrenade(Action onHidden, bool fastHide)
				{
					if (this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Threw)
					{
						onHidden();
						return;
					}
					if (this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Idling && this.Gparam_0.Item.CanBeHiddenDuringThrow)
					{
						this.Action_0 = onHidden;
						this.State = Player.EOperationState.Finished;
						this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1279>().Start(onHidden);
						return;
					}
					this.Action_0 = onHidden;
				}

				// Token: 0x06015EC2 RID: 89794 RVA: 0x0026761F File Offset: 0x0026581F
				public override void HandleFireInput()
				{
					if (this.WaitingHighThrow)
					{
						this.HighThrow();
					}
				}

				// Token: 0x06015EC3 RID: 89795 RVA: 0x0026762F File Offset: 0x0026582F
				public override void SetInventoryOpened(bool opened)
				{
					if (this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Idling && this.Gparam_0.Item.CanBeHiddenDuringThrow)
					{
						this.Gparam_0.firearmsAnimator_0.SetInventory(opened);
						this.PutGrenadeBack();
					}
				}

				// Token: 0x06015EC4 RID: 89796 RVA: 0x00267663 File Offset: 0x00265863
				public void method_3()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1277>().Start();
				}

				// Token: 0x06015EC5 RID: 89797 RVA: 0x0026767C File Offset: 0x0026587C
				public override bool CanRemove()
				{
					return this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Throwing;
				}

				// Token: 0x06015EC6 RID: 89798 RVA: 0x0026768A File Offset: 0x0026588A
				public override void PutGrenadeBack()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeAltFire(FirearmsAnimator.EGrenadeFire.Idle);
					this.Gparam_0.firearmsAnimator_0.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Idle);
					this.method_3();
					this.Gparam_0.vmethod_3();
				}

				// Token: 0x06015EC7 RID: 89799 RVA: 0x002676BF File Offset: 0x002658BF
				public override void FastForward()
				{
					base.FastForward();
					if (this.EthrowState_0 == Player.GrenadeHandsController.Class1275.EThrowState.Idling)
					{
						this.PutGrenadeBack();
						return;
					}
					if (this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Threw)
					{
						UnityEngine.Debug.LogErrorFormat("Throw grenade operation: Fast Forward not implemented for _throwState == {0}", new object[]
						{
							this.EthrowState_0
						});
						return;
					}
				}

				// Token: 0x040129C9 RID: 76233
				[NonSerialized]
				public Player.GrenadeHandsController.Class1275.EThrowState EthrowState_0;

				// Token: 0x040129CA RID: 76234
				[NonSerialized]
				public Action Action_0;

				// Token: 0x02003B19 RID: 15129
				public enum EThrowState
				{
					// Token: 0x04012DCE RID: 77262
					None,
					// Token: 0x04012DCF RID: 77263
					Idling,
					// Token: 0x04012DD0 RID: 77264
					Throwing,
					// Token: 0x04012DD1 RID: 77265
					Threw
				}
			}

			// Token: 0x02003A00 RID: 14848
			public class Class1277 : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x06015EC8 RID: 89800 RVA: 0x002676FF File Offset: 0x002658FF
				public Class1277(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EC9 RID: 89801 RVA: 0x00267708 File Offset: 0x00265908
				public new void Start()
				{
					base.Start();
					this.Gparam_0.FirearmsAnimator.SetFireMode(Weapon.EFireMode.grenadeThrowing, false);
				}

				// Token: 0x06015ECA RID: 89802 RVA: 0x00267722 File Offset: 0x00265922
				public override void HideGrenade(Action onHidden, bool fastHide)
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1279>().Start(onHidden);
				}

				// Token: 0x06015ECB RID: 89803 RVA: 0x0026773C File Offset: 0x0026593C
				public override bool CanRemove()
				{
					return true;
				}

				// Token: 0x06015ECC RID: 89804 RVA: 0x0026773F File Offset: 0x0026593F
				public override void OnEnd()
				{
					this.Gparam_0.SetCompassState(false);
					this.Bool_0 = false;
				}

				// Token: 0x06015ECD RID: 89805 RVA: 0x00267754 File Offset: 0x00265954
				public override void ExamineWeapon()
				{
					this.Gparam_0.firearmsAnimator_0.LookTrigger();
				}

				// Token: 0x06015ECE RID: 89806 RVA: 0x00267766 File Offset: 0x00265966
				public override void HandleFireInput()
				{
					this.PullRingForHighThrow();
				}

				// Token: 0x06015ECF RID: 89807 RVA: 0x0026776E File Offset: 0x0026596E
				public override void HandleAltFireInput()
				{
					this.PullRingForLowThrow();
				}

				// Token: 0x06015ED0 RID: 89808 RVA: 0x00267776 File Offset: 0x00265976
				public override void PullRingForHighThrow()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1275>().Start();
				}

				// Token: 0x06015ED1 RID: 89809 RVA: 0x0026778F File Offset: 0x0026598F
				public override void PullRingForLowThrow()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1276>().Start();
				}

				// Token: 0x06015ED2 RID: 89810 RVA: 0x002677A8 File Offset: 0x002659A8
				public override void LowThrow()
				{
				}

				// Token: 0x06015ED3 RID: 89811 RVA: 0x002677AA File Offset: 0x002659AA
				public override void OnIdleStartAction()
				{
					this.Bool_0 = true;
				}

				// Token: 0x06015ED4 RID: 89812 RVA: 0x00731678 File Offset: 0x0072F878
				public override void ChangeFireMode(Weapon.EFireMode fireMode)
				{
					if (!this.CanChangeFireMode(fireMode))
					{
						return;
					}
					PlantingKitsItemClass plantingKitsItemClass;
					if (!this.Gparam_0.method_11(out plantingKitsItemClass))
					{
						return;
					}
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.SetFireModeVisual(fireMode);
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.TripwireStateManagerClass>().Start();
					this.Gparam_0.CurrentFireMode = fireMode;
				}

				// Token: 0x06015ED5 RID: 89813 RVA: 0x002677B3 File Offset: 0x002659B3
				public override void HighThrow()
				{
				}

				// Token: 0x06015ED6 RID: 89814 RVA: 0x002677B5 File Offset: 0x002659B5
				public override void SetGrenadeCompassState(bool active)
				{
					this.Gparam_0.CompassState.Value = active;
				}

				// Token: 0x06015ED7 RID: 89815 RVA: 0x007316D0 File Offset: 0x0072F8D0
				public override bool CanChangeFireMode(Weapon.EFireMode fireMode)
				{
					bool flag = true;
					PlantingKitsItemClass plantingKitsItemClass;
					if (fireMode != Weapon.EFireMode.greanadePlanting && fireMode != Weapon.EFireMode.grenadeThrowing)
					{
						flag = false;
					}
					else if (!this.Bool_0)
					{
						flag = false;
					}
					else if (!this.Gparam_0.Item.CanPlantOnGround)
					{
						NotificationManagerClass.DisplaySingletonWarningNotification("Tripwire/NoPlantFireMode".Localized(null), ENotificationDurationType.Default);
						flag = false;
					}
					else if (!this.Gparam_0.method_11(out plantingKitsItemClass))
					{
						flag = false;
					}
					if (!flag)
					{
						this.Gparam_0.SetFireModeVisual(Weapon.EFireMode.grenadeThrowing);
					}
					return flag;
				}

				// Token: 0x06015ED8 RID: 89816 RVA: 0x00731740 File Offset: 0x0072F940
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.Gparam_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						this.State = Player.EOperationState.Finished;
						Player.GrenadeHandsController.Class1273 @class = this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1273>();
						@class.Start(ginterface.Item1, callback);
						@class.Setup(Player.GrenadeHandsController.Class1273.ESourceState.IdleState);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015ED9 RID: 89817 RVA: 0x002677C8 File Offset: 0x002659C8
				public override void SetInventoryOpened(bool opened)
				{
					this.Gparam_0.firearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015EDA RID: 89818 RVA: 0x002677DB File Offset: 0x002659DB
				public override void ShowGesture(EInteraction gesture)
				{
					this.Gparam_0.firearmsAnimator_0.Gesture(gesture);
				}

				// Token: 0x040129CB RID: 76235
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A01 RID: 14849
			public class Class1276 : Player.GrenadeHandsController.Class1275
			{
				// Token: 0x17003551 RID: 13649
				// (get) Token: 0x06015EDB RID: 89819 RVA: 0x002677EE File Offset: 0x002659EE
				public override bool WaitingHighThrow
				{
					get
					{
						return false;
					}
				}

				// Token: 0x17003552 RID: 13650
				// (get) Token: 0x06015EDC RID: 89820 RVA: 0x002677F1 File Offset: 0x002659F1
				public bool WaitingLowThrow
				{
					get
					{
						return base.WaitingHighThrow;
					}
				}

				// Token: 0x06015EDD RID: 89821 RVA: 0x002677F9 File Offset: 0x002659F9
				public Class1276(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EDE RID: 89822 RVA: 0x00267802 File Offset: 0x00265A02
				public override void vmethod_0()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeAltFire(FirearmsAnimator.EGrenadeFire.Hold);
				}

				// Token: 0x06015EDF RID: 89823 RVA: 0x00267815 File Offset: 0x00265A15
				public override void HighThrow()
				{
					base.method_0();
				}

				// Token: 0x06015EE0 RID: 89824 RVA: 0x0026781D File Offset: 0x00265A1D
				public override void LowThrow()
				{
					if (this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Throwing)
					{
						if (this.EthrowState_0 != Player.GrenadeHandsController.Class1275.EThrowState.Threw)
						{
							this.EthrowState_0 = Player.GrenadeHandsController.Class1275.EThrowState.Throwing;
							this.Gparam_0.firearmsAnimator_0.SetGrenadeAltFire(FirearmsAnimator.EGrenadeFire.Throw);
							return;
						}
					}
				}

				// Token: 0x06015EE1 RID: 89825 RVA: 0x0026784C File Offset: 0x00265A4C
				public override void OnDropGrenadeAction()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeAltFire(FirearmsAnimator.EGrenadeFire.Idle);
					base.method_2(true);
				}

				// Token: 0x06015EE2 RID: 89826 RVA: 0x00267866 File Offset: 0x00265A66
				public override void HandleAltFireInput()
				{
					if (this.WaitingLowThrow)
					{
						this.LowThrow();
					}
				}
			}

			// Token: 0x02003A02 RID: 14850
			public class TripwireStateManagerClass : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x06015EE3 RID: 89827 RVA: 0x00267876 File Offset: 0x00265A76
				public TripwireStateManagerClass(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x17003553 RID: 13651
				// (get) Token: 0x06015EE4 RID: 89828 RVA: 0x0026787F File Offset: 0x00265A7F
				// (set) Token: 0x06015EE5 RID: 89829 RVA: 0x00267887 File Offset: 0x00265A87
				public Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState EPlantOperationState_0 { get; set; }

				// Token: 0x17003554 RID: 13652
				// (get) Token: 0x06015EE6 RID: 89830 RVA: 0x00267890 File Offset: 0x00265A90
				public ETripwirePlanState ETripwirePlanState_0
				{
					get
					{
						return this.Gparam_0._player.TripwireVisualPlacer_0.TripwirePlanState;
					}
				}

				// Token: 0x06015EE7 RID: 89831 RVA: 0x007317A8 File Offset: 0x0072F9A8
				public new void Start()
				{
					Player player = this.Gparam_0._player;
					if (player.TripwireVisualPlacer_0 == null || !player.TripwireVisualPlacer_0.PlantEnabled)
					{
						player.CreatePlantPlanner();
					}
					player.TripwireVisualPlacer_0.Init(this.Gparam_0.Item);
					this.Gparam_0.FirearmsAnimator.SetFireMode(Weapon.EFireMode.greanadePlanting, false);
					this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.StateIn;
					base.Start();
				}

				// Token: 0x06015EE8 RID: 89832 RVA: 0x002678A7 File Offset: 0x00265AA7
				public override void OnIdleStartAction()
				{
					this.Gparam_0._player.InitFirstTripwirePoint();
					this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling;
				}

				// Token: 0x06015EE9 RID: 89833 RVA: 0x002678C0 File Offset: 0x00265AC0
				public override void OnEnd()
				{
					if (this.ETripwirePlanState_0 != ETripwirePlanState.Planned)
					{
						this.Gparam_0._player.ClearPlanting();
					}
					this.PlantingKitsItemClass = null;
				}

				// Token: 0x06015EEA RID: 89834 RVA: 0x00731818 File Offset: 0x0072FA18
				public override void OnDropFinishedAction()
				{
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planted)
					{
						return;
					}
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planting)
					{
						if (this.PlantingKitsItemClass != null)
						{
							Player.GrenadeHandsController.TripwireStateManagerClass.Class1247 @class = new Player.GrenadeHandsController.TripwireStateManagerClass.Class1247();
							@class.player = this.Gparam_0._player;
							TripwireVisualPlacer tripwireVisualPlacer_ = @class.player.TripwireVisualPlacer_0;
							@class.player.InventoryController.PlantTripwire(this.Gparam_0.Item, this.PlantingKitsItemClass, tripwireVisualPlacer_.FirstPlantPosition, tripwireVisualPlacer_.SecondPlantPosition, new Callback(@class.method_0));
						}
						else
						{
							UnityEngine.Debug.LogError("Failed to plant tripwire: no kits");
						}
					}
					this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planted;
					if (this.Gparam_0.Destroyed)
					{
						Action action_ = this.Action_0;
						if (action_ != null)
						{
							action_();
						}
						this.Action_0 = null;
						return;
					}
					Callback<IHandsThrowController> callback_ = this.Gparam_0.callback_0;
					if (callback_ == null)
					{
						return;
					}
					callback_(this.Gparam_0);
				}

				// Token: 0x06015EEB RID: 89835 RVA: 0x007318F8 File Offset: 0x0072FAF8
				public override void HandleFireInput()
				{
					if (this.EPlantOperationState_0 != Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						return;
					}
					Player player = this.Gparam_0._player;
					PlantingKitsItemClass plantingKitsItemClass;
					if (!this.Gparam_0.method_11(out plantingKitsItemClass))
					{
						NotificationManagerClass.DisplaySingletonWarningNotification("Tripwire/NoKit".Localized(null), ENotificationDurationType.Default);
						UnityEngine.Debug.LogError("Failed to plant tripwire: no kits");
						player.ClearPlanting();
						this.Gparam_0.ChangeFireMode(Weapon.EFireMode.grenadeThrowing);
						return;
					}
					this.PlantingKitsItemClass = plantingKitsItemClass;
					TripwireVisualPlacer tripwireVisualPlacer_ = player.TripwireVisualPlacer_0;
					ETripwirePlanState tripwirePlanState = tripwireVisualPlacer_.TripwirePlanState;
					if (tripwirePlanState == ETripwirePlanState.None)
					{
						player.InitFirstTripwirePoint();
						return;
					}
					if (tripwirePlanState == ETripwirePlanState.FirstPlant)
					{
						player.TripwireVisualPlacer_0.InitSecondPoint();
						return;
					}
					if (tripwirePlanState == ETripwirePlanState.SecondPlant)
					{
						if (!tripwireVisualPlacer_.CanStartPlanting())
						{
							return;
						}
						this.Gparam_0.PlantTripwire();
					}
				}

				// Token: 0x06015EEC RID: 89836 RVA: 0x002678E2 File Offset: 0x00265AE2
				public override void HandleAltFireInput()
				{
					if (this.EPlantOperationState_0 != Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						return;
					}
					if (this.ETripwirePlanState_0 == ETripwirePlanState.SecondPlant)
					{
						this.Gparam_0._player.InitFirstTripwirePoint();
					}
				}

				// Token: 0x06015EED RID: 89837 RVA: 0x007319A0 File Offset: 0x0072FBA0
				public override void Execute(GInterface438 operation, Callback callback)
				{
					if (this.EPlantOperationState_0 > Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						callback.Fail("Can't execute operations in state " + this.EPlantOperationState_0.ToString());
						return;
					}
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.Gparam_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						this.State = Player.EOperationState.Finished;
						Player.GrenadeHandsController.Class1273 @class = this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1273>();
						@class.Start(ginterface.Item1, callback);
						@class.Setup(Player.GrenadeHandsController.Class1273.ESourceState.PlantTripwireState);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015EEE RID: 89838 RVA: 0x00267907 File Offset: 0x00265B07
				public override void PlantTripwire()
				{
					if (this.EPlantOperationState_0 != Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						return;
					}
					this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planting;
					this.Gparam_0.FirearmsAnimator.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Throw);
				}

				// Token: 0x06015EEF RID: 89839 RVA: 0x00731A38 File Offset: 0x0072FC38
				public override void HideGrenade(Action onHidden, bool fastHide)
				{
					switch (this.EPlantOperationState_0)
					{
					case Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.StateIn:
						break;
					case Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling:
						if (!this.Gparam_0.Item.CanBeHiddenDuringThrow)
						{
							goto IL_65;
						}
						break;
					case Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planting:
						goto IL_65;
					case Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Planted:
						onHidden();
						return;
					default:
						goto IL_65;
					}
					this.Gparam_0.FirearmsAnimator.SetFireMode(Weapon.EFireMode.grenadeThrowing, false);
					this.Action_0 = onHidden;
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1279>().Start(onHidden);
					return;
					IL_65:
					this.Action_0 = onHidden;
				}

				// Token: 0x06015EF0 RID: 89840 RVA: 0x0026792B File Offset: 0x00265B2B
				public override void PutGrenadeBack()
				{
					this.Gparam_0.firearmsAnimator_0.SetGrenadeAltFire(FirearmsAnimator.EGrenadeFire.Idle);
					this.Gparam_0.firearmsAnimator_0.SetGrenadeFire(FirearmsAnimator.EGrenadeFire.Idle);
					this.method_2();
				}

				// Token: 0x06015EF1 RID: 89841 RVA: 0x00267955 File Offset: 0x00265B55
				public override bool CanRemove()
				{
					return true;
				}

				// Token: 0x06015EF2 RID: 89842 RVA: 0x00267958 File Offset: 0x00265B58
				public void method_2()
				{
					this.OnEnd();
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1277>().Start();
				}

				// Token: 0x06015EF3 RID: 89843 RVA: 0x00267977 File Offset: 0x00265B77
				public override bool CanChangeFireMode(Weapon.EFireMode fireMode)
				{
					return (fireMode == Weapon.EFireMode.greanadePlanting || fireMode == Weapon.EFireMode.grenadeThrowing) && this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling;
				}

				// Token: 0x06015EF4 RID: 89844 RVA: 0x0026798F File Offset: 0x00265B8F
				public override void ChangeFireMode(Weapon.EFireMode fireMode)
				{
					if (!this.CanChangeFireMode(fireMode))
					{
						return;
					}
					this.Gparam_0.SetFireModeVisual(fireMode);
					this.method_2();
					this.Gparam_0.CurrentFireMode = fireMode;
				}

				// Token: 0x06015EF5 RID: 89845 RVA: 0x002679B9 File Offset: 0x00265BB9
				public override void SetInventoryOpened(bool opened)
				{
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						this.Gparam_0.firearmsAnimator_0.SetInventory(opened);
					}
				}

				// Token: 0x06015EF6 RID: 89846 RVA: 0x002679D5 File Offset: 0x00265BD5
				public override void ShowGesture(EInteraction gesture)
				{
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						this.Gparam_0.firearmsAnimator_0.Gesture(gesture);
					}
				}

				// Token: 0x06015EF7 RID: 89847 RVA: 0x002679F1 File Offset: 0x00265BF1
				public override void ExamineWeapon()
				{
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						this.Gparam_0.firearmsAnimator_0.LookTrigger();
					}
				}

				// Token: 0x06015EF8 RID: 89848 RVA: 0x00267A0C File Offset: 0x00265C0C
				public override void FastForward()
				{
					base.FastForward();
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.StateIn)
					{
						this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling;
					}
					if (this.EPlantOperationState_0 == Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.Idling)
					{
						this.Gparam_0.ChangeFireMode(Weapon.EFireMode.grenadeThrowing);
					}
				}

				// Token: 0x06015EF9 RID: 89849 RVA: 0x00267A39 File Offset: 0x00265C39
				public override void Reset()
				{
					base.Reset();
					this.EPlantOperationState_0 = Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState.None;
					this.Action_0 = null;
					this.PlantingKitsItemClass = null;
				}

				// Token: 0x040129CC RID: 76236
				[CompilerGenerated]
				[NonSerialized]
				public Player.GrenadeHandsController.TripwireStateManagerClass.EPlantOperationState EplantOperationState_0;

				// Token: 0x040129CD RID: 76237
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040129CE RID: 76238
				[NonSerialized]
				public PlantingKitsItemClass PlantingKitsItemClass;

				// Token: 0x02003B1A RID: 15130
				public enum EPlantOperationState
				{
					// Token: 0x04012DD3 RID: 77267
					None,
					// Token: 0x04012DD4 RID: 77268
					StateIn,
					// Token: 0x04012DD5 RID: 77269
					Idling,
					// Token: 0x04012DD6 RID: 77270
					Planting,
					// Token: 0x04012DD7 RID: 77271
					Planted
				}

				// Token: 0x02003B1B RID: 15131
				[CompilerGenerated]
				public class Class1247
				{
					// Token: 0x0601627E RID: 90750 RVA: 0x0026A332 File Offset: 0x00268532
					public void method_0(IResult result)
					{
						this.player.ClearPlanting();
						if (!result.Failed)
						{
							return;
						}
						NotificationManagerClass.DisplaySingletonWarningNotification("Tripwire/PlantUnavailable".Localized(null), ENotificationDurationType.Default);
						UnityEngine.Debug.LogError("Failed to plant tripwire: " + result.Error);
					}

					// Token: 0x04012DD8 RID: 77272
					public Player player;
				}
			}

			// Token: 0x02003A03 RID: 14851
			public class Class1279 : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x06015EFA RID: 89850 RVA: 0x00267A56 File Offset: 0x00265C56
				public Class1279(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015EFB RID: 89851 RVA: 0x00267A5F File Offset: 0x00265C5F
				public void Start(Action callback)
				{
					this.Action_0 = callback;
					base.Start();
					this.Gparam_0.firearmsAnimator_0.SetActiveParam(false, true);
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015EFC RID: 89852 RVA: 0x00267A9F File Offset: 0x00265C9F
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015EFD RID: 89853 RVA: 0x00267AAE File Offset: 0x00265CAE
				public override void OnHideCompleteActionAction()
				{
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015EFE RID: 89854 RVA: 0x00267AC2 File Offset: 0x00265CC2
				public override void HideGrenade(Action onHidden, bool fastHide)
				{
					this.Action_0 = (Action)Delegate.Combine(this.Action_0, onHidden);
				}

				// Token: 0x06015EFF RID: 89855 RVA: 0x00267ADB File Offset: 0x00265CDB
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.OnHideCompleteActionAction();
					}
				}

				// Token: 0x040129CF RID: 76239
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x02003A04 RID: 14852
			public class Class1274 : Player.GrenadeHandsController.Class1273
			{
				// Token: 0x06015F00 RID: 89856 RVA: 0x00267AEC File Offset: 0x00265CEC
				public Class1274(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015F01 RID: 89857 RVA: 0x00267AF5 File Offset: 0x00265CF5
				public override void Start(Item item, Callback callback)
				{
					this.Float_1 = 0f;
					this.Bool_0 = false;
					base.Start(item, callback);
				}

				// Token: 0x06015F02 RID: 89858 RVA: 0x00267B11 File Offset: 0x00265D11
				public override void FastForward()
				{
					if (!this.Bool_0)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
				}

				// Token: 0x06015F03 RID: 89859 RVA: 0x00267B28 File Offset: 0x00265D28
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (!this.Bool_0 && this.Float_1 > 0.25f)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x040129D0 RID: 76240
				[NonSerialized]
				public const float Float_0 = 0.25f;

				// Token: 0x040129D1 RID: 76241
				[NonSerialized]
				public float Float_1;

				// Token: 0x040129D2 RID: 76242
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A05 RID: 14853
			public class Class1280 : Player.GrenadeHandsController.Class1272
			{
				// Token: 0x06015F04 RID: 89860 RVA: 0x00267B61 File Offset: 0x00265D61
				public Class1280(Player.GrenadeHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015F05 RID: 89861 RVA: 0x00731AB8 File Offset: 0x0072FCB8
				public void Start(Action callback)
				{
					this.Action_0 = callback;
					base.Start();
					this.Gparam_0.firearmsAnimator_0.SetActiveParam(true, true);
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, 1f);
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015F06 RID: 89862 RVA: 0x00267B6A File Offset: 0x00265D6A
				public override void Reset()
				{
					this.Action_0 = null;
					this.Action_1 = null;
					base.Reset();
				}

				// Token: 0x06015F07 RID: 89863 RVA: 0x00731B24 File Offset: 0x0072FD24
				public override void OnDrawCompleteAction()
				{
					this.Gparam_0.SetupProp();
					this.State = Player.EOperationState.Finished;
					Player.GrenadeHandsController.Class1277 @class = this.Gparam_0.InitiateOperation<Player.GrenadeHandsController.Class1277>();
					@class.Start();
					this.Action_0();
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					if (this.Action_1 != null)
					{
						@class.HideGrenade(this.Action_1, false);
					}
				}

				// Token: 0x06015F08 RID: 89864 RVA: 0x00267B80 File Offset: 0x00265D80
				public override void SetInventoryOpened(bool opened)
				{
					this.Gparam_0.firearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015F09 RID: 89865 RVA: 0x00267B93 File Offset: 0x00265D93
				public override void HideGrenade(Action onHidden, bool fastHide)
				{
					this.Action_1 = onHidden;
				}

				// Token: 0x06015F0A RID: 89866 RVA: 0x00267B9C File Offset: 0x00265D9C
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.OnDrawCompleteAction();
					}
				}

				// Token: 0x06015F0B RID: 89867 RVA: 0x00267BAD File Offset: 0x00265DAD
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Gparam_0._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x040129D3 RID: 76243
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040129D4 RID: 76244
				[NonSerialized]
				public Action Action_1;
			}
		}

		// Token: 0x02002990 RID: 10640
		public abstract class Class1271<T> : Player.BaseAnimationOperationClass, Player.GInterface193 where T : Player.BaseGrenadeHandsController
		{
			// Token: 0x06012506 RID: 75014 RVA: 0x0023F5EB File Offset: 0x0023D7EB
			public Class1271(T controller) : base(controller)
			{
				this.Gparam_0 = controller;
			}

			// Token: 0x06012507 RID: 75015 RVA: 0x0023F600 File Offset: 0x0023D800
			public virtual void OnIdleStartAction()
			{
				base.method_0();
			}

			// Token: 0x06012508 RID: 75016 RVA: 0x0023F608 File Offset: 0x0023D808
			public virtual void OnDrawCompleteAction()
			{
				base.method_0();
			}

			// Token: 0x06012509 RID: 75017 RVA: 0x0023F610 File Offset: 0x0023D810
			public virtual void OnHideCompleteActionAction()
			{
				base.method_0();
			}

			// Token: 0x0601250A RID: 75018 RVA: 0x0023F618 File Offset: 0x0023D818
			public virtual void OnDropGrenadeAction()
			{
				base.method_0();
			}

			// Token: 0x0601250B RID: 75019 RVA: 0x0023F620 File Offset: 0x0023D820
			public virtual void OnDropFinishedAction()
			{
				base.method_0();
			}

			// Token: 0x0601250C RID: 75020 RVA: 0x0023F628 File Offset: 0x0023D828
			public virtual void StartCountdown()
			{
				base.method_0();
			}

			// Token: 0x0601250D RID: 75021 RVA: 0x0023F630 File Offset: 0x0023D830
			public virtual void HideGrenade(Action onHidden, bool fastHide)
			{
				base.method_0();
			}

			// Token: 0x0601250E RID: 75022 RVA: 0x0023F638 File Offset: 0x0023D838
			public virtual void PutGrenadeBack()
			{
				base.method_0();
			}

			// Token: 0x0601250F RID: 75023 RVA: 0x0023F640 File Offset: 0x0023D840
			public virtual void ShowGesture(EInteraction gesture)
			{
				base.method_0();
			}

			// Token: 0x06012510 RID: 75024 RVA: 0x0023F648 File Offset: 0x0023D848
			public virtual bool CanRemove()
			{
				return false;
			}

			// Token: 0x06012511 RID: 75025 RVA: 0x0023F64B File Offset: 0x0023D84B
			public virtual void FastForward()
			{
			}

			// Token: 0x06012512 RID: 75026 RVA: 0x0023F64D File Offset: 0x0023D84D
			public virtual void OnBackpackDrop()
			{
				base.method_0();
			}

			// Token: 0x06012513 RID: 75027 RVA: 0x006850C8 File Offset: 0x006832C8
			public virtual void Execute(GInterface438 operation, Callback callback)
			{
				GInterface443 ginterface = operation as GInterface443;
				if (ginterface == null)
				{
					callback.Succeed();
					return;
				}
				if (this.Gparam_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
				{
					callback.Fail(string.Format("Detach is not supported in current operation: {0}", base.GetType()));
					return;
				}
				callback.Succeed();
			}

			// Token: 0x0400EDE5 RID: 60901
			[NonSerialized]
			public T Gparam_0;
		}

		// Token: 0x02002991 RID: 10641
		public class QuickGrenadeThrowHandsController : Player.BaseGrenadeHandsController, GInterface206, GInterface205<ThrowWeapItemClass>, GInterface204, IHandsController
		{
			// Token: 0x06012514 RID: 75028 RVA: 0x0023F655 File Offset: 0x0023D855
			public static T smethod_9<T>(Player player, ThrowWeapItemClass item) where T : Player.QuickGrenadeThrowHandsController
			{
				return Player.BaseGrenadeHandsController.smethod_6<T>(player, item, true);
			}

			// Token: 0x06012515 RID: 75029 RVA: 0x0023F65F File Offset: 0x0023D85F
			public static Task<T> smethod_10<T>(Player player, ThrowWeapItemClass item) where T : Player.QuickGrenadeThrowHandsController
			{
				return Player.BaseGrenadeHandsController.smethod_7<T>(player, item, true);
			}

			// Token: 0x17002F80 RID: 12160
			// (get) Token: 0x06012516 RID: 75030 RVA: 0x0023F669 File Offset: 0x0023D869
			public Player.QuickGrenadeThrowHandsController.Class1281 Class1281_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.QuickGrenadeThrowHandsController.Class1281;
				}
			}

			// Token: 0x06012517 RID: 75031 RVA: 0x0023F676 File Offset: 0x0023D876
			public void SetOnUsedCallback(Callback<GInterface205<ThrowWeapItemClass>> callback)
			{
				this.Class1281_0.SetOnUsedCallback(callback);
			}

			// Token: 0x06012518 RID: 75032 RVA: 0x00685128 File Offset: 0x00683328
			public override void Spawn(float animationSpeed, Action callback)
			{
				Player.QuickGrenadeThrowHandsController.Class1248 @class = new Player.QuickGrenadeThrowHandsController.Class1248();
				@class.callback = callback;
				Action callback2 = new Action(@class.method_0);
				base.InitiateOperation<Player.QuickGrenadeThrowHandsController.Class1281>().Start(callback2);
				base.Spawn(animationSpeed, @class.callback);
			}

			// Token: 0x06012519 RID: 75033 RVA: 0x0023F684 File Offset: 0x0023D884
			public override bool CanExecute(GInterface438 operation)
			{
				return false;
			}

			// Token: 0x0601251A RID: 75034 RVA: 0x0023F687 File Offset: 0x0023D887
			public override bool CanRemove()
			{
				return true;
			}

			// Token: 0x0601251B RID: 75035 RVA: 0x0023F68A File Offset: 0x0023D88A
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.QuickGrenadeThrowHandsController.Class1281),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_13)
					}
				};
			}

			// Token: 0x0601251D RID: 75037 RVA: 0x0023F6B5 File Offset: 0x0023D8B5
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_13()
			{
				return new Player.QuickGrenadeThrowHandsController.Class1281(this);
			}

			// Token: 0x02003A06 RID: 14854
			public class Class1281 : Player.Class1271<Player.QuickGrenadeThrowHandsController>
			{
				// Token: 0x06015F0C RID: 89868 RVA: 0x00267BC9 File Offset: 0x00265DC9
				public Class1281(Player.QuickGrenadeThrowHandsController controller) : base(controller)
				{
				}

				// Token: 0x06015F0D RID: 89869 RVA: 0x00731B94 File Offset: 0x0072FD94
				public void Start(Action callback)
				{
					this.Gparam_0._player.Say(EPhraseTrigger.OnGrenade, false, 0f, (ETagStatus)0, 100, false);
					this.Action_0 = callback;
					base.Start();
					this.Bool_1 = false;
					this.Bool_0 = false;
				}

				// Token: 0x06015F0E RID: 89870 RVA: 0x00267BDD File Offset: 0x00265DDD
				public void SetOnUsedCallback(Callback<GInterface205<ThrowWeapItemClass>> callback)
				{
					this.Callback_0 = callback;
				}

				// Token: 0x06015F0F RID: 89871 RVA: 0x00267BE6 File Offset: 0x00265DE6
				public override void OnDropGrenadeAction()
				{
					this.Bool_1 = true;
					this.Gparam_0.vmethod_1(this.Float_0, false);
				}

				// Token: 0x06015F10 RID: 89872 RVA: 0x00731BD8 File Offset: 0x0072FDD8
				public override void OnDropFinishedAction()
				{
					this.Bool_0 = true;
					this.Gparam_0.firearmsAnimator_0.SetQuickFire(false);
					if (this.Gparam_0.Destroyed)
					{
						this.Action_1();
						return;
					}
					if (this.Callback_0 != null)
					{
						this.Callback_0(this.Gparam_0);
					}
				}

				// Token: 0x06015F11 RID: 89873 RVA: 0x00267C01 File Offset: 0x00265E01
				public override void OnDrawCompleteAction()
				{
					this.Action_0();
				}

				// Token: 0x06015F12 RID: 89874 RVA: 0x00267C0E File Offset: 0x00265E0E
				public override void HideGrenade(Action onHidden, bool fastHide = false)
				{
					if (this.Bool_0)
					{
						onHidden();
						return;
					}
					if (this.Action_1 == null)
					{
						this.Action_1 = onHidden;
						return;
					}
					this.Action_1 = (Action)Delegate.Combine(this.Action_1, onHidden);
				}

				// Token: 0x06015F13 RID: 89875 RVA: 0x00267C46 File Offset: 0x00265E46
				public override void StartCountdown()
				{
					this.Float_0 = 0f;
				}

				// Token: 0x06015F14 RID: 89876 RVA: 0x00267C53 File Offset: 0x00265E53
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (this.Float_0 >= 0f)
					{
						this.Float_0 += deltaTime;
					}
				}

				// Token: 0x06015F15 RID: 89877 RVA: 0x00731C34 File Offset: 0x0072FE34
				public override void Reset()
				{
					base.Reset();
					this.Float_0 = -1f;
					this.Bool_1 = false;
					this.Bool_0 = false;
					this.Action_1 = null;
					this.Action_0 = null;
					this.Callback_0 = null;
				}

				// Token: 0x06015F16 RID: 89878 RVA: 0x00267C77 File Offset: 0x00265E77
				public override void FastForward()
				{
					if (!this.Bool_0)
					{
						this.OnDropFinishedAction();
					}
				}

				// Token: 0x06015F17 RID: 89879 RVA: 0x00267C87 File Offset: 0x00265E87
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Gparam_0._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x040129D5 RID: 76245
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040129D6 RID: 76246
				[NonSerialized]
				public Action Action_1;

				// Token: 0x040129D7 RID: 76247
				[NonSerialized]
				public Callback<GInterface205<ThrowWeapItemClass>> Callback_0;

				// Token: 0x040129D8 RID: 76248
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x040129D9 RID: 76249
				[NonSerialized]
				public bool Bool_1;

				// Token: 0x040129DA RID: 76250
				[NonSerialized]
				public float Float_0 = -1f;
			}

			// Token: 0x02003A07 RID: 14855
			[CompilerGenerated]
			public class Class1248
			{
				// Token: 0x06015F19 RID: 89881 RVA: 0x00267CAB File Offset: 0x00265EAB
				public void method_0()
				{
					this.callback();
				}

				// Token: 0x040129DB RID: 76251
				public Action callback;
			}
		}

		// Token: 0x02002992 RID: 10642
		public interface Interface9
		{
			// Token: 0x0601251E RID: 75038
			void OnDrawCompleteAction();

			// Token: 0x0601251F RID: 75039
			void OnHideCompleteActionAction();

			// Token: 0x06012520 RID: 75040
			void OnUseAction();

			// Token: 0x06012521 RID: 75041
			void HideController(Action onHidden, bool fastHide);
		}

		// Token: 0x02002993 RID: 10643
		public class QuickUseItemController : Player.ItemHandsController, IOnHandsUseCallback, IHandsController
		{
			// Token: 0x17002F81 RID: 12161
			// (get) Token: 0x06012522 RID: 75042 RVA: 0x0023F6BD File Offset: 0x0023D8BD
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this._objectInHandsAnimator;
				}
			}

			// Token: 0x17002F82 RID: 12162
			// (get) Token: 0x06012523 RID: 75043 RVA: 0x0023F6C5 File Offset: 0x0023D8C5
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x06012524 RID: 75044 RVA: 0x00685168 File Offset: 0x00683368
			public static T smethod_6<T>(Player player, Item item) where T : Player.QuickUseItemController
			{
				Player.QuickUseItemController.Class1251<T> @class = new Player.QuickUseItemController.Class1251<T>();
				@class.controller = Player.ItemHandsController.smethod_1<T>(player, item, new Player.ItemHandsController.Delegate8(Singleton<PoolManagerClass>.Instance.CreateItemUsablePrefab));
				UsableHandsPrefab component = @class.controller._controllerObject.GetComponent<UsableHandsPrefab>();
				GameObject gameObject = Singleton<PoolManagerClass>.Instance.CreateItem(item, true);
				gameObject.transform.SetParent(component.ItemSpawnTransform);
				gameObject.transform.localPosition = Vector3.zero;
				gameObject.transform.localRotation = Quaternion.identity;
				gameObject.SetActive(true);
				@class.controller._usableItemGameObject = gameObject;
				@class.controller._objectInHandsAnimator = component.FirearmsAnimator;
				@class.controller._objectInHandsAnimator.AddEventsConsumer(@class.controller);
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_0));
				@class.controller._objectInHandsAnimator.SkipTime(0.016666668f);
				@class.controller._player.HandsAnimator = @class.controller._objectInHandsAnimator;
				bool flag = @class.controller._player.UpdateGrenadeAnimatorDuePoV();
				@class.controller._objectInHandsAnimator.Animator.SetFloat("ThirdPersonAnimation", (float)(flag ? 1 : 0));
				player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				player.ProceduralWeaponAnimation.InitTransforms(@class.controller.HandsHierarchy, null);
				component.ObjectInHands.AfterGetFromPoolInit(player.ProceduralWeaponAnimation, null, player.IsYourPlayer);
				@class.controller._controllerObject.GetComponent<BaseSoundPlayer>().Init(@class.controller, player.PlayerBones.WeaponRoot, player);
				return @class.controller;
			}

			// Token: 0x06012525 RID: 75045 RVA: 0x0023F6F2 File Offset: 0x0023D8F2
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_1();
			}

			// Token: 0x06012526 RID: 75046 RVA: 0x0023F6FA File Offset: 0x0023D8FA
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_2();
			}

			// Token: 0x06012527 RID: 75047 RVA: 0x0023F702 File Offset: 0x0023D902
			public override void IEventsConsumerOnFiringBullet()
			{
				this.method_3();
			}

			// Token: 0x06012528 RID: 75048 RVA: 0x0023F70A File Offset: 0x0023D90A
			public override void IEventsConsumerOnThirdAction(int i)
			{
				base.TranslateAnimatorParameter(i);
			}

			// Token: 0x17002F83 RID: 12163
			// (get) Token: 0x06012529 RID: 75049 RVA: 0x0023F713 File Offset: 0x0023D913
			public Player.QuickUseItemController.GClass2058 CurrentOperation
			{
				get
				{
					return base.CurrentHandsOperation as Player.QuickUseItemController.GClass2058;
				}
			}

			// Token: 0x0601252A RID: 75050 RVA: 0x0023F720 File Offset: 0x0023D920
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.QuickUseItemController.GClass2058),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_5)
					}
				};
			}

			// Token: 0x0601252B RID: 75051 RVA: 0x00685350 File Offset: 0x00683550
			public override void Spawn(float animationSpeed, Action callback)
			{
				Player.QuickUseItemController.Class1249 @class = new Player.QuickUseItemController.Class1249();
				@class.callback = callback;
				Action callback2 = new Action(@class.method_0);
				base.InitiateOperation<Player.QuickUseItemController.GClass2058>().Start(callback2);
			}

			// Token: 0x0601252C RID: 75052 RVA: 0x00685384 File Offset: 0x00683584
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.QuickUseItemController.Class1250 @class = new Player.QuickUseItemController.Class1250();
				@class.callback = callback;
				if (base.Destroyed)
				{
					return;
				}
				base.Destroyed = true;
				this._objectInHandsAnimator.SetAnimationSpeed(animationSpeed);
				new Action(@class.method_0)();
			}

			// Token: 0x0601252D RID: 75053 RVA: 0x0023F743 File Offset: 0x0023D943
			public override void Destroy()
			{
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this._objectInHandsAnimator = null;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x0601252E RID: 75054 RVA: 0x006853CC File Offset: 0x006835CC
			public override bool CanExecute(GInterface438 operation)
			{
				GClass3498 gclass = operation as GClass3498;
				if (gclass != null)
				{
					return gclass.Item == base.Item;
				}
				GClass3492 gclass2 = operation as GClass3492;
				return gclass2 != null && gclass2.Tripwire == base.Item;
			}

			// Token: 0x0601252F RID: 75055 RVA: 0x0023F773 File Offset: 0x0023D973
			public override void Execute(GInterface438 operation, Callback callback)
			{
				callback.Succeed();
			}

			// Token: 0x06012530 RID: 75056 RVA: 0x0023F77B File Offset: 0x0023D97B
			public override bool CanRemove()
			{
				return false;
			}

			// Token: 0x06012531 RID: 75057 RVA: 0x0023F77E File Offset: 0x0023D97E
			public override bool CanInteract()
			{
				return false;
			}

			// Token: 0x06012532 RID: 75058 RVA: 0x0023F781 File Offset: 0x0023D981
			public override void Interact(bool isInteracting, int actionIndex)
			{
			}

			// Token: 0x06012533 RID: 75059 RVA: 0x0023F783 File Offset: 0x0023D983
			public void SetOnUsedCallback(Callback<IOnHandsUseCallback> callback)
			{
				this.CurrentOperation.SetOnUsedCallback(callback);
			}

			// Token: 0x06012534 RID: 75060 RVA: 0x0023F791 File Offset: 0x0023D991
			public Callback<IOnHandsUseCallback> GetOnUsedCallback()
			{
				return this.CurrentOperation.GetOnUsedCallback();
			}

			// Token: 0x06012535 RID: 75061 RVA: 0x0023F79E File Offset: 0x0023D99E
			public void method_1()
			{
				this.CurrentOperation.OnDrawCompleteAction();
			}

			// Token: 0x06012536 RID: 75062 RVA: 0x0023F7AB File Offset: 0x0023D9AB
			public void method_2()
			{
				this.CurrentOperation.OnHideCompleteActionAction();
			}

			// Token: 0x06012537 RID: 75063 RVA: 0x0023F7B8 File Offset: 0x0023D9B8
			public void method_3()
			{
				this.CurrentOperation.OnUseAction();
			}

			// Token: 0x06012538 RID: 75064 RVA: 0x0023F7C5 File Offset: 0x0023D9C5
			public void method_4()
			{
				AssetPoolObject.ReturnToPool(this._usableItemGameObject, true);
				this._usableItemGameObject = null;
			}

			// Token: 0x06012539 RID: 75065 RVA: 0x0023F7DA File Offset: 0x0023D9DA
			public override void ShowGesture(EInteraction gesture)
			{
			}

			// Token: 0x0601253A RID: 75066 RVA: 0x0023F7DC File Offset: 0x0023D9DC
			public override void FastForwardCurrentState()
			{
				this.CurrentOperation.FastForward();
			}

			// Token: 0x0601253C RID: 75068 RVA: 0x0023F7F1 File Offset: 0x0023D9F1
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_5()
			{
				return new Player.QuickUseItemController.GClass2058(this);
			}

			// Token: 0x0400EDE6 RID: 60902
			protected GameObject _usableItemGameObject;

			// Token: 0x0400EDE7 RID: 60903
			protected new FirearmsAnimator _objectInHandsAnimator;

			// Token: 0x02003A08 RID: 14856
			public abstract class GClass2057 : Player.BaseAnimationOperationClass, Player.Interface9
			{
				// Token: 0x06015F1A RID: 89882 RVA: 0x00267CB8 File Offset: 0x00265EB8
				public GClass2057(Player.QuickUseItemController controller) : base(controller)
				{
					this.QuickUseItemController_0 = controller;
				}

				// Token: 0x06015F1B RID: 89883 RVA: 0x00267CC8 File Offset: 0x00265EC8
				public virtual void OnDrawCompleteAction()
				{
					base.method_0();
				}

				// Token: 0x06015F1C RID: 89884 RVA: 0x00267CD0 File Offset: 0x00265ED0
				public virtual void OnHideCompleteActionAction()
				{
					base.method_0();
				}

				// Token: 0x06015F1D RID: 89885 RVA: 0x00267CD8 File Offset: 0x00265ED8
				public virtual void OnUseAction()
				{
					base.method_0();
				}

				// Token: 0x06015F1E RID: 89886 RVA: 0x00267CE0 File Offset: 0x00265EE0
				public virtual void HideController(Action onHidden, bool fastHide)
				{
					base.method_0();
				}

				// Token: 0x040129DC RID: 76252
				[NonSerialized]
				public Player.QuickUseItemController QuickUseItemController_0;
			}

			// Token: 0x02003A09 RID: 14857
			public class GClass2058 : Player.QuickUseItemController.GClass2057
			{
				// Token: 0x06015F1F RID: 89887 RVA: 0x00267CE8 File Offset: 0x00265EE8
				public GClass2058(Player.QuickUseItemController controller) : base(controller)
				{
				}

				// Token: 0x06015F20 RID: 89888 RVA: 0x00267CF1 File Offset: 0x00265EF1
				public void Start(Action callback)
				{
					this.Action_0 = callback;
					this.QuickUseItemController_0._objectInHandsAnimator.SetActiveParam(true, true);
					base.Start();
				}

				// Token: 0x06015F21 RID: 89889 RVA: 0x00267D12 File Offset: 0x00265F12
				public void SetOnUsedCallback(Callback<IOnHandsUseCallback> callback)
				{
					this.Callback_0 = callback;
				}

				// Token: 0x06015F22 RID: 89890 RVA: 0x00267D1B File Offset: 0x00265F1B
				public Callback<IOnHandsUseCallback> GetOnUsedCallback()
				{
					return this.Callback_0;
				}

				// Token: 0x06015F23 RID: 89891 RVA: 0x00731C78 File Offset: 0x0072FE78
				public override void OnUseAction()
				{
					this.QuickUseItemController_0._objectInHandsAnimator.SetActiveParam(false, true);
					this.QuickUseItemController_0.method_4();
					if (this.QuickUseItemController_0.Destroyed)
					{
						Action action_ = this.Action_1;
						this.Action_1 = null;
						action_();
						return;
					}
					if (this.Callback_0 != null)
					{
						Callback<IOnHandsUseCallback> callback_ = this.Callback_0;
						this.Callback_0 = null;
						callback_(this.QuickUseItemController_0);
					}
				}

				// Token: 0x06015F24 RID: 89892 RVA: 0x00267D23 File Offset: 0x00265F23
				public override void OnDrawCompleteAction()
				{
					this.Action_0();
				}

				// Token: 0x06015F25 RID: 89893 RVA: 0x00267D30 File Offset: 0x00265F30
				public override void Reset()
				{
					base.Reset();
					this.Action_1 = null;
					this.Action_0 = null;
					this.Callback_0 = null;
				}

				// Token: 0x06015F26 RID: 89894 RVA: 0x00267D4D File Offset: 0x00265F4D
				public virtual void FastForward()
				{
					base.method_0();
				}

				// Token: 0x040129DD RID: 76253
				[NonSerialized]
				public Action Action_0;

				// Token: 0x040129DE RID: 76254
				[NonSerialized]
				public Action Action_1;

				// Token: 0x040129DF RID: 76255
				[NonSerialized]
				public Callback<IOnHandsUseCallback> Callback_0;
			}

			// Token: 0x02003A0A RID: 14858
			[CompilerGenerated]
			public class Class1249
			{
				// Token: 0x06015F28 RID: 89896 RVA: 0x00267D5D File Offset: 0x00265F5D
				public void method_0()
				{
					this.callback();
				}

				// Token: 0x040129E0 RID: 76256
				public Action callback;
			}

			// Token: 0x02003A0B RID: 14859
			[CompilerGenerated]
			public class Class1250
			{
				// Token: 0x06015F2A RID: 89898 RVA: 0x00267D72 File Offset: 0x00265F72
				public void method_0()
				{
					this.callback();
				}

				// Token: 0x040129E1 RID: 76257
				public Action callback;
			}

			// Token: 0x02003A0C RID: 14860
			[CompilerGenerated]
			public class Class1251<T> where T : Player.QuickUseItemController
			{
				// Token: 0x06015F2C RID: 89900 RVA: 0x00267D87 File Offset: 0x00265F87
				public void method_0()
				{
					this.controller._objectInHandsAnimator.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x040129E2 RID: 76258
				public T controller;
			}
		}

		// Token: 0x02002994 RID: 10644
		public enum EOperationState
		{
			// Token: 0x0400EDE9 RID: 60905
			Ready,
			// Token: 0x0400EDEA RID: 60906
			Executing,
			// Token: 0x0400EDEB RID: 60907
			Finished
		}

		// Token: 0x02002995 RID: 10645
		public abstract class ItemHandsController : Player.AbstractHandsController, IHandsController
		{
			// Token: 0x17002F84 RID: 12164
			// (get) Token: 0x0601253D RID: 75069 RVA: 0x0023F7F9 File Offset: 0x0023D9F9
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this._objectInHandsAnimator;
				}
			}

			// Token: 0x17002F85 RID: 12165
			// (get) Token: 0x0601253E RID: 75070 RVA: 0x0023F801 File Offset: 0x0023DA01
			public virtual BindableStateClass<bool> CompassState { get; } = new BindableStateClass<bool>(false, null);

			// Token: 0x17002F86 RID: 12166
			// (get) Token: 0x0601253F RID: 75071 RVA: 0x0023F809 File Offset: 0x0023DA09
			public bool SuitableForHandInput
			{
				get
				{
					return this._player.StateIsSuitableForHandInput;
				}
			}

			// Token: 0x17002F87 RID: 12167
			// (get) Token: 0x06012540 RID: 75072 RVA: 0x0023F816 File Offset: 0x0023DA16
			public bool CurrentCompassState
			{
				get
				{
					return this.CompassState.Value;
				}
			}

			// Token: 0x17002F88 RID: 12168
			// (get) Token: 0x06012541 RID: 75073 RVA: 0x0023F823 File Offset: 0x0023DA23
			public bool CurrentRadioTransmitterState
			{
				get
				{
					return this.RadioTransmitterState.Value;
				}
			}

			// Token: 0x17002F89 RID: 12169
			// (get) Token: 0x06012542 RID: 75074 RVA: 0x0023F830 File Offset: 0x0023DA30
			public override GameObject ControllerGameObject
			{
				get
				{
					return this._controllerObject;
				}
			}

			// Token: 0x17002F8A RID: 12170
			// (get) Token: 0x06012543 RID: 75075 RVA: 0x0023F838 File Offset: 0x0023DA38
			public override float AimingSensitivity
			{
				get
				{
					return this._player.GetAimingSensitivity();
				}
			}

			// Token: 0x17002F8B RID: 12171
			// (get) Token: 0x06012544 RID: 75076 RVA: 0x0023F84A File Offset: 0x0023DA4A
			public override TransformLinks HandsHierarchy
			{
				get
				{
					return this._handsHierarchy;
				}
			}

			// Token: 0x17002F8C RID: 12172
			// (get) Token: 0x06012545 RID: 75077 RVA: 0x0023F852 File Offset: 0x0023DA52
			// (set) Token: 0x06012546 RID: 75078 RVA: 0x0023F85A File Offset: 0x0023DA5A
			public Player.BaseAnimationOperationClass CurrentHandsOperation { get; set; }

			// Token: 0x17002F8D RID: 12173
			// (get) Token: 0x06012547 RID: 75079 RVA: 0x0068540C File Offset: 0x0068360C
			public string CurrentHandsOperationName
			{
				get
				{
					if (this.CurrentHandsOperation == null)
					{
						return string.Empty;
					}
					string text = this.CurrentHandsOperation.GetType().ToString();
					if (!text.Contains("+"))
					{
						return text;
					}
					string[] array = text.Split('+', StringSplitOptions.None);
					return array[array.Length - 1];
				}
			}

			// Token: 0x17002F8E RID: 12174
			// (get) Token: 0x06012548 RID: 75080 RVA: 0x0023F863 File Offset: 0x0023DA63
			public Item Item
			{
				get
				{
					return this.item_0;
				}
			}

			// Token: 0x06012549 RID: 75081 RVA: 0x0023F86B File Offset: 0x0023DA6B
			public override void BlindFire(int b)
			{
			}

			// Token: 0x0601254A RID: 75082 RVA: 0x0023F86D File Offset: 0x0023DA6D
			public override Item GetItem()
			{
				return this.item_0;
			}

			// Token: 0x0601254B RID: 75083 RVA: 0x00685458 File Offset: 0x00683658
			public static T smethod_0<T>(Player player, Item item) where T : Player.ItemHandsController
			{
				if (player.PlayerBody != null)
				{
					PlayerBody.EquipmentSlotClass slotViewByItem = player.PlayerBody.GetSlotViewByItem(item);
					if (slotViewByItem != null)
					{
						slotViewByItem.DestroyCurrentModel();
					}
				}
				return Player.ItemHandsController.smethod_1<T>(player, item, new Player.ItemHandsController.Delegate8(Player.ItemHandsController.Class1252<T>.class1252_0.method_0));
			}

			// Token: 0x0601254C RID: 75084 RVA: 0x0023F875 File Offset: 0x0023DA75
			public static T smethod_1<T>(Player player, Item item, Player.ItemHandsController.Delegate8 itemObjectFactoryDelegate) where T : Player.ItemHandsController
			{
				T t = player.gameObject.AddComponent<T>();
				t._controllerObject = itemObjectFactoryDelegate(item, player);
				Player.ItemHandsController.smethod_4<T>(t, player, item);
				return t;
			}

			// Token: 0x0601254D RID: 75085 RVA: 0x0023F89D File Offset: 0x0023DA9D
			public static Task<T> smethod_2<T>(Player player, Item item) where T : Player.ItemHandsController
			{
				return Player.ItemHandsController.smethod_3<T>(player, item, new Player.ItemHandsController.Delegate9(Player.ItemHandsController.Class1253<T>.class1253_0.method_0));
			}

			// Token: 0x0601254E RID: 75086 RVA: 0x006854B0 File Offset: 0x006836B0
			public static Task<T> smethod_3<T>(Player player, Item item, Player.ItemHandsController.Delegate9 itemObjectAsyncFactoryDelegate) where T : Player.ItemHandsController
			{
				Player.ItemHandsController.Struct320<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.item = item;
				@struct.itemObjectAsyncFactoryDelegate = itemObjectAsyncFactoryDelegate;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.ItemHandsController.Struct320<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x0601254F RID: 75087 RVA: 0x00685504 File Offset: 0x00683704
			public static void smethod_4<T>(T controller, Player player, Item item) where T : Player.ItemHandsController
			{
				WeaponPrefab component = controller._controllerObject.GetComponent<WeaponPrefab>();
				controller._handsHierarchy = component.Hierarchy;
				controller._objectInHandsAnimator = component.FirearmsAnimator;
				controller.AnimationEventsEmitter = component.AnimationEventsEmitter;
				controller._player = player;
				controller._controllerObject.transform.SetPositionAndRotation(player.PlayerBones.Ribcage.Original.position, player.HandsRotation);
				player.UpdateBonesOnWeaponChange(controller._handsHierarchy);
				controller.item_0 = item;
				controller.WeaponRoot = player.PlayerBones.WeaponRoot.Original;
				Player.ItemHandsController.smethod_5<T>(controller, player);
				if (player.UsedSimplifiedSkeleton)
				{
					if (item.Id == "670ad7f1ad195290cd00da7a")
					{
						player.BodyAnimatorCommon.SetFloat(PlayerAnimator.ZOMBIE_WEAPON_TYPE_FLOAT_HASH, 0f);
					}
					else if (item is KnifeItemClass)
					{
						controller._controllerObject.transform.SetParent(player.PlayerBones.WeaponMeleeRoot);
						player.BodyAnimatorCommon.SetFloat(PlayerAnimator.ZOMBIE_WEAPON_TYPE_FLOAT_HASH, 1f);
					}
					else if (item is PistolItemClass)
					{
						controller._controllerObject.transform.SetParent(player.PlayerBones.WeaponPistolRoot);
						player.BodyAnimatorCommon.SetFloat(PlayerAnimator.ZOMBIE_WEAPON_TYPE_FLOAT_HASH, 2f);
					}
					controller._controllerObject.transform.localPosition = Vector3.zero;
					controller._controllerObject.transform.localRotation = Quaternion.identity;
				}
				controller.Logger = new Player.ItemHandsController.HandsControllerLogger(LoggerMode.Add, controller);
			}

			// Token: 0x06012550 RID: 75088 RVA: 0x006856CC File Offset: 0x006838CC
			public static void smethod_5<T>(T controller, Player player) where T : Player.ItemHandsController
			{
				player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.DropBackpackEvents.OnBackpackDropEvent += controller.OnBackpackDrop;
				player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.BipodToggleEvents.OnBipodToggleEvent += controller.OnBipodToggle;
				player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.ZombieFireBulletEvents.OnZombieFireBulletEvent += controller.OnZombieFireBullet;
				player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.ZombieFireEndEvents.OnZombieFireEndEvent += controller.OnZombieFireEnd;
			}

			// Token: 0x06012551 RID: 75089 RVA: 0x0068579C File Offset: 0x0068399C
			public void method_0()
			{
				this._player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.DropBackpackEvents.OnBackpackDropEvent -= base.OnBackpackDrop;
				this._player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.BipodToggleEvents.OnBipodToggleEvent -= base.OnBipodToggle;
				this._player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.ZombieFireBulletEvents.OnZombieFireBulletEvent -= this.OnZombieFireBullet;
				this._player.MovementContext.PlayerAnimator.EventsDispatcher.PlayerAnimatorEvents.ZombieFireEndEvents.OnZombieFireEndEvent -= this.OnZombieFireEnd;
			}

			// Token: 0x06012552 RID: 75090 RVA: 0x0023F8C5 File Offset: 0x0023DAC5
			public void TranslateAnimatorParameter(int actionIndex)
			{
				this._player.BodyAnimatorCommon.SetInteger(PlayerAnimator.FIRST_PERSON_ACTION, actionIndex);
			}

			// Token: 0x06012553 RID: 75091 RVA: 0x0023F8DD File Offset: 0x0023DADD
			public override bool IsPlacingBeacon()
			{
				return this.CurrentHandsOperation is Player.QuickUseItemController.GClass2058;
			}

			// Token: 0x06012554 RID: 75092 RVA: 0x0068586C File Offset: 0x00683A6C
			public void SetupProp()
			{
				if (!this._player.HealthController.IsAlive)
				{
					return;
				}
				this.CompositeDisposable.BindState<bool>(this.CompassState, new Action<bool>(this.CompassStateHandler));
				this.CompositeDisposable.BindState<bool>(this._player.MovementContext.CanUseProp, new Action<bool>(this.OnCanUsePropChanged));
			}

			// Token: 0x06012555 RID: 75093 RVA: 0x0023F8ED File Offset: 0x0023DAED
			public virtual void OnCanUsePropChanged(bool canUse)
			{
				if (!canUse)
				{
					this.SetCompassState(false);
				}
			}

			// Token: 0x06012556 RID: 75094 RVA: 0x0023F8F9 File Offset: 0x0023DAF9
			public void SetPropVisibility(bool isVisible)
			{
				if (!isVisible)
				{
					this.SetCompassState(false);
				}
				this._player.SetPropVisibility(this.CompassState.Value);
			}

			// Token: 0x06012557 RID: 75095 RVA: 0x0023F91B File Offset: 0x0023DB1B
			public override void ManualUpdate(float deltaTime)
			{
				this.CurrentHandsOperation.Update(deltaTime);
			}

			// Token: 0x06012558 RID: 75096 RVA: 0x0023F929 File Offset: 0x0023DB29
			public void ToggleCompassState()
			{
				this.SetCompassState(!this.CompassState.Value);
			}

			// Token: 0x06012559 RID: 75097 RVA: 0x0023F93F File Offset: 0x0023DB3F
			public virtual void SetCompassState(bool active)
			{
				if (this.CanChangeCompassState(active))
				{
					this.CompassState.Value = active;
				}
			}

			// Token: 0x0601255A RID: 75098 RVA: 0x0023F956 File Offset: 0x0023DB56
			public void ApplyCompassPacket(GStruct367 packet)
			{
				if (packet.Toggle)
				{
					this.CompassState.Value = packet.Status;
				}
			}

			// Token: 0x0601255B RID: 75099 RVA: 0x0023F971 File Offset: 0x0023DB71
			public virtual bool CanChangeCompassState(bool newState)
			{
				return !newState || (this._player.MovementContext.CanUseProp.Value && !this.IsInInteractionStrictCheck());
			}

			// Token: 0x0601255C RID: 75100 RVA: 0x0023F99A File Offset: 0x0023DB9A
			public virtual void CompassStateHandler(bool isActive)
			{
				this._player.CreateCompass();
				this._player.SetCompassState(isActive);
				this._objectInHandsAnimator.ShowCompass(isActive);
			}

			// Token: 0x0601255D RID: 75101 RVA: 0x0023F9BF File Offset: 0x0023DBBF
			public override void BallisticUpdate(float deltaTime)
			{
			}

			// Token: 0x0601255E RID: 75102 RVA: 0x0023F9C1 File Offset: 0x0023DBC1
			public override void EmitEvents()
			{
				base.AnimationEventsEmitter.EmitEvents();
			}

			// Token: 0x0601255F RID: 75103
			public abstract Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates();

			// Token: 0x06012560 RID: 75104 RVA: 0x0023F9CE File Offset: 0x0023DBCE
			public void ClearPreWarmOperationsDict()
			{
				this.dictionary_0.Clear();
			}

			// Token: 0x06012561 RID: 75105 RVA: 0x006858D4 File Offset: 0x00683AD4
			public TCreateOperation InitiateOperation<TCreateOperation>() where TCreateOperation : Player.BaseAnimationOperationClass
			{
				if (this.dictionary_1 == null)
				{
					this.dictionary_1 = this.GetOperationFactoryDelegates();
				}
				Type typeFromHandle = typeof(TCreateOperation);
				if (!this.dictionary_0.ContainsKey(typeFromHandle))
				{
					this.dictionary_0[typeFromHandle] = this.dictionary_1[typeFromHandle]();
				}
				Player.BaseAnimationOperationClass baseAnimationOperationClass = this.dictionary_0[typeFromHandle];
				baseAnimationOperationClass.UpdateLoggerController(this);
				this.Logger.TraceStateChange(this.CurrentHandsOperation, baseAnimationOperationClass);
				if (this.CurrentHandsOperation != null)
				{
					this.CurrentHandsOperation.OnEnd();
				}
				this.CurrentHandsOperation = baseAnimationOperationClass;
				this.CurrentHandsOperation.Reset();
				return (TCreateOperation)((object)this.CurrentHandsOperation);
			}

			// Token: 0x06012562 RID: 75106 RVA: 0x0023F9DB File Offset: 0x0023DBDB
			public override string ToString()
			{
				return string.Format("{0}, Item: {1}, CurrentHandsOperation: {2}", base.ToString(), this.item_0, this.CurrentHandsOperation);
			}

			// Token: 0x06012563 RID: 75107 RVA: 0x0023F9F9 File Offset: 0x0023DBF9
			public override void Destroy()
			{
				this.method_0();
				base.Destroy();
			}

			// Token: 0x06012564 RID: 75108 RVA: 0x0023FA07 File Offset: 0x0023DC07
			public ItemHandsController()
			{
			}

			// Token: 0x0400EDEC RID: 60908
			protected FirearmsAnimator _objectInHandsAnimator;

			// Token: 0x0400EDED RID: 60909
			private readonly Dictionary<Type, Player.BaseAnimationOperationClass> dictionary_0 = new Dictionary<Type, Player.BaseAnimationOperationClass>();

			// Token: 0x0400EDEE RID: 60910
			protected GameObject _controllerObject;

			// Token: 0x0400EDEF RID: 60911
			protected TransformLinks _handsHierarchy;

			// Token: 0x0400EDF0 RID: 60912
			private Item item_0;

			// Token: 0x0400EDF1 RID: 60913
			private Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> dictionary_1;

			// Token: 0x0400EDF2 RID: 60914
			protected internal Player _player;

			// Token: 0x0400EDF3 RID: 60915
			[CompilerGenerated]
			private readonly BindableStateClass<bool> gclass1643_0;

			// Token: 0x0400EDF4 RID: 60916
			protected BindableStateClass<bool> RadioTransmitterState = new BindableStateClass<bool>(false, null);

			// Token: 0x0400EDF5 RID: 60917
			protected Player.ItemHandsController.HandsControllerLogger Logger;

			// Token: 0x0400EDF6 RID: 60918
			[CompilerGenerated]
			private Player.BaseAnimationOperationClass baseAnimationOperationClass;

			// Token: 0x02003A0D RID: 14861
			// (Invoke) Token: 0x06015F2E RID: 89902
			public delegate GameObject Delegate8(Item item, Player player);

			// Token: 0x02003A0E RID: 14862
			// (Invoke) Token: 0x06015F32 RID: 89906
			public delegate Task<GameObject> Delegate9(Item item, Player player);

			// Token: 0x02003A0F RID: 14863
			// (Invoke) Token: 0x06015F36 RID: 89910
			public delegate Player.BaseAnimationOperationClass OperationFactoryDelegate();

			// Token: 0x02003A10 RID: 14864
			public class HandsControllerLogger : LoggerClass
			{
				// Token: 0x06015F39 RID: 89913 RVA: 0x00267DA9 File Offset: 0x00265FA9
				public HandsControllerLogger(LoggerMode loggerMode, Player.ItemHandsController controller) : base("hands-states", loggerMode, false)
				{
					this.String_0 = controller._player.ProfileId + "|" + controller._player.Profile.Nickname;
				}

				// Token: 0x06015F3A RID: 89914 RVA: 0x00731CE8 File Offset: 0x0072FEE8
				public void TraceStateChange(Player.BaseAnimationOperationClass currentOperation, Player.BaseAnimationOperationClass nextOperation)
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						base.Log("[{3}][{0}] -> [{1}] [{2}]", "<b>[{3}][{0}] -> [{1}]  [{2}]</b>", NLog.LogLevel.Trace, new object[]
						{
							currentOperation,
							nextOperation,
							this.String_0,
							Time.frameCount
						});
					}
				}

				// Token: 0x06015F3B RID: 89915 RVA: 0x00731D3C File Offset: 0x0072FF3C
				[Conditional("UNITY_EDITOR")]
				public void TraceMethodCall()
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						StackFrame stackFrame = new StackFrame(1);
						base.Log("[{2}] HANDS OPERATION CALL: {0}::{1} [{3}]", "<color=green>[{2}] HANDS OPERATION CALL:</color> <b>{0}::{1} [{3}]</b>", NLog.LogLevel.Trace, new object[]
						{
							stackFrame.GetMethod().DeclaringType,
							stackFrame.GetMethod().Name,
							Time.frameCount,
							this.String_0
						});
					}
				}

				// Token: 0x06015F3C RID: 89916 RVA: 0x00731DAC File Offset: 0x0072FFAC
				[Conditional("UNITY_EDITOR")]
				public void TraceMethodCall<T>(string argName, T argument1)
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						StackFrame stackFrame = new StackFrame(1);
						base.Log("[{4}] HANDS OPERATION CALL: {0}::{1}({2}:{3}) [{5}]", "<color=green>[{4}] HANDS OPERATION CALL:</color> <b>{0}::{1}({2}:{3}) [{5}]</b>", NLog.LogLevel.Trace, new object[]
						{
							stackFrame.GetMethod().DeclaringType,
							stackFrame.GetMethod().Name,
							argName,
							argument1,
							Time.frameCount,
							this.String_0
						});
					}
				}

				// Token: 0x040129E3 RID: 76259
				[NonSerialized]
				public string String_0;
			}

			// Token: 0x02003A11 RID: 14865
			[CompilerGenerated]
			[Serializable]
			public class Class1252<T> where T : Player.ItemHandsController
			{
				// Token: 0x06015F3F RID: 89919 RVA: 0x00267DF7 File Offset: 0x00265FF7
				public GameObject method_0(Item item1, Player player1)
				{
					return Singleton<PoolManagerClass>.Instance.CreateItem(item1, Player.GetVisibleToCamera(player1), player1, true);
				}

				// Token: 0x040129E4 RID: 76260
				public static readonly Player.ItemHandsController.Class1252<T> class1252_0 = new Player.ItemHandsController.Class1252<T>();

				// Token: 0x040129E5 RID: 76261
				public static Player.ItemHandsController.Delegate8 delegate8_0;
			}

			// Token: 0x02003A12 RID: 14866
			[CompilerGenerated]
			[Serializable]
			public class Class1253<T> where T : Player.ItemHandsController
			{
				// Token: 0x06015F42 RID: 89922 RVA: 0x00731E28 File Offset: 0x00730028
				public Task<GameObject> method_0(Item item1, Player player1)
				{
					return Singleton<PoolManagerClass>.Instance.CreateItemAsync(item1, Player.GetVisibleToCamera(player1), player1, true, JobPriorityClass.General, default(CancellationToken));
				}

				// Token: 0x040129E6 RID: 76262
				public static readonly Player.ItemHandsController.Class1253<T> class1253_0 = new Player.ItemHandsController.Class1253<T>();

				// Token: 0x040129E7 RID: 76263
				public static Player.ItemHandsController.Delegate9 delegate9_0;
			}
		}

		// Token: 0x02002996 RID: 10646
		public abstract class BaseKnifeController : Player.ItemHandsController
		{
			// Token: 0x17002F8F RID: 12175
			// (get) Token: 0x06012565 RID: 75109 RVA: 0x0023FA34 File Offset: 0x0023DC34
			public KnifeComponent Knife
			{
				get
				{
					return base.Item.GetItemComponent<KnifeComponent>();
				}
			}

			// Token: 0x17002F90 RID: 12176
			// (get) Token: 0x06012566 RID: 75110 RVA: 0x0023FA41 File Offset: 0x0023DC41
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x06012567 RID: 75111 RVA: 0x00685984 File Offset: 0x00683B84
			public Task method_1()
			{
				Player.BaseKnifeController.Struct322 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.baseKnifeController_0 = this;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.BaseKnifeController.Struct322>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012568 RID: 75112 RVA: 0x0023FA6E File Offset: 0x0023DC6E
			public override float GetAnimatorFloatParam(int hash)
			{
				return this.firearmsAnimator_0.GetAnimatorParameter(hash);
			}

			// Token: 0x06012569 RID: 75113 RVA: 0x0023FA7C File Offset: 0x0023DC7C
			public override bool SupportPickup()
			{
				return true;
			}

			// Token: 0x0601256A RID: 75114 RVA: 0x0023FA7F File Offset: 0x0023DC7F
			public override void Pickup(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetPickup(p);
				}
			}

			// Token: 0x0601256B RID: 75115 RVA: 0x0023FA95 File Offset: 0x0023DC95
			public override void Interact(bool isInteracting, int actionIndex)
			{
				if (this.CanInteract())
				{
					this._player.SendHandsInteractionStateChanged(isInteracting, actionIndex);
					this.firearmsAnimator_0.SetInteract(isInteracting, actionIndex);
				}
			}

			// Token: 0x0601256C RID: 75116 RVA: 0x0023FAB9 File Offset: 0x0023DCB9
			public override void Loot(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetLooting(p);
				}
			}

			// Token: 0x0601256D RID: 75117 RVA: 0x0023FACF File Offset: 0x0023DCCF
			public override bool CanInteract()
			{
				return this.firearmsAnimator_0.IsIdling() && this.firearmsAnimator_0.Animator.GetBool(WeaponAnimationSpeedControllerClass.BOOL_ACTIVE);
			}

			// Token: 0x0601256E RID: 75118 RVA: 0x0023FAF5 File Offset: 0x0023DCF5
			public override bool IsInInteraction()
			{
				return this.firearmsAnimator_0.IsInInteraction;
			}

			// Token: 0x0601256F RID: 75119 RVA: 0x006859C8 File Offset: 0x00683BC8
			public override bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction() || this.firearmsAnimator_0.GetLayerWeight(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX) >= float.Epsilon || this.firearmsAnimator_0.Animator.IsInTransition(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX);
			}

			// Token: 0x06012570 RID: 75120 RVA: 0x0023FB02 File Offset: 0x0023DD02
			public Vector3 GetPlayerOrientation()
			{
				return this._player.LookDirection;
			}

			// Token: 0x06012571 RID: 75121 RVA: 0x0023FB0F File Offset: 0x0023DD0F
			public Vector3 GetPlayerCastOrigin()
			{
				return this._player.MovementContext.RibcagePosition();
			}

			// Token: 0x06012572 RID: 75122 RVA: 0x0023FB21 File Offset: 0x0023DD21
			public override void ShowGesture(EInteraction gesture)
			{
				if (gesture != EInteraction.None)
				{
					this.firearmsAnimator_0.Gesture(gesture);
				}
			}

			// Token: 0x17002F91 RID: 12177
			// (get) Token: 0x06012573 RID: 75123 RVA: 0x0023FB32 File Offset: 0x0023DD32
			public Player.Interface10 Interface10_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.Interface10;
				}
			}

			// Token: 0x17002F92 RID: 12178
			// (get) Token: 0x06012574 RID: 75124 RVA: 0x0023FB3F File Offset: 0x0023DD3F
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x06012575 RID: 75125 RVA: 0x0023FB47 File Offset: 0x0023DD47
			public static T smethod_6<T>(Player player, KnifeComponent knife) where T : Player.BaseKnifeController
			{
				T t = Player.ItemHandsController.smethod_0<T>(player, knife.Item);
				Player.BaseKnifeController.smethod_8<T>(t, player);
				return t;
			}

			// Token: 0x06012576 RID: 75126 RVA: 0x00685A18 File Offset: 0x00683C18
			public static Task<T> smethod_7<T>(Player player, KnifeComponent knife) where T : Player.BaseKnifeController
			{
				Player.BaseKnifeController.Struct321<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.knife = knife;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.BaseKnifeController.Struct321<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012577 RID: 75127 RVA: 0x00685A64 File Offset: 0x00683C64
			public static void smethod_8<T>(T controller, Player player) where T : Player.BaseKnifeController
			{
				Player.BaseKnifeController.Class1254<T> @class = new Player.BaseKnifeController.Class1254<T>();
				@class.controller = controller;
				@class.controller.int_1 = LayerMask.NameToLayer("HighPolyCollider");
				@class.controller.int_2 = LayerMask.GetMask(new string[]
				{
					"HitCollider",
					"HighPolyCollider",
					"TransparentCollider",
					"Water"
				});
				@class.controller.int_3 = LayerMask.GetMask(new string[]
				{
					"Player"
				});
				WeaponPrefab componentInChildren = @class.controller._controllerObject.GetComponentInChildren<WeaponPrefab>();
				@class.controller.gclass2086_0 = componentInChildren.ObjectInHands;
				@class.controller.firearmsAnimator_0 = componentInChildren.FirearmsAnimator;
				@class.controller.knifeCollider_0 = @class.controller.HandsHierarchy.Self.GetComponentInChildren<KnifeCollider>();
				@class.controller.knifeCollider_0.baseKnifeController_0 = @class.controller;
				@class.controller.knifeCollider_0.player_0 = @class.controller._player;
				@class.controller.knifeCollider_0.isInfectedPlayer = @class.controller._player.UsedSimplifiedSkeleton;
				@class.controller.knifeCollider_0._hitMask = @class.controller.int_2;
				@class.controller.knifeCollider_0._spiritMask = @class.controller.int_3;
				@class.controller.knifeCollider_0.GetPlayerOrientation = new Func<Vector3>(@class.controller.GetPlayerOrientation);
				@class.controller.knifeCollider_0.GetPlayerBones = new Func<PlayerBones>(@class.method_0);
				@class.controller.firearmsAnimator_0.AddEventsConsumer(@class.controller);
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_1));
				@class.controller.transform_0 = TransformHelperClass.FindTransformRecursive(player.PlayerBones.WeaponRoot.Original, "damage_collider", false);
				@class.controller._player.HandsAnimator = @class.controller.firearmsAnimator_0;
				@class.knife = @class.controller.Item.GetItemComponent<KnifeComponent>();
				if (@class.knife != null && @class.knife.Template.AdditionalAnimationLayer > 0)
				{
					@class.controller._player.BodyAnimatorCommon.SetLayerWeight(@class.knife.Template.AdditionalAnimationLayer, 1f);
					@class.controller._player.BodyAnimatorCommon.SetLayerWeight(@class.knife.Template.AdditionalAnimationLayer + 1, 1f);
					@class.controller.action_0 = new Action(@class.method_2);
				}
				player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				player.ProceduralWeaponAnimation.InitTransforms(@class.controller.HandsHierarchy, null);
				@class.controller.gclass2086_0.AfterGetFromPoolInit(player.ProceduralWeaponAnimation, null, player.IsYourPlayer);
				BaseSoundPlayer component = @class.controller._controllerObject.GetComponent<BaseSoundPlayer>();
				if (component != null)
				{
					component.Init(@class.controller, player.PlayerBones.WeaponRoot, player);
				}
			}

			// Token: 0x06012578 RID: 75128 RVA: 0x0023FB5C File Offset: 0x0023DD5C
			public override void IEventsConsumerOnOnUseProp(bool boolParam)
			{
				base.SetPropVisibility(boolParam);
			}

			// Token: 0x06012579 RID: 75129 RVA: 0x0023FB65 File Offset: 0x0023DD65
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_4();
			}

			// Token: 0x0601257A RID: 75130 RVA: 0x0023FB6D File Offset: 0x0023DD6D
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_3();
			}

			// Token: 0x0601257B RID: 75131 RVA: 0x0023FB75 File Offset: 0x0023DD75
			public override void IEventsConsumerOnThirdAction(int intParam)
			{
				base.TranslateAnimatorParameter(intParam);
			}

			// Token: 0x0601257C RID: 75132 RVA: 0x0023FB7E File Offset: 0x0023DD7E
			public override void IEventsConsumerOnFireEnd()
			{
				if (!this._player.UsedSimplifiedSkeleton)
				{
					this.OnFireEnd();
				}
			}

			// Token: 0x0601257D RID: 75133 RVA: 0x0023FB93 File Offset: 0x0023DD93
			public override void OnZombieFireEnd(IAnimatorEventParameter animatorEventParameter)
			{
				this.OnFireEnd();
			}

			// Token: 0x0601257E RID: 75134 RVA: 0x0023FB9B File Offset: 0x0023DD9B
			public override void IEventsConsumerOnIdleStart()
			{
				this.Interface10_0.OnIdleStart();
			}

			// Token: 0x0601257F RID: 75135 RVA: 0x0023FBA8 File Offset: 0x0023DDA8
			public override void IEventsConsumerOnComboPlanning()
			{
				this.OnComboPlanning();
			}

			// Token: 0x06012580 RID: 75136 RVA: 0x0023FBB0 File Offset: 0x0023DDB0
			public override void IEventsConsumerOnFiringBullet()
			{
				if (!this._player.UsedSimplifiedSkeleton)
				{
					this.method_2();
				}
			}

			// Token: 0x06012581 RID: 75137 RVA: 0x0023FBC5 File Offset: 0x0023DDC5
			public override void OnZombieFireBullet(IAnimatorEventParameter animatorEventParameter)
			{
				this.method_2();
			}

			// Token: 0x06012582 RID: 75138 RVA: 0x0023FBCD File Offset: 0x0023DDCD
			public override void IEventsOnBackpackDrop()
			{
				this.method_5();
			}

			// Token: 0x06012583 RID: 75139 RVA: 0x00685E34 File Offset: 0x00684034
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.BaseKnifeController.Class1255 @class = new Player.BaseKnifeController.Class1255();
				@class.baseKnifeController_0 = this;
				@class.callback = callback;
				this.SetDeflected(false);
				if (base.Destroyed)
				{
					this.Interface10_0.HideWeapon(@class.callback, fastDrop);
					return;
				}
				base.Destroyed = true;
				@class.inventoryOperation = this._player.method_138(this.Knife.Item);
				Action onHidden = new Action(@class.method_0);
				this.Interface10_0.HideWeapon(onHidden, fastDrop);
			}

			// Token: 0x06012584 RID: 75140 RVA: 0x00685EB4 File Offset: 0x006840B4
			public override void Destroy()
			{
				Action action = this.action_0;
				if (action != null)
				{
					action();
				}
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this.firearmsAnimator_0 = null;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x06012585 RID: 75141 RVA: 0x0023FBD5 File Offset: 0x0023DDD5
			public void method_2()
			{
				this.Interface10_0.OnFire();
			}

			// Token: 0x06012586 RID: 75142 RVA: 0x0023FBE2 File Offset: 0x0023DDE2
			public new virtual void OnFireEnd()
			{
				this.Interface10_0.OnFireEnd();
			}

			// Token: 0x06012587 RID: 75143 RVA: 0x0023FBEF File Offset: 0x0023DDEF
			public new virtual void OnComboPlanning()
			{
			}

			// Token: 0x06012588 RID: 75144 RVA: 0x0023FBF1 File Offset: 0x0023DDF1
			public void method_3()
			{
				this.Interface10_0.HideWeaponComplete();
			}

			// Token: 0x06012589 RID: 75145 RVA: 0x0023FBFE File Offset: 0x0023DDFE
			public void method_4()
			{
				this.Interface10_0.WeaponAppeared();
			}

			// Token: 0x0601258A RID: 75146 RVA: 0x0023FC0B File Offset: 0x0023DE0B
			public void method_5()
			{
				this.Interface10_0.OnBackpackDrop();
			}

			// Token: 0x0601258B RID: 75147 RVA: 0x0023FC18 File Offset: 0x0023DE18
			public override bool CanExecute(GInterface438 operation)
			{
				return true;
			}

			// Token: 0x0601258C RID: 75148 RVA: 0x0023FC1B File Offset: 0x0023DE1B
			public override void Execute(GInterface438 operation, Callback callback)
			{
				this.Interface10_0.Execute<GInterface438>(operation, callback);
			}

			// Token: 0x0601258D RID: 75149 RVA: 0x00685F00 File Offset: 0x00684100
			public void method_6(Player.GStruct182 other)
			{
				if (this.knifeCollider_0.OnHit != null)
				{
					KnifeCollider knifeCollider = this.knifeCollider_0;
					knifeCollider.OnHit = (Action<Player.GStruct182>)Delegate.Remove(knifeCollider.OnHit, new Action<Player.GStruct182>(this.method_6));
				}
				BallisticCollider component = other.collider.GetComponent<BallisticCollider>();
				if (component != null)
				{
					other.point = ((other.point.sqrMagnitude < 0.1f) ? other.collider.transform.position : other.point);
					this.vmethod_0(other, component);
					this.SetDeflected(true);
					if (other.collider.gameObject.layer == this.int_1)
					{
						this._player.Physical.ConsumeAsMelee(this.Knife.Template.DeflectionConsumption);
					}
				}
			}

			// Token: 0x0601258E RID: 75150 RVA: 0x0023FC2A File Offset: 0x0023DE2A
			public void SetDeflected(bool deflected)
			{
				this.firearmsAnimator_0.SetDeflected(deflected);
				this._player.MovementContext.PlayerAnimatorSetDeflected(deflected);
			}

			// Token: 0x0601258F RID: 75151 RVA: 0x0023FC49 File Offset: 0x0023DE49
			public void SetMeleeSpeed(float speed)
			{
				this.firearmsAnimator_0.SetMeleeSpeed(speed);
				this._player.MovementContext.PlayerAnimatorSetSwingSpeed(speed);
			}

			// Token: 0x06012590 RID: 75152 RVA: 0x0023FC68 File Offset: 0x0023DE68
			public bool method_7(out RaycastHit hitInfo, int layerMask)
			{
				return Physics.SphereCast(this.transform_0.position, 0.15f, this._player.LookDirection, out hitInfo, 0.5f, layerMask);
			}

			// Token: 0x06012591 RID: 75153 RVA: 0x00685FD0 File Offset: 0x006841D0
			public virtual ShotInfoClass vmethod_0(Player.GStruct182 hit, BallisticCollider ballisticCollider)
			{
				int num = (this.LastKickType == Player.EKickType.Slash) ? this.Knife.Template.KnifeHitSlashDam : this.Knife.Template.KnifeHitStabDam;
				num = (this._player.Physical.HandsStamina.Exhausted ? ((int)((float)num * Singleton<BackendConfigSettingsClass>.Instance.Stamina.ExhaustedMeleeDamageMultiplier)) : num);
				this.vector3_0 = Vector3.Lerp(this.vector3_0, (this.knifeCollider_0.transform.position - this.vector3_1).normalized, 0.9f);
				UnityEngine.Debug.DrawLine(hit.point, hit.point + this.vector3_0, Color.magenta, 10f);
				DamageInfoStruct damageInfo = new DamageInfoStruct
				{
					DamageType = EDamageType.Melee,
					Damage = (float)num * (1f + this._player.Skills.StrengthBuffMeleePowerInc),
					PenetrationPower = (float)((this.LastKickType == Player.EKickType.Slash) ? this.Knife.Template.SlashPenetration : this.Knife.Template.StabPenetration),
					ArmorDamage = 1f,
					Direction = this.vector3_0,
					HitCollider = hit.collider,
					HitPoint = hit.point,
					Player = Singleton<GameWorld>.Instance.GetEverExistedBridgeByProfileID(this._player.ProfileId),
					HittedBallisticCollider = ballisticCollider,
					HitNormal = hit.normal,
					Weapon = this.Knife.Item,
					IsForwardHit = true,
					StaminaBurnRate = this.Knife.Template.StaminaBurnRate
				};
				ShotInfoClass result = Singleton<GameWorld>.Instance.HackShot(damageInfo);
				if (ballisticCollider as BodyPartCollider != null)
				{
					this._player.ExecuteSkill(new Action(this.method_8));
				}
				return result;
			}

			// Token: 0x06012592 RID: 75154 RVA: 0x0023FC91 File Offset: 0x0023DE91
			public override void FastForwardCurrentState()
			{
				this.Interface10_0.FastForward();
			}

			// Token: 0x06012593 RID: 75155 RVA: 0x0023FC9E File Offset: 0x0023DE9E
			public BaseKnifeController()
			{
			}

			// Token: 0x06012594 RID: 75156 RVA: 0x0023FCCE File Offset: 0x0023DECE
			[CompilerGenerated]
			public void method_8()
			{
				this._player.Skills.FistfightAction.Complete(1f);
			}

			// Token: 0x0400EDF7 RID: 60919
			public Player.EKickType LastKickType;

			// Token: 0x0400EDF8 RID: 60920
			private float float_0;

			// Token: 0x0400EDF9 RID: 60921
			protected Vector3 vector3_0 = Vector3.zero;

			// Token: 0x0400EDFA RID: 60922
			protected Vector3 vector3_1 = Vector3.zero;

			// Token: 0x0400EDFB RID: 60923
			public const float LERP_DIRECTION_T = 0.9f;

			// Token: 0x0400EDFC RID: 60924
			private Action action_0;

			// Token: 0x0400EDFD RID: 60925
			protected bool bool_0 = true;

			// Token: 0x0400EDFE RID: 60926
			protected int int_0 = 1000;

			// Token: 0x0400EDFF RID: 60927
			protected GClass2086 gclass2086_0;

			// Token: 0x0400EE00 RID: 60928
			protected FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400EE01 RID: 60929
			protected Transform transform_0;

			// Token: 0x0400EE02 RID: 60930
			protected KnifeCollider knifeCollider_0;

			// Token: 0x0400EE03 RID: 60931
			private int int_1;

			// Token: 0x0400EE04 RID: 60932
			private int int_2;

			// Token: 0x0400EE05 RID: 60933
			private int int_3;

			// Token: 0x02003A14 RID: 14868
			[CompilerGenerated]
			public class Class1254<T> where T : Player.BaseKnifeController
			{
				// Token: 0x06015F46 RID: 89926 RVA: 0x00267E36 File Offset: 0x00266036
				public PlayerBones method_0()
				{
					return this.controller._player.PlayerBones;
				}

				// Token: 0x06015F47 RID: 89927 RVA: 0x00267E4D File Offset: 0x0026604D
				public void method_1()
				{
					this.controller.firearmsAnimator_0.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x06015F48 RID: 89928 RVA: 0x00731F90 File Offset: 0x00730190
				public void method_2()
				{
					this.controller._player.BodyAnimatorCommon.SetLayerWeight(this.knife.Template.AdditionalAnimationLayer, 0f);
					this.controller._player.BodyAnimatorCommon.SetLayerWeight(this.knife.Template.AdditionalAnimationLayer + 1, 0f);
					this.controller.action_0 = null;
				}

				// Token: 0x040129F0 RID: 76272
				public T controller;

				// Token: 0x040129F1 RID: 76273
				public KnifeComponent knife;
			}

			// Token: 0x02003A15 RID: 14869
			[CompilerGenerated]
			public class Class1255
			{
				// Token: 0x06015F4A RID: 89930 RVA: 0x00732010 File Offset: 0x00730210
				public void method_0()
				{
					this.baseKnifeController_0._player.ProceduralWeaponAnimation.enabled = true;
					this.inventoryOperation.Confirm(true);
					this.callback();
					Action action_ = this.baseKnifeController_0.action_0;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x040129F2 RID: 76274
				public Player.BaseKnifeController baseKnifeController_0;

				// Token: 0x040129F3 RID: 76275
				public Player.Class1312 inventoryOperation;

				// Token: 0x040129F4 RID: 76276
				public Action callback;
			}
		}

		// Token: 0x02002997 RID: 10647
		public interface Interface10
		{
			// Token: 0x06012595 RID: 75157
			void HideWeaponComplete();

			// Token: 0x06012596 RID: 75158
			void WeaponAppeared();

			// Token: 0x06012597 RID: 75159
			void HideWeapon(Action onHidden, bool fastDrop);

			// Token: 0x06012598 RID: 75160
			void OnFireEnd();

			// Token: 0x06012599 RID: 75161
			void OnFire();

			// Token: 0x0601259A RID: 75162
			void OnBackpackDrop();

			// Token: 0x0601259B RID: 75163
			void Execute<TInventoryOperation>(TInventoryOperation operation, Callback callback) where TInventoryOperation : GInterface438;

			// Token: 0x0601259C RID: 75164
			void FastForward();

			// Token: 0x0601259D RID: 75165
			void OnIdleStart();
		}

		// Token: 0x02002998 RID: 10648
		public abstract class Class1282<T> : Player.BaseAnimationOperationClass, Player.Interface10 where T : Player.BaseKnifeController
		{
			// Token: 0x0601259E RID: 75166 RVA: 0x0023FCEA File Offset: 0x0023DEEA
			public Class1282(T controller) : base(controller)
			{
				this.Gparam_0 = controller;
			}

			// Token: 0x0601259F RID: 75167 RVA: 0x0023FCFF File Offset: 0x0023DEFF
			public virtual void HideWeaponComplete()
			{
				base.method_0();
			}

			// Token: 0x060125A0 RID: 75168 RVA: 0x0023FD07 File Offset: 0x0023DF07
			public virtual void WeaponAppeared()
			{
				base.method_0();
			}

			// Token: 0x060125A1 RID: 75169 RVA: 0x0023FD0F File Offset: 0x0023DF0F
			public virtual void OnBackpackDrop()
			{
				base.method_0();
			}

			// Token: 0x060125A2 RID: 75170 RVA: 0x006861C8 File Offset: 0x006843C8
			public virtual void Execute<TInventoryOperation>(TInventoryOperation operation, Callback callback) where TInventoryOperation : GInterface438
			{
				base.method_0();
				GInterface443 ginterface = operation as GInterface443;
				if (ginterface == null)
				{
					callback.Succeed();
					return;
				}
				if (this.Gparam_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
				{
					callback.Fail(string.Format("Detach is not supported in current operation: {0}", base.GetType()));
					return;
				}
				callback.Succeed();
			}

			// Token: 0x060125A3 RID: 75171 RVA: 0x0023FD17 File Offset: 0x0023DF17
			public virtual void HideWeapon(Action onHidden, bool fastDrop)
			{
				base.method_0();
			}

			// Token: 0x060125A4 RID: 75172 RVA: 0x0023FD1F File Offset: 0x0023DF1F
			public virtual void OnFireEnd()
			{
				base.method_0();
			}

			// Token: 0x060125A5 RID: 75173 RVA: 0x0023FD27 File Offset: 0x0023DF27
			public virtual void OnFire()
			{
				base.method_0();
			}

			// Token: 0x060125A6 RID: 75174 RVA: 0x0023FD2F File Offset: 0x0023DF2F
			public virtual void FastForward()
			{
				base.method_0();
			}

			// Token: 0x060125A7 RID: 75175 RVA: 0x0023FD37 File Offset: 0x0023DF37
			public virtual void OnIdleStart()
			{
			}

			// Token: 0x0400EE06 RID: 60934
			[NonSerialized]
			public T Gparam_0;
		}

		// Token: 0x02002999 RID: 10649
		public enum EKickType : byte
		{
			// Token: 0x0400EE08 RID: 60936
			Slash,
			// Token: 0x0400EE09 RID: 60937
			Stab
		}

		// Token: 0x0200299A RID: 10650
		public class KnifeController : Player.BaseKnifeController, IKnifeController, GInterface199, IHandsController, GInterface197
		{
			// Token: 0x17002F93 RID: 12179
			// (get) Token: 0x060125A8 RID: 75176 RVA: 0x0023FD39 File Offset: 0x0023DF39
			// (set) Token: 0x060125A9 RID: 75177 RVA: 0x0023FD41 File Offset: 0x0023DF41
			public Action ComboPlanning { get; set; }

			// Token: 0x17002F94 RID: 12180
			// (get) Token: 0x060125AA RID: 75178 RVA: 0x0023FD4A File Offset: 0x0023DF4A
			// (set) Token: 0x060125AB RID: 75179 RVA: 0x0023FD52 File Offset: 0x0023DF52
			public Action OnAttackEnd { get; set; }

			// Token: 0x060125AC RID: 75180 RVA: 0x0023FD5B File Offset: 0x0023DF5B
			public static T smethod_9<T>(Player player, KnifeComponent knife) where T : Player.KnifeController
			{
				return Player.BaseKnifeController.smethod_6<T>(player, knife);
			}

			// Token: 0x060125AD RID: 75181 RVA: 0x0023FD64 File Offset: 0x0023DF64
			public static Task<T> smethod_10<T>(Player player, KnifeComponent knife) where T : Player.KnifeController
			{
				return Player.BaseKnifeController.smethod_7<T>(player, knife);
			}

			// Token: 0x17002F95 RID: 12181
			// (get) Token: 0x060125AE RID: 75182 RVA: 0x0023FD6D File Offset: 0x0023DF6D
			public new KnifeComponent Knife
			{
				get
				{
					return base.Knife;
				}
			}

			// Token: 0x17002F96 RID: 12182
			// (get) Token: 0x060125AF RID: 75183 RVA: 0x0023FD75 File Offset: 0x0023DF75
			public Player.KnifeController.Class1283 Class1283_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.KnifeController.Class1283;
				}
			}

			// Token: 0x060125B0 RID: 75184 RVA: 0x0023FD82 File Offset: 0x0023DF82
			public virtual void ExamineWeapon()
			{
				this.Class1283_0.ExamineWeapon();
			}

			// Token: 0x060125B1 RID: 75185 RVA: 0x0023FD8F File Offset: 0x0023DF8F
			public virtual bool MakeKnifeKick()
			{
				return this.Class1283_0.MakeKnifeKick();
			}

			// Token: 0x060125B2 RID: 75186 RVA: 0x00686230 File Offset: 0x00684430
			public override void OnComboPlanning()
			{
				if (this.knifeCollider_0.OnHit != null)
				{
					KnifeCollider knifeCollider_ = this.knifeCollider_0;
					knifeCollider_.OnHit = (Action<Player.GStruct182>)Delegate.Remove(knifeCollider_.OnHit, new Action<Player.GStruct182>(base.method_6));
				}
				this.Class1283_0.OnComboPlanning();
				Action comboPlanning = this.ComboPlanning;
				if (comboPlanning == null)
				{
					return;
				}
				comboPlanning();
			}

			// Token: 0x060125B3 RID: 75187 RVA: 0x0023FD9C File Offset: 0x0023DF9C
			public override void OnFireEnd()
			{
				base.Interface10_0.OnFireEnd();
				Action onAttackEnd = this.OnAttackEnd;
				if (onAttackEnd == null)
				{
					return;
				}
				onAttackEnd();
			}

			// Token: 0x060125B4 RID: 75188 RVA: 0x0023FDB9 File Offset: 0x0023DFB9
			public virtual bool MakeAlternativeKick()
			{
				return this.Class1283_0.MakeAlternativeKick();
			}

			// Token: 0x060125B5 RID: 75189 RVA: 0x0023FDC6 File Offset: 0x0023DFC6
			public virtual void BrakeCombo()
			{
				this.Class1283_0.BrakeCombo();
			}

			// Token: 0x060125B6 RID: 75190 RVA: 0x0023FDD3 File Offset: 0x0023DFD3
			public virtual void ContinueCombo()
			{
				this.Class1283_0.ContinueCombo();
			}

			// Token: 0x060125B7 RID: 75191 RVA: 0x0023FDE0 File Offset: 0x0023DFE0
			public override void SetCompassState(bool active)
			{
				if (this.CanChangeCompassState(active))
				{
					this.Class1283_0.SetKnifeCompassState(active);
				}
			}

			// Token: 0x060125B8 RID: 75192 RVA: 0x0023FDF7 File Offset: 0x0023DFF7
			public override bool CanRemove()
			{
				return this.Class1283_0.CanRemove();
			}

			// Token: 0x060125B9 RID: 75193 RVA: 0x0023FE04 File Offset: 0x0023E004
			public override void Spawn(float animationSpeed, Action callback)
			{
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				base.InitiateOperation<Player.KnifeController.Class1289>().Start(callback);
				this.firearmsAnimator_0.SkipTime(Time.fixedDeltaTime);
			}

			// Token: 0x060125BA RID: 75194 RVA: 0x0023FE2E File Offset: 0x0023E02E
			public override void SetInventoryOpened(bool opened)
			{
				if (opened)
				{
					this.SetCompassState(false);
				}
				this.Class1283_0.SetInventoryOpened(opened);
				MovementState currentManagedState = this._player.CurrentManagedState;
				if (currentManagedState == null)
				{
					return;
				}
				currentManagedState.OnInventory(opened);
			}

			// Token: 0x060125BB RID: 75195 RVA: 0x0023FE5C File Offset: 0x0023E05C
			public override bool IsInventoryOpen()
			{
				return this._objectInHandsAnimator.IsInInventory;
			}

			// Token: 0x060125BC RID: 75196 RVA: 0x0068628C File Offset: 0x0068448C
			public override bool CanExecute(GInterface438 operation)
			{
				GInterface443 ginterface = operation as GInterface443;
				return ginterface == null || !this._player.InventoryController.IsAnimatedSlot(ginterface.From1) || this.Class1283_0 is Player.KnifeController.Class1286;
			}

			// Token: 0x060125BD RID: 75197 RVA: 0x0023FE69 File Offset: 0x0023E069
			public void SetBotParameters()
			{
				this.knifeCollider_0.SetBotParameters(this.Knife.Template.ColliderScaleMultiplier);
			}

			// Token: 0x060125BE RID: 75198 RVA: 0x006862D0 File Offset: 0x006844D0
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.KnifeController.Class1289),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_9)
					},
					{
						typeof(Player.KnifeController.Class1286),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_10)
					},
					{
						typeof(Player.KnifeController.Class1288),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_11)
					},
					{
						typeof(Player.KnifeController.Class1287),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_12)
					},
					{
						typeof(Player.KnifeController.Class1284),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_13)
					}
				};
			}

			// Token: 0x060125C0 RID: 75200 RVA: 0x0023FE8E File Offset: 0x0023E08E
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_9()
			{
				return new Player.KnifeController.Class1289(this);
			}

			// Token: 0x060125C1 RID: 75201 RVA: 0x0023FE96 File Offset: 0x0023E096
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_10()
			{
				return new Player.KnifeController.Class1286(this);
			}

			// Token: 0x060125C2 RID: 75202 RVA: 0x0023FE9E File Offset: 0x0023E09E
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_11()
			{
				return new Player.KnifeController.Class1288(this);
			}

			// Token: 0x060125C3 RID: 75203 RVA: 0x0023FEA6 File Offset: 0x0023E0A6
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_12()
			{
				return new Player.KnifeController.Class1287(this);
			}

			// Token: 0x060125C4 RID: 75204 RVA: 0x0023FEAE File Offset: 0x0023E0AE
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_13()
			{
				return new Player.KnifeController.Class1284(this);
			}

			// Token: 0x0400EE0A RID: 60938
			protected bool bool_1;

			// Token: 0x0400EE0B RID: 60939
			[CompilerGenerated]
			private Action action_1;

			// Token: 0x0400EE0C RID: 60940
			[CompilerGenerated]
			private Action action_2;

			// Token: 0x02003A18 RID: 14872
			public class Class1284 : Player.KnifeController.Class1283
			{
				// Token: 0x06015F4F RID: 89935 RVA: 0x00267E93 File Offset: 0x00266093
				public Class1284(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F50 RID: 89936 RVA: 0x007321F4 File Offset: 0x007303F4
				public virtual void Start(Item item, Callback callback)
				{
					this.Callback_0 = callback;
					base.Start();
					this.Gparam_0.FirearmsAnimator.SetInventory(false);
					this.Gparam_0._player.SendHandsInteractionStateChanged(true, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
				}

				// Token: 0x06015F51 RID: 89937 RVA: 0x00267E9C File Offset: 0x0026609C
				public override void Reset()
				{
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015F52 RID: 89938 RVA: 0x00732248 File Offset: 0x00730448
				public override void OnBackpackDrop()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0._player.SendHandsInteractionStateChanged(false, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
					WeaponAnimationSpeedControllerClass.ResetTriggerHandReady(this.Gparam_0.FirearmsAnimator.Animator);
					this.Gparam_0.firearmsAnimator_0.SetInventory(this.Gparam_0.bool_1);
					this.Gparam_0.InitiateOperation<Player.KnifeController.Class1286>().Start();
					this.Callback_0.Succeed();
				}

				// Token: 0x06015F53 RID: 89939 RVA: 0x00267EAB File Offset: 0x002660AB
				public override void SetInventoryOpened(bool opened)
				{
					this.Gparam_0.bool_1 = opened;
				}

				// Token: 0x040129FE RID: 76286
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x02003A19 RID: 14873
			public class Class1286 : Player.KnifeController.Class1283
			{
				// Token: 0x06015F54 RID: 89940 RVA: 0x00267EB9 File Offset: 0x002660B9
				public Class1286(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F55 RID: 89941 RVA: 0x00267EC2 File Offset: 0x002660C2
				public new void Start()
				{
					base.Start();
					this.Float_1 = 0f;
				}

				// Token: 0x06015F56 RID: 89942 RVA: 0x00267ED5 File Offset: 0x002660D5
				public override void Reset()
				{
					this.Float_1 = 0f;
					base.Reset();
				}

				// Token: 0x06015F57 RID: 89943 RVA: 0x00267EE8 File Offset: 0x002660E8
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.KnifeController.Class1288>().Start(onHidden, fastDrop);
				}

				// Token: 0x06015F58 RID: 89944 RVA: 0x00267F03 File Offset: 0x00266103
				public override bool CanRemove()
				{
					return true;
				}

				// Token: 0x06015F59 RID: 89945 RVA: 0x007322D0 File Offset: 0x007304D0
				public override void Execute<TInventoryOperation>(TInventoryOperation operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.Player_0.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						this.State = Player.EOperationState.Finished;
						this.Gparam_0.InitiateOperation<Player.KnifeController.Class1284>().Start(ginterface.Item1, callback);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015F5A RID: 89946 RVA: 0x00267F06 File Offset: 0x00266106
				public override void Update(float deltaTime)
				{
					this.Float_1 += deltaTime;
					if (this.Float_1 > 300f)
					{
						this.Gparam_0.firearmsAnimator_0.Idle();
						this.Float_1 = 0f;
					}
				}

				// Token: 0x06015F5B RID: 89947 RVA: 0x00267F3E File Offset: 0x0026613E
				public override void ExamineWeapon()
				{
					this.Gparam_0.firearmsAnimator_0.LookTrigger();
				}

				// Token: 0x06015F5C RID: 89948 RVA: 0x00267F50 File Offset: 0x00266150
				public override void SetInventoryOpened(bool opened)
				{
					this.Gparam_0.firearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015F5D RID: 89949 RVA: 0x00732330 File Offset: 0x00730530
				public override bool MakeKnifeKick()
				{
					if (!this.Player_0.StateIsSuitableForHandInput)
					{
						return false;
					}
					if (this.Gparam_0._player.Physical.CanMeleeHit)
					{
						this.State = Player.EOperationState.Finished;
						this.Gparam_0.InitiateOperation<Player.KnifeController.Class1287>().Start(Player.EKickType.Slash);
						if (this.Gparam_0._player.UsedSimplifiedSkeleton)
						{
							int value = UnityEngine.Random.Range(0, 3);
							this.Gparam_0._player.BodyAnimatorCommon.SetInteger(PlayerAnimator.ATTACK_VARIANT, value);
							this.Gparam_0._player.BodyAnimatorCommon.SetTrigger(PlayerAnimator.IS_ATTACKING);
						}
						return true;
					}
					this.Gparam_0._player.Physical.InvokeInsufficient();
					return false;
				}

				// Token: 0x06015F5E RID: 89950 RVA: 0x00267F63 File Offset: 0x00266163
				public override void OnEnd()
				{
					this.SetKnifeCompassState(false);
				}

				// Token: 0x06015F5F RID: 89951 RVA: 0x00267F6C File Offset: 0x0026616C
				public override void SetKnifeCompassState(bool active)
				{
					this.Gparam_0.CompassState.Value = active;
				}

				// Token: 0x06015F60 RID: 89952 RVA: 0x007323E4 File Offset: 0x007305E4
				public override bool MakeAlternativeKick()
				{
					if (!this.Player_0.StateIsSuitableForHandInput)
					{
						return false;
					}
					if (this.Gparam_0._player.Physical.CanMeleeHit)
					{
						this.State = Player.EOperationState.Finished;
						this.Gparam_0.InitiateOperation<Player.KnifeController.Class1287>().Start(Player.EKickType.Stab);
						return true;
					}
					this.Gparam_0._player.Physical.InvokeInsufficient();
					return false;
				}

				// Token: 0x06015F61 RID: 89953 RVA: 0x00267F7F File Offset: 0x0026617F
				public override void StopKnifeKick()
				{
				}

				// Token: 0x06015F62 RID: 89954 RVA: 0x00267F81 File Offset: 0x00266181
				public override void StopAlternativeKick()
				{
				}

				// Token: 0x040129FF RID: 76287
				[NonSerialized]
				public const float Float_0 = 300f;

				// Token: 0x04012A00 RID: 76288
				[NonSerialized]
				public float Float_1;
			}

			// Token: 0x02003A1A RID: 14874
			public class Class1287 : Player.KnifeController.Class1283
			{
				// Token: 0x06015F63 RID: 89955 RVA: 0x00267F83 File Offset: 0x00266183
				public Class1287(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F64 RID: 89956 RVA: 0x00732448 File Offset: 0x00730648
				public void Start(Player.EKickType eKickType)
				{
					base.Start();
					this.Gparam_0.LastKickType = eKickType;
					if (eKickType == Player.EKickType.Slash)
					{
						this.Gparam_0.firearmsAnimator_0.SetFire(true);
					}
					else
					{
						this.Gparam_0.firearmsAnimator_0.SetAlternativeFire(true);
					}
					this.Gparam_0.SetDeflected(false);
					this.Gparam_0.SetMeleeSpeed(this.Player_0.Physical.MeleeSpeed);
					this.Bool_0 = false;
				}

				// Token: 0x06015F65 RID: 89957 RVA: 0x007324BC File Offset: 0x007306BC
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					this.Gparam_0.knifeCollider_0.ManualUpdate();
					Vector3 position = this.Gparam_0.knifeCollider_0.transform.position;
					Vector3 normalized = (position - this.Gparam_0.vector3_1).normalized;
					UnityEngine.Debug.DrawLine(position, this.Gparam_0.vector3_1, Color.cyan, 10f);
					this.Gparam_0.vector3_0 = Vector3.Lerp(this.Gparam_0.vector3_0, normalized, 0.9f);
					this.Gparam_0.vector3_1 = position;
				}

				// Token: 0x06015F66 RID: 89958 RVA: 0x00267F8C File Offset: 0x0026618C
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015F67 RID: 89959 RVA: 0x00267F9B File Offset: 0x0026619B
				public override void OnComboPlanning()
				{
				}

				// Token: 0x06015F68 RID: 89960 RVA: 0x00267F9D File Offset: 0x0026619D
				public override void ContinueCombo()
				{
				}

				// Token: 0x06015F69 RID: 89961 RVA: 0x00267F9F File Offset: 0x0026619F
				public override void BrakeCombo()
				{
					this.Bool_0 = true;
					this.Gparam_0.firearmsAnimator_0.SetFire(false);
					this.Gparam_0.TranslateAnimatorParameter(0);
				}

				// Token: 0x06015F6A RID: 89962 RVA: 0x00267FC5 File Offset: 0x002661C5
				public override void OnIdleStart()
				{
					this.Gparam_0.OnFireEnd();
				}

				// Token: 0x06015F6B RID: 89963 RVA: 0x00267FD2 File Offset: 0x002661D2
				public override void StopKnifeKick()
				{
				}

				// Token: 0x06015F6C RID: 89964 RVA: 0x00267FD4 File Offset: 0x002661D4
				public override void StopAlternativeKick()
				{
				}

				// Token: 0x06015F6D RID: 89965 RVA: 0x00732558 File Offset: 0x00730758
				public override void OnFireEnd()
				{
					this.Gparam_0.firearmsAnimator_0.SetFire(false);
					this.Gparam_0.firearmsAnimator_0.SetAlternativeFire(false);
					if (this.Action_0 != null)
					{
						this.method_2();
					}
					else
					{
						this.method_3();
					}
					if (this.Gparam_0.knifeCollider_0.OnHit != null)
					{
						KnifeCollider knifeCollider_ = this.Gparam_0.knifeCollider_0;
						knifeCollider_.OnHit = (Action<Player.GStruct182>)Delegate.Remove(knifeCollider_.OnHit, new Action<Player.GStruct182>(this.Gparam_0.method_6));
					}
					this.Gparam_0.knifeCollider_0.OnFireEnd();
				}

				// Token: 0x06015F6E RID: 89966 RVA: 0x007325F0 File Offset: 0x007307F0
				public override void OnFire()
				{
					this.Gparam_0._player.Physical.ConsumeAsMelee((this.Gparam_0.LastKickType == Player.EKickType.Slash) ? this.Gparam_0.Knife.Template.PrimaryConsumption : this.Gparam_0.Knife.Template.SecondaryConsumption);
					if (this.Gparam_0.knifeCollider_0.OnHit == null)
					{
						KnifeCollider knifeCollider_ = this.Gparam_0.knifeCollider_0;
						knifeCollider_.OnHit = (Action<Player.GStruct182>)Delegate.Combine(knifeCollider_.OnHit, new Action<Player.GStruct182>(this.Gparam_0.method_6));
					}
					this.Gparam_0.knifeCollider_0.MaxDistance = ((this.Gparam_0.LastKickType == Player.EKickType.Slash) ? this.Gparam_0.Knife.Template.PrimaryDistance : this.Gparam_0.Knife.Template.SecondaryDistance);
					this.Gparam_0.knifeCollider_0.OnFire();
				}

				// Token: 0x06015F6F RID: 89967 RVA: 0x007326E8 File Offset: 0x007308E8
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					Player.KnifeController.Class1287.Class1256 @class = new Player.KnifeController.Class1287.Class1256();
					@class.class1287_0 = this;
					@class.onHidden = onHidden;
					@class.fastDrop = fastDrop;
					this.State = Player.EOperationState.Finished;
					this.Action_0 = new Action(@class.method_0);
				}

				// Token: 0x06015F70 RID: 89968 RVA: 0x00267FD6 File Offset: 0x002661D6
				public void method_2()
				{
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015F71 RID: 89969 RVA: 0x00267FEA File Offset: 0x002661EA
				public void method_3()
				{
					this.State = Player.EOperationState.Finished;
					this.Gparam_0.InitiateOperation<Player.KnifeController.Class1286>().Start();
				}

				// Token: 0x04012A01 RID: 76289
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012A02 RID: 76290
				[NonSerialized]
				public bool Bool_0;

				// Token: 0x02003B1C RID: 15132
				[CompilerGenerated]
				public class Class1256
				{
					// Token: 0x06016280 RID: 90752 RVA: 0x0026A376 File Offset: 0x00268576
					public void method_0()
					{
						this.class1287_0.Gparam_0.InitiateOperation<Player.KnifeController.Class1288>().Start(this.onHidden, this.fastDrop);
					}

					// Token: 0x04012DD9 RID: 77273
					public Player.KnifeController.Class1287 class1287_0;

					// Token: 0x04012DDA RID: 77274
					public Action onHidden;

					// Token: 0x04012DDB RID: 77275
					public bool fastDrop;
				}
			}

			// Token: 0x02003A1B RID: 14875
			public abstract class Class1283 : Player.Class1282<Player.KnifeController>
			{
				// Token: 0x06015F72 RID: 89970 RVA: 0x00268003 File Offset: 0x00266203
				public Class1283(Player.KnifeController controller) : base(controller)
				{
					this.Player_0 = controller._player;
				}

				// Token: 0x06015F73 RID: 89971 RVA: 0x00268018 File Offset: 0x00266218
				public virtual void ExamineWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015F74 RID: 89972 RVA: 0x00268020 File Offset: 0x00266220
				public virtual void SetInventoryOpened(bool opened)
				{
					base.method_0();
				}

				// Token: 0x06015F75 RID: 89973 RVA: 0x00268028 File Offset: 0x00266228
				public virtual bool MakeKnifeKick()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015F76 RID: 89974 RVA: 0x00268031 File Offset: 0x00266231
				public virtual void OnComboPlanning()
				{
					base.method_0();
				}

				// Token: 0x06015F77 RID: 89975 RVA: 0x00268039 File Offset: 0x00266239
				public virtual void BrakeCombo()
				{
					base.method_0();
				}

				// Token: 0x06015F78 RID: 89976 RVA: 0x00268041 File Offset: 0x00266241
				public virtual void ContinueCombo()
				{
					base.method_0();
				}

				// Token: 0x06015F79 RID: 89977 RVA: 0x00268049 File Offset: 0x00266249
				public virtual void StopKnifeKick()
				{
					base.method_0();
				}

				// Token: 0x06015F7A RID: 89978 RVA: 0x00268051 File Offset: 0x00266251
				public virtual bool CanRemove()
				{
					return false;
				}

				// Token: 0x06015F7B RID: 89979 RVA: 0x00268054 File Offset: 0x00266254
				public virtual bool MakeAlternativeKick()
				{
					base.method_0();
					return false;
				}

				// Token: 0x06015F7C RID: 89980 RVA: 0x0026805D File Offset: 0x0026625D
				public virtual void StopAlternativeKick()
				{
					base.method_0();
				}

				// Token: 0x06015F7D RID: 89981 RVA: 0x00268065 File Offset: 0x00266265
				public virtual void SetKnifeCompassState(bool active)
				{
					base.method_0();
				}

				// Token: 0x04012A03 RID: 76291
				[NonSerialized]
				public Player Player_0;
			}

			// Token: 0x02003A1C RID: 14876
			public class Class1288 : Player.KnifeController.Class1283
			{
				// Token: 0x06015F7E RID: 89982 RVA: 0x0026806D File Offset: 0x0026626D
				public Class1288(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F7F RID: 89983 RVA: 0x0073272C File Offset: 0x0073092C
				public void Start(Action onHidden, bool fastDrop)
				{
					this.Action_0 = onHidden;
					base.Start();
					this.Gparam_0.firearmsAnimator_0.SetActiveParam(false, true);
					this.Gparam_0.firearmsAnimator_0.SetFastHide(fastDrop);
					this.Gparam_0.SetMeleeSpeed(this.Player_0.Physical.MeleeSpeed);
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015F80 RID: 89984 RVA: 0x00268076 File Offset: 0x00266276
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015F81 RID: 89985 RVA: 0x00268085 File Offset: 0x00266285
				public override void HideWeaponComplete()
				{
					this.State = Player.EOperationState.Finished;
					this.Action_0();
				}

				// Token: 0x06015F82 RID: 89986 RVA: 0x00268099 File Offset: 0x00266299
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.Action_0 = (Action)Delegate.Combine(this.Action_0, onHidden);
				}

				// Token: 0x06015F83 RID: 89987 RVA: 0x002680B2 File Offset: 0x002662B2
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.HideWeaponComplete();
					}
				}

				// Token: 0x04012A04 RID: 76292
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x02003A1D RID: 14877
			public class Class1285 : Player.KnifeController.Class1284
			{
				// Token: 0x06015F84 RID: 89988 RVA: 0x002680C3 File Offset: 0x002662C3
				public Class1285(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F85 RID: 89989 RVA: 0x002680CC File Offset: 0x002662CC
				public override void Start(Item item, Callback callback)
				{
					this.Float_1 = 0f;
					this.Bool_0 = false;
					base.Start(item, callback);
				}

				// Token: 0x06015F86 RID: 89990 RVA: 0x002680E8 File Offset: 0x002662E8
				public override void FastForward()
				{
					if (!this.Bool_0)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
				}

				// Token: 0x06015F87 RID: 89991 RVA: 0x002680FF File Offset: 0x002662FF
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (!this.Bool_0 && this.Float_1 > 0.25f)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x04012A05 RID: 76293
				[NonSerialized]
				public const float Float_0 = 0.25f;

				// Token: 0x04012A06 RID: 76294
				[NonSerialized]
				public float Float_1;

				// Token: 0x04012A07 RID: 76295
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A1E RID: 14878
			public class Class1289 : Player.KnifeController.Class1283
			{
				// Token: 0x06015F88 RID: 89992 RVA: 0x00268138 File Offset: 0x00266338
				public Class1289(Player.KnifeController controller) : base(controller)
				{
				}

				// Token: 0x06015F89 RID: 89993 RVA: 0x007327A4 File Offset: 0x007309A4
				public void Start(Action callback)
				{
					this.Action_1 = callback;
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, 1f);
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					base.Start();
					this.Gparam_0.firearmsAnimator_0.SetActiveParam(true, true);
					this.Gparam_0.firearmsAnimator_0.SetMeleeSpeed(this.Player_0.Physical.MeleeSpeed);
					this.Gparam_0.firearmsAnimator_0.SetInventory(this.Player_0._isInventoryOpened);
					if (this.Player_0.UsedSimplifiedSkeleton)
					{
						this.FastForward();
					}
				}

				// Token: 0x06015F8A RID: 89994 RVA: 0x00268141 File Offset: 0x00266341
				public override void Reset()
				{
					base.Reset();
					this.Action_1 = null;
					this.Action_0 = null;
				}

				// Token: 0x06015F8B RID: 89995 RVA: 0x0073285C File Offset: 0x00730A5C
				public override void WeaponAppeared()
				{
					this.Gparam_0.SetupProp();
					this.State = Player.EOperationState.Finished;
					this.Gparam_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					Player.KnifeController.Class1286 @class = this.Gparam_0.InitiateOperation<Player.KnifeController.Class1286>();
					@class.Start();
					this.Action_1();
					if (this.Action_0 != null)
					{
						@class.HideWeapon(this.Action_0, this.Bool_0);
					}
				}

				// Token: 0x06015F8C RID: 89996 RVA: 0x00268157 File Offset: 0x00266357
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.Action_0 = onHidden;
					this.Bool_0 = fastDrop;
				}

				// Token: 0x06015F8D RID: 89997 RVA: 0x00268167 File Offset: 0x00266367
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.WeaponAppeared();
					}
				}

				// Token: 0x06015F8E RID: 89998 RVA: 0x00268178 File Offset: 0x00266378
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x04012A08 RID: 76296
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012A09 RID: 76297
				[NonSerialized]
				public Action Action_1;

				// Token: 0x04012A0A RID: 76298
				[NonSerialized]
				public bool Bool_0;
			}
		}

		// Token: 0x0200299B RID: 10651
		public struct GStruct182
		{
			// Token: 0x060125C5 RID: 75205 RVA: 0x0023FEB6 File Offset: 0x0023E0B6
			public GStruct182(RaycastHit hit)
			{
				this.collider = hit.collider;
				this.point = hit.point;
				this.normal = hit.normal;
			}

			// Token: 0x0400EE0D RID: 60941
			public Collider collider;

			// Token: 0x0400EE0E RID: 60942
			public Vector3 point;

			// Token: 0x0400EE0F RID: 60943
			public Vector3 normal;
		}

		// Token: 0x0200299C RID: 10652
		public class QuickKnifeKickController : Player.BaseKnifeController, GInterface207, GInterface205<KnifeItemClass>, GInterface204, IHandsController
		{
			// Token: 0x17002F97 RID: 12183
			// (get) Token: 0x060125C6 RID: 75206 RVA: 0x0023FEDF File Offset: 0x0023E0DF
			public new KnifeItemClass Item
			{
				get
				{
					return (KnifeItemClass)base.Knife.Item;
				}
			}

			// Token: 0x060125C7 RID: 75207 RVA: 0x0023FEF1 File Offset: 0x0023E0F1
			public static T smethod_9<T>(Player player, KnifeComponent knife) where T : Player.QuickKnifeKickController
			{
				return Player.BaseKnifeController.smethod_6<T>(player, knife);
			}

			// Token: 0x060125C8 RID: 75208 RVA: 0x0023FEFA File Offset: 0x0023E0FA
			public static Task<T> smethod_10<T>(Player player, KnifeComponent knife) where T : Player.QuickKnifeKickController
			{
				return Player.BaseKnifeController.smethod_7<T>(player, knife);
			}

			// Token: 0x17002F98 RID: 12184
			// (get) Token: 0x060125C9 RID: 75209 RVA: 0x0023FF03 File Offset: 0x0023E103
			public Player.QuickKnifeKickController.Class1290 Class1290_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.QuickKnifeKickController.Class1290;
				}
			}

			// Token: 0x060125CA RID: 75210 RVA: 0x0023FF10 File Offset: 0x0023E110
			public void SetOnUsedCallback(Callback<GInterface205<KnifeItemClass>> callback)
			{
				this.Class1290_0.SetOnUsedCallback(callback);
			}

			// Token: 0x060125CB RID: 75211 RVA: 0x0023FF1E File Offset: 0x0023E11E
			public override void Spawn(float animationSpeed, Action callback)
			{
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				base.InitiateOperation<Player.QuickKnifeKickController.Class1290>().Start(callback);
				this.firearmsAnimator_0.SkipTime(Time.fixedDeltaTime);
			}

			// Token: 0x060125CC RID: 75212 RVA: 0x0023FF48 File Offset: 0x0023E148
			public override bool CanExecute(GInterface438 operation)
			{
				return false;
			}

			// Token: 0x060125CD RID: 75213 RVA: 0x0023FF4B File Offset: 0x0023E14B
			public override bool CanRemove()
			{
				return true;
			}

			// Token: 0x060125CE RID: 75214 RVA: 0x0023FF4E File Offset: 0x0023E14E
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.QuickKnifeKickController.Class1290),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_9)
					}
				};
			}

			// Token: 0x060125D0 RID: 75216 RVA: 0x0023FF79 File Offset: 0x0023E179
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_9()
			{
				return new Player.QuickKnifeKickController.Class1290(this);
			}

			// Token: 0x02003A1F RID: 14879
			public class Class1290 : Player.Class1282<Player.QuickKnifeKickController>
			{
				// Token: 0x06015F8F RID: 89999 RVA: 0x0026818F File Offset: 0x0026638F
				public Class1290(Player.QuickKnifeKickController controller) : base(controller)
				{
				}

				// Token: 0x06015F90 RID: 90000 RVA: 0x007328D4 File Offset: 0x00730AD4
				public void Start(Action callback)
				{
					this.Action_0 = callback;
					this.Gparam_0.firearmsAnimator_0.SetQuickFire(true);
					this.Gparam_0.firearmsAnimator_0.SetActiveParam(false, true);
					this.Gparam_0.firearmsAnimator_0.SetMeleeSpeed(this.Gparam_0._player.Physical.MeleeSpeed);
					this.Gparam_0.SetDeflected(false);
					this.Gparam_0.SetMeleeSpeed(this.Gparam_0._player.Physical.MeleeSpeed);
				}

				// Token: 0x06015F91 RID: 90001 RVA: 0x00268198 File Offset: 0x00266398
				public override void WeaponAppeared()
				{
					this.Action_0();
				}

				// Token: 0x06015F92 RID: 90002 RVA: 0x002681A5 File Offset: 0x002663A5
				public override void HideWeapon(Action onHidden, bool fastHide)
				{
					onHidden();
					if (GClass842.DisabledForNow)
					{
						return;
					}
					if (this.Bool_0)
					{
						onHidden();
						return;
					}
					this.Action_1 = onHidden;
				}

				// Token: 0x06015F93 RID: 90003 RVA: 0x002681CB File Offset: 0x002663CB
				public void SetOnUsedCallback(Callback<GInterface205<KnifeItemClass>> callback)
				{
					this.Callback_0 = callback;
				}

				// Token: 0x06015F94 RID: 90004 RVA: 0x0073295C File Offset: 0x00730B5C
				public override void OnFireEnd()
				{
					this.Bool_0 = true;
					this.Gparam_0.firearmsAnimator_0.SetQuickFire(false);
					if (this.Gparam_0.Destroyed)
					{
						this.Action_1();
					}
					else if (this.Callback_0 != null)
					{
						this.Callback_0(this.Gparam_0);
					}
					if (this.Gparam_0.knifeCollider_0.OnHit != null)
					{
						KnifeCollider knifeCollider_ = this.Gparam_0.knifeCollider_0;
						knifeCollider_.OnHit = (Action<Player.GStruct182>)Delegate.Remove(knifeCollider_.OnHit, new Action<Player.GStruct182>(this.Gparam_0.method_6));
					}
					this.Gparam_0.knifeCollider_0.OnFireEnd();
				}

				// Token: 0x06015F95 RID: 90005 RVA: 0x00732A0C File Offset: 0x00730C0C
				public override void OnFire()
				{
					this.Gparam_0._player.Physical.ConsumeAsMelee(this.Gparam_0.Knife.Template.SecondaryConsumption);
					KnifeCollider knifeCollider_ = this.Gparam_0.knifeCollider_0;
					knifeCollider_.OnHit = (Action<Player.GStruct182>)Delegate.Combine(knifeCollider_.OnHit, new Action<Player.GStruct182>(this.Gparam_0.method_6));
					this.Gparam_0.knifeCollider_0.MaxDistance = this.Gparam_0.Knife.Template.PrimaryDistance;
					this.Gparam_0.knifeCollider_0.OnFire();
				}

				// Token: 0x06015F96 RID: 90006 RVA: 0x002681D4 File Offset: 0x002663D4
				public override void Update(float deltaTime)
				{
					this.Gparam_0.knifeCollider_0.ManualUpdate();
					base.Update(deltaTime);
				}

				// Token: 0x06015F97 RID: 90007 RVA: 0x002681ED File Offset: 0x002663ED
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Gparam_0._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x04012A0B RID: 76299
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012A0C RID: 76300
				[NonSerialized]
				public Action Action_1;

				// Token: 0x04012A0D RID: 76301
				[NonSerialized]
				public Callback<GInterface205<KnifeItemClass>> Callback_0;

				// Token: 0x04012A0E RID: 76302
				[NonSerialized]
				public bool Bool_0;
			}
		}

		// Token: 0x0200299D RID: 10653
		public class MedsController : Player.ItemHandsController, GInterface203, IOnHandsUseCallback, IHandsController
		{
			// Token: 0x17002F99 RID: 12185
			// (get) Token: 0x060125D1 RID: 75217 RVA: 0x0023FF81 File Offset: 0x0023E181
			public override int AnimationVariant
			{
				get
				{
					return this._animationVariant;
				}
			}

			// Token: 0x17002F9A RID: 12186
			// (get) Token: 0x060125D2 RID: 75218 RVA: 0x0023FF89 File Offset: 0x0023E189
			public Player.MedsController.ObservedMedsControllerClass ObservedMedsControllerClass
			{
				get
				{
					return base.CurrentHandsOperation as Player.MedsController.ObservedMedsControllerClass;
				}
			}

			// Token: 0x17002F9B RID: 12187
			// (get) Token: 0x060125D3 RID: 75219 RVA: 0x0023FF96 File Offset: 0x0023E196
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x17002F9C RID: 12188
			// (get) Token: 0x060125D4 RID: 75220 RVA: 0x0023FF9E File Offset: 0x0023E19E
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x14000486 RID: 1158
			// (add) Token: 0x060125D5 RID: 75221 RVA: 0x00686370 File Offset: 0x00684570
			// (remove) Token: 0x060125D6 RID: 75222 RVA: 0x006863A8 File Offset: 0x006845A8
			public event Action OnOutUseEvent
			{
				[CompilerGenerated]
				add
				{
					Action action = this.action_0;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Combine(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_0, value2, action2);
					}
					while (action != action2);
				}
				[CompilerGenerated]
				remove
				{
					Action action = this.action_0;
					Action action2;
					do
					{
						action2 = action;
						Action value2 = (Action)Delegate.Remove(action2, value);
						action = Interlocked.CompareExchange<Action>(ref this.action_0, value2, action2);
					}
					while (action != action2);
				}
			}

			// Token: 0x17002F9D RID: 12189
			// (get) Token: 0x060125D7 RID: 75223 RVA: 0x0023FFCB File Offset: 0x0023E1CB
			// (set) Token: 0x060125D8 RID: 75224 RVA: 0x0023FFD3 File Offset: 0x0023E1D3
			public bool FailedToApply { get; set; }

			// Token: 0x060125D9 RID: 75225 RVA: 0x0023FFDC File Offset: 0x0023E1DC
			public override void ShowGesture(EInteraction gesture)
			{
			}

			// Token: 0x060125DA RID: 75226 RVA: 0x0023FFDE File Offset: 0x0023E1DE
			public override void Destroy()
			{
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this.firearmsAnimator_0 = null;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x060125DB RID: 75227 RVA: 0x0024000E File Offset: 0x0023E20E
			public override void OnOutUse()
			{
				base.OnOutUse();
				Action action = this.action_0;
				if (action == null)
				{
					return;
				}
				action();
			}

			// Token: 0x060125DC RID: 75228 RVA: 0x00240026 File Offset: 0x0023E226
			public void SetOnUsedCallback(Callback<IOnHandsUseCallback> callback)
			{
				this.ObservedMedsControllerClass.SetOnUsedCallback(callback);
			}

			// Token: 0x060125DD RID: 75229 RVA: 0x00240034 File Offset: 0x0023E234
			public Callback<IOnHandsUseCallback> GetOnUsedCallback()
			{
				return this.ObservedMedsControllerClass.GetOnUsedCallback();
			}

			// Token: 0x060125DE RID: 75230 RVA: 0x00240041 File Offset: 0x0023E241
			public void Remove()
			{
				this.method_1().HandleExceptions();
			}

			// Token: 0x060125DF RID: 75231 RVA: 0x006863E0 File Offset: 0x006845E0
			public Task method_1()
			{
				Player.MedsController.Struct325 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.medsController_0 = this;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.MedsController.Struct325>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060125E0 RID: 75232 RVA: 0x0024004E File Offset: 0x0023E24E
			public void ClearQueue()
			{
				this.ObservedMedsControllerClass.ClearQueue();
			}

			// Token: 0x060125E1 RID: 75233 RVA: 0x0024005B File Offset: 0x0023E25B
			public override bool CanExecute(GInterface438 operation)
			{
				return true;
			}

			// Token: 0x060125E2 RID: 75234 RVA: 0x0024005E File Offset: 0x0023E25E
			public override void Execute(GInterface438 operation, Callback callback)
			{
				callback.Succeed();
			}

			// Token: 0x060125E3 RID: 75235 RVA: 0x00240066 File Offset: 0x0023E266
			public override void Pickup(bool p)
			{
			}

			// Token: 0x060125E4 RID: 75236 RVA: 0x00240068 File Offset: 0x0023E268
			public override void Loot(bool p)
			{
			}

			// Token: 0x060125E5 RID: 75237 RVA: 0x0024006A File Offset: 0x0023E26A
			public override void Interact(bool isInteracting, int actionIndex)
			{
			}

			// Token: 0x060125E6 RID: 75238 RVA: 0x0024006C File Offset: 0x0023E26C
			public override bool CanInteract()
			{
				return false;
			}

			// Token: 0x060125E7 RID: 75239 RVA: 0x0024006F File Offset: 0x0023E26F
			public override bool CanRemove()
			{
				return true;
			}

			// Token: 0x060125E8 RID: 75240 RVA: 0x00240072 File Offset: 0x0023E272
			public static T smethod_6<T>(Player player, Item item, GStruct382<EBodyPart> bodyParts, float amount, int animationVariant) where T : Player.MedsController
			{
				T t = Player.ItemHandsController.smethod_1<T>(player, item, new Player.ItemHandsController.Delegate8(Singleton<PoolManagerClass>.Instance.CreateItemUsablePrefab));
				Player.MedsController.smethod_8<T>(t, player, item, animationVariant);
				t.gstruct382_0 = bodyParts;
				t.float_0 = amount;
				return t;
			}

			// Token: 0x060125E9 RID: 75241 RVA: 0x00686424 File Offset: 0x00684624
			public static Task<T> smethod_7<T>(Player player, Item item, GStruct382<EBodyPart> bodyParts, float amount, int animationVariant) where T : Player.MedsController
			{
				Player.MedsController.Struct323<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.item = item;
				@struct.bodyParts = bodyParts;
				@struct.amount = amount;
				@struct.animationVariant = animationVariant;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.MedsController.Struct323<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060125EA RID: 75242 RVA: 0x00686488 File Offset: 0x00684688
			public static void smethod_8<T>(T controller, Player player, Item item, int animationVariant) where T : Player.MedsController
			{
				Player.MedsController.Class1257<T> @class = new Player.MedsController.Class1257<T>();
				@class.controller = controller;
				WeaponPrefab component = @class.controller._controllerObject.GetComponent<WeaponPrefab>();
				GClass2086 objectInHands = component.ObjectInHands;
				player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				player.ProceduralWeaponAnimation.InitTransforms(@class.controller.HandsHierarchy, null);
				objectInHands.AfterGetFromPoolInit(player.ProceduralWeaponAnimation, null, player.IsYourPlayer);
				@class.controller.firearmsAnimator_0 = component.FirearmsAnimator;
				@class.controller.firearmsAnimator_0.AddEventsConsumer(@class.controller);
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_0));
				@class.controller.firearmsAnimator_0.SkipTime(0.0001f);
				@class.controller._player.HandsAnimator = @class.controller.firearmsAnimator_0;
				@class.controller._controllerObject.GetComponent<BaseSoundPlayer>().Init(@class.controller, player.PlayerBones.WeaponRoot, player);
				@class.controller.firearmsAnimator_0.SetUseTimeMultiplier(1f + player.Skills.SurgerySpeed);
				@class.controller.OnOutUseEvent += @class.method_1;
				@class.controller.CompositeDisposable.AddDisposable(new Action(@class.method_2));
			}

			// Token: 0x060125EB RID: 75243 RVA: 0x002400AD File Offset: 0x0023E2AD
			public static void smethod_9(Player.MedsController controller)
			{
				if (controller == null)
				{
					return;
				}
				controller.firearmsAnimator_0.SetActiveParam(true, false);
				controller.firearmsAnimator_0.SetNextLimb(false);
				Player.MedsController.smethod_10(controller);
			}

			// Token: 0x060125EC RID: 75244 RVA: 0x00686628 File Offset: 0x00684828
			public static void smethod_10(Player.MedsController controller)
			{
				Item item = controller.Item;
				controller._animationVariant++;
				int num = 0;
				AnimationVariantsComponent animationVariantsComponent;
				if (item.TryGetItemComponent<AnimationVariantsComponent>(out animationVariantsComponent))
				{
					num = animationVariantsComponent.VariantsNumber;
				}
				int animationVariant = (int)Mathf.Repeat((float)controller._animationVariant, (float)num);
				controller._animationVariant = animationVariant;
				controller.firearmsAnimator_0.SetAnimationVariant(animationVariant);
			}

			// Token: 0x060125ED RID: 75245 RVA: 0x002400D8 File Offset: 0x0023E2D8
			public override void ManualUpdate(float deltaTime)
			{
				base.ManualUpdate(deltaTime);
				FirearmsAnimator firearmsAnimator = this.firearmsAnimator_0;
				if (firearmsAnimator == null)
				{
					return;
				}
				firearmsAnimator.SetAimAngle(this._player.Pitch);
			}

			// Token: 0x060125EE RID: 75246 RVA: 0x002400FC File Offset: 0x0023E2FC
			public override void IEventsConsumerOnWeapOut()
			{
				this.ObservedMedsControllerClass.HideWeaponComplete();
			}

			// Token: 0x060125EF RID: 75247 RVA: 0x00240109 File Offset: 0x0023E309
			public override void IEventsConsumerOnThirdAction(int IntParam)
			{
				base.TranslateAnimatorParameter(IntParam);
			}

			// Token: 0x060125F0 RID: 75248 RVA: 0x00240112 File Offset: 0x0023E312
			public override void Spawn(float animationSpeed, Action callback)
			{
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				this.firearmsAnimator_0.SetPointOfViewOnSpawn(this._player.PointOfView);
				base.InitiateOperation<Player.MedsController.ObservedMedsControllerClass>().Start(this.gstruct382_0, this.float_0, callback);
			}

			// Token: 0x060125F1 RID: 75249 RVA: 0x0024014E File Offset: 0x0023E34E
			public override void Drop(float animationSpeed, Action callback, bool fastDrop = false, Item nextControllerItem = null)
			{
				this.method_2(callback).HandleExceptions();
			}

			// Token: 0x060125F2 RID: 75250 RVA: 0x00686680 File Offset: 0x00684880
			public Task method_2(Action callback)
			{
				Player.MedsController.Struct324 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.medsController_0 = this;
				@struct.callback = callback;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.MedsController.Struct324>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x060125F3 RID: 75251 RVA: 0x0024015C File Offset: 0x0023E35C
			public override void FastForwardCurrentState()
			{
				this.ObservedMedsControllerClass.FastForward();
			}

			// Token: 0x060125F4 RID: 75252 RVA: 0x00240169 File Offset: 0x0023E369
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.MedsController.ObservedMedsControllerClass),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_3)
					}
				};
			}

			// Token: 0x060125F6 RID: 75254 RVA: 0x00240194 File Offset: 0x0023E394
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_3()
			{
				return new Player.MedsController.ObservedMedsControllerClass(this);
			}

			// Token: 0x0400EE10 RID: 60944
			private float float_0;

			// Token: 0x0400EE11 RID: 60945
			public int _animationVariant;

			// Token: 0x0400EE12 RID: 60946
			private GStruct382<EBodyPart> gstruct382_0;

			// Token: 0x0400EE13 RID: 60947
			private FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400EE14 RID: 60948
			[CompilerGenerated]
			private Action action_0;

			// Token: 0x0400EE15 RID: 60949
			[CompilerGenerated]
			private bool bool_0;

			// Token: 0x02003A20 RID: 14880
			public class ObservedMedsControllerClass : Player.BaseAnimationOperationClass
			{
				// Token: 0x06015F98 RID: 90008 RVA: 0x00268209 File Offset: 0x00266409
				public ObservedMedsControllerClass(Player.MedsController controller) : base(controller)
				{
					this.MedsController_0 = controller;
				}

				// Token: 0x06015F99 RID: 90009 RVA: 0x00268219 File Offset: 0x00266419
				public override void Reset()
				{
					this.Action_0 = null;
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015F9A RID: 90010 RVA: 0x00732AAC File Offset: 0x00730CAC
				public void Start(GStruct382<EBodyPart> bodyParts, float amount, Action callback)
				{
					base.Start();
					callback();
					this.Queue_0 = new Queue<EBodyPart>();
					for (int i = 0; i < bodyParts.Length; i++)
					{
						this.Queue_0.Enqueue(bodyParts[i]);
					}
					if (this.MedsController_0.Item is MedsItemClass)
					{
						amount = 1f;
					}
					FoodDrinkComponent itemComponent = this.MedsController_0.Item.GetItemComponent<FoodDrinkComponent>();
					if (itemComponent != null)
					{
						amount = Mathf.Clamp(amount, 0f, itemComponent.HpPercent / itemComponent.MaxResource);
					}
					this.Float_0 = amount;
					AnimationVariantsComponent animationVariantsComponent;
					if (this.MedsController_0.Item.TryGetItemComponent<AnimationVariantsComponent>(out animationVariantsComponent))
					{
						this.Int_0 = UnityEngine.Random.Range(0, animationVariantsComponent.VariantsNumber);
					}
					this.method_5();
					this.MedsController_0._player.HealthController.EffectRemovedEvent += this.method_8;
					FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_ != null)
					{
						firearmsAnimator_.SetActiveParam(true, false);
					}
					this.MedsController_0.OnOutUseEvent += this.method_3;
					this.MedsController_0.Item.Owner.RemoveItemEvent += this.method_2;
				}

				// Token: 0x06015F9B RID: 90011 RVA: 0x0026822F File Offset: 0x0026642F
				public void method_2(GEventArgs3 args)
				{
					if (args.Item != this.MedsController_0.Item)
					{
						return;
					}
					this.method_9();
				}

				// Token: 0x06015F9C RID: 90012 RVA: 0x0026824B File Offset: 0x0026644B
				public void method_3()
				{
					FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_ != null)
					{
						firearmsAnimator_.SetActiveParam(true, false);
					}
					FirearmsAnimator firearmsAnimator_2 = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_2 == null)
					{
						return;
					}
					firearmsAnimator_2.SetNextLimb(false);
				}

				// Token: 0x06015F9D RID: 90013 RVA: 0x00732BE4 File Offset: 0x00730DE4
				public bool method_4()
				{
					MedKitComponent medKitComponent;
					return this.Queue_0.Count != 0 && this.MedsController_0.Item != null && this.MedsController_0.Item.TryGetItemComponent<MedKitComponent>(out medKitComponent) && medKitComponent.HpResource >= Mathf.Epsilon;
				}

				// Token: 0x06015F9E RID: 90014 RVA: 0x00732C38 File Offset: 0x00730E38
				public void method_5()
				{
					EBodyPart bodyPart = EBodyPart.Common;
					EBodyPart ebodyPart;
					if (this.Queue_0.TryPeek(out ebodyPart))
					{
						bodyPart = ebodyPart;
					}
					if (this.MedsController_0._player.ActiveHealthController == null)
					{
						return;
					}
					if (this.MedsController_0._player.ActiveHealthController.DoMedEffect(this.MedsController_0.Item, bodyPart, new float?(this.Float_0)) != null)
					{
						float num = this.MedsController_0._player.Skills.SurgerySpeed.Value / 100f;
						ValueStruct bodyPartHealth = this.MedsController_0._player.HealthController.GetBodyPartHealth(ebodyPart, false);
						if (bodyPartHealth.Maximum - bodyPartHealth.Current < 10f)
						{
							num += 0.2f;
						}
						FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
						if (firearmsAnimator_ != null)
						{
							firearmsAnimator_.SetUseTimeMultiplier(1f + num);
						}
						this.method_6();
						return;
					}
					this.State = Player.EOperationState.Finished;
					this.MedsController_0.FailedToApply = true;
					Callback<IOnHandsUseCallback> callback_ = this.Callback_0;
					this.Callback_0 = null;
					if (callback_ == null)
					{
						return;
					}
					callback_(this.MedsController_0);
				}

				// Token: 0x06015F9F RID: 90015 RVA: 0x00732D48 File Offset: 0x00730F48
				public void method_6()
				{
					Item item = this.MedsController_0.Item;
					this.Int_0++;
					int num = 0;
					AnimationVariantsComponent animationVariantsComponent;
					if (item.TryGetItemComponent<AnimationVariantsComponent>(out animationVariantsComponent))
					{
						num = animationVariantsComponent.VariantsNumber;
					}
					int animationVariant = (int)Mathf.Repeat((float)this.Int_0, (float)num);
					this.MedsController_0._animationVariant = animationVariant;
					FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_ == null)
					{
						return;
					}
					firearmsAnimator_.SetAnimationVariant(animationVariant);
				}

				// Token: 0x06015FA0 RID: 90016 RVA: 0x0026827B File Offset: 0x0026647B
				public void SetOnUsedCallback(Callback<IOnHandsUseCallback> callback)
				{
					this.Callback_0 = callback;
				}

				// Token: 0x06015FA1 RID: 90017 RVA: 0x00268284 File Offset: 0x00266484
				public Callback<IOnHandsUseCallback> GetOnUsedCallback()
				{
					return this.Callback_0;
				}

				// Token: 0x06015FA2 RID: 90018 RVA: 0x0026828C File Offset: 0x0026648C
				public void Remove()
				{
					this.Queue_0.Clear();
					this.MedsController_0._player.HealthController.CancelApplyingItem();
				}

				// Token: 0x06015FA3 RID: 90019 RVA: 0x00732DB4 File Offset: 0x00730FB4
				public bool method_7()
				{
					EBodyPart ebodyPart;
					return this.Queue_0.TryPeek(out ebodyPart) && (ebodyPart == EBodyPart.Common || !this.MedsController_0._player.HealthController.CanApplyItem(this.MedsController_0.Item, ebodyPart));
				}

				// Token: 0x06015FA4 RID: 90020 RVA: 0x00732DFC File Offset: 0x00730FFC
				public void method_8(IEffect effect)
				{
					if (!(effect is GInterface376))
					{
						return;
					}
					while (this.method_7())
					{
						this.Queue_0.Dequeue();
					}
					bool flag = this.method_4();
					if (this.MedsController_0.firearmsAnimator_0 != null && this.MedsController_0.firearmsAnimator_0.HasNextLimb())
					{
						this.MedsController_0.firearmsAnimator_0.SetActiveParam(false, false);
						this.MedsController_0.firearmsAnimator_0.SetNextLimb(flag);
					}
					if (flag)
					{
						this.method_5();
						return;
					}
					this.method_9();
				}

				// Token: 0x06015FA5 RID: 90021 RVA: 0x00732E80 File Offset: 0x00731080
				public void method_9()
				{
					FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_ != null)
					{
						firearmsAnimator_.SetNextLimb(false);
					}
					FirearmsAnimator firearmsAnimator_2 = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_2 != null)
					{
						firearmsAnimator_2.SetActiveParam(false, true);
					}
					if (this.Bool_0)
					{
						return;
					}
					this.Bool_0 = true;
					this.MedsController_0._player.HealthController.EffectRemovedEvent -= this.method_8;
					this.MedsController_0.OnOutUseEvent -= this.method_3;
					if (this.MedsController_0.Item.Owner != null)
					{
						this.MedsController_0.Item.Owner.RemoveItemEvent -= this.method_2;
					}
					if (this.MedsController_0 == null || this.MedsController_0.Equals(null))
					{
						return;
					}
					Callback<IOnHandsUseCallback> callback_ = this.Callback_0;
					this.Callback_0 = null;
					if (callback_ == null)
					{
						return;
					}
					callback_(this.MedsController_0);
				}

				// Token: 0x06015FA6 RID: 90022 RVA: 0x00732F78 File Offset: 0x00731178
				public void HideWeapon(Action onHiddenCallback)
				{
					ActiveHealthController activeHealthController = this.MedsController_0._player.ActiveHealthController;
					if (activeHealthController != null)
					{
						activeHealthController.RemoveMedEffect();
					}
					this.MedsController_0._player.HealthController.EffectRemovedEvent -= this.method_8;
					this.Action_0 = onHiddenCallback;
					FirearmsAnimator firearmsAnimator_ = this.MedsController_0.firearmsAnimator_0;
					if (firearmsAnimator_ != null)
					{
						firearmsAnimator_.SetActiveParam(false, false);
					}
					if (this.State == Player.EOperationState.Finished)
					{
						Action action_ = this.Action_0;
						if (action_ != null)
						{
							action_();
						}
						Callback<IOnHandsUseCallback> callback_ = this.Callback_0;
						if (callback_ != null)
						{
							callback_(this.MedsController_0);
						}
						this.Callback_0 = null;
					}
				}

				// Token: 0x06015FA7 RID: 90023 RVA: 0x002682AE File Offset: 0x002664AE
				public void HideWeaponComplete()
				{
					this.State = Player.EOperationState.Finished;
					this.MedsController_0._player.method_138(this.MedsController_0.Item).Confirm(true);
					Action action_ = this.Action_0;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x06015FA8 RID: 90024 RVA: 0x00733020 File Offset: 0x00731220
				public void ClearQueue()
				{
					if (this.Queue_0.Count <= 0)
					{
						return;
					}
					EBodyPart item = this.Queue_0.Dequeue();
					this.Queue_0.Clear();
					this.Queue_0.Enqueue(item);
				}

				// Token: 0x06015FA9 RID: 90025 RVA: 0x002682E8 File Offset: 0x002664E8
				public void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.HideWeaponComplete();
					}
				}

				// Token: 0x06015FAA RID: 90026 RVA: 0x002682F9 File Offset: 0x002664F9
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.MedsController_0._player.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x04012A0F RID: 76303
				[NonSerialized]
				public Player.MedsController MedsController_0;

				// Token: 0x04012A10 RID: 76304
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012A11 RID: 76305
				[NonSerialized]
				public Callback<IOnHandsUseCallback> Callback_0;

				// Token: 0x04012A12 RID: 76306
				[NonSerialized]
				public Queue<EBodyPart> Queue_0;

				// Token: 0x04012A13 RID: 76307
				[NonSerialized]
				public float Float_0;

				// Token: 0x04012A14 RID: 76308
				[NonSerialized]
				public int Int_0;

				// Token: 0x04012A15 RID: 76309
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A21 RID: 14881
			[CompilerGenerated]
			public class Class1257<T> where T : Player.MedsController
			{
				// Token: 0x06015FAC RID: 90028 RVA: 0x0026831D File Offset: 0x0026651D
				public void method_0()
				{
					this.controller.firearmsAnimator_0.RemoveEventsConsumer(this.controller);
				}

				// Token: 0x06015FAD RID: 90029 RVA: 0x0026833F File Offset: 0x0026653F
				public void method_1()
				{
					Player.MedsController.smethod_9(this.controller);
				}

				// Token: 0x06015FAE RID: 90030 RVA: 0x00268351 File Offset: 0x00266551
				public void method_2()
				{
					this.controller.OnOutUseEvent -= this.method_1;
				}

				// Token: 0x04012A16 RID: 76310
				public T controller;
			}
		}

		// Token: 0x0200299E RID: 10654
		public abstract class AbstractHandsController : MonoBehaviour, IHandsController, IActorEvents
		{
			// Token: 0x14000487 RID: 1159
			// (add) Token: 0x060125F7 RID: 75255 RVA: 0x006866CC File Offset: 0x006848CC
			// (remove) Token: 0x060125F8 RID: 75256 RVA: 0x00686704 File Offset: 0x00684904
			public event Action<bool> OnAimingChanged;

			// Token: 0x17002F9E RID: 12190
			// (get) Token: 0x060125F9 RID: 75257 RVA: 0x0024019C File Offset: 0x0023E39C
			// (set) Token: 0x060125FA RID: 75258 RVA: 0x002401A4 File Offset: 0x0023E3A4
			public Transform WeaponRoot { get; set; }

			// Token: 0x17002F9F RID: 12191
			// (get) Token: 0x060125FB RID: 75259
			public abstract GameObject ControllerGameObject { get; }

			// Token: 0x17002FA0 RID: 12192
			// (get) Token: 0x060125FC RID: 75260 RVA: 0x002401AD File Offset: 0x0023E3AD
			// (set) Token: 0x060125FD RID: 75261 RVA: 0x002401B5 File Offset: 0x0023E3B5
			public bool Destroyed { get; set; }

			// Token: 0x17002FA1 RID: 12193
			// (get) Token: 0x060125FE RID: 75262
			public abstract TransformLinks HandsHierarchy { get; }

			// Token: 0x17002FA2 RID: 12194
			// (get) Token: 0x060125FF RID: 75263
			public abstract FirearmsAnimator FirearmsAnimator { get; }

			// Token: 0x17002FA3 RID: 12195
			// (get) Token: 0x06012600 RID: 75264 RVA: 0x002401BE File Offset: 0x0023E3BE
			// (set) Token: 0x06012601 RID: 75265 RVA: 0x002401C6 File Offset: 0x0023E3C6
			public AnimationEventsEmitter AnimationEventsEmitter { get; set; }

			// Token: 0x17002FA4 RID: 12196
			// (get) Token: 0x06012602 RID: 75266 RVA: 0x002401CF File Offset: 0x0023E3CF
			// (set) Token: 0x06012603 RID: 75267 RVA: 0x002401D2 File Offset: 0x0023E3D2
			public virtual bool IsAiming
			{
				get
				{
					return false;
				}
				set
				{
				}
			}

			// Token: 0x17002FA5 RID: 12197
			// (get) Token: 0x06012604 RID: 75268 RVA: 0x002401D4 File Offset: 0x0023E3D4
			public virtual float AimingSensitivity
			{
				get
				{
					return 1f;
				}
			}

			// Token: 0x17002FA6 RID: 12198
			// (get) Token: 0x06012605 RID: 75269 RVA: 0x002401DB File Offset: 0x0023E3DB
			// (set) Token: 0x06012606 RID: 75270 RVA: 0x002401E3 File Offset: 0x0023E3E3
			public virtual float AimingSmoothSensitivity { get; set; } = 1f;

			// Token: 0x06012607 RID: 75271 RVA: 0x002401EC File Offset: 0x0023E3EC
			public virtual void ManualLateUpdate(float deltaTime)
			{
			}

			// Token: 0x17002FA7 RID: 12199
			// (get) Token: 0x06012608 RID: 75272 RVA: 0x002401EE File Offset: 0x0023E3EE
			public virtual string LoggerDistinctId
			{
				get
				{
					return "undefined";
				}
			}

			// Token: 0x17002FA8 RID: 12200
			// (get) Token: 0x06012609 RID: 75273 RVA: 0x002401F5 File Offset: 0x0023E3F5
			public Item Item
			{
				get
				{
					return this.GetItem();
				}
			}

			// Token: 0x17002FA9 RID: 12201
			// (get) Token: 0x0601260A RID: 75274 RVA: 0x002401FD File Offset: 0x0023E3FD
			public virtual int AnimationVariant
			{
				get
				{
					return 0;
				}
			}

			// Token: 0x0601260B RID: 75275 RVA: 0x00240200 File Offset: 0x0023E400
			public virtual void Destroy()
			{
				this.CompositeDisposable.Dispose();
			}

			// Token: 0x0601260C RID: 75276
			public abstract bool CanExecute(GInterface438 operation);

			// Token: 0x0601260D RID: 75277
			public abstract void Execute(GInterface438 operation, Callback callback);

			// Token: 0x0601260E RID: 75278
			public abstract bool CanRemove();

			// Token: 0x0601260F RID: 75279 RVA: 0x0024020D File Offset: 0x0023E40D
			public virtual bool IsHandsProcessing()
			{
				return false;
			}

			// Token: 0x06012610 RID: 75280 RVA: 0x00240210 File Offset: 0x0023E410
			public virtual bool IsPlacingBeacon()
			{
				return false;
			}

			// Token: 0x06012611 RID: 75281 RVA: 0x00240213 File Offset: 0x0023E413
			public virtual bool CanInteract()
			{
				return true;
			}

			// Token: 0x06012612 RID: 75282 RVA: 0x00240216 File Offset: 0x0023E416
			public virtual bool InCanNotBeInterruptedOperation()
			{
				return false;
			}

			// Token: 0x06012613 RID: 75283
			public abstract void ShowGesture(EInteraction gesture);

			// Token: 0x06012614 RID: 75284
			public abstract void BlindFire(int b);

			// Token: 0x06012615 RID: 75285 RVA: 0x00240219 File Offset: 0x0023E419
			public virtual bool IsInInteraction()
			{
				return false;
			}

			// Token: 0x06012616 RID: 75286 RVA: 0x0024021C File Offset: 0x0023E41C
			public virtual bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction();
			}

			// Token: 0x06012617 RID: 75287 RVA: 0x00240224 File Offset: 0x0023E424
			public virtual float GetAnimatorFloatParam(int hash)
			{
				return 0f;
			}

			// Token: 0x06012618 RID: 75288 RVA: 0x0024022B File Offset: 0x0023E42B
			public virtual bool SupportPickup()
			{
				return false;
			}

			// Token: 0x06012619 RID: 75289 RVA: 0x0024022E File Offset: 0x0023E42E
			public virtual void Pickup(bool p)
			{
				throw new NotImplementedException();
			}

			// Token: 0x0601261A RID: 75290 RVA: 0x00240235 File Offset: 0x0023E435
			public virtual void Interact(bool isInteracting, int actionIndex)
			{
				throw new NotImplementedException();
			}

			// Token: 0x0601261B RID: 75291 RVA: 0x0024023C File Offset: 0x0023E43C
			public virtual void Loot(bool p)
			{
				throw new NotImplementedException();
			}

			// Token: 0x0601261C RID: 75292 RVA: 0x00240243 File Offset: 0x0023E443
			public virtual void SetInventoryOpened(bool opened)
			{
			}

			// Token: 0x0601261D RID: 75293 RVA: 0x00240245 File Offset: 0x0023E445
			public virtual bool IsInventoryOpen()
			{
				return false;
			}

			// Token: 0x0601261E RID: 75294 RVA: 0x00240248 File Offset: 0x0023E448
			public virtual void OnPlayerDead()
			{
			}

			// Token: 0x0601261F RID: 75295 RVA: 0x0024024A File Offset: 0x0023E44A
			public virtual void OnGameSessionEnd()
			{
			}

			// Token: 0x06012620 RID: 75296
			public abstract Item GetItem();

			// Token: 0x06012621 RID: 75297
			public abstract void ManualUpdate(float deltaTime);

			// Token: 0x06012622 RID: 75298
			public abstract void BallisticUpdate(float deltaTime);

			// Token: 0x06012623 RID: 75299
			public abstract void EmitEvents();

			// Token: 0x06012624 RID: 75300
			public abstract void Spawn(float animationSpeed, Action callback);

			// Token: 0x06012625 RID: 75301
			public abstract void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null);

			// Token: 0x06012626 RID: 75302 RVA: 0x0024024C File Offset: 0x0023E44C
			public virtual void FastForwardCurrentState()
			{
			}

			// Token: 0x06012627 RID: 75303 RVA: 0x0024024E File Offset: 0x0023E44E
			public virtual void AimingChanged(bool newValue)
			{
				Action<bool> onAimingChanged = this.OnAimingChanged;
				if (onAimingChanged == null)
				{
					return;
				}
				onAimingChanged(newValue);
			}

			// Token: 0x06012628 RID: 75304 RVA: 0x00240261 File Offset: 0x0023E461
			public void OnAddAmmoInChamber()
			{
				this.IEventsConsumerOnAddAmmoInChamber();
			}

			// Token: 0x06012629 RID: 75305 RVA: 0x00240269 File Offset: 0x0023E469
			public virtual void IEventsConsumerOnAddAmmoInChamber()
			{
			}

			// Token: 0x0601262A RID: 75306 RVA: 0x0024026B File Offset: 0x0023E46B
			public void OnAddAmmoInMag()
			{
				this.IEventsConsumerOnAddAmmoInMag();
			}

			// Token: 0x0601262B RID: 75307 RVA: 0x00240273 File Offset: 0x0023E473
			public virtual void IEventsConsumerOnAddAmmoInMag()
			{
			}

			// Token: 0x0601262C RID: 75308 RVA: 0x00240275 File Offset: 0x0023E475
			public void OnArm()
			{
				this.IEventsConsumerOnArm();
			}

			// Token: 0x0601262D RID: 75309 RVA: 0x0024027D File Offset: 0x0023E47D
			public virtual void IEventsConsumerOnArm()
			{
			}

			// Token: 0x0601262E RID: 75310 RVA: 0x0024027F File Offset: 0x0023E47F
			public void OnCook()
			{
				this.IEventsConsumerOnCook();
			}

			// Token: 0x0601262F RID: 75311 RVA: 0x00240287 File Offset: 0x0023E487
			public virtual void IEventsConsumerOnCook()
			{
			}

			// Token: 0x06012630 RID: 75312 RVA: 0x00240289 File Offset: 0x0023E489
			public void OnDelAmmoChamber()
			{
				this.IEventsConsumerOnDelAmmoChamber();
			}

			// Token: 0x06012631 RID: 75313 RVA: 0x00240291 File Offset: 0x0023E491
			public virtual void IEventsConsumerOnDelAmmoChamber()
			{
			}

			// Token: 0x06012632 RID: 75314 RVA: 0x00240293 File Offset: 0x0023E493
			public void OnDelAmmoFromMag()
			{
				this.IEventsConsumerOnDelAmmoFromMag();
			}

			// Token: 0x06012633 RID: 75315 RVA: 0x0024029B File Offset: 0x0023E49B
			public virtual void IEventsConsumerOnDelAmmoFromMag()
			{
			}

			// Token: 0x06012634 RID: 75316 RVA: 0x0024029D File Offset: 0x0023E49D
			public void OnDisarm()
			{
				this.IEventsConsumerOnDisarm();
			}

			// Token: 0x06012635 RID: 75317 RVA: 0x002402A5 File Offset: 0x0023E4A5
			public virtual void IEventsConsumerOnDisarm()
			{
			}

			// Token: 0x06012636 RID: 75318 RVA: 0x002402A7 File Offset: 0x0023E4A7
			public void OnFireEnd()
			{
				this.IEventsConsumerOnFireEnd();
			}

			// Token: 0x06012637 RID: 75319 RVA: 0x002402AF File Offset: 0x0023E4AF
			public virtual void IEventsConsumerOnFireEnd()
			{
			}

			// Token: 0x06012638 RID: 75320 RVA: 0x002402B1 File Offset: 0x0023E4B1
			public void OnComboPlanning()
			{
				this.IEventsConsumerOnComboPlanning();
			}

			// Token: 0x06012639 RID: 75321 RVA: 0x002402B9 File Offset: 0x0023E4B9
			public virtual void IEventsConsumerOnComboPlanning()
			{
			}

			// Token: 0x0601263A RID: 75322 RVA: 0x002402BB File Offset: 0x0023E4BB
			public void OnFiringBullet()
			{
				this.IEventsConsumerOnFiringBullet();
			}

			// Token: 0x0601263B RID: 75323 RVA: 0x002402C3 File Offset: 0x0023E4C3
			public virtual void IEventsConsumerOnFiringBullet()
			{
			}

			// Token: 0x0601263C RID: 75324 RVA: 0x002402C5 File Offset: 0x0023E4C5
			public void OnFoldOff()
			{
				this.IEventsConsumerOnFoldOff();
			}

			// Token: 0x0601263D RID: 75325 RVA: 0x002402CD File Offset: 0x0023E4CD
			public virtual void IEventsConsumerOnFoldOff()
			{
			}

			// Token: 0x0601263E RID: 75326 RVA: 0x002402CF File Offset: 0x0023E4CF
			public void OnFoldOn()
			{
				this.IEventsConsumerOnFoldOn();
			}

			// Token: 0x0601263F RID: 75327 RVA: 0x002402D7 File Offset: 0x0023E4D7
			public virtual void IEventsConsumerOnFoldOn()
			{
			}

			// Token: 0x06012640 RID: 75328 RVA: 0x002402D9 File Offset: 0x0023E4D9
			public void OnIdleStart()
			{
				this.IEventsConsumerOnIdleStart();
			}

			// Token: 0x06012641 RID: 75329 RVA: 0x002402E1 File Offset: 0x0023E4E1
			public virtual void IEventsConsumerOnIdleStart()
			{
			}

			// Token: 0x06012642 RID: 75330 RVA: 0x002402E3 File Offset: 0x0023E4E3
			public void OnLauncherAppeared()
			{
				this.IEventsConsumerOnLauncherAppeared();
			}

			// Token: 0x06012643 RID: 75331 RVA: 0x002402EB File Offset: 0x0023E4EB
			public virtual void IEventsConsumerOnLauncherAppeared()
			{
			}

			// Token: 0x06012644 RID: 75332 RVA: 0x002402ED File Offset: 0x0023E4ED
			public void OnLauncherDisappeared()
			{
				this.IEventsConsumerOnLauncherDisappeared();
			}

			// Token: 0x06012645 RID: 75333 RVA: 0x002402F5 File Offset: 0x0023E4F5
			public virtual void IEventsConsumerOnLauncherDisappeared()
			{
			}

			// Token: 0x06012646 RID: 75334 RVA: 0x002402F7 File Offset: 0x0023E4F7
			public void OnMagHide()
			{
				this.IEventsConsumerOnMagHide();
			}

			// Token: 0x06012647 RID: 75335 RVA: 0x002402FF File Offset: 0x0023E4FF
			public virtual void IEventsConsumerOnMagHide()
			{
			}

			// Token: 0x06012648 RID: 75336 RVA: 0x00240301 File Offset: 0x0023E501
			public void OnMagIn()
			{
				this.IEventsConsumerOnMagIn();
			}

			// Token: 0x06012649 RID: 75337 RVA: 0x00240309 File Offset: 0x0023E509
			public virtual void IEventsConsumerOnMagIn()
			{
			}

			// Token: 0x0601264A RID: 75338 RVA: 0x0024030B File Offset: 0x0023E50B
			public void OnMagOut()
			{
				this.IEventsConsumerOnMagOut();
			}

			// Token: 0x0601264B RID: 75339 RVA: 0x00240313 File Offset: 0x0023E513
			public virtual void IEventsConsumerOnMagOut()
			{
			}

			// Token: 0x0601264C RID: 75340 RVA: 0x00240315 File Offset: 0x0023E515
			public void OnMagShow()
			{
				this.IEventsConsumerOnMagShow();
			}

			// Token: 0x0601264D RID: 75341 RVA: 0x0024031D File Offset: 0x0023E51D
			public virtual void IEventsConsumerOnMagShow()
			{
			}

			// Token: 0x0601264E RID: 75342 RVA: 0x0024031F File Offset: 0x0023E51F
			public void OnMessageName()
			{
				this.IEventsConsumerOnMessageName();
			}

			// Token: 0x0601264F RID: 75343 RVA: 0x00240327 File Offset: 0x0023E527
			public virtual void IEventsConsumerOnMessageName()
			{
			}

			// Token: 0x06012650 RID: 75344 RVA: 0x00240329 File Offset: 0x0023E529
			public void OnMalfunctionOff()
			{
				this.IEventsConsumerOnMalfunctionOff();
			}

			// Token: 0x06012651 RID: 75345 RVA: 0x00240331 File Offset: 0x0023E531
			public virtual void IEventsConsumerOnMalfunctionOff()
			{
			}

			// Token: 0x06012652 RID: 75346 RVA: 0x00240333 File Offset: 0x0023E533
			public void OnModChanged()
			{
				this.IEventsConsumerOnModChanged();
			}

			// Token: 0x06012653 RID: 75347 RVA: 0x0024033B File Offset: 0x0023E53B
			public virtual void IEventsConsumerOnModChanged()
			{
			}

			// Token: 0x06012654 RID: 75348 RVA: 0x0024033D File Offset: 0x0023E53D
			public void OutUse()
			{
				this.OnOutUse();
			}

			// Token: 0x06012655 RID: 75349 RVA: 0x00240345 File Offset: 0x0023E545
			public virtual void OnOutUse()
			{
			}

			// Token: 0x06012656 RID: 75350 RVA: 0x00240347 File Offset: 0x0023E547
			public void OnOffBoltCatch()
			{
				this.IEventsConsumerOnOffBoltCatch();
			}

			// Token: 0x06012657 RID: 75351 RVA: 0x0024034F File Offset: 0x0023E54F
			public virtual void IEventsConsumerOnOffBoltCatch()
			{
			}

			// Token: 0x06012658 RID: 75352 RVA: 0x00240351 File Offset: 0x0023E551
			public void OnOnBoltCatch()
			{
				this.IEventsConsumerOnOnBoltCatch();
			}

			// Token: 0x06012659 RID: 75353 RVA: 0x00240359 File Offset: 0x0023E559
			public virtual void IEventsConsumerOnOnBoltCatch()
			{
			}

			// Token: 0x0601265A RID: 75354 RVA: 0x0024035B File Offset: 0x0023E55B
			public void OnPutMagToRig()
			{
				this.IEventsConsumerOnPutMagToRig();
			}

			// Token: 0x0601265B RID: 75355 RVA: 0x00240363 File Offset: 0x0023E563
			public virtual void IEventsConsumerOnPutMagToRig()
			{
			}

			// Token: 0x0601265C RID: 75356 RVA: 0x00240365 File Offset: 0x0023E565
			public void OnRemoveShell()
			{
				this.IEventsConsumerOnRemoveShell();
			}

			// Token: 0x0601265D RID: 75357 RVA: 0x0024036D File Offset: 0x0023E56D
			public virtual void IEventsConsumerOnRemoveShell()
			{
			}

			// Token: 0x0601265E RID: 75358 RVA: 0x0024036F File Offset: 0x0023E56F
			public void OnReplaceSecondMag()
			{
				this.IEventsConsumerOnReplaceSecondMag();
			}

			// Token: 0x0601265F RID: 75359 RVA: 0x00240377 File Offset: 0x0023E577
			public virtual void IEventsConsumerOnReplaceSecondMag()
			{
			}

			// Token: 0x06012660 RID: 75360 RVA: 0x00240379 File Offset: 0x0023E579
			public void OnShellEject()
			{
				this.IEventsConsumerOnShellEject();
			}

			// Token: 0x06012661 RID: 75361 RVA: 0x00240381 File Offset: 0x0023E581
			public virtual void IEventsConsumerOnShellEject()
			{
			}

			// Token: 0x06012662 RID: 75362 RVA: 0x00240383 File Offset: 0x0023E583
			public void OnShowAmmo(bool BoolParam)
			{
				this.IEventsConsumerOnShowAmmo(BoolParam);
			}

			// Token: 0x06012663 RID: 75363 RVA: 0x0024038C File Offset: 0x0023E58C
			public virtual void IEventsConsumerOnShowAmmo(bool BoolParam)
			{
			}

			// Token: 0x06012664 RID: 75364 RVA: 0x0024038E File Offset: 0x0023E58E
			public void OnShowMag()
			{
				this.IEventsConsumerOnShowMag();
			}

			// Token: 0x06012665 RID: 75365 RVA: 0x00240396 File Offset: 0x0023E596
			public void OnSliderOut()
			{
			}

			// Token: 0x06012666 RID: 75366 RVA: 0x00240398 File Offset: 0x0023E598
			public virtual void IEventsConsumerOnShowMag()
			{
			}

			// Token: 0x06012667 RID: 75367 RVA: 0x0024039A File Offset: 0x0023E59A
			public void OnSound(string StringParam)
			{
				this.IEventsConsumerOnSound(StringParam);
			}

			// Token: 0x06012668 RID: 75368 RVA: 0x002403A3 File Offset: 0x0023E5A3
			public virtual void IEventsConsumerOnSound(string StringParam)
			{
			}

			// Token: 0x06012669 RID: 75369 RVA: 0x002403A5 File Offset: 0x0023E5A5
			public void OnSoundAtPoint(string StringParam)
			{
				this.IEventsConsumerOnSoundAtPoint(StringParam);
			}

			// Token: 0x0601266A RID: 75370 RVA: 0x002403AE File Offset: 0x0023E5AE
			public virtual void IEventsConsumerOnSoundAtPoint(string StringParam)
			{
			}

			// Token: 0x0601266B RID: 75371 RVA: 0x002403B0 File Offset: 0x0023E5B0
			public void OnStartUtilityOperation()
			{
				this.IEventsConsumerOnStartUtilityOperation();
			}

			// Token: 0x0601266C RID: 75372 RVA: 0x002403B8 File Offset: 0x0023E5B8
			public virtual void IEventsConsumerOnStartUtilityOperation()
			{
			}

			// Token: 0x0601266D RID: 75373 RVA: 0x002403BA File Offset: 0x0023E5BA
			public void OnThirdAction(int IntParam)
			{
				this.IEventsConsumerOnThirdAction(IntParam);
			}

			// Token: 0x0601266E RID: 75374 RVA: 0x002403C3 File Offset: 0x0023E5C3
			public virtual void IEventsConsumerOnThirdAction(int IntParam)
			{
			}

			// Token: 0x0601266F RID: 75375 RVA: 0x002403C5 File Offset: 0x0023E5C5
			public void OnUseProp(bool BoolParam)
			{
				this.IEventsConsumerOnOnUseProp(BoolParam);
			}

			// Token: 0x06012670 RID: 75376 RVA: 0x002403CE File Offset: 0x0023E5CE
			public virtual void IEventsConsumerOnOnUseProp(bool BoolParam)
			{
			}

			// Token: 0x06012671 RID: 75377 RVA: 0x002403D0 File Offset: 0x0023E5D0
			public void OnUseSecondMagForReload()
			{
				this.IEventsConsumerOnUseSecondMagForReload();
			}

			// Token: 0x06012672 RID: 75378 RVA: 0x002403D8 File Offset: 0x0023E5D8
			public virtual void IEventsConsumerOnUseSecondMagForReload()
			{
			}

			// Token: 0x06012673 RID: 75379 RVA: 0x002403DA File Offset: 0x0023E5DA
			public void OnWeapIn()
			{
				this.IEventsConsumerOnWeapIn();
			}

			// Token: 0x06012674 RID: 75380 RVA: 0x002403E2 File Offset: 0x0023E5E2
			public virtual void IEventsConsumerOnWeapIn()
			{
			}

			// Token: 0x06012675 RID: 75381 RVA: 0x002403E4 File Offset: 0x0023E5E4
			public void OnWeapOut()
			{
				this.IEventsConsumerOnWeapOut();
			}

			// Token: 0x06012676 RID: 75382 RVA: 0x002403EC File Offset: 0x0023E5EC
			public virtual void IEventsConsumerOnWeapOut()
			{
			}

			// Token: 0x06012677 RID: 75383 RVA: 0x002403EE File Offset: 0x0023E5EE
			public void OnBackpackDrop()
			{
			}

			// Token: 0x06012678 RID: 75384 RVA: 0x002403F0 File Offset: 0x0023E5F0
			public void OnBackpackDrop(IAnimatorEventParameter param)
			{
				this.IEventsOnBackpackDrop();
			}

			// Token: 0x06012679 RID: 75385 RVA: 0x002403F8 File Offset: 0x0023E5F8
			public virtual void IEventsOnBackpackDrop()
			{
			}

			// Token: 0x0601267A RID: 75386 RVA: 0x002403FA File Offset: 0x0023E5FA
			public void OnCurrentAnimStateEnded()
			{
			}

			// Token: 0x0601267B RID: 75387 RVA: 0x002403FC File Offset: 0x0023E5FC
			public void OnSetActiveObject(int objectID)
			{
			}

			// Token: 0x0601267C RID: 75388 RVA: 0x002403FE File Offset: 0x0023E5FE
			public void OnDeactivateObject(int objectID)
			{
			}

			// Token: 0x0601267D RID: 75389 RVA: 0x00240400 File Offset: 0x0023E600
			public void OnBipodToggle(IAnimatorEventParameter param)
			{
				this.IEventsOnBipodToggle();
			}

			// Token: 0x0601267E RID: 75390 RVA: 0x00240408 File Offset: 0x0023E608
			public virtual void IEventsOnBipodToggle()
			{
			}

			// Token: 0x0601267F RID: 75391 RVA: 0x0024040A File Offset: 0x0023E60A
			public void ReloadTest()
			{
			}

			// Token: 0x06012680 RID: 75392 RVA: 0x0024040C File Offset: 0x0023E60C
			public void BipodOpen()
			{
			}

			// Token: 0x06012681 RID: 75393 RVA: 0x0024040E File Offset: 0x0023E60E
			public void BipodClose()
			{
			}

			// Token: 0x06012682 RID: 75394 RVA: 0x00240410 File Offset: 0x0023E610
			public virtual void OnZombieFireBullet(IAnimatorEventParameter animatorEventParameter)
			{
			}

			// Token: 0x06012683 RID: 75395 RVA: 0x00240412 File Offset: 0x0023E612
			public virtual void OnZombieFireEnd(IAnimatorEventParameter animatorEventParameter)
			{
			}

			// Token: 0x06012684 RID: 75396 RVA: 0x00240414 File Offset: 0x0023E614
			public void AimReady()
			{
				this.OnAimReady();
			}

			// Token: 0x06012685 RID: 75397 RVA: 0x0024041C File Offset: 0x0023E61C
			public void IdleReady()
			{
				this.OnIdleReady();
			}

			// Token: 0x06012686 RID: 75398 RVA: 0x00240424 File Offset: 0x0023E624
			public void DropWeapon()
			{
				this.OnDropWeapon();
			}

			// Token: 0x06012687 RID: 75399 RVA: 0x0024042C File Offset: 0x0023E62C
			public virtual void OnAimReady()
			{
			}

			// Token: 0x06012688 RID: 75400 RVA: 0x0024042E File Offset: 0x0023E62E
			public virtual void OnIdleReady()
			{
			}

			// Token: 0x06012689 RID: 75401 RVA: 0x00240430 File Offset: 0x0023E630
			public virtual void OnDropWeapon()
			{
			}

			// Token: 0x0601268A RID: 75402 RVA: 0x00240432 File Offset: 0x0023E632
			public AbstractHandsController()
			{
			}

			// Token: 0x0400EE1A RID: 60954
			protected readonly CompositeDisposableClass CompositeDisposable = new CompositeDisposableClass();
		}

		// Token: 0x0200299F RID: 10655
		public abstract class BaseAnimationOperationClass
		{
			// Token: 0x17002FAA RID: 12202
			// (get) Token: 0x0601268B RID: 75403 RVA: 0x00240450 File Offset: 0x0023E650
			// (set) Token: 0x0601268C RID: 75404 RVA: 0x00240458 File Offset: 0x0023E658
			public virtual Player.EOperationState State { get; set; }

			// Token: 0x0601268D RID: 75405 RVA: 0x00240461 File Offset: 0x0023E661
			public BaseAnimationOperationClass(Player.AbstractHandsController handsController)
			{
				this.HandsControllerOperationLogger_0 = new Player.BaseAnimationOperationClass.HandsControllerOperationLogger(LoggerMode.Add, this);
				this.UpdateLoggerController(handsController);
			}

			// Token: 0x0601268E RID: 75406 RVA: 0x0024047D File Offset: 0x0023E67D
			public void UpdateLoggerController(Player.AbstractHandsController handsController)
			{
				this.HandsControllerOperationLogger_0.SetHandsController(handsController);
			}

			// Token: 0x0601268F RID: 75407 RVA: 0x0024048B File Offset: 0x0023E68B
			public void Start()
			{
				this.HandsControllerOperationLogger_0.OperationStart();
				this.State = Player.EOperationState.Executing;
				this.SetLeftStanceAnimOnStartOperation();
			}

			// Token: 0x06012690 RID: 75408 RVA: 0x002404A5 File Offset: 0x0023E6A5
			public virtual void Reset()
			{
				this.State = Player.EOperationState.Ready;
			}

			// Token: 0x06012691 RID: 75409 RVA: 0x002404AE File Offset: 0x0023E6AE
			public virtual void Update(float deltaTime)
			{
			}

			// Token: 0x06012692 RID: 75410 RVA: 0x002404B0 File Offset: 0x0023E6B0
			public void method_0()
			{
				this.HandsControllerOperationLogger_0.TraceProhibitedCall();
			}

			// Token: 0x06012693 RID: 75411 RVA: 0x002404BD File Offset: 0x0023E6BD
			[Conditional("UNITY_EDITOR")]
			public void method_1()
			{
			}

			// Token: 0x06012694 RID: 75412 RVA: 0x002404BF File Offset: 0x0023E6BF
			public virtual void OnEnd()
			{
			}

			// Token: 0x06012695 RID: 75413 RVA: 0x002404C1 File Offset: 0x0023E6C1
			public virtual void SetLeftStanceAnimOnStartOperation()
			{
			}

			// Token: 0x0400EE1C RID: 60956
			[NonSerialized]
			public Player.BaseAnimationOperationClass.HandsControllerOperationLogger HandsControllerOperationLogger_0;

			// Token: 0x0400EE1D RID: 60957
			[CompilerGenerated]
			[NonSerialized]
			public Player.EOperationState EoperationState_0;

			// Token: 0x02003A25 RID: 14885
			public class HandsControllerOperationLogger : LoggerClass
			{
				// Token: 0x06015FB5 RID: 90037 RVA: 0x00268399 File Offset: 0x00266599
				public HandsControllerOperationLogger(LoggerMode loggerMode, Player.BaseAnimationOperationClass objectInHandsOperation) : base("hands-states", loggerMode, false)
				{
					this.BaseAnimationOperationClass = objectInHandsOperation;
				}

				// Token: 0x06015FB6 RID: 90038 RVA: 0x002683AF File Offset: 0x002665AF
				public void SetHandsController(Player.AbstractHandsController controller)
				{
					this.AbstractHandsController_0 = controller;
				}

				// Token: 0x06015FB7 RID: 90039 RVA: 0x007332FC File Offset: 0x007314FC
				public void TraceProhibitedCall()
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						StackFrame stackFrame = new StackFrame(2);
						base.Log("[{0}][Prohibited method call][{1}::{2}][{3}]", "<color='red'>[{0}][Prohibited method call][{1}::{2}][{3}]</color>", NLog.LogLevel.Debug, new object[]
						{
							Time.frameCount,
							this.BaseAnimationOperationClass.GetType().Name,
							stackFrame.GetMethod().Name,
							this.AbstractHandsController_0.LoggerDistinctId
						});
					}
				}

				// Token: 0x06015FB8 RID: 90040 RVA: 0x00733374 File Offset: 0x00731574
				[Conditional("UNITY_EDITOR")]
				public void TraceMethodCall()
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						StackFrame stackFrame = new StackFrame(2);
						base.LogTrace("method '{1}' operation: '{0}'", new object[]
						{
							this.BaseAnimationOperationClass.GetType().Name,
							stackFrame.GetMethod().Name
						});
					}
				}

				// Token: 0x06015FB9 RID: 90041 RVA: 0x007333C8 File Offset: 0x007315C8
				public void OperationStart()
				{
					if (base.IsEnabled(NLog.LogLevel.Trace))
					{
						base.Log("[{0}][{1}::Start][{2}]", "<color=green><b>[{0}][{1}::Start][{2}]</b></color>", NLog.LogLevel.Trace, new object[]
						{
							Time.frameCount,
							this.BaseAnimationOperationClass.GetType().Name,
							this.AbstractHandsController_0.LoggerDistinctId
						});
					}
				}

				// Token: 0x04012A28 RID: 76328
				[NonSerialized]
				public Player.AbstractHandsController AbstractHandsController_0;

				// Token: 0x04012A29 RID: 76329
				[NonSerialized]
				public Player.BaseAnimationOperationClass BaseAnimationOperationClass;
			}
		}

		// Token: 0x020029A0 RID: 10656
		public class UsableItemController : Player.ItemHandsController, GInterface202, GInterface199, IHandsController, GInterface197
		{
			// Token: 0x17002FAB RID: 12203
			// (get) Token: 0x06012696 RID: 75414 RVA: 0x002404C3 File Offset: 0x0023E6C3
			public Player.Interface11 Interface11_0
			{
				get
				{
					return base.CurrentHandsOperation as Player.Interface11;
				}
			}

			// Token: 0x17002FAC RID: 12204
			// (get) Token: 0x06012697 RID: 75415 RVA: 0x002404D0 File Offset: 0x0023E6D0
			public override FirearmsAnimator FirearmsAnimator
			{
				get
				{
					return this.firearmsAnimator_0;
				}
			}

			// Token: 0x17002FAD RID: 12205
			// (get) Token: 0x06012698 RID: 75416 RVA: 0x002404D8 File Offset: 0x0023E6D8
			public override string LoggerDistinctId
			{
				get
				{
					return string.Format("{0}|{1}|{2}", this._player.ProfileId, this._player.Profile.Info.Nickname, this);
				}
			}

			// Token: 0x17002FAE RID: 12206
			// (get) Token: 0x06012699 RID: 75417 RVA: 0x00240505 File Offset: 0x0023E705
			// (set) Token: 0x0601269A RID: 75418 RVA: 0x0068673C File Offset: 0x0068493C
			public override bool IsAiming
			{
				get
				{
					return this.bool_3;
				}
				set
				{
					if (!value)
					{
						this._player.Physical.HoldBreath(false);
					}
					if (this.bool_3 == value)
					{
						return;
					}
					this.bool_3 = value;
					this._player.Skills.FastAimTimer.Target = (value ? 0f : 2f);
					this._player.MovementContext.SetAimingSlowdown(this.IsAiming, 0.33f);
					this._player.Physical.Aim((float)(this.bool_3 ? 1 : 0));
					this.AimingChanged(value);
					this._player.ProceduralWeaponAnimation.IsAiming = this.bool_3;
				}
			}

			// Token: 0x0601269B RID: 75419 RVA: 0x0024050D File Offset: 0x0023E70D
			public static T smethod_6<T>(Player player, Item item) where T : Player.UsableItemController
			{
				T t = Player.ItemHandsController.smethod_0<T>(player, item);
				Player.UsableItemController.smethod_8<T>(t, player);
				return t;
			}

			// Token: 0x0601269C RID: 75420 RVA: 0x006867E8 File Offset: 0x006849E8
			public static Task<T> smethod_7<T>(Player player, Item item) where T : Player.UsableItemController
			{
				Player.UsableItemController.Struct326<T> @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder<T>.Create();
				@struct.player = player;
				@struct.item = item;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.UsableItemController.Struct326<T>>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x0601269D RID: 75421 RVA: 0x00686834 File Offset: 0x00684A34
			public static void smethod_8<T>(T controller, Player player) where T : Player.UsableItemController
			{
				WeaponPrefab weaponPrefab = Player.UsableItemController.smethod_9<T>(controller);
				controller.vmethod_0(player, weaponPrefab);
			}

			// Token: 0x0601269E RID: 75422 RVA: 0x0024051D File Offset: 0x0023E71D
			public static WeaponPrefab smethod_9<T>(T controller) where T : Player.UsableItemController
			{
				return controller._controllerObject.GetComponentInChildren<WeaponPrefab>();
			}

			// Token: 0x0601269F RID: 75423 RVA: 0x00686858 File Offset: 0x00684A58
			public virtual void vmethod_0(Player player, WeaponPrefab weaponPrefab)
			{
				this.func_0 = new Func<RaycastHit, bool>(this.method_8);
				this.gclass2086_0 = weaponPrefab.ObjectInHands;
				this.firearmsAnimator_0 = weaponPrefab.FirearmsAnimator;
				this.firearmsAnimator_0.AddEventsConsumer(this);
				this.CompositeDisposable.AddDisposable(new Action(this.method_10));
				this._player.HandsAnimator = this.firearmsAnimator_0;
				player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				player.ProceduralWeaponAnimation.InitTransforms(this.HandsHierarchy, null);
				player.ProceduralWeaponAnimation.method_9(weaponPrefab);
				player.ProceduralWeaponAnimation.FindAimTransformsWithoutSights();
				player.ProceduralWeaponAnimation.ResetScopeRotation();
			}

			// Token: 0x060126A0 RID: 75424 RVA: 0x0024052F File Offset: 0x0023E72F
			public override void IEventsConsumerOnWeapIn()
			{
				this.method_2();
			}

			// Token: 0x060126A1 RID: 75425 RVA: 0x00240537 File Offset: 0x0023E737
			public override void IEventsConsumerOnWeapOut()
			{
				this.method_1();
			}

			// Token: 0x060126A2 RID: 75426 RVA: 0x0024053F File Offset: 0x0023E73F
			public override void IEventsConsumerOnThirdAction(int intParam)
			{
				base.TranslateAnimatorParameter(intParam);
			}

			// Token: 0x060126A3 RID: 75427 RVA: 0x00240548 File Offset: 0x0023E748
			public override void IEventsOnBackpackDrop()
			{
				this.method_3();
			}

			// Token: 0x060126A4 RID: 75428 RVA: 0x00240550 File Offset: 0x0023E750
			public override void IEventsConsumerOnIdleStart()
			{
				this.Interface11_0.OnIdleStart();
			}

			// Token: 0x060126A5 RID: 75429 RVA: 0x0024055D File Offset: 0x0023E75D
			public override void ManualLateUpdate(float deltaTime)
			{
				if (BackendConfigAbstractClass.Config.UseSpiritPlayer && this._player.Spirit.IsActive)
				{
					return;
				}
				if (this.bool_1)
				{
					this.method_9();
					this.bool_1 = false;
				}
			}

			// Token: 0x060126A6 RID: 75430 RVA: 0x00240593 File Offset: 0x0023E793
			public override void ManualUpdate(float deltaTime)
			{
				base.ManualUpdate(deltaTime);
				this.bool_1 = true;
			}

			// Token: 0x060126A7 RID: 75431 RVA: 0x002405A3 File Offset: 0x0023E7A3
			public override void IEventsConsumerOnOnUseProp(bool boolParam)
			{
				base.SetPropVisibility(boolParam);
			}

			// Token: 0x060126A8 RID: 75432 RVA: 0x002405AC File Offset: 0x0023E7AC
			public override bool SupportPickup()
			{
				return true;
			}

			// Token: 0x060126A9 RID: 75433 RVA: 0x002405AF File Offset: 0x0023E7AF
			public override bool IsInventoryOpen()
			{
				return this.bool_0;
			}

			// Token: 0x060126AA RID: 75434 RVA: 0x002405B7 File Offset: 0x0023E7B7
			public override void SetInventoryOpened(bool opened)
			{
				if (opened)
				{
					this.SetCompassState(false);
				}
				this.Interface11_0.SetInventoryOpened(opened);
				MovementState currentManagedState = this._player.CurrentManagedState;
				if (currentManagedState == null)
				{
					return;
				}
				currentManagedState.OnInventory(opened);
			}

			// Token: 0x060126AB RID: 75435 RVA: 0x002405E5 File Offset: 0x0023E7E5
			public override void Pickup(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetPickup(p);
				}
			}

			// Token: 0x060126AC RID: 75436 RVA: 0x002405FB File Offset: 0x0023E7FB
			public override void Interact(bool isInteracting, int actionIndex)
			{
				if (this.CanInteract())
				{
					this._player.SendHandsInteractionStateChanged(isInteracting, actionIndex);
					this.firearmsAnimator_0.SetInteract(isInteracting, actionIndex);
				}
			}

			// Token: 0x060126AD RID: 75437 RVA: 0x0024061F File Offset: 0x0023E81F
			public override void Loot(bool p)
			{
				if (this.CanInteract())
				{
					this.firearmsAnimator_0.SetLooting(p);
				}
			}

			// Token: 0x060126AE RID: 75438 RVA: 0x00240635 File Offset: 0x0023E835
			public override bool CanRemove()
			{
				return true;
			}

			// Token: 0x060126AF RID: 75439 RVA: 0x00240638 File Offset: 0x0023E838
			public override bool CanInteract()
			{
				return this.firearmsAnimator_0.IsIdling() && this.firearmsAnimator_0.Animator.GetBool(WeaponAnimationSpeedControllerClass.BOOL_ACTIVE);
			}

			// Token: 0x060126B0 RID: 75440 RVA: 0x0024065E File Offset: 0x0023E85E
			public override void ShowGesture(EInteraction gesture)
			{
				this.SetAim(false);
				if (gesture != EInteraction.None)
				{
					this.firearmsAnimator_0.Gesture(gesture);
				}
			}

			// Token: 0x060126B1 RID: 75441 RVA: 0x00240676 File Offset: 0x0023E876
			public virtual bool ExamineWeapon()
			{
				if (this.Interface11_0 is Player.UsableItemController.Class1299 && !this._player.InventoryController.HasAnyHandsAction())
				{
					this.Interface11_0.ExamineWeapon();
					return true;
				}
				return false;
			}

			// Token: 0x060126B2 RID: 75442 RVA: 0x002406A5 File Offset: 0x0023E8A5
			public override bool IsInInteraction()
			{
				return this.firearmsAnimator_0.IsInInteraction;
			}

			// Token: 0x060126B3 RID: 75443 RVA: 0x002406B2 File Offset: 0x0023E8B2
			public virtual void ToggleAim()
			{
				this.SetCompassState(false);
				this.SetAim(!this.IsAiming);
			}

			// Token: 0x060126B4 RID: 75444 RVA: 0x00686904 File Offset: 0x00684B04
			public virtual void SetAim(bool value)
			{
				bool isAiming = this.IsAiming;
				this.Interface11_0.SetAiming(value);
				this._player.Boolean_0 &= !value;
				if (isAiming == this.IsAiming)
				{
					return;
				}
				float num = 1f - this._player.Skills.DrawSound;
				num = Mathf.Clamp(num, 0.1f, 0.2f);
				this._player.method_60(num, false);
			}

			// Token: 0x060126B5 RID: 75445 RVA: 0x002406CA File Offset: 0x0023E8CA
			public virtual void Hide()
			{
			}

			// Token: 0x060126B6 RID: 75446 RVA: 0x0068697C File Offset: 0x00684B7C
			public override bool IsInInteractionStrictCheck()
			{
				return this.IsInInteraction() || this.firearmsAnimator_0.GetLayerWeight(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX) >= float.Epsilon || this.firearmsAnimator_0.Animator.IsInTransition(this.firearmsAnimator_0.LACTIONS_LAYER_INDEX);
			}

			// Token: 0x060126B7 RID: 75447 RVA: 0x006869CC File Offset: 0x00684BCC
			public override void Spawn(float animationSpeed, Action callback)
			{
				this.firearmsAnimator_0.SetAnimationSpeed(animationSpeed);
				this.vmethod_1(callback);
				this.firearmsAnimator_0.SkipTime(Time.fixedDeltaTime);
				this._player.MovementContext.OnStateChanged += this.vmethod_2;
				this._player.Physical.OnSprintStateChangedEvent += this.method_4;
			}

			// Token: 0x060126B8 RID: 75448 RVA: 0x00686A38 File Offset: 0x00684C38
			public override void Drop(float animationSpeed, Action callback, bool fastDrop, Item nextControllerItem = null)
			{
				Player.UsableItemController.Class1308 @class = new Player.UsableItemController.Class1308();
				@class.usableItemController_0 = this;
				@class.callback = callback;
				if (base.Destroyed)
				{
					this.Interface11_0.HideWeapon(@class.callback, fastDrop);
					return;
				}
				base.Destroyed = true;
				@class.inventoryOperation = this._player.method_138(base.Item);
				Action onHidden = new Action(@class.method_0);
				this.Interface11_0.HideWeapon(onHidden, fastDrop);
			}

			// Token: 0x060126B9 RID: 75449 RVA: 0x00686AAC File Offset: 0x00684CAC
			public override void Destroy()
			{
				this._player.ProceduralWeaponAnimation.ClearPreviousWeapon();
				base.Destroy();
				this.firearmsAnimator_0 = null;
				this._player.MovementContext.OnStateChanged -= this.vmethod_2;
				this._player.Physical.OnSprintStateChangedEvent -= this.method_4;
				AssetPoolObject.ReturnToPool(this._controllerObject.gameObject, true);
			}

			// Token: 0x060126BA RID: 75450 RVA: 0x002406CC File Offset: 0x0023E8CC
			public virtual void vmethod_1(Action callback)
			{
				base.InitiateOperation<Player.UsableItemController.Class1305>().Start(callback);
			}

			// Token: 0x060126BB RID: 75451 RVA: 0x002406DA File Offset: 0x0023E8DA
			public void method_1()
			{
				this.Interface11_0.HideWeaponComplete();
			}

			// Token: 0x060126BC RID: 75452 RVA: 0x002406E7 File Offset: 0x0023E8E7
			public void method_2()
			{
				this.Interface11_0.WeaponAppeared();
			}

			// Token: 0x060126BD RID: 75453 RVA: 0x002406F4 File Offset: 0x0023E8F4
			public void method_3()
			{
				this.Interface11_0.OnBackpackDrop();
			}

			// Token: 0x060126BE RID: 75454 RVA: 0x00240701 File Offset: 0x0023E901
			public void method_4(bool obj)
			{
				if (this.IsAiming && obj)
				{
					this.method_5();
				}
			}

			// Token: 0x060126BF RID: 75455 RVA: 0x00240713 File Offset: 0x0023E913
			public virtual void vmethod_2(EPlayerState previousstate, EPlayerState nextstate)
			{
				if (!EFTHardSettings.Instance.CanAimInState(nextstate))
				{
					this.method_5();
				}
			}

			// Token: 0x060126C0 RID: 75456 RVA: 0x00240728 File Offset: 0x0023E928
			public void method_5()
			{
				this.Interface11_0.OnAimingDisabled();
			}

			// Token: 0x060126C1 RID: 75457 RVA: 0x00240735 File Offset: 0x0023E935
			public override bool CanExecute(GInterface438 operation)
			{
				return true;
			}

			// Token: 0x060126C2 RID: 75458 RVA: 0x00240738 File Offset: 0x0023E938
			public override void Execute(GInterface438 operation, Callback callback)
			{
				this.Interface11_0.Execute(operation, callback);
			}

			// Token: 0x060126C3 RID: 75459 RVA: 0x00240747 File Offset: 0x0023E947
			public override void FastForwardCurrentState()
			{
				this.Interface11_0.FastForward();
			}

			// Token: 0x060126C4 RID: 75460 RVA: 0x00686B20 File Offset: 0x00684D20
			public void method_6()
			{
				this.float_1 = 0f;
				this.float_2 = 0f;
				if (this._player.MovementContext.StationaryWeapon != null && this._player.MovementContext.StationaryWeapon.Item == base.Item)
				{
					return;
				}
				if (base.WeaponRoot == null)
				{
					UnityEngine.Debug.LogError("No muzzle or Weapon_root. Overlapping disabled");
					return;
				}
				this.float_2 = 0.5f;
				this.int_0 = LayerMask.NameToLayer("Player");
			}

			// Token: 0x060126C5 RID: 75461 RVA: 0x00686BB0 File Offset: 0x00684DB0
			public float method_7(Vector3 origin, float ln, ref bool overlapsWithPlayer)
			{
				Vector3 end = origin - base.WeaponRoot.up * ln;
				RaycastHit raycastHit;
				if (EFTPhysicsClass.Linecast(origin, end, out raycastHit, EFTHardSettings.Instance.WEAPON_OCCLUSION_LAYERS, false, Player.UsableItemController.raycastHit_0, this.func_0))
				{
					overlapsWithPlayer = (raycastHit.collider.gameObject.layer == this.int_0);
					return ln - raycastHit.distance;
				}
				Vector3 lhs = origin - this._player.Position;
				Vector3 up = Vector3.up;
				float d = Vector3.Dot(lhs, up);
				if (EFTPhysicsClass.Linecast(this._player.Position + d * up, origin, out raycastHit, EFTHardSettings.Instance.WEAPON_OCCLUSION_LAYERS, false, Player.UsableItemController.raycastHit_0, this.func_0))
				{
					overlapsWithPlayer = (raycastHit.collider.gameObject.layer == this.int_0);
					return ln;
				}
				return 0f;
			}

			// Token: 0x060126C6 RID: 75462 RVA: 0x00686C94 File Offset: 0x00684E94
			public bool method_8(RaycastHit overlapHit)
			{
				GameObject gameObject = overlapHit.collider.gameObject;
				return gameObject.layer == this.int_0 && gameObject == this._player.gameObject;
			}

			// Token: 0x060126C7 RID: 75463 RVA: 0x00686CD0 File Offset: 0x00684ED0
			public void method_9()
			{
				if (!this._player.IsVisible || this.float_2 <= 0f)
				{
					return;
				}
				if (this.Interface11_0 is Player.UsableItemController.Class1302)
				{
					return;
				}
				Vector3 vector = this._player.ProceduralWeaponAnimation.HandsContainer.HandsPosition.Get();
				float num = 1f;
				if (this._player.ProceduralWeaponAnimation.BlindfireBlender.Value != 0f)
				{
					Vector3 vector2 = (this._player.ProceduralWeaponAnimation.BlindFireEndPosition + this._player.ProceduralWeaponAnimation.PositionZeroSum) * 1.9f;
					vector2 = this._player.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.parent.TransformPoint(vector2);
					num = this.method_7(vector2, this.float_2, ref this._player.ProceduralWeaponAnimation.TurnAway.OverlapsWithPlayer);
				}
				if (num < 0.02f)
				{
					this._player.ProceduralWeaponAnimation.TurnAway.OverlapDepth = num;
					this._player.ProceduralWeaponAnimation.OverlappingAllowsBlindfire = true;
				}
				else
				{
					this._player.ProceduralWeaponAnimation.OverlappingAllowsBlindfire = false;
					this._player.ProceduralWeaponAnimation.TurnAway.OriginZShift = vector.y;
					vector = this._player.ProceduralWeaponAnimation.HandsContainer.WeaponRootAnim.parent.TransformPoint(vector);
					num = this.method_7(vector, this.float_2, ref this._player.ProceduralWeaponAnimation.TurnAway.OverlapsWithPlayer);
					this._player.ProceduralWeaponAnimation.TurnAway.OverlapDepth = num;
				}
				this.float_1 = num;
				if (num > EFTHardSettings.Instance.STOP_AIMING_AT && this.IsAiming)
				{
					this.ToggleAim();
					this.bool_2 = true;
					return;
				}
				if (num < EFTHardSettings.Instance.STOP_AIMING_AT && this._player.ProceduralWeaponAnimation.TurnAway.OverlapValue < 0.2f && this.bool_2 && !this.IsAiming)
				{
					this.ToggleAim();
					this.bool_2 = false;
				}
			}

			// Token: 0x060126C8 RID: 75464 RVA: 0x00686EE8 File Offset: 0x006850E8
			public override Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate> GetOperationFactoryDelegates()
			{
				return new Dictionary<Type, Player.ItemHandsController.OperationFactoryDelegate>
				{
					{
						typeof(Player.UsableItemController.Class1305),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_11)
					},
					{
						typeof(Player.UsableItemController.Class1299),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_12)
					},
					{
						typeof(Player.UsableItemController.Class1302),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_13)
					},
					{
						typeof(Player.UsableItemController.Class1293),
						new Player.ItemHandsController.OperationFactoryDelegate(this.method_14)
					}
				};
			}

			// Token: 0x060126CB RID: 75467 RVA: 0x00240769 File Offset: 0x0023E969
			[CompilerGenerated]
			public void method_10()
			{
				this.firearmsAnimator_0.RemoveEventsConsumer(this);
			}

			// Token: 0x060126CC RID: 75468 RVA: 0x00240777 File Offset: 0x0023E977
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_11()
			{
				return new Player.UsableItemController.Class1305(this);
			}

			// Token: 0x060126CD RID: 75469 RVA: 0x0024077F File Offset: 0x0023E97F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_12()
			{
				return new Player.UsableItemController.Class1299(this);
			}

			// Token: 0x060126CE RID: 75470 RVA: 0x00240787 File Offset: 0x0023E987
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_13()
			{
				return new Player.UsableItemController.Class1302(this);
			}

			// Token: 0x060126CF RID: 75471 RVA: 0x0024078F File Offset: 0x0023E98F
			[CompilerGenerated]
			public Player.BaseAnimationOperationClass method_14()
			{
				return new Player.UsableItemController.Class1293(this);
			}

			// Token: 0x0400EE1E RID: 60958
			private const float float_0 = 0.5f;

			// Token: 0x0400EE1F RID: 60959
			private static readonly RaycastHit[] raycastHit_0 = new RaycastHit[8];

			// Token: 0x0400EE20 RID: 60960
			private int int_0;

			// Token: 0x0400EE21 RID: 60961
			private bool bool_0;

			// Token: 0x0400EE22 RID: 60962
			private bool bool_1;

			// Token: 0x0400EE23 RID: 60963
			protected float float_1;

			// Token: 0x0400EE24 RID: 60964
			protected GClass2086 gclass2086_0;

			// Token: 0x0400EE25 RID: 60965
			protected FirearmsAnimator firearmsAnimator_0;

			// Token: 0x0400EE26 RID: 60966
			protected Func<RaycastHit, bool> func_0;

			// Token: 0x0400EE27 RID: 60967
			protected bool bool_2;

			// Token: 0x0400EE28 RID: 60968
			protected float float_2;

			// Token: 0x0400EE29 RID: 60969
			protected bool bool_3;

			// Token: 0x02003A26 RID: 14886
			public abstract class Class1292 : Player.BaseAnimationOperationClass, Player.Interface11
			{
				// Token: 0x06015FBA RID: 90042 RVA: 0x002683B8 File Offset: 0x002665B8
				public Class1292(Player.UsableItemController controller) : base(controller)
				{
					this.UsableItemController_0 = controller;
					this.Player_0 = this.UsableItemController_0._player;
				}

				// Token: 0x06015FBB RID: 90043 RVA: 0x002683D9 File Offset: 0x002665D9
				public virtual bool CanRemove()
				{
					return false;
				}

				// Token: 0x06015FBC RID: 90044 RVA: 0x002683DC File Offset: 0x002665DC
				public virtual void HideWeaponComplete()
				{
					base.method_0();
				}

				// Token: 0x06015FBD RID: 90045 RVA: 0x002683E4 File Offset: 0x002665E4
				public virtual void WeaponAppeared()
				{
					base.method_0();
				}

				// Token: 0x06015FBE RID: 90046 RVA: 0x002683EC File Offset: 0x002665EC
				public virtual void ExamineWeapon()
				{
					base.method_0();
				}

				// Token: 0x06015FBF RID: 90047 RVA: 0x002683F4 File Offset: 0x002665F4
				public virtual void OnBackpackDrop()
				{
					base.method_0();
				}

				// Token: 0x06015FC0 RID: 90048 RVA: 0x002683FC File Offset: 0x002665FC
				public virtual void SetInventoryOpened(bool opened)
				{
					base.method_0();
				}

				// Token: 0x06015FC1 RID: 90049 RVA: 0x0073342C File Offset: 0x0073162C
				public virtual void Execute(GInterface438 operation, Callback callback)
				{
					base.method_0();
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.UsableItemController_0._player.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						callback.Fail(string.Format("Detach is not supported in current operation: {0}", base.GetType()));
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015FC2 RID: 90050 RVA: 0x00268404 File Offset: 0x00266604
				public virtual void HideWeapon(Action onHidden, bool fastDrop)
				{
					base.method_0();
				}

				// Token: 0x06015FC3 RID: 90051 RVA: 0x0026840C File Offset: 0x0026660C
				public virtual void SetAiming(bool isAiming)
				{
					base.method_0();
				}

				// Token: 0x06015FC4 RID: 90052 RVA: 0x00268414 File Offset: 0x00266614
				public virtual void FastForward()
				{
					base.method_0();
				}

				// Token: 0x06015FC5 RID: 90053 RVA: 0x0026841C File Offset: 0x0026661C
				public virtual void OnAimingDisabled()
				{
					base.method_0();
				}

				// Token: 0x06015FC6 RID: 90054 RVA: 0x00268424 File Offset: 0x00266624
				public virtual void SetCompassState(bool active)
				{
					base.method_0();
				}

				// Token: 0x06015FC7 RID: 90055 RVA: 0x0026842C File Offset: 0x0026662C
				public virtual void OnIdleStart()
				{
				}

				// Token: 0x04012A2A RID: 76330
				[NonSerialized]
				public Player.UsableItemController UsableItemController_0;

				// Token: 0x04012A2B RID: 76331
				[NonSerialized]
				public Player Player_0;
			}

			// Token: 0x02003A27 RID: 14887
			public class Class1293 : Player.UsableItemController.Class1292
			{
				// Token: 0x06015FC8 RID: 90056 RVA: 0x0026842E File Offset: 0x0026662E
				public Class1293(Player.UsableItemController controller) : base(controller)
				{
				}

				// Token: 0x06015FC9 RID: 90057 RVA: 0x0073348C File Offset: 0x0073168C
				public virtual void Start(Item item, Callback callback)
				{
					this.Callback_0 = callback;
					base.Start();
					this.UsableItemController_0.SetAim(false);
					this.UsableItemController_0.FirearmsAnimator.SetInventory(false);
					this.UsableItemController_0.firearmsAnimator_0.Animator.SetLayerWeight(2, 1f);
					this.UsableItemController_0._player.SendHandsInteractionStateChanged(true, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
				}

				// Token: 0x06015FCA RID: 90058 RVA: 0x00268437 File Offset: 0x00266637
				public override void Reset()
				{
					this.Callback_0 = null;
					base.Reset();
				}

				// Token: 0x06015FCB RID: 90059 RVA: 0x00733508 File Offset: 0x00731708
				public override void OnBackpackDrop()
				{
					this.State = Player.EOperationState.Finished;
					this.UsableItemController_0._player.SendHandsInteractionStateChanged(false, 300);
					this.Player_0.MovementContext.SetInteractInHands(EInteraction.DropBackpack);
					WeaponAnimationSpeedControllerClass.ResetTriggerHandReady(this.UsableItemController_0.FirearmsAnimator.Animator);
					this.UsableItemController_0.firearmsAnimator_0.SetInventory(this.UsableItemController_0.bool_0);
					this.vmethod_0();
					this.Callback_0.Succeed();
				}

				// Token: 0x06015FCC RID: 90060 RVA: 0x00268446 File Offset: 0x00266646
				public override void SetInventoryOpened(bool opened)
				{
					this.UsableItemController_0.bool_0 = opened;
				}

				// Token: 0x06015FCD RID: 90061 RVA: 0x00268454 File Offset: 0x00266654
				public override void SetAiming(bool isAiming)
				{
					if (isAiming && !EFTHardSettings.Instance.CanAimInState(this.Player_0.CurrentState.Name))
					{
						return;
					}
					this.UsableItemController_0.FirearmsAnimator.SetFire(isAiming);
					this.UsableItemController_0.IsAiming = isAiming;
				}

				// Token: 0x06015FCE RID: 90062 RVA: 0x00268493 File Offset: 0x00266693
				public virtual void vmethod_0()
				{
					this.UsableItemController_0.InitiateOperation<Player.UsableItemController.Class1299>().Start();
				}

				// Token: 0x04012A2C RID: 76332
				[NonSerialized]
				public Callback Callback_0;
			}

			// Token: 0x02003A28 RID: 14888
			public class Class1294 : Player.UsableItemController.Class1293
			{
				// Token: 0x06015FCF RID: 90063 RVA: 0x002684A5 File Offset: 0x002666A5
				public Class1294(Player.UsableItemController controller) : base(controller)
				{
				}

				// Token: 0x06015FD0 RID: 90064 RVA: 0x002684AE File Offset: 0x002666AE
				public override void Start(Item item, Callback callback)
				{
					this.Float_1 = 0f;
					this.Bool_0 = false;
					base.Start(item, callback);
				}

				// Token: 0x06015FD1 RID: 90065 RVA: 0x002684CA File Offset: 0x002666CA
				public override void FastForward()
				{
					if (!this.Bool_0)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
				}

				// Token: 0x06015FD2 RID: 90066 RVA: 0x002684E1 File Offset: 0x002666E1
				public override void Update(float deltaTime)
				{
					base.Update(deltaTime);
					if (!this.Bool_0 && this.Float_1 > 0.25f)
					{
						this.Bool_0 = true;
						this.OnBackpackDrop();
					}
					this.Float_1 += deltaTime;
				}

				// Token: 0x04012A2D RID: 76333
				[NonSerialized]
				public const float Float_0 = 0.25f;

				// Token: 0x04012A2E RID: 76334
				[NonSerialized]
				public float Float_1;

				// Token: 0x04012A2F RID: 76335
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A29 RID: 14889
			public class Class1299 : Player.UsableItemController.Class1292
			{
				// Token: 0x06015FD3 RID: 90067 RVA: 0x0026851A File Offset: 0x0026671A
				public Class1299(Player.UsableItemController controller) : base(controller)
				{
				}

				// Token: 0x06015FD4 RID: 90068 RVA: 0x00268523 File Offset: 0x00266723
				public new void Start()
				{
					base.Start();
					this.Float_1 = 0f;
				}

				// Token: 0x06015FD5 RID: 90069 RVA: 0x00268536 File Offset: 0x00266736
				public override void Reset()
				{
					this.Float_1 = 0f;
					base.Reset();
				}

				// Token: 0x06015FD6 RID: 90070 RVA: 0x00268549 File Offset: 0x00266749
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.State = Player.EOperationState.Finished;
					this.UsableItemController_0.InitiateOperation<Player.UsableItemController.Class1302>().Start(onHidden, fastDrop);
					this.UsableItemController_0.Hide();
				}

				// Token: 0x06015FD7 RID: 90071 RVA: 0x0026856F File Offset: 0x0026676F
				public override bool CanRemove()
				{
					return true;
				}

				// Token: 0x06015FD8 RID: 90072 RVA: 0x00733588 File Offset: 0x00731788
				public override void Execute(GInterface438 operation, Callback callback)
				{
					GInterface443 ginterface = operation as GInterface443;
					if (ginterface == null)
					{
						callback.Succeed();
						return;
					}
					if (this.Player_0.InventoryController.IsAnimatedSlot(ginterface.From1))
					{
						this.State = Player.EOperationState.Finished;
						this.vmethod_0(ginterface, callback);
						return;
					}
					callback.Succeed();
				}

				// Token: 0x06015FD9 RID: 90073 RVA: 0x00268572 File Offset: 0x00266772
				public override void Update(float deltaTime)
				{
					this.Float_1 += deltaTime;
					if (this.Float_1 > 300f)
					{
						this.UsableItemController_0.firearmsAnimator_0.Idle();
						this.Float_1 = 0f;
					}
				}

				// Token: 0x06015FDA RID: 90074 RVA: 0x007335D4 File Offset: 0x007317D4
				public override void SetAiming(bool isAiming)
				{
					if (isAiming && !EFTHardSettings.Instance.CanAimInState(this.Player_0.CurrentState.Name))
					{
						return;
					}
					if (isAiming && this.UsableItemController_0.float_1 > EFTHardSettings.Instance.STOP_AIMING_AT)
					{
						return;
					}
					this.UsableItemController_0.FirearmsAnimator.SetFire(isAiming);
					this.UsableItemController_0.IsAiming = isAiming;
					this.Float_1 = 0f;
				}

				// Token: 0x06015FDB RID: 90075 RVA: 0x002685AA File Offset: 0x002667AA
				public override void ExamineWeapon()
				{
					this.UsableItemController_0.firearmsAnimator_0.LookTrigger();
				}

				// Token: 0x06015FDC RID: 90076 RVA: 0x002685BC File Offset: 0x002667BC
				public override void OnAimingDisabled()
				{
					this.SetAiming(false);
				}

				// Token: 0x06015FDD RID: 90077 RVA: 0x002685C5 File Offset: 0x002667C5
				public override void SetInventoryOpened(bool opened)
				{
					this.SetAiming(false);
					this.UsableItemController_0.bool_0 = opened;
					this.UsableItemController_0.firearmsAnimator_0.SetInventory(opened);
				}

				// Token: 0x06015FDE RID: 90078 RVA: 0x002685EB File Offset: 0x002667EB
				public override void OnEnd()
				{
					this.SetCompassState(false);
				}

				// Token: 0x06015FDF RID: 90079 RVA: 0x002685F4 File Offset: 0x002667F4
				public override void SetCompassState(bool active)
				{
					this.UsableItemController_0.CompassState.Value = active;
				}

				// Token: 0x06015FE0 RID: 90080 RVA: 0x00268607 File Offset: 0x00266807
				public virtual void vmethod_0(GInterface443 oneItemOperation, Callback callback)
				{
					this.UsableItemController_0.InitiateOperation<Player.UsableItemController.Class1293>().Start(oneItemOperation.Item1, callback);
				}

				// Token: 0x04012A30 RID: 76336
				[NonSerialized]
				public const float Float_0 = 300f;

				// Token: 0x04012A31 RID: 76337
				[NonSerialized]
				public float Float_1;
			}

			// Token: 0x02003A2A RID: 14890
			public class Class1302 : Player.UsableItemController.Class1292
			{
				// Token: 0x06015FE1 RID: 90081 RVA: 0x00268620 File Offset: 0x00266820
				public Class1302(Player.UsableItemController controller) : base(controller)
				{
				}

				// Token: 0x06015FE2 RID: 90082 RVA: 0x00733644 File Offset: 0x00731844
				public virtual void Start(Action onHidden, bool fastDrop)
				{
					this.Action_0 = onHidden;
					base.Start();
					this.UsableItemController_0.firearmsAnimator_0.SetActiveParam(false, true);
					this.UsableItemController_0.firearmsAnimator_0.SetFastHide(fastDrop);
					this.UsableItemController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
					this.UsableItemController_0.IsAiming = false;
				}

				// Token: 0x06015FE3 RID: 90083 RVA: 0x00268629 File Offset: 0x00266829
				public override void Reset()
				{
					this.Action_0 = null;
					base.Reset();
				}

				// Token: 0x06015FE4 RID: 90084 RVA: 0x00268638 File Offset: 0x00266838
				public override void HideWeaponComplete()
				{
					this.State = Player.EOperationState.Finished;
					Action action_ = this.Action_0;
					if (action_ == null)
					{
						return;
					}
					action_();
				}

				// Token: 0x06015FE5 RID: 90085 RVA: 0x00268651 File Offset: 0x00266851
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.Action_0 = (Action)Delegate.Combine(this.Action_0, onHidden);
				}

				// Token: 0x06015FE6 RID: 90086 RVA: 0x0026866A File Offset: 0x0026686A
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.HideWeaponComplete();
					}
				}

				// Token: 0x04012A32 RID: 76338
				[NonSerialized]
				public Action Action_0;
			}

			// Token: 0x02003A2B RID: 14891
			public class Class1305 : Player.UsableItemController.Class1292
			{
				// Token: 0x06015FE7 RID: 90087 RVA: 0x0026867B File Offset: 0x0026687B
				public Class1305(Player.UsableItemController controller) : base(controller)
				{
				}

				// Token: 0x06015FE8 RID: 90088 RVA: 0x007336AC File Offset: 0x007318AC
				public void Start(Action callback)
				{
					this.Action_1 = callback;
					base.Start();
					this.UsableItemController_0.firearmsAnimator_0.SetActiveParam(true, true);
					this.UsableItemController_0.firearmsAnimator_0.SetMeleeSpeed(this.Player_0.Physical.MeleeSpeed);
					this.Player_0.BodyAnimatorCommon.SetFloat(PlayerAnimator.WEAPON_SIZE_MODIFIER_PARAM_HASH, 1f);
					this.UsableItemController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 1f);
				}

				// Token: 0x06015FE9 RID: 90089 RVA: 0x00268684 File Offset: 0x00266884
				public override void Reset()
				{
					base.Reset();
					this.Action_1 = null;
					this.Action_0 = null;
				}

				// Token: 0x06015FEA RID: 90090 RVA: 0x0026869A File Offset: 0x0026689A
				public override void WeaponAppeared()
				{
					this.UsableItemController_0.SetupProp();
					this.State = Player.EOperationState.Finished;
					this.UsableItemController_0._player.BodyAnimatorCommon.SetFloat(PlayerAnimator.RELOAD_FLOAT_PARAM_HASH, 0f);
					this.vmethod_0();
				}

				// Token: 0x06015FEB RID: 90091 RVA: 0x002686D3 File Offset: 0x002668D3
				public override void HideWeapon(Action onHidden, bool fastDrop)
				{
					this.Action_0 = onHidden;
					this.Bool_0 = fastDrop;
				}

				// Token: 0x06015FEC RID: 90092 RVA: 0x002686E3 File Offset: 0x002668E3
				public override void FastForward()
				{
					if (this.State != Player.EOperationState.Finished)
					{
						this.WeaponAppeared();
					}
				}

				// Token: 0x06015FED RID: 90093 RVA: 0x00733734 File Offset: 0x00731934
				public virtual void vmethod_0()
				{
					Player.UsableItemController.Class1299 @class = this.UsableItemController_0.InitiateOperation<Player.UsableItemController.Class1299>();
					@class.Start();
					this.Action_1();
					if (this.Action_0 != null)
					{
						@class.HideWeapon(this.Action_0, this.Bool_0);
					}
				}

				// Token: 0x06015FEE RID: 90094 RVA: 0x002686F4 File Offset: 0x002668F4
				public override void SetLeftStanceAnimOnStartOperation()
				{
					this.Player_0.MovementContext.LeftStanceController.DisableLeftStanceAnimFromHandsAction();
				}

				// Token: 0x04012A33 RID: 76339
				[NonSerialized]
				public Action Action_0;

				// Token: 0x04012A34 RID: 76340
				[NonSerialized]
				public Action Action_1;

				// Token: 0x04012A35 RID: 76341
				[NonSerialized]
				public bool Bool_0;
			}

			// Token: 0x02003A2C RID: 14892
			[CompilerGenerated]
			public class Class1308
			{
				// Token: 0x06015FF0 RID: 90096 RVA: 0x00733778 File Offset: 0x00731978
				public void method_0()
				{
					this.usableItemController_0._player.MovementContext.OnStateChanged -= this.usableItemController_0.vmethod_2;
					this.usableItemController_0._player.Physical.OnSprintStateChangedEvent -= this.usableItemController_0.method_4;
					this.usableItemController_0._player.ProceduralWeaponAnimation.enabled = true;
					this.inventoryOperation.Confirm(true);
					this.callback();
				}

				// Token: 0x04012A36 RID: 76342
				public Player.UsableItemController usableItemController_0;

				// Token: 0x04012A37 RID: 76343
				public Player.Class1312 inventoryOperation;

				// Token: 0x04012A38 RID: 76344
				public Action callback;
			}
		}

		// Token: 0x020029A1 RID: 10657
		public interface Interface11
		{
			// Token: 0x060126D0 RID: 75472
			void HideWeaponComplete();

			// Token: 0x060126D1 RID: 75473
			void WeaponAppeared();

			// Token: 0x060126D2 RID: 75474
			void HideWeapon(Action onHidden, bool fastDrop);

			// Token: 0x060126D3 RID: 75475
			void OnBackpackDrop();

			// Token: 0x060126D4 RID: 75476
			void SetAiming(bool isAiming);

			// Token: 0x060126D5 RID: 75477
			void Execute(GInterface438 operation, Callback callback);

			// Token: 0x060126D6 RID: 75478
			void ExamineWeapon();

			// Token: 0x060126D7 RID: 75479
			void FastForward();

			// Token: 0x060126D8 RID: 75480
			void OnIdleStart();

			// Token: 0x060126D9 RID: 75481
			void OnAimingDisabled();

			// Token: 0x060126DA RID: 75482
			void SetInventoryOpened(bool opened);
		}

		// Token: 0x020029A2 RID: 10658
		[Flags]
		public enum EAnimatorMask
		{
			// Token: 0x0400EE2B RID: 60971
			Thirdperson = 1,
			// Token: 0x0400EE2C RID: 60972
			Arms = 2,
			// Token: 0x0400EE2D RID: 60973
			Procedural = 4,
			// Token: 0x0400EE2E RID: 60974
			FBBIK = 8,
			// Token: 0x0400EE2F RID: 60975
			IK = 16
		}

		// Token: 0x020029A3 RID: 10659
		public class GClass724 : LoggerClass
		{
			// Token: 0x060126DB RID: 75483 RVA: 0x00240797 File Offset: 0x0023E997
			public GClass724(LoggerMode loggerMode) : base("player", loggerMode, false)
			{
			}
		}

		// Token: 0x020029A4 RID: 10660
		public class GClass2059<T> where T : class, IItemComponent
		{
			// Token: 0x17002FAF RID: 12207
			// (get) Token: 0x060126DC RID: 75484 RVA: 0x002407A6 File Offset: 0x0023E9A6
			[CanBeNull]
			public virtual T Component
			{
				get
				{
					return this.GetItemComponent();
				}
			}

			// Token: 0x060126DD RID: 75485 RVA: 0x002407AE File Offset: 0x0023E9AE
			public GClass2059(Slot slot, Func<T, Action, Action> subscriber)
			{
				this.Slot_0 = slot;
				this.Func_0 = subscriber;
				this.Set(this.GetItemComponent());
			}

			// Token: 0x060126DE RID: 75486 RVA: 0x002407DB File Offset: 0x0023E9DB
			public void Update()
			{
				this.Set(this.Component);
			}

			// Token: 0x060126DF RID: 75487 RVA: 0x00686F6C File Offset: 0x0068516C
			public void Set([CanBeNull] T value)
			{
				if (value == this.Gparam_0)
				{
					return;
				}
				if (this.Gparam_0 != null)
				{
					this.Action_0();
				}
				this.Gparam_0 = value;
				if (this.Gparam_0 != null)
				{
					this.Action_0 = this.Func_0(this.Gparam_0, new Action(this.method_0));
				}
				this.method_0();
			}

			// Token: 0x060126E0 RID: 75488 RVA: 0x00686FE4 File Offset: 0x006851E4
			public T GetItemComponent()
			{
				CompoundItem compoundItem = this.Slot_0.ContainedItem as CompoundItem;
				if (compoundItem == null)
				{
					return default(T);
				}
				return compoundItem.GetItemComponentsInChildren(true).FirstOrDefault<T>();
			}

			// Token: 0x060126E1 RID: 75489 RVA: 0x002407E9 File Offset: 0x0023E9E9
			public void method_0()
			{
				this.Changed.Invoke();
			}

			// Token: 0x060126E2 RID: 75490 RVA: 0x002407F6 File Offset: 0x0023E9F6
			public virtual void Dispose()
			{
				if (this.Gparam_0 != null)
				{
					this.Action_0();
				}
				this.Gparam_0 = default(T);
			}

			// Token: 0x0400EE30 RID: 60976
			public readonly BindableEvent Changed = new BindableEvent();

			// Token: 0x0400EE31 RID: 60977
			[CanBeNull]
			[NonSerialized]
			public T Gparam_0;

			// Token: 0x0400EE32 RID: 60978
			[NonSerialized]
			public Slot Slot_0;

			// Token: 0x0400EE33 RID: 60979
			[NonSerialized]
			public Func<T, Action, Action> Func_0;

			// Token: 0x0400EE34 RID: 60980
			[NonSerialized]
			public Action Action_0;
		}

		// Token: 0x020029A5 RID: 10661
		public enum EUpdateMode
		{
			// Token: 0x0400EE36 RID: 60982
			Auto,
			// Token: 0x0400EE37 RID: 60983
			Manual,
			// Token: 0x0400EE38 RID: 60984
			None
		}

		// Token: 0x020029A6 RID: 10662
		// (Invoke) Token: 0x060126E4 RID: 75492
		public delegate float GDelegate66();

		// Token: 0x020029A7 RID: 10663
		public enum EVoipState : byte
		{
			// Token: 0x0400EE3A RID: 60986
			NotAvailable,
			// Token: 0x0400EE3B RID: 60987
			Available,
			// Token: 0x0400EE3C RID: 60988
			Off,
			// Token: 0x0400EE3D RID: 60989
			Banned,
			// Token: 0x0400EE3E RID: 60990
			MicrophoneFail
		}

		// Token: 0x020029A8 RID: 10664
		public enum EProcessStatus
		{
			// Token: 0x0400EE40 RID: 60992
			None,
			// Token: 0x0400EE41 RID: 60993
			Scheduled,
			// Token: 0x0400EE42 RID: 60994
			Internal
		}

		// Token: 0x020029A9 RID: 10665
		public class GClass2060 : IRaiseEvents, IRollback
		{
			// Token: 0x060126E7 RID: 75495 RVA: 0x0024081C File Offset: 0x0023EA1C
			public GClass2060(GClass3408 discardResult, ThrowWeapItemClass grenade)
			{
				this.Gclass3408_0 = discardResult;
				this.ThrowWeapItemClass = grenade;
			}

			// Token: 0x060126E8 RID: 75496 RVA: 0x00240832 File Offset: 0x0023EA32
			public void RollBack()
			{
				this.Gclass3408_0.RollBack();
			}

			// Token: 0x060126E9 RID: 75497 RVA: 0x0024083F File Offset: 0x0023EA3F
			public void RaiseEvents(IItemOwner controller, CommandStatus status)
			{
				this.Gclass3408_0.RaiseEvents(controller, status);
			}

			// Token: 0x060126EA RID: 75498 RVA: 0x0068701C File Offset: 0x0068521C
			public bool CanExecute(TraderControllerClass itemController)
			{
				return this.ThrowWeapItemClass.CheckAction(this.ThrowWeapItemClass.CurrentAddress).Succeeded;
			}

			// Token: 0x0400EE43 RID: 60995
			[NonSerialized]
			public GClass3408 Gclass3408_0;

			// Token: 0x0400EE44 RID: 60996
			[NonSerialized]
			public ThrowWeapItemClass ThrowWeapItemClass;
		}

		// Token: 0x020029AA RID: 10666
		public abstract class Class1310 : IDisposable
		{
			// Token: 0x17002FB0 RID: 12208
			// (get) Token: 0x060126EB RID: 75499 RVA: 0x0024084E File Offset: 0x0023EA4E
			// (set) Token: 0x060126EC RID: 75500 RVA: 0x00240856 File Offset: 0x0023EA56
			public Player Player_0 { get; set; }

			// Token: 0x17002FB1 RID: 12209
			// (get) Token: 0x060126ED RID: 75501 RVA: 0x0024085F File Offset: 0x0023EA5F
			// (set) Token: 0x060126EE RID: 75502 RVA: 0x00240867 File Offset: 0x0023EA67
			public Player.Class1310.EInternalState EInternalState_0 { get; set; }

			// Token: 0x17002FB2 RID: 12210
			// (get) Token: 0x060126EF RID: 75503 RVA: 0x00240870 File Offset: 0x0023EA70
			// (set) Token: 0x060126F0 RID: 75504 RVA: 0x00240878 File Offset: 0x0023EA78
			public CommandStatus CommandStatus_0 { get; set; }

			// Token: 0x17002FB3 RID: 12211
			// (get) Token: 0x060126F1 RID: 75505 RVA: 0x00240881 File Offset: 0x0023EA81
			// (set) Token: 0x060126F2 RID: 75506 RVA: 0x00240889 File Offset: 0x0023EA89
			public Item Item_0 { get; set; }

			// Token: 0x060126F3 RID: 75507 RVA: 0x00240892 File Offset: 0x0023EA92
			public Class1310(Player player, Item item)
			{
				this.Player_0 = player;
				this.Item_0 = item;
			}

			// Token: 0x060126F4 RID: 75508 RVA: 0x00687048 File Offset: 0x00685248
			public ~Class1310()
			{
				this.Player_0 = null;
				this.Item_0 = null;
			}

			// Token: 0x060126F5 RID: 75509 RVA: 0x002408A8 File Offset: 0x0023EAA8
			public void Execute()
			{
				if (this.EInternalState_0 == Player.Class1310.EInternalState.Creating)
				{
					this.EInternalState_0 = Player.Class1310.EInternalState.Executed;
					this.vmethod_0();
				}
			}

			// Token: 0x060126F6 RID: 75510 RVA: 0x002408BF File Offset: 0x0023EABF
			public void Confirm(bool succeed = true)
			{
				if (this.Boolean_0)
				{
					return;
				}
				if (this.EInternalState_0 == Player.Class1310.EInternalState.Executed)
				{
					this.EInternalState_0 = Player.Class1310.EInternalState.Confirmed;
					this.vmethod_1(succeed);
				}
			}

			// Token: 0x060126F7 RID: 75511
			public abstract void vmethod_0();

			// Token: 0x060126F8 RID: 75512
			public abstract void vmethod_1(bool succeed);

			// Token: 0x17002FB4 RID: 12212
			// (get) Token: 0x060126F9 RID: 75513 RVA: 0x002408E1 File Offset: 0x0023EAE1
			public bool Boolean_0
			{
				get
				{
					return this.EInternalState_0 == Player.Class1310.EInternalState.Disposed;
				}
			}

			// Token: 0x060126FA RID: 75514 RVA: 0x002408EC File Offset: 0x0023EAEC
			public void Dispose()
			{
				if (this.Boolean_0)
				{
					return;
				}
				this.EInternalState_0 = Player.Class1310.EInternalState.Disposed;
				if (this.CommandStatus_0 == CommandStatus.Begin)
				{
					this.CommandStatus_0 = CommandStatus.Failed;
				}
				this.Player_0 = null;
				this.Item_0 = null;
				GC.SuppressFinalize(this);
			}

			// Token: 0x0400EE45 RID: 60997
			[CompilerGenerated]
			[NonSerialized]
			public Player Player_0_1;

			// Token: 0x0400EE46 RID: 60998
			[CompilerGenerated]
			[NonSerialized]
			public Player.Class1310.EInternalState EinternalState_0;

			// Token: 0x0400EE47 RID: 60999
			[CompilerGenerated]
			[NonSerialized]
			public CommandStatus CommandStatus_0_1;

			// Token: 0x0400EE48 RID: 61000
			[CompilerGenerated]
			[NonSerialized]
			public Item Item_0_1;

			// Token: 0x02003A2E RID: 14894
			public enum EInternalState
			{
				// Token: 0x04012A3F RID: 76351
				Creating,
				// Token: 0x04012A40 RID: 76352
				Executed,
				// Token: 0x04012A41 RID: 76353
				Confirmed,
				// Token: 0x04012A42 RID: 76354
				Disposed
			}
		}

		// Token: 0x020029AB RID: 10667
		public class Class1311 : Player.Class1310
		{
			// Token: 0x060126FB RID: 75515 RVA: 0x00240921 File Offset: 0x0023EB21
			public Class1311(Player player, Item item) : base(player, item)
			{
			}

			// Token: 0x060126FC RID: 75516 RVA: 0x0024092B File Offset: 0x0023EB2B
			public override void vmethod_0()
			{
				base.Player_0.InventoryController.RaiseEvent(new GEventArgs9(base.Item_0, base.CommandStatus_0, base.Player_0.InventoryController));
			}

			// Token: 0x060126FD RID: 75517 RVA: 0x00240959 File Offset: 0x0023EB59
			public override void vmethod_1(bool succeed)
			{
				base.CommandStatus_0 = (succeed ? CommandStatus.Succeed : CommandStatus.Failed);
				base.Player_0.InventoryController.RaiseEvent(new GEventArgs9(base.Item_0, base.CommandStatus_0, base.Player_0.InventoryController));
			}
		}

		// Token: 0x020029AC RID: 10668
		public class Class1312 : Player.Class1310
		{
			// Token: 0x060126FE RID: 75518 RVA: 0x00240994 File Offset: 0x0023EB94
			public Class1312(Player player, Item item) : base(player, item)
			{
			}

			// Token: 0x060126FF RID: 75519 RVA: 0x0024099E File Offset: 0x0023EB9E
			public override void vmethod_0()
			{
				base.Player_0.InventoryController.RaiseEvent(new GEventArgs10(base.Item_0, base.CommandStatus_0, base.Player_0.InventoryController));
			}

			// Token: 0x06012700 RID: 75520 RVA: 0x002409CC File Offset: 0x0023EBCC
			public override void vmethod_1(bool succeed)
			{
				base.CommandStatus_0 = (succeed ? CommandStatus.Succeed : CommandStatus.Failed);
				base.Player_0.InventoryController.RaiseEvent(new GEventArgs10(base.Item_0, base.CommandStatus_0, base.Player_0.InventoryController));
			}
		}

		// Token: 0x020029AD RID: 10669
		public abstract class AbstractProcess
		{
			// Token: 0x06012701 RID: 75521 RVA: 0x00240A07 File Offset: 0x0023EC07
			public static void Execute(Player.AbstractProcess process)
			{
				process.Execute();
			}

			// Token: 0x06012702 RID: 75522
			public abstract void Execute();

			// Token: 0x06012703 RID: 75523 RVA: 0x00240A0F File Offset: 0x0023EC0F
			public static bool TrySkip(Player.AbstractProcess process)
			{
				return process.TrySkip();
			}

			// Token: 0x06012704 RID: 75524
			public abstract bool TrySkip();

			// Token: 0x06012705 RID: 75525
			public abstract void CreateController();

			// Token: 0x06012706 RID: 75526
			public abstract void Skip(string error);

			// Token: 0x06012707 RID: 75527
			public abstract void SkipToNext(string error);

			// Token: 0x06012708 RID: 75528
			public abstract void Begin(string error = null);

			// Token: 0x06012709 RID: 75529
			public abstract void Complete();

			// Token: 0x0601270A RID: 75530
			public abstract void Complete(string error);

			// Token: 0x0601270B RID: 75531
			public abstract void Abort();

			// Token: 0x0601270C RID: 75532
			public abstract void AbortAfterCompletion();

			// Token: 0x0601270D RID: 75533
			public abstract void ExecuteNext();

			// Token: 0x0601270E RID: 75534 RVA: 0x00240A17 File Offset: 0x0023EC17
			public AbstractProcess()
			{
			}

			// Token: 0x02003A2F RID: 14895
			public enum Completion
			{
				// Token: 0x04012A44 RID: 76356
				Sync,
				// Token: 0x04012A45 RID: 76357
				Async
			}

			// Token: 0x02003A30 RID: 14896
			public enum Confirmation
			{
				// Token: 0x04012A47 RID: 76359
				Unknown,
				// Token: 0x04012A48 RID: 76360
				Succeed,
				// Token: 0x04012A49 RID: 76361
				Failed
			}
		}

		// Token: 0x020029AE RID: 10670
		public class Process<TController, TResult> : Player.AbstractProcess where TController : Player.AbstractHandsController, TResult
		{
			// Token: 0x0601270F RID: 75535 RVA: 0x0068707C File Offset: 0x0068527C
			public Process(Player player, Func<TController> controllerFactory, [CanBeNull] Item item, bool fastHide = false, Player.AbstractProcess.Completion completion = Player.AbstractProcess.Completion.Sync, Player.AbstractProcess.Confirmation confirmation = Player.AbstractProcess.Confirmation.Succeed, bool skippable = true)
			{
				this.Player_0 = player;
				this.Func_0 = controllerFactory;
				this.Item_0 = item;
				this.Completion_0 = completion;
				this.Confirmation_0 = confirmation;
				this.Bool_0 = skippable;
				this.Bool_2 = fastHide;
			}

			// Token: 0x06012710 RID: 75536 RVA: 0x006870CC File Offset: 0x006852CC
			public void method_0([CanBeNull] Callback beginCallback, [CanBeNull] Callback<TResult> completeCallback, bool scheduled)
			{
				this.Player_0.Logger.LogInfo("Proceed: for {0}", new object[]
				{
					this.Item_0
				});
				Callback callback_ = beginCallback;
				if (beginCallback == null && (callback_ = Player.Process<TController, TResult>.Class1313.callback_0) == null)
				{
					callback_ = (Player.Process<TController, TResult>.Class1313.callback_0 = new Callback(Player.Process<TController, TResult>.Class1313.class1313_0.method_0));
				}
				this.Callback_0 = callback_;
				Callback<TResult> callback_2 = completeCallback;
				if (completeCallback == null && (callback_2 = Player.Process<TController, TResult>.Class1313.callback_1) == null)
				{
					callback_2 = (Player.Process<TController, TResult>.Class1313.callback_1 = new Callback<TResult>(Player.Process<TController, TResult>.Class1313.class1313_0.method_1));
				}
				this.Callback_1 = callback_2;
				if (this.Player_0.Profile.Info.Settings.Role == WildSpawnType.bossBoar)
				{
					this.Player_0.MovementContext.PlayerAnimator.EnableBoarPkm(this.Item_0.Id == "64cd089ceb496c0c707336e3");
				}
				if (this.Player_0._handsController != null && this.Player_0._handsController.Item == this.Item_0)
				{
					string str = "_player._handsController != null && ReferenceEquals. _item:";
					Item item_ = this.Item_0;
					string str2 = (item_ != null) ? item_.ShortName : null;
					string str3 = " _playerItems:";
					Player player_ = this.Player_0;
					string str4;
					if (player_ == null)
					{
						str4 = null;
					}
					else
					{
						Player.AbstractHandsController handsController = player_._handsController;
						if (handsController == null)
						{
							str4 = null;
						}
						else
						{
							Item item = handsController.Item;
							str4 = ((item != null) ? item.ShortName : null);
						}
					}
					this.Skip(str + str2 + str3 + str4);
					return;
				}
				switch (this.Player_0.ProcessStatus)
				{
				case Player.EProcessStatus.None:
					this.Player_0.Logger.LogInfo("{0} {1} setting process status from {2} to Scheduled", new object[]
					{
						this,
						this.Item_0,
						this.Player_0.ProcessStatus
					});
					this.Player_0.ProcessStatus = Player.EProcessStatus.Scheduled;
					this.Execute();
					return;
				case Player.EProcessStatus.Scheduled:
					if (this.Player_0.AbstractProcess_0 == null || Player.AbstractProcess.TrySkip(this.Player_0.AbstractProcess_0))
					{
						this.Player_0.AbstractProcess_0 = this;
						return;
					}
					this.Skip("not scheduled EProcessStatus.Scheduled");
					return;
				case Player.EProcessStatus.Internal:
					if (scheduled)
					{
						this.Skip("not scheduled Internal");
						return;
					}
					this.Execute();
					return;
				default:
					throw new ArgumentException("Invalid enum");
				}
			}

			// Token: 0x06012711 RID: 75537 RVA: 0x006872E0 File Offset: 0x006854E0
			public override void Execute()
			{
				Player.Process<TController, TResult>.Class1314 @class = new Player.Process<TController, TResult>.Class1314();
				@class.process_0 = this;
				this.Player_0.Logger.LogInfo("[Player.Process] Execute for item: {0}", new object[]
				{
					(this.Item_0 != null) ? this.Item_0.ShortName.Localized(null) : "nullitem"
				});
				@class.execute = new Action(@class.method_0);
				if (this.Player_0.HandsController == null)
				{
					@class.execute();
					return;
				}
				if (this.Player_0.HandsController.Item == this.Item_0 && !this.Player_0.HandsController.Destroyed)
				{
					this.SkipToNext("skipped same");
					return;
				}
				this.Player_0.Logger.LogInfo("[Player.Process] Execute, start controller drop", Array.Empty<object>());
				this.Player_0.DropCurrentController(new Action(@class.method_1), this.Bool_2, this.Item_0);
			}

			// Token: 0x06012712 RID: 75538 RVA: 0x006873DC File Offset: 0x006855DC
			public override void CreateController()
			{
				Player.Process<TController, TResult>.Class1315 @class = new Player.Process<TController, TResult>.Class1315();
				@class.process_0 = this;
				this.Player_0.Logger.LogInfo("[Player.Process] CreateController, start controller create, for item {0}", new object[]
				{
					(this.Item_0 != null) ? this.Item_0.ShortName.Localized(null) : "nullitem"
				});
				@class.setInHandsOperation = ((this.Item_0 != null) ? this.Player_0.method_137(this.Item_0) : null);
				this.Gparam_0 = this.Func_0();
				this.Bool_3 = false;
				this.Player_0.SpawnController(this.Gparam_0, new Action(@class.method_0));
			}

			// Token: 0x06012713 RID: 75539 RVA: 0x00687494 File Offset: 0x00685694
			public void method_1(bool succeed)
			{
				this.Player_0.Logger.LogInfo("Confirm succeed:" + succeed.ToString() + "  _spawned:" + this.Bool_3.ToString(), Array.Empty<object>());
				if (this.Confirmation_0 != Player.AbstractProcess.Confirmation.Unknown)
				{
					UnityEngine.Debug.LogWarning("Invalid confirmation on process");
					return;
				}
				this.Confirmation_0 = (succeed ? Player.AbstractProcess.Confirmation.Succeed : Player.AbstractProcess.Confirmation.Failed);
				if (this.Gparam_0 == null)
				{
					return;
				}
				if (!this.Bool_3)
				{
					return;
				}
				if (succeed)
				{
					if (this.Completion_0 == Player.AbstractProcess.Completion.Sync)
					{
						this.Complete();
					}
					this.Player_0.Logger.LogInfo("Confirm succeed", Array.Empty<object>());
					this.ExecuteNext();
					return;
				}
				if (this.Completion_0 == Player.AbstractProcess.Completion.Sync)
				{
					this.Abort();
					return;
				}
				this.AbortAfterCompletion();
			}

			// Token: 0x06012714 RID: 75540 RVA: 0x00240A1F File Offset: 0x0023EC1F
			public override bool TrySkip()
			{
				if (!this.Bool_1 && this.Bool_0)
				{
					this.Skip("skipped _completed");
					return true;
				}
				return false;
			}

			// Token: 0x06012715 RID: 75541 RVA: 0x00240A3F File Offset: 0x0023EC3F
			public override void Skip(string error)
			{
				this.Begin(error);
				this.Complete(error);
			}

			// Token: 0x06012716 RID: 75542 RVA: 0x00240A4F File Offset: 0x0023EC4F
			public override void SkipToNext(string error)
			{
				this.Skip(error);
				if (this.Confirmation_0 == Player.AbstractProcess.Confirmation.Unknown)
				{
					this.Confirmation_0 = Player.AbstractProcess.Confirmation.Failed;
				}
				this.Player_0.Logger.LogInfo("SkipToNext error:" + error, Array.Empty<object>());
				this.ExecuteNext();
			}

			// Token: 0x06012717 RID: 75543 RVA: 0x00240A8D File Offset: 0x0023EC8D
			public override void Begin(string error = null)
			{
				this.Bool_0 = false;
				if (string.IsNullOrEmpty(error))
				{
					this.Callback_0.Succeed();
					return;
				}
				this.Callback_0.Fail(error);
			}

			// Token: 0x06012718 RID: 75544 RVA: 0x00240AB6 File Offset: 0x0023ECB6
			public override void Complete()
			{
				this.Bool_1 = true;
				this.Callback_1((TResult)((object)this.Gparam_0));
			}

			// Token: 0x06012719 RID: 75545 RVA: 0x0068755C File Offset: 0x0068575C
			public override void Complete([CanBeNull] string error)
			{
				this.Bool_1 = true;
				this.Callback_1(new Result<TResult>
				{
					Error = error
				});
			}

			// Token: 0x0601271A RID: 75546 RVA: 0x0068758C File Offset: 0x0068578C
			public override void Abort()
			{
				UnityEngine.Debug.LogError("Operation aborted");
				IOnHandsUseCallback onHandsUseCallback = this.Gparam_0 as IOnHandsUseCallback;
				Callback<IOnHandsUseCallback> callback = (onHandsUseCallback != null) ? onHandsUseCallback.GetOnUsedCallback() : null;
				this.Player_0.DestroyController();
				this.Player_0._processStatus = Player.EProcessStatus.None;
				if (callback != null)
				{
					this.Complete(null);
					callback(new Result<IOnHandsUseCallback>(onHandsUseCallback));
				}
				else
				{
					this.Player_0.SetEmptyHands(new Callback<GInterface198>(this.method_2));
				}
				this.Player_0.Logger.LogInfo("Abort()", Array.Empty<object>());
				this.ExecuteNext();
			}

			// Token: 0x0601271B RID: 75547 RVA: 0x00240ADF File Offset: 0x0023ECDF
			public override void AbortAfterCompletion()
			{
				this.Player_0.DestroyController();
				this.Player_0.Logger.LogInfo("AbortAfterCompletion()", Array.Empty<object>());
				this.ExecuteNext();
			}

			// Token: 0x0601271C RID: 75548 RVA: 0x00687628 File Offset: 0x00685828
			public override void ExecuteNext()
			{
				if (this.Player_0.ProcessStatus == Player.EProcessStatus.Scheduled)
				{
					Player.AbstractProcess abstractProcess_ = this.Player_0.AbstractProcess_0;
					if (abstractProcess_ != null)
					{
						this.Player_0.Logger.LogInfo("{0} executing process to Next {1}", new object[]
						{
							this,
							abstractProcess_.GetType()
						});
						this.Player_0.AbstractProcess_0 = null;
						Player.AbstractProcess.Execute(abstractProcess_);
						return;
					}
					this.Player_0.Logger.LogInfo("{0} {1} setting process status from {2} to None", new object[]
					{
						this,
						this.Item_0,
						this.Player_0.ProcessStatus
					});
					this.Player_0.ProcessStatus = Player.EProcessStatus.None;
				}
			}

			// Token: 0x0601271D RID: 75549 RVA: 0x00240B0C File Offset: 0x0023ED0C
			[CompilerGenerated]
			public void method_2(Result<GInterface198> callback)
			{
				this.Complete(null);
			}

			// Token: 0x0400EE49 RID: 61001
			[NonSerialized]
			public Player Player_0;

			// Token: 0x0400EE4A RID: 61002
			[NonSerialized]
			public Func<TController> Func_0;

			// Token: 0x0400EE4B RID: 61003
			[CanBeNull]
			[NonSerialized]
			public Item Item_0;

			// Token: 0x0400EE4C RID: 61004
			[NonSerialized]
			public Player.AbstractProcess.Completion Completion_0;

			// Token: 0x0400EE4D RID: 61005
			[NonSerialized]
			public Player.AbstractProcess.Confirmation Confirmation_0;

			// Token: 0x0400EE4E RID: 61006
			[NonSerialized]
			public bool Bool_0;

			// Token: 0x0400EE4F RID: 61007
			[NonSerialized]
			public bool Bool_1;

			// Token: 0x0400EE50 RID: 61008
			[NonSerialized]
			public Callback Callback_0;

			// Token: 0x0400EE51 RID: 61009
			[NonSerialized]
			public Callback<TResult> Callback_1;

			// Token: 0x0400EE52 RID: 61010
			[NonSerialized]
			public TController Gparam_0;

			// Token: 0x0400EE53 RID: 61011
			[NonSerialized]
			public bool Bool_2;

			// Token: 0x0400EE54 RID: 61012
			[NonSerialized]
			public bool Bool_3 = true;

			// Token: 0x02003A31 RID: 14897
			[CompilerGenerated]
			[Serializable]
			public class Class1313
			{
				// Token: 0x06015FF5 RID: 90101 RVA: 0x00268735 File Offset: 0x00266935
				public void method_0(IResult result)
				{
				}

				// Token: 0x06015FF6 RID: 90102 RVA: 0x00268737 File Offset: 0x00266937
				public void method_1(Result<TResult> result)
				{
				}

				// Token: 0x04012A4A RID: 76362
				public static readonly Player.Process<TController, TResult>.Class1313 class1313_0 = new Player.Process<TController, TResult>.Class1313();

				// Token: 0x04012A4B RID: 76363
				public static Callback callback_0;

				// Token: 0x04012A4C RID: 76364
				public static Callback<TResult> callback_1;
			}

			// Token: 0x02003A32 RID: 14898
			[CompilerGenerated]
			public class Class1314
			{
				// Token: 0x06015FF8 RID: 90104 RVA: 0x007338C4 File Offset: 0x00731AC4
				public void method_0()
				{
					this.process_0.Bool_0 = false;
					if (this.process_0.Item_0 != null)
					{
						this.process_0.Player_0.method_136(this.process_0.Item_0);
					}
					this.process_0.Begin(null);
					if (this.process_0.Confirmation_0 == Player.AbstractProcess.Confirmation.Failed)
					{
						this.process_0.SkipToNext("not confirmed");
						return;
					}
					this.process_0.CreateController();
				}

				// Token: 0x06015FF9 RID: 90105 RVA: 0x0073393C File Offset: 0x00731B3C
				public void method_1()
				{
					this.process_0.Player_0.Logger.LogInfo("[Player.Process] Execute, controller dropped", Array.Empty<object>());
					this.process_0.Player_0.DestroyController();
					if (this.process_0.Player_0.AbstractProcess_0 != null && this.process_0.Bool_0)
					{
						this.process_0.SkipToNext("skipped skippable");
						return;
					}
					this.execute();
				}

				// Token: 0x04012A4D RID: 76365
				public Player.Process<T, U> process_0;

				// Token: 0x04012A4E RID: 76366
				public Action execute;
			}

			// Token: 0x02003A33 RID: 14899
			[CompilerGenerated]
			public class Class1315
			{
				// Token: 0x06015FFB RID: 90107 RVA: 0x007339B4 File Offset: 0x00731BB4
				public void method_0()
				{
					this.process_0.Player_0.Logger.LogDebug("[Player.Process] CreateController, controller created, for item {0}, _confirmed {1}", new object[]
					{
						(this.process_0.Item_0 != null) ? this.process_0.Item_0.ShortName.Localized(null) : "nullitem",
						this.process_0.Confirmation_0
					});
					this.process_0.Bool_3 = true;
					if (this.setInHandsOperation != null)
					{
						this.setInHandsOperation.Confirm(true);
					}
					switch (this.process_0.Confirmation_0)
					{
					case Player.AbstractProcess.Confirmation.Unknown:
						if (this.process_0.Completion_0 == Player.AbstractProcess.Completion.Async)
						{
							this.process_0.Complete();
							return;
						}
						return;
					case Player.AbstractProcess.Confirmation.Succeed:
						this.process_0.Complete();
						this.process_0.Player_0.Logger.LogInfo("SpawnController Confirmation.Succeed", Array.Empty<object>());
						this.process_0.ExecuteNext();
						return;
					case Player.AbstractProcess.Confirmation.Failed:
						this.process_0.Abort();
						return;
					default:
						throw new ArgumentException("Invalid enum");
					}
				}

				// Token: 0x04012A4F RID: 76367
				public Player.Process<T, U> process_0;

				// Token: 0x04012A50 RID: 76368
				public Player.Class1311 setInHandsOperation;
			}
		}

		// Token: 0x020029AF RID: 10671
		public abstract class PlayerOwnerInventoryController : Player.PlayerInventoryController
		{
			// Token: 0x0601271E RID: 75550 RVA: 0x00240B15 File Offset: 0x0023ED15
			public PlayerOwnerInventoryController(Player player, Profile profile, bool examined) : base(player, profile, examined)
			{
			}

			// Token: 0x0601271F RID: 75551 RVA: 0x006876D8 File Offset: 0x006858D8
			public override void GetAcceptableItemsNonAlloc<TItem>(EquipmentSlot[] equipmentSlots, IList<TItem> preAllocatedList, Predicate<TItem> predicate = null, Predicate<GClass3248> goDeeperPredicate = null)
			{
				Player.PlayerOwnerInventoryController.Class1316<TItem> @class = new Player.PlayerOwnerInventoryController.Class1316<TItem>();
				@class.predicate = predicate;
				@class.goDeeperPredicate = goDeeperPredicate;
				@class.playerOwnerInventoryController_0 = this;
				base.GetAcceptableItemsNonAlloc<TItem>(equipmentSlots, preAllocatedList, new Predicate<TItem>(@class.method_0), new Predicate<GClass3248>(@class.method_1));
			}

			// Token: 0x06012720 RID: 75552 RVA: 0x00687724 File Offset: 0x00685924
			public override void ExamineMalfunction(Weapon weapon, bool clearRest = false)
			{
				if (this.Player_0.IsAI || !weapon.MalfState.IsKnownMalfunction(base.Profile.Id))
				{
					base.ExamineMalfunction(weapon, clearRest);
					this.Player_0.NeedRepairMalfPhraseSituation(weapon.MalfState.State, base.HasKnownMalfType(weapon));
					if (!this.Player_0.IsAI)
					{
						this.method_40(weapon, 150).HandleExceptions();
					}
					return;
				}
				GameSetting<bool> malfunctionVisability = Singleton<SharedGameSettingsClass>.Instance.Game.Settings.MalfunctionVisability;
				bool flag = MonoBehaviourSingleton<PreloaderUI>.Instance.MalfunctionGlow.ShowGlow(BattleUIMalfunctionGlow.EGlowType.Examined, false, malfunctionVisability ? this.method_41() : 0f);
				this.Player_0.NeedRepairMalfPhraseSituation(weapon.MalfState.State, base.HasKnownMalfType(weapon));
				if (!flag)
				{
					return;
				}
				if (base.HasKnownMalfType(weapon))
				{
					NotificationManagerClass.DisplayNotification(new GClass2540(weapon.MalfState.State));
					return;
				}
				NotificationManagerClass.DisplayNotification(new GClass2541());
			}

			// Token: 0x06012721 RID: 75553 RVA: 0x00687824 File Offset: 0x00685A24
			public Task method_40(Weapon weapon, int delayInMilliseconds)
			{
				Player.PlayerOwnerInventoryController.Struct327 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.playerOwnerInventoryController_0 = this;
				@struct.weapon = weapon;
				@struct.delayInMilliseconds = delayInMilliseconds;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.PlayerOwnerInventoryController.Struct327>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x06012722 RID: 75554 RVA: 0x00687878 File Offset: 0x00685A78
			public override void ExamineMalfunctionType(Weapon weapon)
			{
				if (weapon.MalfState.IsKnownMalfType(base.Profile.Id))
				{
					NotificationManagerClass.DisplayNotification(new GClass2542(weapon.MalfState.State));
					return;
				}
				base.ExamineMalfunctionType(weapon);
				if (this.Player_0.IsAI)
				{
					return;
				}
				if (Singleton<SharedGameSettingsClass>.Instance.Game.Settings.MalfunctionVisability)
				{
					MonoBehaviourSingleton<PreloaderUI>.Instance.MalfunctionGlow.ShowGlow(BattleUIMalfunctionGlow.EGlowType.TypeExamined, true, this.method_41());
				}
				NotificationManagerClass.DisplayNotification(new GClass2542(weapon.MalfState.State));
			}

			// Token: 0x06012723 RID: 75555 RVA: 0x00687910 File Offset: 0x00685B10
			public override void CallUnknownMalfunctionStartRepair(Weapon weapon)
			{
				base.CallUnknownMalfunctionStartRepair(weapon);
				if (this.Player_0.IsAI)
				{
					return;
				}
				if (Singleton<SharedGameSettingsClass>.Instance.Game.Settings.MalfunctionVisability)
				{
					MonoBehaviourSingleton<PreloaderUI>.Instance.MalfunctionGlow.ShowGlow(BattleUIMalfunctionGlow.EGlowType.Repaired, true, this.method_41());
				}
				NotificationManagerClass.DisplayNotification(new GClass2542(weapon.MalfState.State));
			}

			// Token: 0x06012724 RID: 75556 RVA: 0x0068797C File Offset: 0x00685B7C
			public override void CallMalfunctionRepaired(Weapon weapon)
			{
				base.CallMalfunctionRepaired(weapon);
				if (this.Player_0.IsAI)
				{
					return;
				}
				if (Singleton<SharedGameSettingsClass>.Instance.Game.Settings.MalfunctionVisability)
				{
					MonoBehaviourSingleton<PreloaderUI>.Instance.MalfunctionGlow.ShowGlow(BattleUIMalfunctionGlow.EGlowType.Repaired, true, this.method_41());
				}
			}

			// Token: 0x06012725 RID: 75557 RVA: 0x00240B20 File Offset: 0x0023ED20
			public override bool CheckedMagazine(MagazineItemClass magazine)
			{
				return base.Profile.IsCheckedMagazines(magazine.Id);
			}

			// Token: 0x06012726 RID: 75558 RVA: 0x006879D4 File Offset: 0x00685BD4
			public float method_41()
			{
				float result = 0.5f;
				if (this.Player_0.HealthController.FindActiveEffect<GInterface356>(EBodyPart.Common) != null)
				{
					result = 1f;
				}
				return result;
			}

			// Token: 0x06012727 RID: 75559 RVA: 0x00687A04 File Offset: 0x00685C04
			public override BaseInventoryOperationClass ConvertOperationResultToOperation(IRaiseEvents operationResult)
			{
				GClass3406 gclass = operationResult as GClass3406;
				if (gclass != null)
				{
					return new ThrowOperationClass(base.method_12(), this, gclass, gclass.ItemsToDestroy, this.Player_0, false);
				}
				return base.ConvertOperationResultToOperation(operationResult);
			}

			// Token: 0x06012728 RID: 75560 RVA: 0x00687A40 File Offset: 0x00685C40
			public override GStruct156<bool> TryThrowItem(Item item, Callback callback = null, bool silent = false)
			{
				GInterface416 ginterface = item.Owner as GInterface416;
				if (ginterface != null)
				{
					List<DestroyedItemsStruct> list = ginterface.GetItemsOverDiscardLimit(item).ToList<DestroyedItemsStruct>();
					if (list.Any<DestroyedItemsStruct>())
					{
						GClass1583 gclass = new GClass1583(item, list);
						if (!silent)
						{
							NotificationManagerClass.DisplayWarningNotification(gclass.GetLocalizedDescription(), ENotificationDurationType.Default);
						}
						return gclass;
					}
				}
				this.ThrowItem(item, false, callback);
				return true;
			}

			// Token: 0x02003A34 RID: 14900
			[CompilerGenerated]
			public class Class1316<T> where T : Item
			{
				// Token: 0x06015FFD RID: 90109 RVA: 0x00268751 File Offset: 0x00266951
				public bool method_0(T item)
				{
					Predicate<T> predicate = this.predicate;
					return (predicate == null || predicate(item)) && !(item is GClass3367);
				}

				// Token: 0x06015FFE RID: 90110 RVA: 0x00733AC8 File Offset: 0x00731CC8
				public bool method_1(GClass3248 container)
				{
					Predicate<GClass3248> predicate = this.goDeeperPredicate;
					if (predicate != null && !predicate(container))
					{
						return false;
					}
					SearchableItemItemClass searchableItemItemClass = container as SearchableItemItemClass;
					return searchableItemItemClass == null || this.playerOwnerInventoryController_0.SearchController.IsSearched(searchableItemItemClass);
				}

				// Token: 0x04012A51 RID: 76369
				public Predicate<T> predicate;

				// Token: 0x04012A52 RID: 76370
				public Predicate<GClass3248> goDeeperPredicate;

				// Token: 0x04012A53 RID: 76371
				public Player.PlayerOwnerInventoryController playerOwnerInventoryController_0;
			}
		}

		// Token: 0x020029B0 RID: 10672
		public class SinglePlayerInventoryController : Player.PlayerOwnerInventoryController
		{
			// Token: 0x17002FB5 RID: 12213
			// (get) Token: 0x06012729 RID: 75561 RVA: 0x00240B38 File Offset: 0x0023ED38
			public override IPlayerSearchController PlayerSearchController { get; }

			// Token: 0x0601272A RID: 75562 RVA: 0x00687AA0 File Offset: 0x00685CA0
			public SinglePlayerInventoryController(Player player, Profile profile, bool isBot = false, bool examined = false) : base(player, profile, examined)
			{
				IPlayerSearchController playerSearchController2;
				if (!isBot && !examined)
				{
					IPlayerSearchController playerSearchController = new PlayerSearchControllerClass(profile, this);
					playerSearchController2 = playerSearchController;
				}
				else
				{
					IPlayerSearchController playerSearchController = new BotSearchControllerClass(profile);
					playerSearchController2 = playerSearchController;
				}
				this.PlayerSearchController = playerSearchController2;
			}

			// Token: 0x0601272B RID: 75563 RVA: 0x00240B40 File Offset: 0x0023ED40
			public override void vmethod_1(BaseInventoryOperationClass operation, Callback callback)
			{
				this.method_42(operation, callback).HandleExceptions();
			}

			// Token: 0x0601272C RID: 75564 RVA: 0x00687AD8 File Offset: 0x00685CD8
			public Task method_42(BaseInventoryOperationClass operation, [CanBeNull] Callback callback)
			{
				Player.SinglePlayerInventoryController.Struct328 @struct;
				@struct.asyncTaskMethodBuilder_0 = AsyncTaskMethodBuilder.Create();
				@struct.singlePlayerInventoryController_0 = this;
				@struct.operation = operation;
				@struct.callback = callback;
				@struct.int_0 = -1;
				@struct.asyncTaskMethodBuilder_0.Start<Player.SinglePlayerInventoryController.Struct328>(ref @struct);
				return @struct.asyncTaskMethodBuilder_0.Task;
			}

			// Token: 0x0601272D RID: 75565 RVA: 0x00240B4F File Offset: 0x0023ED4F
			public override SearchContentOperation vmethod_2(SearchableItemItemClass item)
			{
				return new SearchContentOperationResultClass(base.method_12(), this, this.PlayerSearchController, base.Profile, item);
			}

			// Token: 0x0601272E RID: 75566 RVA: 0x00240B6A File Offset: 0x0023ED6A
			public override void GetTraderServicesDataFromServer(string traderId)
			{
				((LocalPlayer)this.Player_0).UpdateTradersServiceData(traderId).HandleExceptions();
			}

			// Token: 0x0601272F RID: 75567 RVA: 0x00687B2C File Offset: 0x00685D2C
			public override bool HasCultistAmulet(out CultistAmuletItemClass amulet)
			{
				amulet = null;
				if (this.Player_0.IsAI)
				{
					return false;
				}
				foreach (Item item in base.Inventory.GetItemsInSlots(new EquipmentSlot[]
				{
					EquipmentSlot.Pockets
				}))
				{
					CultistAmuletItemClass cultistAmuletItemClass = item as CultistAmuletItemClass;
					if (cultistAmuletItemClass != null)
					{
						amulet = cultistAmuletItemClass;
						return true;
					}
				}
				return false;
			}

			// Token: 0x06012730 RID: 75568 RVA: 0x00687BA8 File Offset: 0x00685DA8
			public void TryExpendCultistAmuletChargeOrDestroy(bool destroy, bool onGameEnd)
			{
				CultistAmuletItemClass cultistAmuletItemClass;
				if (this.HasCultistAmulet(out cultistAmuletItemClass) && (!cultistAmuletItemClass.TryExpendCharge() || destroy))
				{
					if (onGameEnd)
					{
						GStruct154<GClass3410> gstruct = InteractionsHandlerClass.RemoveWithoutRestrictions(cultistAmuletItemClass, this);
						if (gstruct.Failed)
						{
							UnityEngine.Debug.LogError(gstruct.Error);
							return;
						}
					}
					else
					{
						GStruct154<GClass3408> gstruct2 = InteractionsHandlerClass.Discard(cultistAmuletItemClass, this, true);
						if (gstruct2.Failed)
						{
							UnityEngine.Debug.LogError(gstruct2.Error);
							return;
						}
						RemoveOperationClass operation = new RemoveOperationClass(base.method_12(), this, gstruct2.Value);
						this.vmethod_1(operation, null);
					}
				}
			}

			// Token: 0x06012731 RID: 75569 RVA: 0x00240B82 File Offset: 0x0023ED82
			[CompilerGenerated]
			[DebuggerHidden]
			public void method_43(BaseInventoryOperationClass operation, Callback callback)
			{
				base.vmethod_1(operation, callback);
			}

			// Token: 0x0400EE55 RID: 61013
			[CompilerGenerated]
			[NonSerialized]
			public IPlayerSearchController IplayerSearchController_0;
		}

		// Token: 0x020029B2 RID: 10674
		[CompilerGenerated]
		[Serializable]
		public class Class1318
		{
			// Token: 0x0601273A RID: 75578 RVA: 0x00240BC8 File Offset: 0x0023EDC8
			public void method_0(Result<IHandsController> result)
			{
			}

			// Token: 0x0601273B RID: 75579 RVA: 0x00240BCA File Offset: 0x0023EDCA
			public void method_1(Result<IHandsController> result)
			{
			}

			// Token: 0x0601273C RID: 75580 RVA: 0x00240BCC File Offset: 0x0023EDCC
			public bool method_2(TacticalComboVisualController x)
			{
				return x.LightMod.IsActive;
			}

			// Token: 0x0601273D RID: 75581 RVA: 0x00240BD9 File Offset: 0x0023EDD9
			public bool method_3(GripPose x)
			{
				return x.Hand == GripPose.EHand.Left;
			}

			// Token: 0x0601273E RID: 75582 RVA: 0x00240BE4 File Offset: 0x0023EDE4
			public bool method_4(GripPose x)
			{
				return x.GripType == GripPose.EGripType.UnderbarrelWeapon;
			}

			// Token: 0x0601273F RID: 75583 RVA: 0x00240BEF File Offset: 0x0023EDEF
			public bool method_5(GripPose x)
			{
				return x.Hand == GripPose.EHand.Right;
			}

			// Token: 0x06012740 RID: 75584 RVA: 0x00240BFA File Offset: 0x0023EDFA
			public bool method_6(BetterPropagationVolume x)
			{
				return x.MutuallyExclusive;
			}

			// Token: 0x06012741 RID: 75585 RVA: 0x00240C02 File Offset: 0x0023EE02
			public IEnumerable<EBodyPartColliderType> method_7(CompositeArmorComponent x)
			{
				return x.ArmorColliders;
			}

			// Token: 0x06012742 RID: 75586 RVA: 0x00240C0A File Offset: 0x0023EE0A
			public Action method_8(NightVisionComponent nv, Action handler)
			{
				return nv.Togglable.OnChanged.Subscribe(handler);
			}

			// Token: 0x06012743 RID: 75587 RVA: 0x00240C1D File Offset: 0x0023EE1D
			public Action method_9(ThermalVisionComponent tv, Action handler)
			{
				return tv.Togglable.OnChanged.Subscribe(handler);
			}

			// Token: 0x06012744 RID: 75588 RVA: 0x00687D28 File Offset: 0x00685F28
			public Action method_10(FaceShieldComponent fs, Action handler)
			{
				Player.Class1354 @class = new Player.Class1354();
				TogglableComponent togglable = fs.Togglable;
				@class.togglableSub = ((togglable != null) ? togglable.OnChanged.Subscribe(handler) : null);
				@class.hitSub = fs.HitsChanged.Subscribe(handler);
				return new Action(@class.method_0);
			}

			// Token: 0x06012745 RID: 75589 RVA: 0x00687D78 File Offset: 0x00685F78
			public Action method_11(FaceShieldComponent fs, Action handler)
			{
				Player.Class1355 @class = new Player.Class1355();
				TogglableComponent togglable = fs.Togglable;
				@class.togglableSub = ((togglable != null) ? togglable.OnChanged.Subscribe(handler) : null);
				@class.hitSub = fs.HitsChanged.Subscribe(handler);
				return new Action(@class.method_0);
			}

			// Token: 0x06012746 RID: 75590 RVA: 0x00240C30 File Offset: 0x0023EE30
			public EDeafStrength method_12(CompositeArmorComponent x)
			{
				return x.Deaf;
			}

			// Token: 0x06012747 RID: 75591 RVA: 0x00240C38 File Offset: 0x0023EE38
			public int method_13(EDeafStrength d)
			{
				return (int)d;
			}

			// Token: 0x06012748 RID: 75592 RVA: 0x00240C3B File Offset: 0x0023EE3B
			public EDeafStrength method_14(CompositeArmorComponent x)
			{
				return x.Deaf;
			}

			// Token: 0x06012749 RID: 75593 RVA: 0x00240C43 File Offset: 0x0023EE43
			public int method_15(EDeafStrength d)
			{
				return (int)d;
			}

			// Token: 0x0601274A RID: 75594 RVA: 0x00240C46 File Offset: 0x0023EE46
			public void method_16()
			{
				Singleton<GUISounds>.Instance.PlayUISound(EUISoundType.PlayerIsDead);
			}

			// Token: 0x0601274B RID: 75595 RVA: 0x00240C54 File Offset: 0x0023EE54
			public bool method_17(Renderer x)
			{
				return x.enabled;
			}

			// Token: 0x0601274C RID: 75596 RVA: 0x00240C5C File Offset: 0x0023EE5C
			public bool method_18(Slot slot)
			{
				return slot.ContainedItem != null;
			}

			// Token: 0x0601274D RID: 75597 RVA: 0x00240C67 File Offset: 0x0023EE67
			public IEnumerable<Item> method_19(Slot slot)
			{
				return slot.ContainedItem.GetAllItems();
			}

			// Token: 0x0601274E RID: 75598 RVA: 0x00240C74 File Offset: 0x0023EE74
			public bool method_20(Item item)
			{
				return item.IsSecretExitRequirement;
			}

			// Token: 0x0601274F RID: 75599 RVA: 0x00240C7C File Offset: 0x0023EE7C
			public bool method_21(Item item)
			{
				return item.IsSecretExitRequirement;
			}

			// Token: 0x06012750 RID: 75600 RVA: 0x00240C84 File Offset: 0x0023EE84
			public void method_22(Result<GInterface198> result)
			{
			}

			// Token: 0x06012751 RID: 75601 RVA: 0x00240C86 File Offset: 0x0023EE86
			public void method_23(Result<IFirearmHandsController> result)
			{
			}

			// Token: 0x06012752 RID: 75602 RVA: 0x00240C88 File Offset: 0x0023EE88
			public void method_24(Result<IOnHandsUseCallback> _)
			{
			}

			// Token: 0x06012753 RID: 75603 RVA: 0x00240C8A File Offset: 0x0023EE8A
			public float method_25()
			{
				return Time.deltaTime;
			}

			// Token: 0x0400EE59 RID: 61017
			public static readonly Player.Class1318 class1318_0 = new Player.Class1318();

			// Token: 0x0400EE5A RID: 61018
			public static Callback<IHandsController> callback_0;

			// Token: 0x0400EE5B RID: 61019
			public static Callback<IHandsController> callback_1;

			// Token: 0x0400EE5C RID: 61020
			public static Func<TacticalComboVisualController, bool> func_0;

			// Token: 0x0400EE5D RID: 61021
			public static Func<GripPose, bool> func_1;

			// Token: 0x0400EE5E RID: 61022
			public static Func<GripPose, bool> func_2;

			// Token: 0x0400EE5F RID: 61023
			public static Func<GripPose, bool> func_3;

			// Token: 0x0400EE60 RID: 61024
			public static Func<BetterPropagationVolume, bool> func_4;

			// Token: 0x0400EE61 RID: 61025
			public static Func<CompositeArmorComponent, IEnumerable<EBodyPartColliderType>> func_5;

			// Token: 0x0400EE62 RID: 61026
			public static Func<NightVisionComponent, Action, Action> func_6;

			// Token: 0x0400EE63 RID: 61027
			public static Func<ThermalVisionComponent, Action, Action> func_7;

			// Token: 0x0400EE64 RID: 61028
			public static Func<FaceShieldComponent, Action, Action> func_8;

			// Token: 0x0400EE65 RID: 61029
			public static Func<FaceShieldComponent, Action, Action> func_9;

			// Token: 0x0400EE66 RID: 61030
			public static Func<CompositeArmorComponent, EDeafStrength> func_10;

			// Token: 0x0400EE67 RID: 61031
			public static Func<EDeafStrength, int> func_11;

			// Token: 0x0400EE68 RID: 61032
			public static Func<CompositeArmorComponent, EDeafStrength> func_12;

			// Token: 0x0400EE69 RID: 61033
			public static Func<EDeafStrength, int> func_13;

			// Token: 0x0400EE6A RID: 61034
			public static Action action_0;

			// Token: 0x0400EE6B RID: 61035
			public static Func<Renderer, bool> func_14;

			// Token: 0x0400EE6C RID: 61036
			public static Func<Slot, bool> func_15;

			// Token: 0x0400EE6D RID: 61037
			public static Func<Slot, IEnumerable<Item>> func_16;

			// Token: 0x0400EE6E RID: 61038
			public static Func<Item, bool> func_17;

			// Token: 0x0400EE6F RID: 61039
			public static Func<Item, bool> func_18;

			// Token: 0x0400EE70 RID: 61040
			public static Callback<GInterface198> callback_2;

			// Token: 0x0400EE71 RID: 61041
			public static Callback<IFirearmHandsController> callback_3;

			// Token: 0x0400EE72 RID: 61042
			public static Callback<IOnHandsUseCallback> callback_4;
		}

		// Token: 0x020029B3 RID: 10675
		[CompilerGenerated]
		public class Class1319
		{
			// Token: 0x06012755 RID: 75605 RVA: 0x00240C99 File Offset: 0x0023EE99
			public void method_0()
			{
				this.player_0.Skills.LightArmorDamageTakenAction.Complete(this.armorDamage);
			}

			// Token: 0x06012756 RID: 75606 RVA: 0x00240CB6 File Offset: 0x0023EEB6
			public void method_1()
			{
				this.player_0.Skills.HeavyArmorDamageTakenAction.Complete(this.armorDamage);
			}

			// Token: 0x0400EE73 RID: 61043
			public Player player_0;

			// Token: 0x0400EE74 RID: 61044
			public float armorDamage;
		}

		// Token: 0x020029B4 RID: 10676
		[CompilerGenerated]
		public class Class1320
		{
			// Token: 0x06012758 RID: 75608 RVA: 0x00240CDB File Offset: 0x0023EEDB
			public bool method_0(BodyPartCollider hitCollider)
			{
				return hitCollider.BodyPartColliderType.Equals(this.colliderType);
			}

			// Token: 0x0400EE75 RID: 61045
			public EBodyPartColliderType colliderType;
		}

		// Token: 0x020029B5 RID: 10677
		[CompilerGenerated]
		public class Class1321
		{
			// Token: 0x0601275A RID: 75610 RVA: 0x00687DC8 File Offset: 0x00685FC8
			public void method_0()
			{
				this.container.Interact(new InteractionResult(EInteractionType.Close));
				if (this.player_0.MovementContext.LevelOnApproachStart > 0f)
				{
					this.player_0.MovementContext.SetPoseLevel(this.player_0.MovementContext.LevelOnApproachStart, false);
					this.player_0.MovementContext.LevelOnApproachStart = -1f;
				}
			}

			// Token: 0x0400EE76 RID: 61046
			public LootableContainer container;

			// Token: 0x0400EE77 RID: 61047
			public Player player_0;
		}

		// Token: 0x020029B6 RID: 10678
		[CompilerGenerated]
		public class Class1322
		{
			// Token: 0x0601275C RID: 75612 RVA: 0x00240D09 File Offset: 0x0023EF09
			public void method_0()
			{
				this.player_0.Skills.FindAction.Complete(this.onCorpse, 1f);
			}

			// Token: 0x0400EE78 RID: 61048
			public Player player_0;

			// Token: 0x0400EE79 RID: 61049
			public bool onCorpse;
		}

		// Token: 0x020029B7 RID: 10679
		[CompilerGenerated]
		public class Class1323
		{
			// Token: 0x0601275E RID: 75614 RVA: 0x00240D33 File Offset: 0x0023EF33
			public void method_0()
			{
				this.player_0.Skills.RaidLoadedAmmoAction.Complete((float)this.count);
			}

			// Token: 0x0400EE7A RID: 61050
			public Player player_0;

			// Token: 0x0400EE7B RID: 61051
			public int count;
		}

		// Token: 0x020029B8 RID: 10680
		[CompilerGenerated]
		public class Class1324
		{
			// Token: 0x06012760 RID: 75616 RVA: 0x00240D59 File Offset: 0x0023EF59
			public void method_0()
			{
				this.player_0.Skills.RaidUnloadedAmmoAction.Complete((float)this.count);
			}

			// Token: 0x0400EE7C RID: 61052
			public Player player_0;

			// Token: 0x0400EE7D RID: 61053
			public int count;
		}

		// Token: 0x020029B9 RID: 10681
		[CompilerGenerated]
		public class Class1325
		{
			// Token: 0x06012762 RID: 75618 RVA: 0x00240D7F File Offset: 0x0023EF7F
			public void method_0()
			{
				this.player_0.Skills.HydrationChanged.Complete(this.diff, this.diff);
			}

			// Token: 0x0400EE7E RID: 61054
			public Player player_0;

			// Token: 0x0400EE7F RID: 61055
			public float diff;
		}

		// Token: 0x020029BA RID: 10682
		[CompilerGenerated]
		public class Class1326
		{
			// Token: 0x06012764 RID: 75620 RVA: 0x00240DAA File Offset: 0x0023EFAA
			public void method_0()
			{
				this.player_0.Skills.DamageTakenAction.Complete(this.damage);
			}

			// Token: 0x0400EE80 RID: 61056
			public Player player_0;

			// Token: 0x0400EE81 RID: 61057
			public float damage;
		}

		// Token: 0x020029BB RID: 10683
		[CompilerGenerated]
		public class Class1327
		{
			// Token: 0x06012766 RID: 75622 RVA: 0x00240DCF File Offset: 0x0023EFCF
			public void method_0()
			{
				this.player_0.Skills.EnergyChanged.Complete(this.diff, this.diff);
			}

			// Token: 0x0400EE82 RID: 61058
			public Player player_0;

			// Token: 0x0400EE83 RID: 61059
			public float diff;
		}

		// Token: 0x020029BC RID: 10684
		[CompilerGenerated]
		public class Class1328
		{
			// Token: 0x06012768 RID: 75624 RVA: 0x00687E34 File Offset: 0x00686034
			public void method_0()
			{
				SkillManager.GClass2261<SkillManager.GStruct279> sprintAction = this.player_0.Skills.SprintAction;
				SkillManager.GStruct279 filter = default(SkillManager.GStruct279);
				filter.Overweight = this.player_0.Physical.Overweight;
				IEffect fatigue = this.player_0.Fatigue;
				filter.Fatigue = ((fatigue != null) ? fatigue.Strength : 0f);
				sprintAction.Complete(filter, this.distance);
			}

			// Token: 0x0400EE84 RID: 61060
			public float distance;

			// Token: 0x0400EE85 RID: 61061
			public Player player_0;
		}

		// Token: 0x020029BD RID: 10685
		[CompilerGenerated]
		public class Class1329
		{
			// Token: 0x0601276A RID: 75626 RVA: 0x00687EA0 File Offset: 0x006860A0
			public void method_0()
			{
				SkillManager.GClass2261<SkillManager.GStruct279> movementAction = this.player_0.Skills.MovementAction;
				SkillManager.GStruct279 filter = default(SkillManager.GStruct279);
				filter.Noise = (float)this.player_0.MovementContext.CovertNoiseLevel;
				filter.Overweight = this.player_0.Physical.Overweight;
				IEffect fatigue = this.player_0.Fatigue;
				filter.Fatigue = ((fatigue != null) ? fatigue.Strength : 0f);
				movementAction.Complete(filter, this.distance);
			}

			// Token: 0x0400EE86 RID: 61062
			public float distance;

			// Token: 0x0400EE87 RID: 61063
			public Player player_0;
		}

		// Token: 0x020029BE RID: 10686
		[CompilerGenerated]
		public class Class1330
		{
			// Token: 0x0601276C RID: 75628 RVA: 0x00687F24 File Offset: 0x00686124
			public void method_0(int value)
			{
				float volume = (float)value / 100f;
				this.broadcastTrigger.ActivationFader.Volume = volume;
			}

			// Token: 0x0400EE88 RID: 61064
			public VoiceBroadcastTrigger broadcastTrigger;
		}

		// Token: 0x020029BF RID: 10687
		[CompilerGenerated]
		public class Class1331
		{
			// Token: 0x0601276E RID: 75630 RVA: 0x00240E12 File Offset: 0x0023F012
			public void method_0()
			{
				this.player_0.method_127(this.controller);
				Action action = this.callback;
				if (action != null)
				{
					action();
				}
				this.onControllerAppeared.SetResult(true);
			}

			// Token: 0x0400EE89 RID: 61065
			public Player player_0;

			// Token: 0x0400EE8A RID: 61066
			public Player.AbstractHandsController controller;

			// Token: 0x0400EE8B RID: 61067
			public Action callback;

			// Token: 0x0400EE8C RID: 61068
			public TaskCompletionSource onControllerAppeared;
		}

		// Token: 0x020029C0 RID: 10688
		[CompilerGenerated]
		public class Class1332
		{
			// Token: 0x06012770 RID: 75632 RVA: 0x00240E4A File Offset: 0x0023F04A
			public void method_0(Result<IHandsController> result)
			{
				Callback callback = this.callback;
				if (callback == null)
				{
					return;
				}
				callback.Invoke(result);
			}

			// Token: 0x06012771 RID: 75633 RVA: 0x00240E5D File Offset: 0x0023F05D
			public void method_1(Result<IHandsController> result)
			{
				Callback callback = this.callback;
				if (callback == null)
				{
					return;
				}
				callback.Invoke(result);
			}

			// Token: 0x0400EE8D RID: 61069
			public Callback callback;
		}

		// Token: 0x020029C1 RID: 10689
		[CompilerGenerated]
		public class Class1333
		{
			// Token: 0x06012773 RID: 75635 RVA: 0x00240E78 File Offset: 0x0023F078
			public Item method_0(EquipmentSlot x)
			{
				return this.player_0.InventoryController.Inventory.Equipment.GetSlot(x).ContainedItem;
			}

			// Token: 0x06012774 RID: 75636 RVA: 0x00240E9A File Offset: 0x0023F09A
			public bool method_1(Item x)
			{
				return this.player_0.method_129(x);
			}

			// Token: 0x06012775 RID: 75637 RVA: 0x00240EA8 File Offset: 0x0023F0A8
			public void method_2(Result<GInterface198> result)
			{
				this.completeCallback(result.Complete ? new Result<IHandsController>(result.Value) : new Result<IHandsController>(null, result.Error));
			}

			// Token: 0x0400EE8E RID: 61070
			public Player player_0;

			// Token: 0x0400EE8F RID: 61071
			public Callback<IHandsController> completeCallback;
		}

		// Token: 0x020029C2 RID: 10690
		[CompilerGenerated]
		public class Class1334
		{
			// Token: 0x06012777 RID: 75639 RVA: 0x00240EE1 File Offset: 0x0023F0E1
			public void method_0(Result<GInterface198> result)
			{
				this.callback((!string.IsNullOrEmpty(result.Error)) ? new Result<IHandsController>(null, result.Error) : new Result<IHandsController>(result.Value));
			}

			// Token: 0x0400EE90 RID: 61072
			public Callback<IHandsController> callback;
		}

		// Token: 0x020029C3 RID: 10691
		[CompilerGenerated]
		public class Class1335
		{
			// Token: 0x06012779 RID: 75641 RVA: 0x00240F1F File Offset: 0x0023F11F
			public AIFirearmController method_0()
			{
				return Player.FirearmController.smethod_6<AIFirearmController>(this.player_0, this.weapon);
			}

			// Token: 0x0601277A RID: 75642 RVA: 0x00240F32 File Offset: 0x0023F132
			public Player.FirearmController method_1()
			{
				return Player.FirearmController.smethod_6<Player.FirearmController>(this.player_0, this.weapon);
			}

			// Token: 0x0400EE91 RID: 61073
			public Player player_0;

			// Token: 0x0400EE92 RID: 61074
			public Weapon weapon;
		}

		// Token: 0x020029C4 RID: 10692
		[CompilerGenerated]
		public class Class1336
		{
			// Token: 0x0601277C RID: 75644 RVA: 0x00240F4D File Offset: 0x0023F14D
			public Player.GrenadeHandsController method_0()
			{
				return Player.GrenadeHandsController.smethod_9<Player.GrenadeHandsController>(this.player_0, this.throwWeap);
			}

			// Token: 0x0400EE93 RID: 61075
			public Player player_0;

			// Token: 0x0400EE94 RID: 61076
			public ThrowWeapItemClass throwWeap;
		}

		// Token: 0x020029C5 RID: 10693
		[CompilerGenerated]
		public class Class1337
		{
			// Token: 0x0601277E RID: 75646 RVA: 0x00240F68 File Offset: 0x0023F168
			public Player.MedsController method_0()
			{
				return Player.MedsController.smethod_6<Player.MedsController>(this.player_0, this.meds, this.bodyParts, 1f, this.animationVariant);
			}

			// Token: 0x0400EE95 RID: 61077
			public Player player_0;

			// Token: 0x0400EE96 RID: 61078
			public MedsItemClass meds;

			// Token: 0x0400EE97 RID: 61079
			public GStruct382<EBodyPart> bodyParts;

			// Token: 0x0400EE98 RID: 61080
			public int animationVariant;
		}

		// Token: 0x020029C6 RID: 10694
		[CompilerGenerated]
		public class Class1338
		{
			// Token: 0x06012780 RID: 75648 RVA: 0x00240F94 File Offset: 0x0023F194
			public Player.MedsController method_0()
			{
				return Player.MedsController.smethod_6<Player.MedsController>(this.player_0, this.foodDrink, this.bodyParts, this.amount, this.animationVariant);
			}

			// Token: 0x0400EE99 RID: 61081
			public Player player_0;

			// Token: 0x0400EE9A RID: 61082
			public FoodDrinkItemClass foodDrink;

			// Token: 0x0400EE9B RID: 61083
			public GStruct382<EBodyPart> bodyParts;

			// Token: 0x0400EE9C RID: 61084
			public float amount;

			// Token: 0x0400EE9D RID: 61085
			public int animationVariant;
		}

		// Token: 0x020029C7 RID: 10695
		[CompilerGenerated]
		public class Class1339
		{
			// Token: 0x06012782 RID: 75650 RVA: 0x00240FC1 File Offset: 0x0023F1C1
			public Player.KnifeController method_0()
			{
				return Player.KnifeController.smethod_9<Player.KnifeController>(this.player_0, this.knife);
			}

			// Token: 0x0400EE9E RID: 61086
			public Player player_0;

			// Token: 0x0400EE9F RID: 61087
			public KnifeComponent knife;
		}

		// Token: 0x020029C8 RID: 10696
		[CompilerGenerated]
		public class Class1340<T> where T : Player.UsableItemController
		{
			// Token: 0x06012784 RID: 75652 RVA: 0x00240FDC File Offset: 0x0023F1DC
			public T method_0()
			{
				return Player.UsableItemController.smethod_6<T>(this.player_0, this.item);
			}

			// Token: 0x0400EEA0 RID: 61088
			public Player player_0;

			// Token: 0x0400EEA1 RID: 61089
			public Item item;
		}

		// Token: 0x020029C9 RID: 10697
		[CompilerGenerated]
		public class Class1341
		{
			// Token: 0x06012786 RID: 75654 RVA: 0x00240FF7 File Offset: 0x0023F1F7
			public Player.QuickUseItemController method_0()
			{
				return Player.QuickUseItemController.smethod_6<Player.QuickUseItemController>(this.player_0, this.item);
			}

			// Token: 0x0400EEA2 RID: 61090
			public Player player_0;

			// Token: 0x0400EEA3 RID: 61091
			public Item item;
		}

		// Token: 0x020029CA RID: 10698
		[CompilerGenerated]
		public class Class1342
		{
			// Token: 0x06012788 RID: 75656 RVA: 0x00241012 File Offset: 0x0023F212
			public Player.QuickGrenadeThrowHandsController method_0()
			{
				return Player.QuickGrenadeThrowHandsController.smethod_9<Player.QuickGrenadeThrowHandsController>(this.player_0, this.throwWeap);
			}

			// Token: 0x0400EEA4 RID: 61092
			public Player player_0;

			// Token: 0x0400EEA5 RID: 61093
			public ThrowWeapItemClass throwWeap;
		}

		// Token: 0x020029CB RID: 10699
		[CompilerGenerated]
		public class Class1343
		{
			// Token: 0x0601278A RID: 75658 RVA: 0x0024102D File Offset: 0x0023F22D
			public Player.QuickKnifeKickController method_0()
			{
				return Player.QuickKnifeKickController.smethod_9<Player.QuickKnifeKickController>(this.player_0, this.knife);
			}

			// Token: 0x0400EEA6 RID: 61094
			public Player player_0;

			// Token: 0x0400EEA7 RID: 61095
			public KnifeComponent knife;
		}

		// Token: 0x020029CC RID: 10700
		[CompilerGenerated]
		public class Class1344
		{
			// Token: 0x0601278C RID: 75660 RVA: 0x00687F4C File Offset: 0x0068614C
			public void method_0()
			{
				Callback<IHandsController> callback = this.completeCallback;
				if (callback == null)
				{
					return;
				}
				callback(new Result<IHandsController>
				{
					Error = "can't find item controller"
				});
			}

			// Token: 0x0601278D RID: 75661 RVA: 0x00241048 File Offset: 0x0023F248
			public void method_1(Result<IHandsThrowController> result)
			{
				Player.smethod_1<IHandsThrowController>(result, this.completeCallback);
			}

			// Token: 0x0601278E RID: 75662 RVA: 0x00241056 File Offset: 0x0023F256
			public void method_2(Result<GInterface203> result)
			{
				Player.smethod_1<GInterface203>(result, this.completeCallback);
			}

			// Token: 0x0601278F RID: 75663 RVA: 0x00241064 File Offset: 0x0023F264
			public void method_3(Result<GInterface203> result)
			{
				Player.smethod_1<GInterface203>(result, this.completeCallback);
			}

			// Token: 0x06012790 RID: 75664 RVA: 0x00241072 File Offset: 0x0023F272
			public void method_4(Result<IKnifeController> result)
			{
				Player.smethod_1<IKnifeController>(result, this.completeCallback);
			}

			// Token: 0x06012791 RID: 75665 RVA: 0x00241080 File Offset: 0x0023F280
			public void method_5(Result<IOnHandsUseCallback> result)
			{
				Player.smethod_1<IOnHandsUseCallback>(result, this.completeCallback);
			}

			// Token: 0x0400EEA8 RID: 61096
			public Callback<IHandsController> completeCallback;

			// Token: 0x0400EEA9 RID: 61097
			public Player player_0;
		}

		// Token: 0x020029CD RID: 10701
		[CompilerGenerated]
		public class Class1345
		{
			// Token: 0x06012793 RID: 75667 RVA: 0x00241096 File Offset: 0x0023F296
			public void method_0(Result<IFirearmHandsController> result)
			{
				Player.smethod_1<IFirearmHandsController>(result, this.class1344_0.completeCallback);
				if (result.Complete && !this.<weapon>5__2.IsOneOff)
				{
					this.class1344_0.player_0.LastEquippedWeaponOrKnifeItem = this.<weapon>5__2;
				}
			}

			// Token: 0x0400EEAA RID: 61098
			public Weapon <weapon>5__2;

			// Token: 0x0400EEAB RID: 61099
			public Player.Class1344 class1344_0;
		}

		// Token: 0x020029CE RID: 10702
		[CompilerGenerated]
		public class Class1346
		{
			// Token: 0x06012795 RID: 75669 RVA: 0x002410DD File Offset: 0x0023F2DD
			public void method_0(Result<GInterface202> result)
			{
				Player.smethod_1<GInterface202>(result, this.completeCallback);
			}

			// Token: 0x06012796 RID: 75670 RVA: 0x002410EB File Offset: 0x0023F2EB
			public void method_1(Result<GInterface202> result)
			{
				Player.smethod_1<GInterface202>(result, this.completeCallback);
			}

			// Token: 0x0400EEAC RID: 61100
			public Callback<IHandsController> completeCallback;
		}

		// Token: 0x020029CF RID: 10703
		[CompilerGenerated]
		public class Class1347
		{
			// Token: 0x06012798 RID: 75672 RVA: 0x00241101 File Offset: 0x0023F301
			public void method_0(Result<GInterface202> result)
			{
				Player.smethod_1<GInterface202>(result, this.completeCallback);
			}

			// Token: 0x06012799 RID: 75673 RVA: 0x0024110F File Offset: 0x0023F30F
			public void method_1(Result<GInterface202> result)
			{
				Player.smethod_1<GInterface202>(result, this.completeCallback);
			}

			// Token: 0x0400EEAD RID: 61101
			public Callback<IHandsController> completeCallback;
		}

		// Token: 0x020029D0 RID: 10704
		[CompilerGenerated]
		public class Class1348
		{
			// Token: 0x0601279B RID: 75675 RVA: 0x00687F80 File Offset: 0x00686180
			public void method_0(IResult result)
			{
				if (this.player_0._removeFromHandsCallback == this.callback)
				{
					this.player_0._removeFromHandsCallback = null;
				}
				this.player_0.InventoryController.RaiseInOutProcessEvents(new GEventArgs17(this.player_0.HandsController.Item, CommandStatus.Succeed, this.player_0.InventoryController));
				this.callback(result);
			}

			// Token: 0x0400EEAE RID: 61102
			public Player player_0;

			// Token: 0x0400EEAF RID: 61103
			public Callback callback;
		}

		// Token: 0x020029D1 RID: 10705
		[CompilerGenerated]
		public class Class1349
		{
			// Token: 0x0601279D RID: 75677 RVA: 0x0024112D File Offset: 0x0023F32D
			public Item method_0(EquipmentSlot x)
			{
				return this.player_0.InventoryController.Inventory.Equipment.GetSlot(x).ContainedItem;
			}

			// Token: 0x0601279E RID: 75678 RVA: 0x0024114F File Offset: 0x0023F34F
			public bool method_1(Item x)
			{
				return this.player_0.method_129(x);
			}

			// Token: 0x0601279F RID: 75679 RVA: 0x0024115D File Offset: 0x0023F35D
			public void method_2(Result<IFirearmHandsController> result)
			{
				if (this.player_0._removeFromHandsCallback == this.callback)
				{
					this.player_0._removeFromHandsCallback = null;
				}
				this.callback.Invoke(result);
			}

			// Token: 0x060127A0 RID: 75680 RVA: 0x0024118A File Offset: 0x0023F38A
			public void method_3(IResult result)
			{
				if (this.player_0._removeFromHandsCallback == this.callback)
				{
					this.player_0._removeFromHandsCallback = null;
				}
				this.callback(result);
			}

			// Token: 0x0400EEB0 RID: 61104
			public Player player_0;

			// Token: 0x0400EEB1 RID: 61105
			public Callback callback;
		}

		// Token: 0x020029D2 RID: 10706
		[CompilerGenerated]
		public class Class1350
		{
			// Token: 0x060127A2 RID: 75682 RVA: 0x002411BF File Offset: 0x0023F3BF
			public void method_0(Result<IHandsController> result)
			{
				if (this.player_0._setInHandsCallback == this.callback)
				{
					this.player_0._setInHandsCallback = null;
				}
				this.callback.Invoke(result);
			}

			// Token: 0x060127A3 RID: 75683 RVA: 0x00687FEC File Offset: 0x006861EC
			public void method_1(IResult error)
			{
				if (this.player_0._setInHandsCallback == this.callback)
				{
					this.player_0._setInHandsCallback = null;
				}
				this.player_0.InventoryController.RaiseInOutProcessEvents(new GEventArgs17(this.player_0.HandsController.Item, CommandStatus.Succeed, this.player_0.InventoryController));
				this.callback(error);
			}

			// Token: 0x0400EEB2 RID: 61106
			public Player player_0;

			// Token: 0x0400EEB3 RID: 61107
			public Callback callback;
		}

		// Token: 0x020029D3 RID: 10707
		[CompilerGenerated]
		public class Class1351
		{
			// Token: 0x060127A5 RID: 75685 RVA: 0x002411F4 File Offset: 0x0023F3F4
			public void method_0()
			{
				this.player_0.Skills.RecoilAction.Complete(this.weapon.RecoilBase);
			}

			// Token: 0x0400EEB4 RID: 61108
			public Player player_0;

			// Token: 0x0400EEB5 RID: 61109
			public IWeapon weapon;
		}

		// Token: 0x020029D4 RID: 10708
		[CompilerGenerated]
		public class Class1352
		{
			// Token: 0x060127A7 RID: 75687 RVA: 0x0024121E File Offset: 0x0023F41E
			public bool method_0(GripPose x)
			{
				return x.GripType == this.type || x.GripType == GripPose.EGripType.UnderbarrelWeapon;
			}

			// Token: 0x060127A8 RID: 75688 RVA: 0x00241239 File Offset: 0x0023F439
			public int method_1(GripPose x)
			{
				return HandPoser.NumParents(x.transform, this.player_0.PlayerBones.WeaponRoot.Original, 0);
			}

			// Token: 0x060127A9 RID: 75689 RVA: 0x0024125C File Offset: 0x0023F45C
			public int method_2(GripPose x)
			{
				return HandPoser.NumParents(x.transform, this.player_0.PlayerBones.WeaponRoot.Original, 0);
			}

			// Token: 0x0400EEB6 RID: 61110
			public GripPose.EGripType type;

			// Token: 0x0400EEB7 RID: 61111
			public Player player_0;
		}

		// Token: 0x020029D5 RID: 10709
		[CompilerGenerated]
		public class Class1353
		{
			// Token: 0x060127AB RID: 75691 RVA: 0x00241287 File Offset: 0x0023F487
			public void method_0(bool _)
			{
				Action possibleInteractionsChanged = this.player_0.PossibleInteractionsChanged;
				if (possibleInteractionsChanged == null)
				{
					return;
				}
				possibleInteractionsChanged();
			}

			// Token: 0x060127AC RID: 75692 RVA: 0x00688058 File Offset: 0x00686258
			public void method_1(EPlayerState prevState, EPlayerState nextState)
			{
				this.player_0.ProceduralWeaponAnimation.WalkEffectorEnabled = (nextState == EPlayerState.Run);
				this.player_0.ProceduralWeaponAnimation.DrawEffectorEnabled = (nextState != EPlayerState.ProneMove);
				this.player_0.ProceduralWeaponAnimation.TiltBlender.Target = (float)((nextState == EPlayerState.Idle || nextState == EPlayerState.ProneIdle) ? 1 : 0);
				if (prevState == EPlayerState.Stationary)
				{
					this.player_0.ProceduralWeaponAnimation.SetStrategy(this.pointOfView);
				}
			}

			// Token: 0x0400EEB8 RID: 61112
			public Player player_0;

			// Token: 0x0400EEB9 RID: 61113
			public EPointOfView pointOfView;
		}

		// Token: 0x020029D6 RID: 10710
		[CompilerGenerated]
		public class Class1354
		{
			// Token: 0x060127AE RID: 75694 RVA: 0x002412A6 File Offset: 0x0023F4A6
			public void method_0()
			{
				Action action = this.togglableSub;
				if (action != null)
				{
					action();
				}
				this.hitSub();
			}

			// Token: 0x0400EEBA RID: 61114
			public Action togglableSub;

			// Token: 0x0400EEBB RID: 61115
			public Action hitSub;
		}

		// Token: 0x020029D7 RID: 10711
		[CompilerGenerated]
		public class Class1355
		{
			// Token: 0x060127B0 RID: 75696 RVA: 0x002412CC File Offset: 0x0023F4CC
			public void method_0()
			{
				Action action = this.togglableSub;
				if (action != null)
				{
					action();
				}
				this.hitSub();
			}

			// Token: 0x0400EEBC RID: 61116
			public Action togglableSub;

			// Token: 0x0400EEBD RID: 61117
			public Action hitSub;
		}

		// Token: 0x020029D8 RID: 10712
		[CompilerGenerated]
		public class Class1356
		{
			// Token: 0x060127B2 RID: 75698 RVA: 0x002412F2 File Offset: 0x0023F4F2
			public void method_0()
			{
				this.player_0.Skills.LowHPDuration.Begin();
			}

			// Token: 0x060127B3 RID: 75699 RVA: 0x00241309 File Offset: 0x0023F509
			public void method_1()
			{
				this.player_0.Skills.HealthNegativeEffect.Complete(this.effect, 1f);
			}

			// Token: 0x0400EEBE RID: 61118
			public Player player_0;

			// Token: 0x0400EEBF RID: 61119
			public IEffect effect;
		}

		// Token: 0x020029D9 RID: 10713
		[CompilerGenerated]
		public class Class1357
		{
			// Token: 0x060127B5 RID: 75701 RVA: 0x00241333 File Offset: 0x0023F533
			public bool method_0(ItemAddress loc)
			{
				return this.headSlots.Contains(loc.Container);
			}

			// Token: 0x060127B6 RID: 75702 RVA: 0x00241346 File Offset: 0x0023F546
			public bool method_1(ItemAddress loc)
			{
				return this.armorSlots.Contains(loc.Container);
			}

			// Token: 0x0400EEC0 RID: 61120
			public Slot[] headSlots;

			// Token: 0x0400EEC1 RID: 61121
			public Slot[] armorSlots;
		}
	}
}
